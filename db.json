{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/archive.png","path":"img/archive.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/category.png","path":"img/category.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/index1.jpg","path":"img/index1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post1.png","path":"img/post1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post2.png","path":"img/post2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post_cover1.jpg","path":"img/post_cover1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post_cover2.jpg","path":"img/post_cover2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post_cover3.jpg","path":"img/post_cover3.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post3.png","path":"img/post3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tag.jpg","path":"img/tag.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/title.png","path":"img/title.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/cover.css","path":"css/cover.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/modify.styl","path":"css/modify.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/custom/runtime.js","path":"js/custom/runtime.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","path":"js/custom/swiper_init.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"131b5b40806171f68f29b889d6282fc502ac7bf5","modified":1694145982718},{"_id":"source/link/index.md","hash":"d0e42f4e14154a1c0c92d41e5c51c0131fae2cb1","modified":1694146170386},{"_id":"source/tags/index.md","hash":"6c5ec0650df6dce1b8040a0a20345d34e76bf918","modified":1694149719628},{"_id":"source/_posts/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1689557167522},{"_id":"source/_posts/.obsidian/appearance.json","hash":"9439122150a0431e432676115220bc925af96094","modified":1689557167526},{"_id":"source/_posts/.obsidian/core-plugins-migration.json","hash":"0e26aae7d03070c204bfa7fd32ce3785211f5316","modified":1689557167100},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"eb138d03157a06efdb791f441be97c256aca472c","modified":1689557167078},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1689557024568},{"_id":"source/_posts/.obsidian/templates.json","hash":"adc8d0606111c01dc48928bd424c02b34d884e5b","modified":1689557463838},{"_id":"source/_posts/.obsidian/workspace.json","hash":"aa38804c3a1d5ca08e048524b7147a2e51265f7e","modified":1689557560699},{"_id":"source/_posts/Python爬虫/python爬虫----BeautifulSoup库.md","hash":"74432eb1900580018cdea4324c94cc41dd2fae4a","modified":1689557694448},{"_id":"source/_posts/Python爬虫/python爬虫----Requests库.md","hash":"31312055e4cf535b16e75f98775b5b73efa6adf6","modified":1689557698225},{"_id":"source/_posts/orginone实习经历/orginone——用户手册（沟通+存储+办事）.md","hash":"eeed806cfb7d488b8b53b0a620a7847ae45f1808","modified":1694679589174},{"_id":"source/_posts/orginone实习经历/orginone功能开发——应用开发手册.md","hash":"a6350da3401c5c6da396f378d1395d627aafb5a2","modified":1694679816026},{"_id":"source/_posts/orginone实习经历/orginone平台解析——SignalR通信.md","hash":"67d684a6e6066916fd5e8af7bd607fefb36aeab4","modified":1694145333170},{"_id":"source/_posts/orginone实习经历/orginone平台解析——anystore的api.md","hash":"ff9849fe465511b5debc5ba325e6a43b71481aa9","modified":1694145338825},{"_id":"source/_posts/orginone实习经历/orginone平台解析——沟通和储存.docx","hash":"320f6f385a94f2421d41f07f1c39d68ea34faa1f","modified":1689849010388},{"_id":"source/_posts/orginone实习经历/orginone平台解析——沟通.docx","hash":"f538076e117797a884b42418970ec49e5f606604","modified":1689744411525},{"_id":"source/_posts/前端学习/React基础知识入门.md","hash":"f82baabb110891eacfab927a6e14e17ae4cd47fc","modified":1694145515816},{"_id":"source/_posts/orginone实习经历/orginone平台解析——沟通和储存.md","hash":"075b9078a23c90ad31fe9482a7989cbeaae5ab2e","modified":1694679212864},{"_id":"source/_posts/前端学习/清除浮动的三种常用方式.md","hash":"26eb4089d86a7e2a2bbeeec485ea4297b4250ee3","modified":1694178267175},{"_id":"source/_posts/前端学习/VUE.md","hash":"fe108accab72ae14a6c27e45f397766114b2d270","modified":1694145475755},{"_id":"source/_posts/前端学习/前端鉴权.md","hash":"aa7877c22f5070f9252211b29d5531b640d03485","modified":1694145502502},{"_id":"source/_posts/static/35ad699bf6330070c9fc37f6d946bd8.png","hash":"88f1464f635d4e2ef82d5a964be550c38539ecd7","modified":1689735443899},{"_id":"source/_posts/static/81ea2e0afdaa8a7d16720dafe120077.png","hash":"3d14a1a51a21de40ab06d45ac6abe63ea75441c6","modified":1689735355155},{"_id":"source/_posts/static/Pasted image 20230701224929.png","hash":"d4654414d57a4ab65d5e4f30eabb8ea7bc50207e","modified":1688222969570},{"_id":"source/_posts/static/Pasted image 20230731134816.png","hash":"a501947034b7c9e114f65c6d1b88a270602237ab","modified":1690782496850},{"_id":"source/_posts/static/Pasted image 20230731135241.png","hash":"6d927d73e8e3bb57d4edc5cb5040326b082a59e9","modified":1690782761876},{"_id":"source/_posts/static/Pasted image 20230731141705.png","hash":"d42a38ed2d81568e7ac389f9a990fb5a7294158d","modified":1690784225180},{"_id":"source/_posts/static/Pasted image 20230731142253.png","hash":"bd9e716cf05d40e27f6a98ab4a42c0e40ab87e30","modified":1690784573142},{"_id":"source/_posts/static/Pasted image 20230731142029.png","hash":"9a9538b7e8130ef9d0201c2aa83938f060cda088","modified":1690784429158},{"_id":"source/_posts/static/Pasted image 20230731143207.png","hash":"7a66c0e5f02b368665714b31ba09c4faf282cb9b","modified":1690785127323},{"_id":"source/_posts/static/Pasted image 20230731143039.png","hash":"a9032fe7c62feeba03bf10a2a82d3238048d680f","modified":1690785039851},{"_id":"source/_posts/static/Pasted image 20230731152521.png","hash":"094b358d599fc8c83c92ebbec7022d65ad9574c0","modified":1690788321919},{"_id":"source/_posts/static/Pasted image 20230731143526.png","hash":"a1ec275151d24e4dc441f37c0db3181d93ee5ecc","modified":1690785326631},{"_id":"source/_posts/static/Pasted image 20230731143906.png","hash":"d85576572093ce22c23252d00432730fe6c74be0","modified":1690785546035},{"_id":"source/_posts/static/Pasted image 20230731152546.png","hash":"fe29833184ee627ca279a2223354ebe580c88620","modified":1690788346625},{"_id":"source/_posts/static/Pasted image 20230731151057.png","hash":"f87e28a7bddc3013cc725fe6d7c185b783ed321c","modified":1690787457285},{"_id":"source/_posts/static/Pasted image 20230808140934.png","hash":"1f175ed6ced4954601a5010febc47510999acfdf","modified":1691474974910},{"_id":"source/_posts/static/Pasted image 20230808195446.png","hash":"b146c55165d8b2d752dfb1992eacc7e01156113d","modified":1691495686623},{"_id":"source/_posts/static/Pasted image 20230814123355.png","hash":"6da8e4e58ea2b688d42d6a518c369bf92928213e","modified":1691987635136},{"_id":"source/_posts/static/Pasted image 20230814123057.png","hash":"1a1d4488169ad1987edefe4a9eab341144f86e2f","modified":1691987457545},{"_id":"source/_posts/static/Pasted image 20230814124350.png","hash":"c920320fe642d426a1e5a0aa257f0d7968589e17","modified":1691988230802},{"_id":"source/_posts/static/Pasted image 20230814224136.png","hash":"322e6f555d1554b5845d2908e722e672b35dce33","modified":1692024096173},{"_id":"source/_posts/static/Pasted image 20230814225148.png","hash":"e3477681d215b04d6c5330b62e185d97244f4680","modified":1692024708045},{"_id":"source/_posts/static/Pasted image 20230815110750.png","hash":"32f7e35fe90cf9d30ec9a751f47f0ca0e2708efe","modified":1692068870125},{"_id":"source/_posts/static/Pasted image 20230815110806.png","hash":"dbe455f32b089ccc3458b012d414580480338ae0","modified":1692068886198},{"_id":"source/_posts/static/Pasted image 20230815134046.png","hash":"47b9c8edb43bbf6ad911825be808aa97bcb6070f","modified":1692078046387},{"_id":"source/_posts/static/Pasted image 20230815133907.png","hash":"125a3d34193cf5b69dd585b1c7d70ffd7f4e13da","modified":1692077947991},{"_id":"source/_posts/static/Pasted image 20230815134206.png","hash":"4f2c18c3a7f1698c6252d7e0304e6391527ede93","modified":1692078126026},{"_id":"source/_posts/static/Pasted image 20230815134439.png","hash":"ee3ea6472a92e5c1ed02f2153e070998ad478c19","modified":1692078279838},{"_id":"source/_posts/static/Pasted image 20230815134218.png","hash":"ce55e65381cfd6108bbb49e2f8c05d9e6a7e7b67","modified":1692078138384},{"_id":"source/_posts/static/Pasted image 20230815134746.png","hash":"e1fa2fcb398c99a8b23c1a9fe1ca43f04f11aa57","modified":1692078466769},{"_id":"source/_posts/static/Pasted image 20230815135136.png","hash":"49394a075c2ce792f1a2311983001dd672359c32","modified":1692078696841},{"_id":"source/_posts/static/Pasted image 20230815135110.png","hash":"0e0ec1a7479229891596d4b7a3ac92e251122008","modified":1692078670168},{"_id":"source/_posts/static/Pasted image 20230815140119.png","hash":"db76f2ccaea12496a2fa9228a5374be4f1816220","modified":1692079279484},{"_id":"source/_posts/static/Pasted image 20230815140212.png","hash":"d51af9fb1e4c43b092389e11f637652d12e2e716","modified":1692079332481},{"_id":"source/_posts/static/Pasted image 20230913082917.png","hash":"462b700f39f08c59f0cd216ede4d7fd223c0f36e","modified":1694564957123},{"_id":"source/_posts/static/Pasted image 20230913083948.png","hash":"05ed32401cd5fe93830a2e6935c739d66cbcd89c","modified":1694565588446},{"_id":"source/_posts/static/Pasted image 20230913085917.png","hash":"5159540331beaaf38021afd309d8b911f263bc00","modified":1694566757556},{"_id":"source/_posts/static/未命名文件 (7).png","hash":"e670574781e92f175c9e470bcb1502380f8cea07","modified":1689743854700},{"_id":"source/_posts/后端学习/SpringBoot接入阿里云SLS云日志服务.md","hash":"e92b901cb9692132ca6e5f49a5875216ff108b91","modified":1694678033298},{"_id":"source/_posts/后端学习/Spring Boot入门.md","hash":"9863e64a8dc10b8f6ad2d3f62a5a738eeb3d0342","modified":1694145581004},{"_id":"source/_posts/数据库/MongoDB基础语法.md","hash":"99fdc121907dd8ee2f93ff1529d96f6b8d3c5498","modified":1694750050184},{"_id":"source/_posts/数学建模/Matlab.md","hash":"c19b96029e7f502bbb1784a3957839414de974e7","modified":1694145470336},{"_id":"source/_posts/数学建模/仿真复习.md","hash":"d9ac77ced25a61a2da80cec14e65af5a2908a1e6","modified":1694145473362},{"_id":"source/_posts/数据库/MySQL基础.md","hash":"9da6b493a245835835f8cd627f8f1092003a4231","modified":1694401814497},{"_id":"source/_posts/数据库/SQL进阶.md","hash":"a18135d3aa72ffa5b5fdf61f27f1740e963ccf44","modified":1694401810662},{"_id":"source/_posts/碎碎念/写了三年博客，有一些想说的话.md","hash":"34937e41c30aaee5d4174c81f682ce5cddddd41d","modified":1694679979696},{"_id":"source/_posts/计算机基础/UML.md","hash":"20f3c2774bc5fcea8ba84bb44452c113ffc69abf","modified":1694145552019},{"_id":"source/_posts/博客搭建与配置/hexo标签外挂.md","hash":"c13364afd834151b20a9def24a6c7ee23b2303f3","modified":1694707162426},{"_id":"source/_posts/计算机基础/git命令.md","hash":"4614e012b392a6274f2ee8330665373a2cea7664","modified":1694145555722},{"_id":"source/_posts/计算机语言知识库/Go语言基础入门.md","hash":"2cf70b9250403e07dec881ec553803fe69380bcc","modified":1694348507168},{"_id":"source/_posts/计算机语言知识库/HTML.md","hash":"3f0675bb2590ff2f71d9a3d51bdd42ce81a41712","modified":1694178246300},{"_id":"source/_posts/计算机语言知识库/CSS.md","hash":"1f42e4695b4342823b1d983dd24ee35cfa6ed22e","modified":1694145545869},{"_id":"source/_posts/计算机语言知识库/JAVA基础速查速记.md","hash":"3adfcdd7cd999aa579444fb05224dd8a4f26f4c5","modified":1694145530251},{"_id":"source/_posts/计算机语言知识库/TypeScript基础入门.md","hash":"35ff05675cf5417faee95ca010b08dd897163978","modified":1694145507046},{"_id":"source/_posts/计算机语言知识库/Javascript.md","hash":"86c8e1cded954c8adca033248c0948a6e9782460","modified":1694178222750},{"_id":"source/_posts/踩坑记录/React路由踩坑.md","hash":"e210b9484dc3ea7910a406314c34d7cfe7aefef5","modified":1694678947448},{"_id":"source/_posts/计算机基础/计算机网络.md","hash":"d6b24be377432ca7084fa3fd60f473dfd38db06a","modified":1694145566279},{"_id":"source/_posts/计算机基础/软件工程.md","hash":"c4af2cec173f9d682dfefb49e0d6c60fceca18c3","modified":1694145559538},{"_id":"source/_posts/项目开发/Springboot后端 + 前端部署流程.md","hash":"277630ceb231b535e88b66d7b098285315a13e57","modified":1694145432969},{"_id":"source/_posts/项目开发/中医药食堂管理.md","hash":"22a30f83ea80fb9f35be967d848b182a2b476d1f","modified":1694145350159},{"_id":"source/_posts/计算机语言知识库/深入理解TypeScript.md","hash":"6782fd0e43892562e5c13754c11633942a993191","modified":1694145548943},{"_id":"source/_posts/项目开发/在校学生表和开课明细表的Exel导入的格式.md","hash":"7fbf311d28d288c44c14aba3991be499661bd0e4","modified":1694679163397},{"_id":"source/_posts/项目开发/面向制造业企业的进销存与成本管理系统.md","hash":"5f2c19d0a37f52941c7d61bbc83837f30278b730","modified":1694145364492},{"_id":"source/_posts/项目开发/高校生均成本核算系统.md","hash":"5fed97aadad085c78c432222046e547e74d813e7","modified":1694680070647},{"_id":"source/_posts/项目开发/基于uniapp的天气播报微信小程序.md","hash":"28d46d3bb88a6540714488f63f05a98aebefd387","modified":1694145368389},{"_id":"source/_posts/static/62adada267390657a16b2233edd71c7.png","hash":"d20fe7935f98470f2a8ed75f2771184c43fcab09","modified":1688463527203},{"_id":"source/_posts/static/957cca9406f2870cc04e3cf43a57498.png","hash":"ff4b44b7ff6324b2af1c8ab3775cf797078f6ea1","modified":1688550377731},{"_id":"source/_posts/static/9660e442326d8ec9d21c3c34384c06a.png","hash":"0548c35bed25ffb0118a3faca25df94ca017e2ac","modified":1687354946262},{"_id":"source/_posts/static/Pasted image 20230705191046.png","hash":"d1df40f8c93ba798df1acc7d6b1110684396c564","modified":1688555446840},{"_id":"source/_posts/static/Pasted image 20230719105359.png","hash":"83ddbc8f510eadafd5164fe77fbc81289709b9f6","modified":1689735239431},{"_id":"source/_posts/static/Pasted image 20230731140033.png","hash":"178fb0666c7e4666898e0687a6f48fd269890be5","modified":1690783233170},{"_id":"source/_posts/static/Pasted image 20230731135745.png","hash":"7328949dae0a0e56aac70f8967f52a176a728847","modified":1690783065726},{"_id":"source/_posts/static/Pasted image 20230731140654.png","hash":"74a20d8cc5b0fd55127b1aa8d440559b3c21b35d","modified":1690783614083},{"_id":"source/_posts/static/Pasted image 20230731135535.png","hash":"571332dfaf3b2926217a263e16133d396ee73ea5","modified":1690782935062},{"_id":"source/_posts/static/Pasted image 20230731140815.png","hash":"21016c02505201debda2d93ad395465de7bc8a46","modified":1690783695929},{"_id":"source/_posts/static/Pasted image 20230731142748.png","hash":"024c9d7cda6d7ca595d232a6836bffd3246f8753","modified":1690784868981},{"_id":"source/_posts/static/Pasted image 20230731135959.png","hash":"21016c02505201debda2d93ad395465de7bc8a46","modified":1690783200016},{"_id":"source/_posts/static/Pasted image 20230731143500.png","hash":"0ce06ed619c50adbc14690cfdf38dbecdd890c3e","modified":1690785300150},{"_id":"source/_posts/static/Pasted image 20230731152648.png","hash":"0c703b384eb6aa74a01a447a7bdfd597eeb3d55a","modified":1690788408547},{"_id":"source/_posts/static/Pasted image 20230731153018.png","hash":"50f19a6637727cd4b95e64fc344b23eac01dd36d","modified":1690788618759},{"_id":"source/_posts/static/Pasted image 20230731142513.png","hash":"0c015f5824484278af8b781bf223b712f4a54848","modified":1690784713566},{"_id":"source/_posts/static/Pasted image 20230731153132.png","hash":"91e55249a14b256c31f6c47fe44503cadec7fef4","modified":1690788692869},{"_id":"source/_posts/static/Pasted image 20230731153520.png","hash":"1a9cd68cc81cd32df91479887d238509053fa19e","modified":1690788920685},{"_id":"source/_posts/static/Pasted image 20230808105636.png","hash":"c0349ae5d334d16665f2a87f929bfffea474a3bc","modified":1691463396304},{"_id":"source/_posts/static/Pasted image 20230808140328.png","hash":"ddb1dce1eb05154f5a22d3b2a560836c9f35149b","modified":1691474608724},{"_id":"source/_posts/static/Pasted image 20230808105750.png","hash":"017f3e2ec195c2087e00ffea69fd821118c79edf","modified":1691463470708},{"_id":"source/_posts/static/Pasted image 20230731153759.png","hash":"8e1b89e197aa56b2381638b01ef3ea6adf24a7f2","modified":1690789079302},{"_id":"source/_posts/static/Pasted image 20230808140519.png","hash":"434a0c054f4a63b977c6e8d7f34cdd867bbf42da","modified":1691474719192},{"_id":"source/_posts/static/Pasted image 20230808141728.png","hash":"6da734e2ab6339dd85e2e47508b03801a7d9e2c4","modified":1691475448186},{"_id":"source/_posts/static/Pasted image 20230808194453.png","hash":"737e74ca8a4383d6eb6a34361c72a7b78a5bd8d2","modified":1691495093042},{"_id":"source/_posts/static/Pasted image 20230808194540.png","hash":"2ca4e5f52aad393e70e8bf8a73e6ad27210446a8","modified":1691495140902},{"_id":"source/_posts/static/Pasted image 20230814224007.png","hash":"97a9107994beeb066e91f7c7ddfc177c37d8d027","modified":1692024007025},{"_id":"source/_posts/static/Pasted image 20230814224744.png","hash":"26823ffe14f10cd936380cf7b9a7236de58d7e4a","modified":1692024464175},{"_id":"source/_posts/static/Pasted image 20230814225248.png","hash":"b404ab26940c8e453136d6816b5bfc69c8d65ff0","modified":1692024768190},{"_id":"source/_posts/static/Pasted image 20230814225254.png","hash":"b404ab26940c8e453136d6816b5bfc69c8d65ff0","modified":1692024774482},{"_id":"source/_posts/static/Pasted image 20230814223540.png","hash":"f2386e8abe4cbb207cd22316fa5cab2ae756bd00","modified":1692023740464},{"_id":"source/_posts/static/Pasted image 20230814231137.png","hash":"0798a40489d4f81511b2fca467dc12fdad9f2ce2","modified":1692025897121},{"_id":"source/_posts/static/Pasted image 20230814231140.png","hash":"c2d0583283f17b646fe71bb7b96946a3d0cb1d5b","modified":1692025900546},{"_id":"source/_posts/static/Pasted image 20230815110655.png","hash":"ac47d423f1a8a76ae92c5dea8260db876cdd863f","modified":1692068815937},{"_id":"source/_posts/static/Pasted image 20230815134911.png","hash":"61dd8ad07d0863e3b03fc693fdc5d944547b2196","modified":1692078551801},{"_id":"source/_posts/static/Pasted image 20230815135509.png","hash":"52a300f147ce0911f9b4069a26c6d4f1f58874e6","modified":1692078909527},{"_id":"source/_posts/static/Pasted image 20230815135908.png","hash":"6acf6c5ba23b478237b25e184c08444b3cbfcc8a","modified":1692079148116},{"_id":"source/_posts/static/Pasted image 20230815140234.png","hash":"840d76ba9f0e2d61968a52afeae16cee3dbf0f83","modified":1692079354430},{"_id":"source/_posts/static/Pasted image 20230815140921.png","hash":"4479865c9fb7912bdb1fd5da1b59debfac62cb36","modified":1692079761305},{"_id":"source/_posts/static/Pasted image 20230815141110.png","hash":"68022d946406c60ac94b41c7b7b104f4132d69c0","modified":1692079870291},{"_id":"source/_posts/static/Pasted image 20230913084722.png","hash":"f75ce9c45d6d311fedc851f4b385d78ed78e9824","modified":1694566042862},{"_id":"source/_posts/static/Pasted image 20230913082948.png","hash":"324b3c50c340cd6b76a7a01a343b035eb66f63e3","modified":1694564988160},{"_id":"source/_posts/static/Pasted image 20230913084052.png","hash":"3d448ba1527e398b9301ccb20dcbcd44237f81ad","modified":1694565652129},{"_id":"source/_posts/static/Pasted image 20230913085712.png","hash":"1166a2dfc11b6ff0629dbaccc24f37aa2e4732c6","modified":1694566632943},{"_id":"source/_posts/static/Pasted image 20230913143106.png","hash":"f5f0c5873139462f42a9b6e47a2845747602b10b","modified":1694586666651},{"_id":"source/_posts/static/b24892dd9835eb2a9e448a2316133ac.png","hash":"fa9cfe458653d53e2ab455067bdfc5a6528b3a94","modified":1688550427213},{"_id":"source/_posts/static/Pasted image 20230705191136.png","hash":"93164a0886dc73dc5caa5c1c09abe36f852c0287","modified":1688555496999},{"_id":"source/_posts/static/Pasted image 20230814122702.png","hash":"d9efa74f5a9d57c09bef789b93fa0eb1e6bc9b1d","modified":1691987222591},{"_id":"source/_posts/static/Pasted image 20230814223620.png","hash":"ba97a01ecf64100827b91277511e5c112b83093c","modified":1692023780386},{"_id":"source/_posts/static/Pasted image 20230814231131.png","hash":"7cbc3caac65e9b91af85a9dc2186fe2bc9bd36d5","modified":1692025891700},{"_id":"source/_posts/static/Pasted image 20230830213301.png","hash":"c6f3d01cc2d6b5bb76fcf84a62d56c74756cb0e0","modified":1693402381200},{"_id":"source/_posts/static/Pasted image 20230830220841.png","hash":"c6f3d01cc2d6b5bb76fcf84a62d56c74756cb0e0","modified":1693404521255},{"_id":"source/_posts/static/Pasted image 20230913084859.png","hash":"d5e57c6aa74bb618535a2aaf36b4b1e10853df6f","modified":1694566139844},{"_id":"source/_posts/static/1688554877670.png","hash":"5a1b5d48eeca6cdb522a8f5607ac531b6b3d1697","modified":1688555185040},{"_id":"source/_posts/static/4de625346bf19512226e566f6df935b.png","hash":"614a2024aab08d644067fbd2d17772d0baaccc76","modified":1688550399266},{"_id":"source/_posts/static/3bcdcea86eae9f08184e7ce830cdc99.png","hash":"adea93152eede292c80cc3fea777cff781e7f307","modified":1688550389910},{"_id":"source/_posts/static/Pasted image 20230705190918.png","hash":"609ba68701373c05e6f2f10c4f000eb04e163bd9","modified":1688555358906},{"_id":"source/_posts/static/Pasted image 20230719131959.png","hash":"3d3ea3247ab5eabca79a086bc1525166448f16d1","modified":1689743999351},{"_id":"source/_posts/static/Pasted image 20230814201621.png","hash":"d1f4cb9e52fb72e0d0573b86cd3ba8c7ff750f60","modified":1692015381934},{"_id":"source/_posts/static/Pasted image 20230913143354.png","hash":"93ef67beb437c54cd6c8353e36f53494f1191c54","modified":1694586834867},{"_id":"source/_posts/static/Pasted image 20230705174609.png","hash":"2caab9cbe34abefeaa9d040c95bed1a1147836ef","modified":1688550369576},{"_id":"source/_posts/static/Pasted image 20230705191218.png","hash":"411bcc603e5ff0424cfd8991602688874ea2009f","modified":1688555538089},{"_id":"source/_posts/static/Pasted image 20230705191245.png","hash":"dd94f8e308590ced7a6f6b95e2e2b432caacdcac","modified":1688555562971},{"_id":"source/_posts/static/Pasted image 20230731141144.png","hash":"43f0cb4ab75e6b13f67458c65cb583bf97c01d8e","modified":1690783904548},{"_id":"source/_posts/static/Pasted image 20230913101935.png","hash":"b724e5cb593453a9ea974e87633bbd85443fc832","modified":1694571575032},{"_id":"themes/butterfly/source/css/_load_style/ark.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1694698943675},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1678723123379},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1689557520160},{"_id":"themes/butterfly/_config.yml","hash":"493627acf53231720a6a74998375b5989c901f07","modified":1694829993315},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1689557514246},{"_id":"themes/butterfly/package.json","hash":"861ab8b6d38e2ffb37f224342f1123d5f37b87e0","modified":1678723123443},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1678723123382},{"_id":"themes/butterfly/plugins.yml","hash":"589f1446c5ef64f77bd7bfb466743a8ddb59d2c9","modified":1678723123444},{"_id":"themes/butterfly/yarn.lock","hash":"f76efe6e11fe767f7ac2004b1b5b49fc14544dd4","modified":1694260246718},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1678723123383},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"f0d8b148e4af35fd3b83cad28569c183fe16848a","modified":1694242394856},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1678723123384},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1678723123385},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1678723123386},{"_id":"themes/butterfly/layout/index.pug","hash":"318452372dc1bdeca12818ac1709ded59ba3a4db","modified":1694325869702},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1678723123442},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1678723123443},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1678723123442},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1678723123386},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"28b425b486c009e043169c1532a2b62150613c2c","modified":1694263551098},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"30879e1a5d41c9799047e7c2f8f9ac197cacf9e1","modified":1694334803633},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1694263536532},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ab3ff72ecaa7da09fcb7d03a8b341a061e870826","modified":1678723123396},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1678723123402},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"3e793d7080bb81096444409399213b4ade88317d","modified":1694243448099},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1678723123404},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1678723123445},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1678723123446},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1678723123445},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1678723123446},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1678723123447},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1678723123447},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1678723123453},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1678723123448},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1678723123449},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1678723123454},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"3267d4a7fe849b8e1b4d338670cefc502721e247","modified":1678723123454},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1678723123454},{"_id":"themes/butterfly/scripts/tag/iconfont.js","hash":"32303abec40cb4a20d12fffab2ad899fca04ae20","modified":1694245500788},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1678723123455},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1678723123455},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"cee19dc1c2c66701c17723fb05c679a3909a924c","modified":1694747803705},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1678723123457},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1678723123458},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1678723123449},{"_id":"themes/butterfly/scripts/helpers/ark_icon.js","hash":"329cbb2252ae85f8f25b63ab01e9ad003b9f829d","modified":1694247997310},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1678723123455},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1678723123450},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1678723123450},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"3609660803ee8ff6b662d9326b34cd1ab65ae4d7","modified":1678723123452},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"688b424e4fae8db268033dd1f78b999932b22e57","modified":1678723123452},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1678723123452},{"_id":"themes/butterfly/scripts/helpers/swiperbar.js","hash":"22f07e71fcfda83043d1fab34635ec62b28b34d5","modified":1694325961102},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1678723123485},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1678723123486},{"_id":"themes/butterfly/source/img/favicon.png","hash":"7493568a439290e5de39279e4d456e52c3a2124f","modified":1694177811037},{"_id":"themes/butterfly/source/css/cover.css","hash":"5fbb8ea10b7d847a0c73f4d19804bf268b179055","modified":1694337824263},{"_id":"themes/butterfly/source/css/index.styl","hash":"6a10cf002c8591f0c1b56c5e9167654a305a85eb","modified":1694327642753},{"_id":"themes/butterfly/source/css/custom.css","hash":"a8ae704f1837d13d4cefc500628b29b0015fc69e","modified":1694334155611},{"_id":"themes/butterfly/source/css/modify.styl","hash":"60b62af5d6a4cfccb6d5105f7bc01fb13d61065d","modified":1694334197693},{"_id":"themes/butterfly/source/css/var.styl","hash":"1d303c77a163af0c68e06e3b69a53e15c9841edd","modified":1694663119550},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"577432cccfd498ff67c6c91c7775decc25ed87f5","modified":1694242208687},{"_id":"themes/butterfly/source/js/main.js","hash":"ab1eb2ae2fc7937aa0579d5293432fa986bf49b2","modified":1678723123487},{"_id":"themes/butterfly/source/js/utils.js","hash":"002c21bdbf1c3f4e02d86ff6927d47fd18c09730","modified":1678723123489},{"_id":"themes/butterfly/layout/includes/custom/ark_swiperBar.pug","hash":"d5c868ccc25078d72089605214cd5ab1833a3ce0","modified":1694325903782},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"fc7f8556c557b0dcfb967c163c3d249ba9f760d3","modified":1694343607827},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1678723123394},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1678723123394},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1678723123395},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1678723123395},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1678723123389},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1678723123389},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1678723123390},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1678723123390},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1678723123391},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1678723123391},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1678723123392},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1678723123391},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"340a3273f6cc95888f823f898c165775e77ee570","modified":1694345012995},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1678723123392},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"933552f699232b3db537cd69b59be8ea570e4128","modified":1694345013018},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"fbcfb271e75a248437592b0d91db5b2ee3e7770b","modified":1694345013041},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1678723123398},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"8e55c5e22f7679023e6399ed51dac3833b8605cc","modified":1694246270786},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1678723123400},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1678723123400},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1678723123401},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1678723123401},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1678723123403},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1678723123405},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1678723123403},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1678723123420},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1678723123434},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1678723123428},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1678723123429},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1678723123428},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1678723123436},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1678723123434},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1678723123436},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1678723123437},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"fcd3a0466a54538d849b178a3afd4f500cee3190","modified":1694400315457},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1678723123438},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1678723123439},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1678723123438},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"8a8aa922be1824df17f30ba08ee6b55e2af05787","modified":1678723123439},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1678723123439},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1678723123441},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1678723123441},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1678723123441},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e9ce1b583c30a9b2fdde2dfda1efef861bd55af3","modified":1694250445432},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fde51780f525b002885c9f189cccc459542f5dc6","modified":1678723123460},{"_id":"themes/butterfly/source/css/_ark_style/ark_footer.styl","hash":"f3f04e4512c04cd29451194b0ebb5d573baf8598","modified":1694334968836},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1678723123460},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1694276018446},{"_id":"themes/butterfly/source/css/_load_style/gear.styl","hash":"340cc30aa68468c06f780f8e58ee4eb556a46b03","modified":1694345017082},{"_id":"themes/butterfly/source/css/_load_style/ironheart.styl","hash":"5dd10108d131ea51cc2c3e10cf3c740b697732c3","modified":1694345017127},{"_id":"themes/butterfly/source/css/_load_style/image.styl","hash":"c09290766e1b967accee53b14e0ba640221a85e1","modified":1694345017104},{"_id":"themes/butterfly/source/css/_load_style/triangles.styl","hash":"3439789673d05cdb866a70dcd37098dd28abbe2f","modified":1694345017175},{"_id":"themes/butterfly/source/css/_load_style/scarecrow.styl","hash":"4760e553caf0bf022630862a19e34715dbb62121","modified":1694345017152},{"_id":"themes/butterfly/source/css/_load_style/wizard.styl","hash":"97ae8abaf872f4d877d18d9ff908750260f1f357","modified":1694345017200},{"_id":"themes/butterfly/source/css/_layout/ark_card_weiget.styl","hash":"dfdf309f900bb5c65f5308cc48de3903af222b72","modified":1694400630768},{"_id":"themes/butterfly/source/css/_layout/ark_index_card.styl","hash":"27a78215ded325af3792585d35c9e6245f06897b","modified":1694338360869},{"_id":"themes/butterfly/source/css/_layout/ark_pagination.styl","hash":"397290dfd4fbcad8721517394af68aaf53ec0932","modified":1694321865723},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1678723123466},{"_id":"themes/butterfly/source/css/_layout/ark_post.styl","hash":"8f1961df079bbd04ed506929db5ef44367e20e17","modified":1694403289397},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1678723123466},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"105fd258312fc7077794c24f46179087f844dce4","modified":1694343263589},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1678723123467},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac6511a6ea432fabe508ec582adbad100e9f2db9","modified":1694698943675},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"4c86b26695c770b91b16720b83d33e5a8133ad0b","modified":1694402799400},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1678723123468},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1678723123470},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1678723123469},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"5c6ec9ca3d23a81501c9fffdd01379fc7096ed0e","modified":1694321370225},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1678723123470},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"55e47a79df7c45e09ff534fbfbbed234567f1e22","modified":1694321812576},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1678723123471},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1678723123473},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"5b172d51d40f4291d5d51e1a80adb306c6f6f4f0","modified":1694252735111},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4aaeda91687565cfa040f59f0953fa76a0ca7b0c","modified":1694333378283},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1678723123473},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1678723123475},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1678723123475},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1678723123476},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"2f98cfad73393ece599b4534a7bcf757d0f5afd6","modified":1694250215501},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1678723123476},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1678723123478},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1678723123480},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1678723123481},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1678723123481},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1678723123481},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1678723123480},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1678723123482},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1678723123482},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1694250428219},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1678723123483},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"85f5f2c9150061bae8a5188c10f23a63e7e01a4f","modified":1678723123477},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1678723123477},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"f7d3d598a27467d24b0b37f49c012b5759394c0a","modified":1678723123478},{"_id":"themes/butterfly/source/js/custom/runtime.js","hash":"b0aa34fd4ce03fdb3576ab73651a327c8d87f98f","modified":1694327867012},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","hash":"8397fe5cd1c9ac186a45686d3be512031d703d8f","modified":1694326156286},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1678723123488},{"_id":"themes/butterfly/layout/includes/loading/load_style/ark.pug","hash":"86f0d2e3b9c81c9974dbb459af7d98e4594033c6","modified":1694699279152},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"1ada177b1635bd7d1b6f02b33f7a81823d8bce0c","modified":1678723123489},{"_id":"themes/butterfly/layout/includes/loading/load_style/gear.pug","hash":"a150f79a75ef39683e8f071c677f8219924442b9","modified":1694345013122},{"_id":"themes/butterfly/layout/includes/loading/load_style/default.pug","hash":"e910eeadae6a06d7673a81aa3453a941a4e1a680","modified":1694345013097},{"_id":"themes/butterfly/layout/includes/loading/load_style/scarecrow.pug","hash":"d74dbbb876057ae07bc7dd73825bbf43917d7d0a","modified":1694345013193},{"_id":"themes/butterfly/layout/includes/loading/load_style/image.pug","hash":"9f9e0c0f4d9a694acc6ed98ee562ffa1804386ff","modified":1694345013146},{"_id":"themes/butterfly/layout/includes/loading/load_style/triangles.pug","hash":"60b0eca7b5e50246e34d01c685855ade6633679f","modified":1694345013217},{"_id":"themes/butterfly/layout/includes/loading/load_style/ironheart.pug","hash":"05715689400dc950dbb83e90396dfffff241e9b2","modified":1694345013169},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1678723123405},{"_id":"themes/butterfly/layout/includes/loading/load_style/wizard.pug","hash":"3fa664d2d9d3bf43666443f675020c79733ffe8f","modified":1694345013241},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1678723123407},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1678723123408},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1678723123408},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1678723123407},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1678723123408},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1678723123410},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1678723123411},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1678723123409},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1678723123411},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1678723123409},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1678723123411},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1678723123412},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1678723123413},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1678723123412},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1678723123414},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1678723123414},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1678723123414},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1678723123416},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1678723123416},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1678723123418},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1678723123417},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1678723123417},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1678723123418},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1678723123418},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1678723123420},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1678723123419},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1678723123424},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"75ebfe533dd7ee59113b84c2972694cadd92c6a9","modified":1678723123424},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1678723123419},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1678723123424},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bf6b1453096dd7f53d81cde078c233d301e14304","modified":1678723123420},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1678723123425},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1678723123425},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1678723123427},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1678723123428},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1678723123427},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1678723123421},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1678723123431},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"6c90af5e9b4d7f8147f4484f27e1b41e29d5a629","modified":1678723123429},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fad70676346f194f166ac4e714ac6ff37cbf50ea","modified":1678723123422},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1678723123422},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1678723123431},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1678723123432},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"0785346c1d8c49a10f02481b701138ed5898f4ac","modified":1678723123431},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1678723123421},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1678723123433},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1678723123433},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1678723123433},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"4895327a4686148ea14bdf7f829357f0bf8b1632","modified":1694276126114},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1678723123463},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1678723123463},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1678723123462},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1678723123463},{"_id":"themes/butterfly/source/img/title.png","hash":"dbd17b44485a2013151525e289314472dc289e77","modified":1694342901199},{"_id":"themes/butterfly/source/img/wechat.jpg","hash":"94ce91e252a2726a8adf818e0af7dedcb3c4dbdc","modified":1694170991688},{"_id":"themes/butterfly/source/img/alipay.jpg","hash":"33cfadf9dead089dee750f59e9952aaa733374ca","modified":1694171007159},{"_id":"themes/butterfly/source/img/post_cover1.jpg","hash":"649a816650291738f581de80640b18648fef318c","modified":1694319482528},{"_id":"themes/butterfly/source/img/post_cover2.jpg","hash":"194c41686c0022f598734c10520302c9b07f327b","modified":1694320673893},{"_id":"themes/butterfly/source/img/avatar.png","hash":"aad2259bdd5d93c97c2f5f2b9630168dcad9d122","modified":1694162082150},{"_id":"themes/butterfly/source/img/post_cover3.jpg","hash":"fce19dca76c507e6f471b8e2d3d459a381ea3f58","modified":1694320244693},{"_id":"source/_posts/项目开发/面向制造业企业的进销存与成本管理系统.html","hash":"b233eb975d795dfb455196f39b7147dc184d4eab","modified":1682493482469},{"_id":"themes/butterfly/source/img/index.jpg","hash":"21fea111f9ba4ae448e1917fd348478a3714efa8","modified":1694311529674},{"_id":"themes/butterfly/source/img/index1.jpg","hash":"eb17579ecbddc5900d3d5430d9041ac4fe79ceab","modified":1694251395896},{"_id":"themes/butterfly/source/img/category.png","hash":"ce2c7fa13a53852db6f9a96cb138b3f407a917c2","modified":1694175486850},{"_id":"themes/butterfly/source/img/tag.jpg","hash":"c3103887071b833fefeca6a0e1e4d81792263c50","modified":1694177114112},{"_id":"themes/butterfly/source/img/post1.png","hash":"27fc66263979bd8dda8db1ec1c9bb485bd61678c","modified":1694171186442},{"_id":"themes/butterfly/source/img/default.jpg","hash":"0ff0f3bac07a767e61fd8bc0144f2b087b59fe8f","modified":1694180309745},{"_id":"themes/butterfly/source/img/post2.png","hash":"81bb41dc3733448d1a7b63a8136967d04398fa42","modified":1694171204248},{"_id":"themes/butterfly/source/img/post3.png","hash":"2af8c7f1717fe150bc62696926731bd1007cdcfe","modified":1694171175095},{"_id":"themes/butterfly/source/img/archive.png","hash":"fa828065870d528c674fac5378ecfdba6b539772","modified":1694163618766},{"_id":"public/atom.xml","hash":"cf0c6e75d58acd3b6add8b4c90aaa50ceea620c8","modified":1694830002608},{"_id":"public/sitemap.txt","hash":"cf52521503b32a8e83dd7893ee08e48277e14c6e","modified":1694830002608},{"_id":"public/sitemap.xml","hash":"606c41dde1175cc0c732ec219a73f5d90e42ea98","modified":1694830002608},{"_id":"public/categories/index.html","hash":"51f23da53c7ff6787e627fdb847006dff915fe18","modified":1694830002608},{"_id":"public/link/index.html","hash":"5eafb6dad7bdfcb451cced0b7b1003ebccf38e1b","modified":1694830002608},{"_id":"public/tags/index.html","hash":"97636017e1fb7b7800435a26366c2d8ee3f76e1b","modified":1694830002608},{"_id":"public/2023/09/12/后端学习/SpringBoot接入阿里云SLS云日志服务/index.html","hash":"914a533b4254f2ae53773bf7f6c7c6728ec40fc1","modified":1694830002608},{"_id":"public/2023/09/10/碎碎念/写了三年博客，有一些想说的话/index.html","hash":"a89d9a49ebfd52784ab98c331b63ca26a25631bb","modified":1694830002608},{"_id":"public/2023/09/13/博客搭建与配置/hexo标签外挂/index.html","hash":"62974ad0951c2e6c310d6ebd38e9c9732252f96b","modified":1694830002608},{"_id":"public/2023/09/11/数据库/MongoDB基础语法/index.html","hash":"cd8d9d1da3de7d53a9678327b954c51f94e10921","modified":1694830002608},{"_id":"public/2023/09/07/计算机语言知识库/Go语言基础入门/index.html","hash":"884cf52a9574cc40d9e40355d0d0d54e74ff7f60","modified":1694830002608},{"_id":"public/2023/08/29/项目开发/高校生均成本核算系统/index.html","hash":"c4b85d766e5ea0c78efecace652cd8eb5beb5ce4","modified":1694830002608},{"_id":"public/2023/08/07/orginone实习经历/orginone功能开发——应用开发手册/index.html","hash":"f82110ababf72a45d47c147b9f1f2278a6ffab03","modified":1694830002608},{"_id":"public/2023/07/31/orginone实习经历/orginone——用户手册（沟通+存储+办事）/index.html","hash":"a41b6985f41d3ecc1d170139e4e88e971b831734","modified":1694830002608},{"_id":"public/2023/07/23/orginone实习经历/orginone平台解析——anystore的api/index.html","hash":"b3dfd6ac662b8b59c17e12caf04181758f0c8167","modified":1694830002608},{"_id":"public/2023/07/18/orginone实习经历/orginone平台解析——沟通和储存/index.html","hash":"64eaf9a111c36f5d16b6be529fcf64566dc3c45b","modified":1694830002608},{"_id":"public/2023/07/17/Python爬虫/python爬虫----Requests库/index.html","hash":"d9d0ecc8f72624ecc27edfff8fab7c9e071f05ac","modified":1694830002608},{"_id":"public/2023/07/17/Python爬虫/python爬虫----BeautifulSoup库/index.html","hash":"1dbe3e9d67c1b5eb60e0c552ab0a4a152446174e","modified":1694830002608},{"_id":"public/2023/07/13/计算机语言知识库/JAVA基础速查速记/index.html","hash":"d9f3727a1d604ce9ad531e49192a11ac64dc9475","modified":1694830002608},{"_id":"public/2023/07/04/orginone实习经历/orginone平台解析——SignalR通信/index.html","hash":"45e7e2d7e3119bfc3bc49bc36b3c8b5ed30fe0a0","modified":1694830002608},{"_id":"public/2023/07/10/前端学习/清除浮动的三种常用方式/index.html","hash":"18346f1c73904c59edccaf7349420d0095d2445f","modified":1694830002608},{"_id":"public/2023/07/01/踩坑记录/React路由踩坑/index.html","hash":"d9ab91a15cae41fff7c6f83c0d4b55715027951c","modified":1694830002608},{"_id":"public/2023/06/20/前端学习/React基础知识入门/index.html","hash":"f1eeb5d627372370c826de592a86d7d98da0c5af","modified":1694830002608},{"_id":"public/2023/06/20/计算机语言知识库/TypeScript基础入门/index.html","hash":"43495ccd018c97f909ac2a67d523705a527d4503","modified":1694830002608},{"_id":"public/2023/06/20/计算机语言知识库/深入理解TypeScript/index.html","hash":"351f5c31a455c06c4ac47b91ee49b5a74a6d0034","modified":1694830002608},{"_id":"public/2023/06/20/项目开发/在校学生表和开课明细表的Exel导入的格式/index.html","hash":"6f04c33901088e9967935321db1a5e9d4e55b278","modified":1694830002608},{"_id":"public/2023/04/26/前端学习/VUE/index.html","hash":"e56763c393e5104542f0eef042a2868420c7d347","modified":1694830002608},{"_id":"public/2023/06/20/项目开发/Springboot后端 + 前端部署流程/index.html","hash":"2f124b7ae43a6122d97bbf17d5e1ed955f1c1287","modified":1694830002608},{"_id":"public/2023/04/26/前端学习/前端鉴权/index.html","hash":"c3419b2cb9bc353e23e83e3466e42f17520608ca","modified":1694830002608},{"_id":"public/2023/04/26/数学建模/Matlab/index.html","hash":"3ddc26517ae9d55220c8520d0bbe62fb85f3cbaf","modified":1694830002608},{"_id":"public/2023/04/26/数学建模/仿真复习/index.html","hash":"76df58d92975b690f54486a215496c1a2969c0ba","modified":1694830002608},{"_id":"public/2023/04/26/后端学习/Spring Boot入门/index.html","hash":"6b70f880dff74038ce86c2e461603df13c83e675","modified":1694830002608},{"_id":"public/2023/04/26/数据库/MySQL基础/index.html","hash":"6e6160c21b62d240e7d0cb1b91df5c111e6a420b","modified":1694830002608},{"_id":"public/2023/04/26/数据库/SQL进阶/index.html","hash":"3270b7eed586b122107dade22f70618c4197a57a","modified":1694830002608},{"_id":"public/2023/04/26/计算机基础/UML/index.html","hash":"d45ac5b714ca3c51ba9d84bad71831f30215da03","modified":1694830002608},{"_id":"public/2023/04/26/计算机语言知识库/CSS/index.html","hash":"52c46435dc471cc0e0ef679f96f2cde41d6a9a72","modified":1694830002608},{"_id":"public/2023/04/26/计算机基础/git命令/index.html","hash":"9ce204db9984b32a361ff7c0f3ea35d9af0b0147","modified":1694830002608},{"_id":"public/2023/04/26/计算机语言知识库/Javascript/index.html","hash":"4628672501e76da60d6e5eed6ccbc49de4d7802d","modified":1694830002608},{"_id":"public/2023/04/26/计算机语言知识库/HTML/index.html","hash":"2e9af3201eb7431afb63954ed6d5966b456a1d0b","modified":1694830002608},{"_id":"public/2023/04/26/项目开发/中医药食堂管理/index.html","hash":"ea894585ec8d7b552bb82e617eda6fecbbdadd69","modified":1694830002608},{"_id":"public/2023/04/26/计算机基础/计算机网络/index.html","hash":"a1fb5360a36815748a13d1c65a0845ad1569846f","modified":1694830002608},{"_id":"public/2023/04/26/计算机基础/软件工程/index.html","hash":"b1a947eaf3e63797476622e284abf2d90fe4978a","modified":1694830002608},{"_id":"public/archives/index.html","hash":"936fc54cd3da8352c93e85742aaecc89f3efb8b1","modified":1694830002608},{"_id":"public/2023/04/26/项目开发/基于uniapp的天气播报微信小程序/index.html","hash":"f03cfd933d78de10c4a0c6c9e6662d400be5da64","modified":1694830002608},{"_id":"public/2023/04/26/项目开发/面向制造业企业的进销存与成本管理系统/index.html","hash":"7c73b6fab9424191e91be980888b504598ad9af3","modified":1694830002608},{"_id":"public/archives/page/2/index.html","hash":"7ff06e6cb0819aff11e6f81434c9ee893bbbd08c","modified":1694830002608},{"_id":"public/archives/page/3/index.html","hash":"10c6beda0158aa5ef9fa7b6131a3adc4f35a9b36","modified":1694830002608},{"_id":"public/archives/page/4/index.html","hash":"4922c14ddcb23d1b92f4a598d84f027255b85767","modified":1694830002608},{"_id":"public/archives/2023/index.html","hash":"ee9570c2d2fc10a42c884a2da800db02a7749ca0","modified":1694830002608},{"_id":"public/archives/2023/page/2/index.html","hash":"c9bb450e00fa843227f6505e862ab57e27692c80","modified":1694830002608},{"_id":"public/archives/2023/page/3/index.html","hash":"81d10730e86e9d0b020bcdbb8fe9368793e64c38","modified":1694830002608},{"_id":"public/archives/2023/page/4/index.html","hash":"a80ba21e485e32d4de28b599d167e5ce15ff6f39","modified":1694830002608},{"_id":"public/archives/2023/04/index.html","hash":"07f0d5fb0fe750771627531501091b2ccd5535ec","modified":1694830002608},{"_id":"public/archives/2023/04/page/2/index.html","hash":"a09d693688dde72c99ad2cab0683c740f9f50498","modified":1694830002608},{"_id":"public/archives/2023/06/index.html","hash":"97a51d37b7c09f615d3330eff3adbd68ff77628e","modified":1694830002608},{"_id":"public/archives/2023/07/index.html","hash":"bd88445f2a44f932efce8af6e01deb3509218842","modified":1694830002608},{"_id":"public/archives/2023/08/index.html","hash":"eaebc73e231dabdfb48fbbb76f43f98e582258e5","modified":1694830002608},{"_id":"public/archives/2023/09/index.html","hash":"2023f34ac6828b05f564f76895d5caed635dd87f","modified":1694830002608},{"_id":"public/categories/后端学习/index.html","hash":"809ae568052b326c645e013979261f1361783e2a","modified":1694830002608},{"_id":"public/categories/orginone实习经历/index.html","hash":"744e795f64b58d1f66904b5b391878ecc5f7e4d3","modified":1694830002608},{"_id":"public/categories/前端学习/index.html","hash":"e342a748eff23ddc0ab63e05b67dbcc24a09daca","modified":1694830002608},{"_id":"public/categories/博客搭建与配置/index.html","hash":"e27a75a78d39e8c45ebe7344831ca954eab24959","modified":1694830002608},{"_id":"public/categories/数学建模/index.html","hash":"f45b8ab3dea7987b96828c8597fd5acc80b0e26a","modified":1694830002608},{"_id":"public/categories/碎碎念/index.html","hash":"f0a88e8f19b94ecc24ddf63501545e555a3de9ac","modified":1694830002608},{"_id":"public/categories/数据库/index.html","hash":"33114548ee848f81ef59bfaaa1918035fefb2978","modified":1694830002608},{"_id":"public/categories/计算机基础/index.html","hash":"be45377921ddbed597bae3d2d9f4c7d7fc8730bf","modified":1694830002608},{"_id":"public/categories/踩坑记录/index.html","hash":"b4333247cdf5abc3d91464a17c30034055eda075","modified":1694830002608},{"_id":"public/categories/计算机语言知识库/index.html","hash":"dafb7b48044c70c8833ed501e3c6e954eda2f693","modified":1694830002608},{"_id":"public/categories/项目开发/index.html","hash":"5dab527dfa364616352b785670035a63609ee730","modified":1694830002608},{"_id":"public/page/3/index.html","hash":"b52e7ac19d02c875ed0bae0d8efb66a780b18e64","modified":1694830002608},{"_id":"public/page/2/index.html","hash":"ad2ce91cd50e91c7c87a33945df3c1818cabf539","modified":1694830002608},{"_id":"public/page/4/index.html","hash":"8633b95c60ab1e3c9126c4b21a63863a1a1d3b23","modified":1694830002608},{"_id":"public/index.html","hash":"1a858529e0297f1a244d2a4751d570f710d18469","modified":1694830002608},{"_id":"public/tags/前端/index.html","hash":"0fc28c7d668bdd2226659401b5dfa315ed68cf9d","modified":1694830002608},{"_id":"public/tags/常用技巧/index.html","hash":"3a4485af5e2dab1b7d602be65245578ee7b78ef9","modified":1694830002608},{"_id":"public/tags/java/index.html","hash":"96d169b51b2d549dedcf4c52090b9857aedef206","modified":1694830002608},{"_id":"public/tags/云日志/index.html","hash":"fe52380e6a7dc64b4b797750255e8cbb6ee90023","modified":1694830002608},{"_id":"public/tags/大数据/index.html","hash":"764e5bd8c4abf94440567873da006edc35023368","modified":1694830002608},{"_id":"public/tags/后端/index.html","hash":"9b4a073cd9fa350017871dfd05174d4f74c3f808","modified":1694830002608},{"_id":"public/tags/语言基础/index.html","hash":"839df34845106d53c1675c756de3604015ece212","modified":1694830002608},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1694830002608},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1694830002608},{"_id":"public/img/favicon.png","hash":"7493568a439290e5de39279e4d456e52c3a2124f","modified":1694830002608},{"_id":"public/img/title.png","hash":"dbd17b44485a2013151525e289314472dc289e77","modified":1694830002608},{"_id":"public/img/wechat.jpg","hash":"94ce91e252a2726a8adf818e0af7dedcb3c4dbdc","modified":1694830002608},{"_id":"public/css/cover.css","hash":"d9026eb532fcd4288fc2c45dcdaef314ce2ec15c","modified":1694830002608},{"_id":"public/css/modify.css","hash":"4cadb3f851b4f14ef7c67fe48f1310c82985d2be","modified":1694830002608},{"_id":"public/css/custom.css","hash":"a8ae704f1837d13d4cefc500628b29b0015fc69e","modified":1694830002608},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1694830002608},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1694830002608},{"_id":"public/js/custom/runtime.js","hash":"e6bae9f5e60cefd3faf73cda2ecdfb99583b802c","modified":1694830002608},{"_id":"public/js/custom/swiper_init.js","hash":"646fcc788c798a20c1def5af7b403e838d662fa9","modified":1694830002608},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1694830002608},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1694830002608},{"_id":"public/css/index.css","hash":"c01770a2d87d64c870197e8467896d1b7529e359","modified":1694830002608},{"_id":"public/js/tw_cn.js","hash":"6ebc6193bbc431dd6d4c0d33601c776ff5cce532","modified":1694830002608},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1694830002608},{"_id":"public/img/alipay.jpg","hash":"33cfadf9dead089dee750f59e9952aaa733374ca","modified":1694830002608},{"_id":"public/img/post_cover1.jpg","hash":"649a816650291738f581de80640b18648fef318c","modified":1694830002608},{"_id":"public/img/post_cover2.jpg","hash":"194c41686c0022f598734c10520302c9b07f327b","modified":1694830002608},{"_id":"public/img/avatar.png","hash":"aad2259bdd5d93c97c2f5f2b9630168dcad9d122","modified":1694830002608},{"_id":"public/img/post_cover3.jpg","hash":"fce19dca76c507e6f471b8e2d3d459a381ea3f58","modified":1694830002608},{"_id":"public/img/index.jpg","hash":"21fea111f9ba4ae448e1917fd348478a3714efa8","modified":1694830002608},{"_id":"public/img/index1.jpg","hash":"eb17579ecbddc5900d3d5430d9041ac4fe79ceab","modified":1694830002608},{"_id":"public/img/category.png","hash":"ce2c7fa13a53852db6f9a96cb138b3f407a917c2","modified":1694830002608},{"_id":"public/img/tag.jpg","hash":"c3103887071b833fefeca6a0e1e4d81792263c50","modified":1694830002608},{"_id":"public/img/post1.png","hash":"27fc66263979bd8dda8db1ec1c9bb485bd61678c","modified":1694830002608},{"_id":"public/img/default.jpg","hash":"0ff0f3bac07a767e61fd8bc0144f2b087b59fe8f","modified":1694830002608},{"_id":"public/img/post2.png","hash":"81bb41dc3733448d1a7b63a8136967d04398fa42","modified":1694830002608},{"_id":"public/img/post3.png","hash":"2af8c7f1717fe150bc62696926731bd1007cdcfe","modified":1694830002608},{"_id":"public/img/archive.png","hash":"fa828065870d528c674fac5378ecfdba6b539772","modified":1694830002608}],"Category":[{"name":"orginone实习经历","_id":"clmle0x7e0007i4v1d5kr7wb0"},{"name":"前端学习","_id":"clmle0x7o000ki4v179qq0wnm"},{"name":"后端学习","_id":"clmle0x7w0016i4v1dyesbf3r"},{"name":"博客搭建与配置","_id":"clmle0x7z001gi4v17zufbsop"},{"name":"数学建模","_id":"clmle0x82001pi4v1124mbxdx"},{"name":"数据库","_id":"clmle0x87001vi4v16ob0e7oj"},{"name":"碎碎念","_id":"clmle0x8c002fi4v1hyhqbpu3"},{"name":"计算机基础","_id":"clmle0x8d002ii4v11xepbo2o"},{"name":"计算机语言知识库","_id":"clmle0x8d002li4v11gjf1uvi"},{"name":"踩坑记录","_id":"clmle0x8f002vi4v18jfd3nsc"},{"name":"项目开发","_id":"clmle0x8h0035i4v1gqi9f871"}],"Data":[],"Page":[{"title":"分类","date":"2023-09-08T04:04:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-09-08 12:04:52\ntype: \"categories\"\n---\n","updated":"2023-09-08T04:06:22.718Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clmle0x720000i4v1fj4kc824","content":"","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":""},{"title":"友情链接","date":"2023-09-08T04:05:08.000Z","type":"link","random":true,"_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2023-09-08 12:05:08\ntype: \"link\"\nrandom: true\n---\n","updated":"2023-09-08T04:09:30.386Z","path":"link/index.html","comments":1,"layout":"page","_id":"clmle0x790002i4v19o4hcd47","content":"","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00 \ntype: \"tags\" \norderby: random \norder: 1 \n---\n","updated":"2023-09-08T05:08:39.628Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clmle0x7c0004i4v1d6ulgsd0","content":"","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"python爬虫----BeautifulSoup库","date":"2023-07-17T01:34:53.000Z","_content":"<a name=\"c024c16d\"></a>\n# 导入beautifulsoup\n\n```\nfrom bs4 import BeautifulSoup\n```\n\n<a name=\"063d6819\"></a>\n# beautifulsoup方法\n\n```\nsoup = BeautifulSoup(\"<p>date</p>\",\"html.parser\")\nsoup = BeautifulSoup(open(\"D://demo.html\"),\"html.parser\")\n```\n\n- 第一个参数是利用requests库得到的网页全代码，可以是字符串也可以是HTML文件\n- 第二个参数是选择解析这段HTML代码的解释器\n- 最后会得到一个能代表HTML标签树的一个实例\n- 也可以理解为标签的集合\n\n<a name=\"38ed9afc\"></a>\n# beautifulsoup库的基本元素\n\n<a name=\"def47dff\"></a>\n## 所有的bs4库的解析器\n\n- lxml的HTML解析器<br />条件：pip install lmxl<br />使用方法：BeautifulSoup(mk,\"lmxl\")\n- lmxl的XML解析器<br />条件：pip install lxml<br />使用方法：BeautifulSoup(mk,\"xml\")\n- html5lib的解析器<br />条件：pip install html5lib<br />使用条件：BeautifulSoup(mk,\"html5lib\")\n\n<a name=\"61a7d4f4\"></a>\n## 标签的有关元素\n\n- Tag标签，最基本的信息组织元素，用<>和</>表明开头和结尾\n\n\n- Name标签的名称，如...的名称就是head\n\n```\nsoup.a.name #a\nsoup.a.parent.name #div\n```\n\n- Attributes标签的属性，字典类型\n\n```\nsoup.a.attrs \n# {'class': ['navbar-brand'], 'href': 'http://www.daidaitiantian.top/'}\n```\n\n- NavigableString<>...</>中间的字符串\n\n```\nsoup.a.string\n#呆呆和甜甜\n```\n\n- Comment注释类型\n\n\n<a name=\"a4a23c11\"></a>\n# 遍历HTML的方法\n\n<a name=\"533ecbae\"></a>\n## 标签数的遍历方式\n\n![](http://note.youdao.com/yws/res/648/WEBRESOURCE8a9147bbf0b0ce3a208671adaf22bbbd#crop=0&crop=0&crop=1&crop=1&id=Wiso8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"dbfbb788\"></a>\n## 下行遍历\n\n- contents子节点的列表，将所有子节点存入列表\n- children子节点的迭代类型，与contents类似用于遍历子节点\n- descendants子孙节点的迭代类型，用于循环遍历\n\n<a name=\"ede05cbe\"></a>\n## 上行遍历\n\n- parent节点的父标签\n- parents节点先辈标签的迭代类型，用于遍历\n\n<a name=\"b57148a0\"></a>\n## 平行遍历\n\n- next_sibling下一个平行节点的标签\n- previous_sibling上一平行节点的标签\n- next_sblings后续所有平行节点的迭代类型\n- previous_sblinga前面所有平行节点的迭代类型<br />不是同一父节点下的标签不是平行关系<br />有可能返回的是NavigableString属性，后面会介绍排除的方法\n\n<a name=\"ff1aba7d\"></a>\n# HTML格式输出和编码\n\n- prettify()能够格式化输出Html内容\n\n```\nsoup = beautifulsoup(\"<p>呆呆和甜甜</p>\"，\"html.parser\")\nprint(soup.p.prettify)\n# <p>\n#   呆呆和甜甜\n# </p>\n```\n<a name=\"f359139e\"></a>\n# <>.find_all()\n\n- 返回的是一个列表\n\n<a name=\"3d0a2df9\"></a>\n## 参数\n\n<a name=\"9ee23a89\"></a>\n### name需要检索的标签名字符串\n\n- 如果是True则打印所有标签\n- 要打印多个标签可使用列表\n\n<a name=\"19e3b452\"></a>\n### attrs标签属性检索字符串\n\n- 也可以对一个特定的属性值进行检索<br />要加下划线，如：class_\n\n```\nsoup.find_all(id_ = \"link\")\n# 搜索出属性包含id= link的标签\n```\n\n<a name=\"ad73f43f\"></a>\n### recursive 是否对子孙全部检索，默认是True\n\n<a name=\"e3c2dd0a\"></a>\n### srting对<>...</>中间的内容进行检索\n\n<a name=\"d8771b35\"></a>\n## find——all的简写形式\n\n- () ==.find_all()\n- soup() == soup.find_all()\n","source":"_posts/Python爬虫/python爬虫----BeautifulSoup库.md","raw":"---\ntitle: python爬虫----BeautifulSoup库\ndate: 2023-07-17 09:34:53\ntags:\ncategories:\n---\n<a name=\"c024c16d\"></a>\n# 导入beautifulsoup\n\n```\nfrom bs4 import BeautifulSoup\n```\n\n<a name=\"063d6819\"></a>\n# beautifulsoup方法\n\n```\nsoup = BeautifulSoup(\"<p>date</p>\",\"html.parser\")\nsoup = BeautifulSoup(open(\"D://demo.html\"),\"html.parser\")\n```\n\n- 第一个参数是利用requests库得到的网页全代码，可以是字符串也可以是HTML文件\n- 第二个参数是选择解析这段HTML代码的解释器\n- 最后会得到一个能代表HTML标签树的一个实例\n- 也可以理解为标签的集合\n\n<a name=\"38ed9afc\"></a>\n# beautifulsoup库的基本元素\n\n<a name=\"def47dff\"></a>\n## 所有的bs4库的解析器\n\n- lxml的HTML解析器<br />条件：pip install lmxl<br />使用方法：BeautifulSoup(mk,\"lmxl\")\n- lmxl的XML解析器<br />条件：pip install lxml<br />使用方法：BeautifulSoup(mk,\"xml\")\n- html5lib的解析器<br />条件：pip install html5lib<br />使用条件：BeautifulSoup(mk,\"html5lib\")\n\n<a name=\"61a7d4f4\"></a>\n## 标签的有关元素\n\n- Tag标签，最基本的信息组织元素，用<>和</>表明开头和结尾\n\n\n- Name标签的名称，如...的名称就是head\n\n```\nsoup.a.name #a\nsoup.a.parent.name #div\n```\n\n- Attributes标签的属性，字典类型\n\n```\nsoup.a.attrs \n# {'class': ['navbar-brand'], 'href': 'http://www.daidaitiantian.top/'}\n```\n\n- NavigableString<>...</>中间的字符串\n\n```\nsoup.a.string\n#呆呆和甜甜\n```\n\n- Comment注释类型\n\n\n<a name=\"a4a23c11\"></a>\n# 遍历HTML的方法\n\n<a name=\"533ecbae\"></a>\n## 标签数的遍历方式\n\n![](http://note.youdao.com/yws/res/648/WEBRESOURCE8a9147bbf0b0ce3a208671adaf22bbbd#crop=0&crop=0&crop=1&crop=1&id=Wiso8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"dbfbb788\"></a>\n## 下行遍历\n\n- contents子节点的列表，将所有子节点存入列表\n- children子节点的迭代类型，与contents类似用于遍历子节点\n- descendants子孙节点的迭代类型，用于循环遍历\n\n<a name=\"ede05cbe\"></a>\n## 上行遍历\n\n- parent节点的父标签\n- parents节点先辈标签的迭代类型，用于遍历\n\n<a name=\"b57148a0\"></a>\n## 平行遍历\n\n- next_sibling下一个平行节点的标签\n- previous_sibling上一平行节点的标签\n- next_sblings后续所有平行节点的迭代类型\n- previous_sblinga前面所有平行节点的迭代类型<br />不是同一父节点下的标签不是平行关系<br />有可能返回的是NavigableString属性，后面会介绍排除的方法\n\n<a name=\"ff1aba7d\"></a>\n# HTML格式输出和编码\n\n- prettify()能够格式化输出Html内容\n\n```\nsoup = beautifulsoup(\"<p>呆呆和甜甜</p>\"，\"html.parser\")\nprint(soup.p.prettify)\n# <p>\n#   呆呆和甜甜\n# </p>\n```\n<a name=\"f359139e\"></a>\n# <>.find_all()\n\n- 返回的是一个列表\n\n<a name=\"3d0a2df9\"></a>\n## 参数\n\n<a name=\"9ee23a89\"></a>\n### name需要检索的标签名字符串\n\n- 如果是True则打印所有标签\n- 要打印多个标签可使用列表\n\n<a name=\"19e3b452\"></a>\n### attrs标签属性检索字符串\n\n- 也可以对一个特定的属性值进行检索<br />要加下划线，如：class_\n\n```\nsoup.find_all(id_ = \"link\")\n# 搜索出属性包含id= link的标签\n```\n\n<a name=\"ad73f43f\"></a>\n### recursive 是否对子孙全部检索，默认是True\n\n<a name=\"e3c2dd0a\"></a>\n### srting对<>...</>中间的内容进行检索\n\n<a name=\"d8771b35\"></a>\n## find——all的简写形式\n\n- () ==.find_all()\n- soup() == soup.find_all()\n","slug":"Python爬虫/python爬虫----BeautifulSoup库","published":1,"updated":"2023-07-17T01:34:54.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x760001i4v1byapg9e4","content":"<p><a name=\"c024c16d\"></a></p>\n<h1 id=\"导入beautifulsoup\"><a href=\"#导入beautifulsoup\" class=\"headerlink\" title=\"导入beautifulsoup\"></a>导入beautifulsoup</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"063d6819\"></a></p>\n<h1 id=\"beautifulsoup方法\"><a href=\"#beautifulsoup方法\" class=\"headerlink\" title=\"beautifulsoup方法\"></a>beautifulsoup方法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&quot;&lt;p&gt;date&lt;/p&gt;&quot;,&quot;html.parser&quot;)</span><br><span class=\"line\">soup = BeautifulSoup(open(&quot;D://demo.html&quot;),&quot;html.parser&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数是利用requests库得到的网页全代码，可以是字符串也可以是HTML文件</li>\n<li>第二个参数是选择解析这段HTML代码的解释器</li>\n<li>最后会得到一个能代表HTML标签树的一个实例</li>\n<li>也可以理解为标签的集合</li>\n</ul>\n<p><a name=\"38ed9afc\"></a></p>\n<h1 id=\"beautifulsoup库的基本元素\"><a href=\"#beautifulsoup库的基本元素\" class=\"headerlink\" title=\"beautifulsoup库的基本元素\"></a>beautifulsoup库的基本元素</h1><p><a name=\"def47dff\"></a></p>\n<h2 id=\"所有的bs4库的解析器\"><a href=\"#所有的bs4库的解析器\" class=\"headerlink\" title=\"所有的bs4库的解析器\"></a>所有的bs4库的解析器</h2><ul>\n<li>lxml的HTML解析器<br />条件：pip install lmxl<br />使用方法：BeautifulSoup(mk,”lmxl”)</li>\n<li>lmxl的XML解析器<br />条件：pip install lxml<br />使用方法：BeautifulSoup(mk,”xml”)</li>\n<li>html5lib的解析器<br />条件：pip install html5lib<br />使用条件：BeautifulSoup(mk,”html5lib”)</li>\n</ul>\n<p><a name=\"61a7d4f4\"></a></p>\n<h2 id=\"标签的有关元素\"><a href=\"#标签的有关元素\" class=\"headerlink\" title=\"标签的有关元素\"></a>标签的有关元素</h2><ul>\n<li><p>Tag标签，最基本的信息组织元素，用&lt;&gt;和&lt;&#x2F;&gt;表明开头和结尾</p>\n</li>\n<li><p>Name标签的名称，如…的名称就是head</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.name #a</span><br><span class=\"line\">soup.a.parent.name #div</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes标签的属性，字典类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.attrs </span><br><span class=\"line\"># &#123;&#x27;class&#x27;: [&#x27;navbar-brand&#x27;], &#x27;href&#x27;: &#x27;http://www.daidaitiantian.top/&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NavigableString&lt;&gt;…&lt;&#x2F;&gt;中间的字符串</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.string</span><br><span class=\"line\">#呆呆和甜甜</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Comment注释类型</li>\n</ul>\n<p><a name=\"a4a23c11\"></a></p>\n<h1 id=\"遍历HTML的方法\"><a href=\"#遍历HTML的方法\" class=\"headerlink\" title=\"遍历HTML的方法\"></a>遍历HTML的方法</h1><p><a name=\"533ecbae\"></a></p>\n<h2 id=\"标签数的遍历方式\"><a href=\"#标签数的遍历方式\" class=\"headerlink\" title=\"标签数的遍历方式\"></a>标签数的遍历方式</h2><p><img src=\"http://note.youdao.com/yws/res/648/WEBRESOURCE8a9147bbf0b0ce3a208671adaf22bbbd#crop=0&crop=0&crop=1&crop=1&id=Wiso8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<p><a name=\"dbfbb788\"></a></p>\n<h2 id=\"下行遍历\"><a href=\"#下行遍历\" class=\"headerlink\" title=\"下行遍历\"></a>下行遍历</h2><ul>\n<li>contents子节点的列表，将所有子节点存入列表</li>\n<li>children子节点的迭代类型，与contents类似用于遍历子节点</li>\n<li>descendants子孙节点的迭代类型，用于循环遍历</li>\n</ul>\n<p><a name=\"ede05cbe\"></a></p>\n<h2 id=\"上行遍历\"><a href=\"#上行遍历\" class=\"headerlink\" title=\"上行遍历\"></a>上行遍历</h2><ul>\n<li>parent节点的父标签</li>\n<li>parents节点先辈标签的迭代类型，用于遍历</li>\n</ul>\n<p><a name=\"b57148a0\"></a></p>\n<h2 id=\"平行遍历\"><a href=\"#平行遍历\" class=\"headerlink\" title=\"平行遍历\"></a>平行遍历</h2><ul>\n<li>next_sibling下一个平行节点的标签</li>\n<li>previous_sibling上一平行节点的标签</li>\n<li>next_sblings后续所有平行节点的迭代类型</li>\n<li>previous_sblinga前面所有平行节点的迭代类型<br />不是同一父节点下的标签不是平行关系<br />有可能返回的是NavigableString属性，后面会介绍排除的方法</li>\n</ul>\n<p><a name=\"ff1aba7d\"></a></p>\n<h1 id=\"HTML格式输出和编码\"><a href=\"#HTML格式输出和编码\" class=\"headerlink\" title=\"HTML格式输出和编码\"></a>HTML格式输出和编码</h1><ul>\n<li>prettify()能够格式化输出Html内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = beautifulsoup(&quot;&lt;p&gt;呆呆和甜甜&lt;/p&gt;&quot;，&quot;html.parser&quot;)</span><br><span class=\"line\">print(soup.p.prettify)</span><br><span class=\"line\"># &lt;p&gt;</span><br><span class=\"line\">#   呆呆和甜甜</span><br><span class=\"line\"># &lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p><a name=\"f359139e\"></a></p>\n<h1 id=\"lt-gt-find-all\"><a href=\"#lt-gt-find-all\" class=\"headerlink\" title=\"&lt;&gt;.find_all()\"></a>&lt;&gt;.find_all()</h1><ul>\n<li>返回的是一个列表</li>\n</ul>\n<p><a name=\"3d0a2df9\"></a></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p><a name=\"9ee23a89\"></a></p>\n<h3 id=\"name需要检索的标签名字符串\"><a href=\"#name需要检索的标签名字符串\" class=\"headerlink\" title=\"name需要检索的标签名字符串\"></a>name需要检索的标签名字符串</h3><ul>\n<li>如果是True则打印所有标签</li>\n<li>要打印多个标签可使用列表</li>\n</ul>\n<p><a name=\"19e3b452\"></a></p>\n<h3 id=\"attrs标签属性检索字符串\"><a href=\"#attrs标签属性检索字符串\" class=\"headerlink\" title=\"attrs标签属性检索字符串\"></a>attrs标签属性检索字符串</h3><ul>\n<li>也可以对一个特定的属性值进行检索<br />要加下划线，如：class_</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(id_ = &quot;link&quot;)</span><br><span class=\"line\"># 搜索出属性包含id= link的标签</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"ad73f43f\"></a></p>\n<h3 id=\"recursive-是否对子孙全部检索，默认是True\"><a href=\"#recursive-是否对子孙全部检索，默认是True\" class=\"headerlink\" title=\"recursive 是否对子孙全部检索，默认是True\"></a>recursive 是否对子孙全部检索，默认是True</h3><p><a name=\"e3c2dd0a\"></a></p>\n<h3 id=\"srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索\"><a href=\"#srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索\" class=\"headerlink\" title=\"srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索\"></a>srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索</h3><p><a name=\"d8771b35\"></a></p>\n<h2 id=\"find——all的简写形式\"><a href=\"#find——all的简写形式\" class=\"headerlink\" title=\"find——all的简写形式\"></a>find——all的简写形式</h2><ul>\n<li>() &#x3D;&#x3D;.find_all()</li>\n<li>soup() &#x3D;&#x3D; soup.find_all()</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<p><a name=\"c024c16d\"></a></p>\n<h1 id=\"导入beautifulsoup\"><a href=\"#导入beautifulsoup\" class=\"headerlink\" title=\"导入beautifulsoup\"></a>导入beautifulsoup</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"063d6819\"></a></p>\n<h1 id=\"beautifulsoup方法\"><a href=\"#beautifulsoup方法\" class=\"headerlink\" title=\"beautifulsoup方法\"></a>beautifulsoup方法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(&quot;&lt;p&gt;date&lt;/p&gt;&quot;,&quot;html.parser&quot;)</span><br><span class=\"line\">soup = BeautifulSoup(open(&quot;D://demo.html&quot;),&quot;html.parser&quot;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数是利用requests库得到的网页全代码，可以是字符串也可以是HTML文件</li>\n<li>第二个参数是选择解析这段HTML代码的解释器</li>\n<li>最后会得到一个能代表HTML标签树的一个实例</li>\n<li>也可以理解为标签的集合</li>\n</ul>\n<p><a name=\"38ed9afc\"></a></p>\n<h1 id=\"beautifulsoup库的基本元素\"><a href=\"#beautifulsoup库的基本元素\" class=\"headerlink\" title=\"beautifulsoup库的基本元素\"></a>beautifulsoup库的基本元素</h1><p><a name=\"def47dff\"></a></p>\n<h2 id=\"所有的bs4库的解析器\"><a href=\"#所有的bs4库的解析器\" class=\"headerlink\" title=\"所有的bs4库的解析器\"></a>所有的bs4库的解析器</h2><ul>\n<li>lxml的HTML解析器<br />条件：pip install lmxl<br />使用方法：BeautifulSoup(mk,”lmxl”)</li>\n<li>lmxl的XML解析器<br />条件：pip install lxml<br />使用方法：BeautifulSoup(mk,”xml”)</li>\n<li>html5lib的解析器<br />条件：pip install html5lib<br />使用条件：BeautifulSoup(mk,”html5lib”)</li>\n</ul>\n<p><a name=\"61a7d4f4\"></a></p>\n<h2 id=\"标签的有关元素\"><a href=\"#标签的有关元素\" class=\"headerlink\" title=\"标签的有关元素\"></a>标签的有关元素</h2><ul>\n<li><p>Tag标签，最基本的信息组织元素，用&lt;&gt;和&lt;&#x2F;&gt;表明开头和结尾</p>\n</li>\n<li><p>Name标签的名称，如…的名称就是head</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.name #a</span><br><span class=\"line\">soup.a.parent.name #div</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Attributes标签的属性，字典类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.attrs </span><br><span class=\"line\"># &#123;&#x27;class&#x27;: [&#x27;navbar-brand&#x27;], &#x27;href&#x27;: &#x27;http://www.daidaitiantian.top/&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NavigableString&lt;&gt;…&lt;&#x2F;&gt;中间的字符串</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.a.string</span><br><span class=\"line\">#呆呆和甜甜</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Comment注释类型</li>\n</ul>\n<p><a name=\"a4a23c11\"></a></p>\n<h1 id=\"遍历HTML的方法\"><a href=\"#遍历HTML的方法\" class=\"headerlink\" title=\"遍历HTML的方法\"></a>遍历HTML的方法</h1><p><a name=\"533ecbae\"></a></p>\n<h2 id=\"标签数的遍历方式\"><a href=\"#标签数的遍历方式\" class=\"headerlink\" title=\"标签数的遍历方式\"></a>标签数的遍历方式</h2><p><img src=\"http://note.youdao.com/yws/res/648/WEBRESOURCE8a9147bbf0b0ce3a208671adaf22bbbd#crop=0&crop=0&crop=1&crop=1&id=Wiso8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<p><a name=\"dbfbb788\"></a></p>\n<h2 id=\"下行遍历\"><a href=\"#下行遍历\" class=\"headerlink\" title=\"下行遍历\"></a>下行遍历</h2><ul>\n<li>contents子节点的列表，将所有子节点存入列表</li>\n<li>children子节点的迭代类型，与contents类似用于遍历子节点</li>\n<li>descendants子孙节点的迭代类型，用于循环遍历</li>\n</ul>\n<p><a name=\"ede05cbe\"></a></p>\n<h2 id=\"上行遍历\"><a href=\"#上行遍历\" class=\"headerlink\" title=\"上行遍历\"></a>上行遍历</h2><ul>\n<li>parent节点的父标签</li>\n<li>parents节点先辈标签的迭代类型，用于遍历</li>\n</ul>\n<p><a name=\"b57148a0\"></a></p>\n<h2 id=\"平行遍历\"><a href=\"#平行遍历\" class=\"headerlink\" title=\"平行遍历\"></a>平行遍历</h2><ul>\n<li>next_sibling下一个平行节点的标签</li>\n<li>previous_sibling上一平行节点的标签</li>\n<li>next_sblings后续所有平行节点的迭代类型</li>\n<li>previous_sblinga前面所有平行节点的迭代类型<br />不是同一父节点下的标签不是平行关系<br />有可能返回的是NavigableString属性，后面会介绍排除的方法</li>\n</ul>\n<p><a name=\"ff1aba7d\"></a></p>\n<h1 id=\"HTML格式输出和编码\"><a href=\"#HTML格式输出和编码\" class=\"headerlink\" title=\"HTML格式输出和编码\"></a>HTML格式输出和编码</h1><ul>\n<li>prettify()能够格式化输出Html内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = beautifulsoup(&quot;&lt;p&gt;呆呆和甜甜&lt;/p&gt;&quot;，&quot;html.parser&quot;)</span><br><span class=\"line\">print(soup.p.prettify)</span><br><span class=\"line\"># &lt;p&gt;</span><br><span class=\"line\">#   呆呆和甜甜</span><br><span class=\"line\"># &lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p><a name=\"f359139e\"></a></p>\n<h1 id=\"lt-gt-find-all\"><a href=\"#lt-gt-find-all\" class=\"headerlink\" title=\"&lt;&gt;.find_all()\"></a>&lt;&gt;.find_all()</h1><ul>\n<li>返回的是一个列表</li>\n</ul>\n<p><a name=\"3d0a2df9\"></a></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p><a name=\"9ee23a89\"></a></p>\n<h3 id=\"name需要检索的标签名字符串\"><a href=\"#name需要检索的标签名字符串\" class=\"headerlink\" title=\"name需要检索的标签名字符串\"></a>name需要检索的标签名字符串</h3><ul>\n<li>如果是True则打印所有标签</li>\n<li>要打印多个标签可使用列表</li>\n</ul>\n<p><a name=\"19e3b452\"></a></p>\n<h3 id=\"attrs标签属性检索字符串\"><a href=\"#attrs标签属性检索字符串\" class=\"headerlink\" title=\"attrs标签属性检索字符串\"></a>attrs标签属性检索字符串</h3><ul>\n<li>也可以对一个特定的属性值进行检索<br />要加下划线，如：class_</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(id_ = &quot;link&quot;)</span><br><span class=\"line\"># 搜索出属性包含id= link的标签</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"ad73f43f\"></a></p>\n<h3 id=\"recursive-是否对子孙全部检索，默认是True\"><a href=\"#recursive-是否对子孙全部检索，默认是True\" class=\"headerlink\" title=\"recursive 是否对子孙全部检索，默认是True\"></a>recursive 是否对子孙全部检索，默认是True</h3><p><a name=\"e3c2dd0a\"></a></p>\n<h3 id=\"srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索\"><a href=\"#srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索\" class=\"headerlink\" title=\"srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索\"></a>srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索</h3><p><a name=\"d8771b35\"></a></p>\n<h2 id=\"find——all的简写形式\"><a href=\"#find——all的简写形式\" class=\"headerlink\" title=\"find——all的简写形式\"></a>find——all的简写形式</h2><ul>\n<li>() &#x3D;&#x3D;.find_all()</li>\n<li>soup() &#x3D;&#x3D; soup.find_all()</li>\n</ul>\n"},{"title":"python爬虫----Requests库","date":"2023-07-17T01:34:56.000Z","_content":"<a name=\"6b474650\"></a>\n# requests库的基本使用\n\n<a name=\"c85ab9d3\"></a>\n## response对象\n\n<a name=\"44a3f242\"></a>\n### 对象属性\n\n- r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败\n- r.text HTTP响应内容的字符串形式，即，url对应的页面内容\n- r.encoding 从HTTPheader中猜测的响应内容编码方式\n- r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）\n- r.content HTTP响应内容的二进制形式\n\n<a name=\"e449cf10\"></a>\n## 异常处理\n\n- requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等\n- requests.HTTPError HTTP错误异常\n- requests.URLRequired URL缺失异常\n- requests.TooManyRedirects 超过最大重定向次数，产生重定向异常\n- requests.ConnectTimeout 连接远程服务器超时异常\n- requests.Timeout 请求URL超时，产生超时异常\n\n<a name=\"r.status_code\"></a>\n### r.status_code\n\nr.raise_for_status()在方法内部判断r.status_code是否等于200，不需要<br />增加额外的if语句，该语句便于利用try‐except进行异常处理\n\n<a name=\"162ddc62\"></a>\n## 主要方法\n\n```\nrequests.request()  #支持以下的所有方法，如第一个参数设置为\"Get\"\nrequests.get()      #获取HTML网页的所有信息\nrequests.head()     #获取HTML网页的头部信息\nrequests.post()     #提交post请求，发送资源\nrequests.put()      #提交put请求，会替换掉原有的资源\nrequests.patch()    #提交局部修改请求\nrequests.delete()   #提交删除请求\n```\n\n- 下面以requests.request()为例，介绍所有参数的使用\n- requests.request(method,url,**kwargs)\n\n<a name=\"5f06bad4\"></a>\n### method参数\n\n对应请求方法有七种，和requests库的其他方法功能一致<br />除了上面的六中之外还有OPTIONS请求方法\n\n<a name=\"2b0eac5b\"></a>\n### url参数\n\n网站url地址\n\n<a name=\"bb92f887\"></a>\n### **kwargs（**表示可选）\n\n- params将键值对增加到url\n\n```\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.request('GET', 'http://python123.io/ws', params=kv)\nprint(r.url)\n#http://python123.io/ws?key1=value1&key2=value2\n```\n\n- data将字典、字节序列或文件对象作为request的对象\n\n```\nkv = {\"key1\":\"value1\",\"key2\":\"value2\"}\nr = request.request(\"POST\",\"http://pythton123.io/ws\",data=kv)\nbody = \"主体内容\"\nr = request.request(\"POST\",\"http://pythton123.io/ws\",data=body)\n```\n\n- json将JSON格式的数据作为requests的内容\n\n```\nkv = {\"key1\":\"value1\",\"key2\":\"value2\"}\nr = request.request(\"POST\",\"http://pythton123.io/ws\",json=kv)\n```\n\n- headers定制HTTP头部中的内容\n\n```\nhd = {'user‐agent': 'Chrome/10'}\nr = requests.request('POST', 'http://python123.io/ws', headers=hd)\n```\n\n- cookies\n- files字典类型，传输文件，值要用open()函数\n\n```\nfs = {'file': open('data.xls', 'rb')}\nr = requests.request('POST', 'http://python123.io/ws', files=fs)\n```\n\n- auth\n- timeout超时设置(秒为单位)\n\n```\nr = requests.request('GET', 'http://www.baidu.com', timeout=10)\n```\n\n- proxies字典类型设定代理服务器\n\n```\npxs = { 'http': 'http://user:pass@10.10.10.1:1234'\n'https': 'https://10.10.10.1:4321' }\nr = requests.request('GET', 'http://www.baidu.com', proxies=pxs)\n```\n\n- allow_redirects :True/False，默认为True，重定向开关\n- stream:True/False，默认为True，获取内容立即下载开关\n- verify:True/False，默认为True，认证SSL证书开关\n- cert:本地SSL证书路径\n\n<a name=\"d2424c30\"></a>\n## 爬虫的通用框架\n\n```\nimport requests\ndef getHtmlText(url):\n    try:\n        r = requests.get(url,timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding()\n        return r.text\n    except:\n        return \"产生异常\"\nif __name__==\"__main__\":\n    url = \"http://www.baidu.com\"\n    print(getHtmlText(url))\n```\n","source":"_posts/Python爬虫/python爬虫----Requests库.md","raw":"---\ntitle: python爬虫----Requests库\ndate: 2023-07-17 09:34:56\ntags:\ncategories:\n---\n<a name=\"6b474650\"></a>\n# requests库的基本使用\n\n<a name=\"c85ab9d3\"></a>\n## response对象\n\n<a name=\"44a3f242\"></a>\n### 对象属性\n\n- r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败\n- r.text HTTP响应内容的字符串形式，即，url对应的页面内容\n- r.encoding 从HTTPheader中猜测的响应内容编码方式\n- r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）\n- r.content HTTP响应内容的二进制形式\n\n<a name=\"e449cf10\"></a>\n## 异常处理\n\n- requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等\n- requests.HTTPError HTTP错误异常\n- requests.URLRequired URL缺失异常\n- requests.TooManyRedirects 超过最大重定向次数，产生重定向异常\n- requests.ConnectTimeout 连接远程服务器超时异常\n- requests.Timeout 请求URL超时，产生超时异常\n\n<a name=\"r.status_code\"></a>\n### r.status_code\n\nr.raise_for_status()在方法内部判断r.status_code是否等于200，不需要<br />增加额外的if语句，该语句便于利用try‐except进行异常处理\n\n<a name=\"162ddc62\"></a>\n## 主要方法\n\n```\nrequests.request()  #支持以下的所有方法，如第一个参数设置为\"Get\"\nrequests.get()      #获取HTML网页的所有信息\nrequests.head()     #获取HTML网页的头部信息\nrequests.post()     #提交post请求，发送资源\nrequests.put()      #提交put请求，会替换掉原有的资源\nrequests.patch()    #提交局部修改请求\nrequests.delete()   #提交删除请求\n```\n\n- 下面以requests.request()为例，介绍所有参数的使用\n- requests.request(method,url,**kwargs)\n\n<a name=\"5f06bad4\"></a>\n### method参数\n\n对应请求方法有七种，和requests库的其他方法功能一致<br />除了上面的六中之外还有OPTIONS请求方法\n\n<a name=\"2b0eac5b\"></a>\n### url参数\n\n网站url地址\n\n<a name=\"bb92f887\"></a>\n### **kwargs（**表示可选）\n\n- params将键值对增加到url\n\n```\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.request('GET', 'http://python123.io/ws', params=kv)\nprint(r.url)\n#http://python123.io/ws?key1=value1&key2=value2\n```\n\n- data将字典、字节序列或文件对象作为request的对象\n\n```\nkv = {\"key1\":\"value1\",\"key2\":\"value2\"}\nr = request.request(\"POST\",\"http://pythton123.io/ws\",data=kv)\nbody = \"主体内容\"\nr = request.request(\"POST\",\"http://pythton123.io/ws\",data=body)\n```\n\n- json将JSON格式的数据作为requests的内容\n\n```\nkv = {\"key1\":\"value1\",\"key2\":\"value2\"}\nr = request.request(\"POST\",\"http://pythton123.io/ws\",json=kv)\n```\n\n- headers定制HTTP头部中的内容\n\n```\nhd = {'user‐agent': 'Chrome/10'}\nr = requests.request('POST', 'http://python123.io/ws', headers=hd)\n```\n\n- cookies\n- files字典类型，传输文件，值要用open()函数\n\n```\nfs = {'file': open('data.xls', 'rb')}\nr = requests.request('POST', 'http://python123.io/ws', files=fs)\n```\n\n- auth\n- timeout超时设置(秒为单位)\n\n```\nr = requests.request('GET', 'http://www.baidu.com', timeout=10)\n```\n\n- proxies字典类型设定代理服务器\n\n```\npxs = { 'http': 'http://user:pass@10.10.10.1:1234'\n'https': 'https://10.10.10.1:4321' }\nr = requests.request('GET', 'http://www.baidu.com', proxies=pxs)\n```\n\n- allow_redirects :True/False，默认为True，重定向开关\n- stream:True/False，默认为True，获取内容立即下载开关\n- verify:True/False，默认为True，认证SSL证书开关\n- cert:本地SSL证书路径\n\n<a name=\"d2424c30\"></a>\n## 爬虫的通用框架\n\n```\nimport requests\ndef getHtmlText(url):\n    try:\n        r = requests.get(url,timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding()\n        return r.text\n    except:\n        return \"产生异常\"\nif __name__==\"__main__\":\n    url = \"http://www.baidu.com\"\n    print(getHtmlText(url))\n```\n","slug":"Python爬虫/python爬虫----Requests库","published":1,"updated":"2023-07-17T01:34:58.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7a0003i4v1f7701a6n","content":"<p><a name=\"6b474650\"></a></p>\n<h1 id=\"requests库的基本使用\"><a href=\"#requests库的基本使用\" class=\"headerlink\" title=\"requests库的基本使用\"></a>requests库的基本使用</h1><p><a name=\"c85ab9d3\"></a></p>\n<h2 id=\"response对象\"><a href=\"#response对象\" class=\"headerlink\" title=\"response对象\"></a>response对象</h2><p><a name=\"44a3f242\"></a></p>\n<h3 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h3><ul>\n<li>r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败</li>\n<li>r.text HTTP响应内容的字符串形式，即，url对应的页面内容</li>\n<li>r.encoding 从HTTPheader中猜测的响应内容编码方式</li>\n<li>r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）</li>\n<li>r.content HTTP响应内容的二进制形式</li>\n</ul>\n<p><a name=\"e449cf10\"></a></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><ul>\n<li>requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等</li>\n<li>requests.HTTPError HTTP错误异常</li>\n<li>requests.URLRequired URL缺失异常</li>\n<li>requests.TooManyRedirects 超过最大重定向次数，产生重定向异常</li>\n<li>requests.ConnectTimeout 连接远程服务器超时异常</li>\n<li>requests.Timeout 请求URL超时，产生超时异常</li>\n</ul>\n<p><a name=\"r.status_code\"></a></p>\n<h3 id=\"r-status-code\"><a href=\"#r-status-code\" class=\"headerlink\" title=\"r.status_code\"></a>r.status_code</h3><p>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要<br />增加额外的if语句，该语句便于利用try‐except进行异常处理</p>\n<p><a name=\"162ddc62\"></a></p>\n<h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.request()  #支持以下的所有方法，如第一个参数设置为&quot;Get&quot;</span><br><span class=\"line\">requests.get()      #获取HTML网页的所有信息</span><br><span class=\"line\">requests.head()     #获取HTML网页的头部信息</span><br><span class=\"line\">requests.post()     #提交post请求，发送资源</span><br><span class=\"line\">requests.put()      #提交put请求，会替换掉原有的资源</span><br><span class=\"line\">requests.patch()    #提交局部修改请求</span><br><span class=\"line\">requests.delete()   #提交删除请求</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下面以requests.request()为例，介绍所有参数的使用</li>\n<li>requests.request(method,url,**kwargs)</li>\n</ul>\n<p><a name=\"5f06bad4\"></a></p>\n<h3 id=\"method参数\"><a href=\"#method参数\" class=\"headerlink\" title=\"method参数\"></a>method参数</h3><p>对应请求方法有七种，和requests库的其他方法功能一致<br />除了上面的六中之外还有OPTIONS请求方法</p>\n<p><a name=\"2b0eac5b\"></a></p>\n<h3 id=\"url参数\"><a href=\"#url参数\" class=\"headerlink\" title=\"url参数\"></a>url参数</h3><p>网站url地址</p>\n<p><a name=\"bb92f887\"></a></p>\n<h3 id=\"kwargs（表示可选）\"><a href=\"#kwargs（表示可选）\" class=\"headerlink\" title=\"kwargs（表示可选）\"></a><strong>kwargs（</strong>表示可选）</h3><ul>\n<li>params将键值对增加到url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span><br><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://python123.io/ws&#x27;, params=kv)</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">#http://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>data将字典、字节序列或文件对象作为request的对象</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=kv)</span><br><span class=\"line\">body = &quot;主体内容&quot;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=body)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json将JSON格式的数据作为requests的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,json=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>headers定制HTTP头部中的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd = &#123;&#x27;user‐agent&#x27;: &#x27;Chrome/10&#x27;&#125;</span><br><span class=\"line\">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, headers=hd)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cookies</li>\n<li>files字典类型，传输文件，值要用open()函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = &#123;&#x27;file&#x27;: open(&#x27;data.xls&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class=\"line\">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, files=fs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>auth</li>\n<li>timeout超时设置(秒为单位)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, timeout=10)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxies字典类型设定代理服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxs = &#123; &#x27;http&#x27;: &#x27;http://user:pass@10.10.10.1:1234&#x27;</span><br><span class=\"line\">&#x27;https&#x27;: &#x27;https://10.10.10.1:4321&#x27; &#125;</span><br><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, proxies=pxs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>allow_redirects :True&#x2F;False，默认为True，重定向开关</li>\n<li>stream:True&#x2F;False，默认为True，获取内容立即下载开关</li>\n<li>verify:True&#x2F;False，默认为True，认证SSL证书开关</li>\n<li>cert:本地SSL证书路径</li>\n</ul>\n<p><a name=\"d2424c30\"></a></p>\n<h2 id=\"爬虫的通用框架\"><a href=\"#爬虫的通用框架\" class=\"headerlink\" title=\"爬虫的通用框架\"></a>爬虫的通用框架</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">def getHtmlText(url):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        r = requests.get(url,timeout=30)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding()</span><br><span class=\"line\">        return r.text</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        return &quot;产生异常&quot;</span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">    url = &quot;http://www.baidu.com&quot;</span><br><span class=\"line\">    print(getHtmlText(url))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<p><a name=\"6b474650\"></a></p>\n<h1 id=\"requests库的基本使用\"><a href=\"#requests库的基本使用\" class=\"headerlink\" title=\"requests库的基本使用\"></a>requests库的基本使用</h1><p><a name=\"c85ab9d3\"></a></p>\n<h2 id=\"response对象\"><a href=\"#response对象\" class=\"headerlink\" title=\"response对象\"></a>response对象</h2><p><a name=\"44a3f242\"></a></p>\n<h3 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h3><ul>\n<li>r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败</li>\n<li>r.text HTTP响应内容的字符串形式，即，url对应的页面内容</li>\n<li>r.encoding 从HTTPheader中猜测的响应内容编码方式</li>\n<li>r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）</li>\n<li>r.content HTTP响应内容的二进制形式</li>\n</ul>\n<p><a name=\"e449cf10\"></a></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><ul>\n<li>requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等</li>\n<li>requests.HTTPError HTTP错误异常</li>\n<li>requests.URLRequired URL缺失异常</li>\n<li>requests.TooManyRedirects 超过最大重定向次数，产生重定向异常</li>\n<li>requests.ConnectTimeout 连接远程服务器超时异常</li>\n<li>requests.Timeout 请求URL超时，产生超时异常</li>\n</ul>\n<p><a name=\"r.status_code\"></a></p>\n<h3 id=\"r-status-code\"><a href=\"#r-status-code\" class=\"headerlink\" title=\"r.status_code\"></a>r.status_code</h3><p>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要<br />增加额外的if语句，该语句便于利用try‐except进行异常处理</p>\n<p><a name=\"162ddc62\"></a></p>\n<h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.request()  #支持以下的所有方法，如第一个参数设置为&quot;Get&quot;</span><br><span class=\"line\">requests.get()      #获取HTML网页的所有信息</span><br><span class=\"line\">requests.head()     #获取HTML网页的头部信息</span><br><span class=\"line\">requests.post()     #提交post请求，发送资源</span><br><span class=\"line\">requests.put()      #提交put请求，会替换掉原有的资源</span><br><span class=\"line\">requests.patch()    #提交局部修改请求</span><br><span class=\"line\">requests.delete()   #提交删除请求</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下面以requests.request()为例，介绍所有参数的使用</li>\n<li>requests.request(method,url,**kwargs)</li>\n</ul>\n<p><a name=\"5f06bad4\"></a></p>\n<h3 id=\"method参数\"><a href=\"#method参数\" class=\"headerlink\" title=\"method参数\"></a>method参数</h3><p>对应请求方法有七种，和requests库的其他方法功能一致<br />除了上面的六中之外还有OPTIONS请求方法</p>\n<p><a name=\"2b0eac5b\"></a></p>\n<h3 id=\"url参数\"><a href=\"#url参数\" class=\"headerlink\" title=\"url参数\"></a>url参数</h3><p>网站url地址</p>\n<p><a name=\"bb92f887\"></a></p>\n<h3 id=\"kwargs（表示可选）\"><a href=\"#kwargs（表示可选）\" class=\"headerlink\" title=\"kwargs（表示可选）\"></a><strong>kwargs（</strong>表示可选）</h3><ul>\n<li>params将键值对增加到url</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span><br><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://python123.io/ws&#x27;, params=kv)</span><br><span class=\"line\">print(r.url)</span><br><span class=\"line\">#http://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>data将字典、字节序列或文件对象作为request的对象</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=kv)</span><br><span class=\"line\">body = &quot;主体内容&quot;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=body)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json将JSON格式的数据作为requests的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class=\"line\">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,json=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>headers定制HTTP头部中的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd = &#123;&#x27;user‐agent&#x27;: &#x27;Chrome/10&#x27;&#125;</span><br><span class=\"line\">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, headers=hd)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cookies</li>\n<li>files字典类型，传输文件，值要用open()函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = &#123;&#x27;file&#x27;: open(&#x27;data.xls&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class=\"line\">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, files=fs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>auth</li>\n<li>timeout超时设置(秒为单位)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, timeout=10)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxies字典类型设定代理服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxs = &#123; &#x27;http&#x27;: &#x27;http://user:pass@10.10.10.1:1234&#x27;</span><br><span class=\"line\">&#x27;https&#x27;: &#x27;https://10.10.10.1:4321&#x27; &#125;</span><br><span class=\"line\">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, proxies=pxs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>allow_redirects :True&#x2F;False，默认为True，重定向开关</li>\n<li>stream:True&#x2F;False，默认为True，获取内容立即下载开关</li>\n<li>verify:True&#x2F;False，默认为True，认证SSL证书开关</li>\n<li>cert:本地SSL证书路径</li>\n</ul>\n<p><a name=\"d2424c30\"></a></p>\n<h2 id=\"爬虫的通用框架\"><a href=\"#爬虫的通用框架\" class=\"headerlink\" title=\"爬虫的通用框架\"></a>爬虫的通用框架</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">def getHtmlText(url):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        r = requests.get(url,timeout=30)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding()</span><br><span class=\"line\">        return r.text</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        return &quot;产生异常&quot;</span><br><span class=\"line\">if __name__==&quot;__main__&quot;:</span><br><span class=\"line\">    url = &quot;http://www.baidu.com&quot;</span><br><span class=\"line\">    print(getHtmlText(url))</span><br></pre></td></tr></table></figure>\n"},{"title":"orginone——用户手册（沟通+存储+办事）","date":"2023-07-31T05:38:00.000Z","updated":"2023-09-14T08:19:49.174Z","keywords":null,"description":null,"_content":"\n\n\n# 沟通模块\n\n点击右上角的聊天图标，进入沟通页面\n\n\n## 群聊\n\n用户可以在侧边栏中选择群聊，或者在列表中选择群聊，另外单位也可以作为群聊，属于全员群\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135535.png)\n在单位和个人下存在着超级管理权群，单位下有着超级管理权的人员都会加入到该群。因为个人对自己有着最高的权限，个人页面下也会显示超级管理权群，且只有自己一人\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140654.png)\n点击群聊图标，进入聊天页面之后即可开始聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135745.png)\n\n## 单聊\n\n同样在沟通页面下，点击个人的头像，则可显示好友以及个人，可以与好友或或者自己聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140815.png)\n在加入的组织下，可以查看和您处于同一组织的人员，并选择与同一组织的人员聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141144.png)\n\n## 文件传输和存储\n\n在聊天输入框的上方，点击文件图标即可选择文件上传\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141705.png)\n上传的文件会在聊天框中显示，可以点击文件，打开并预览文件\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142029.png)\n若是右击文件，还可以选择将文件下载到本地\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142253.png)\n所有聊天时所发送的文件都会保存在存储中，用户可以点击共享目录在存储查看\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142513.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142748.png)\n\n## 查询聊天记录\n\n同样在聊天的详情下，点击查找聊天记录，在弹窗的搜索框中可以模糊搜索聊天记录\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143039.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143207.png)\n\n# 存储模块\n\n## 文件上传\n\n点击右上角的存储图标，进入存储页面\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143526.png)\n可以在侧边栏中右击目录，点击上传文件，在弹窗中选择上传文件，可以选择点击或拖拽的方式上传文件\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143500.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143906.png)\n\n## 文件管理\n\n右击文件，可以对文件进行操作，如：下载，复制，剪切，彻底删除，重命名，查看详细信息，生成二维码等\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731151057.png)\n# 办事模块\n\n## 发起办事\n\n在存储页面中点击应用，可以在引用中查看办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152521.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152546.png)\n点击办事，填写表单信息即可\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152648.png)\n## 审核办事\n\n在您发起了一则办事之后，会在“我发起的”下显示该办事，并且可以实时查看审批状态\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153132.png)\n若您是审批人，再他人发起了一则办事后，会在“待办事项”下显示需要审批的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153018.png)\n点击办事之后，会打开办事的审批页面，显示办事的详细信息，可以点击通过或驳回\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153759.png)\n若您发起的办事审批结束，会在“已办事项”下显示已审批完毕的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153520.png)","source":"_posts/orginone实习经历/orginone——用户手册（沟通+存储+办事）.md","raw":"---\ntitle: orginone——用户手册（沟通+存储+办事）\ndate: 2023-07-31 13:38\nupdated: 星期一 14日 八月 2023 12:18:22\ntags: []\ncategories: [orginone实习经历]\nkeywords:\ndescription: \n---\n\n\n\n# 沟通模块\n\n点击右上角的聊天图标，进入沟通页面\n\n\n## 群聊\n\n用户可以在侧边栏中选择群聊，或者在列表中选择群聊，另外单位也可以作为群聊，属于全员群\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135535.png)\n在单位和个人下存在着超级管理权群，单位下有着超级管理权的人员都会加入到该群。因为个人对自己有着最高的权限，个人页面下也会显示超级管理权群，且只有自己一人\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140654.png)\n点击群聊图标，进入聊天页面之后即可开始聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135745.png)\n\n## 单聊\n\n同样在沟通页面下，点击个人的头像，则可显示好友以及个人，可以与好友或或者自己聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140815.png)\n在加入的组织下，可以查看和您处于同一组织的人员，并选择与同一组织的人员聊天\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141144.png)\n\n## 文件传输和存储\n\n在聊天输入框的上方，点击文件图标即可选择文件上传\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141705.png)\n上传的文件会在聊天框中显示，可以点击文件，打开并预览文件\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142029.png)\n若是右击文件，还可以选择将文件下载到本地\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142253.png)\n所有聊天时所发送的文件都会保存在存储中，用户可以点击共享目录在存储查看\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142513.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142748.png)\n\n## 查询聊天记录\n\n同样在聊天的详情下，点击查找聊天记录，在弹窗的搜索框中可以模糊搜索聊天记录\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143039.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143207.png)\n\n# 存储模块\n\n## 文件上传\n\n点击右上角的存储图标，进入存储页面\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143526.png)\n可以在侧边栏中右击目录，点击上传文件，在弹窗中选择上传文件，可以选择点击或拖拽的方式上传文件\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143500.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143906.png)\n\n## 文件管理\n\n右击文件，可以对文件进行操作，如：下载，复制，剪切，彻底删除，重命名，查看详细信息，生成二维码等\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731151057.png)\n# 办事模块\n\n## 发起办事\n\n在存储页面中点击应用，可以在引用中查看办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152521.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152546.png)\n点击办事，填写表单信息即可\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152648.png)\n## 审核办事\n\n在您发起了一则办事之后，会在“我发起的”下显示该办事，并且可以实时查看审批状态\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153132.png)\n若您是审批人，再他人发起了一则办事后，会在“待办事项”下显示需要审批的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153018.png)\n点击办事之后，会打开办事的审批页面，显示办事的详细信息，可以点击通过或驳回\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153759.png)\n若您发起的办事审批结束，会在“已办事项”下显示已审批完毕的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153520.png)","slug":"orginone实习经历/orginone——用户手册（沟通+存储+办事）","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7c0005i4v1c047dvst","content":"<h1 id=\"沟通模块\"><a href=\"#沟通模块\" class=\"headerlink\" title=\"沟通模块\"></a>沟通模块</h1><p>点击右上角的聊天图标，进入沟通页面</p>\n<h2 id=\"群聊\"><a href=\"#群聊\" class=\"headerlink\" title=\"群聊\"></a>群聊</h2><p>用户可以在侧边栏中选择群聊，或者在列表中选择群聊，另外单位也可以作为群聊，属于全员群<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135535.png\"><br>在单位和个人下存在着超级管理权群，单位下有着超级管理权的人员都会加入到该群。因为个人对自己有着最高的权限，个人页面下也会显示超级管理权群，且只有自己一人<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140654.png\"><br>点击群聊图标，进入聊天页面之后即可开始聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135745.png\"></p>\n<h2 id=\"单聊\"><a href=\"#单聊\" class=\"headerlink\" title=\"单聊\"></a>单聊</h2><p>同样在沟通页面下，点击个人的头像，则可显示好友以及个人，可以与好友或或者自己聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140815.png\"><br>在加入的组织下，可以查看和您处于同一组织的人员，并选择与同一组织的人员聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141144.png\"></p>\n<h2 id=\"文件传输和存储\"><a href=\"#文件传输和存储\" class=\"headerlink\" title=\"文件传输和存储\"></a>文件传输和存储</h2><p>在聊天输入框的上方，点击文件图标即可选择文件上传<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141705.png\"><br>上传的文件会在聊天框中显示，可以点击文件，打开并预览文件<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142029.png\"><br>若是右击文件，还可以选择将文件下载到本地<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142253.png\"><br>所有聊天时所发送的文件都会保存在存储中，用户可以点击共享目录在存储查看<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142513.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142748.png\"></p>\n<h2 id=\"查询聊天记录\"><a href=\"#查询聊天记录\" class=\"headerlink\" title=\"查询聊天记录\"></a>查询聊天记录</h2><p>同样在聊天的详情下，点击查找聊天记录，在弹窗的搜索框中可以模糊搜索聊天记录<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143039.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143207.png\"></p>\n<h1 id=\"存储模块\"><a href=\"#存储模块\" class=\"headerlink\" title=\"存储模块\"></a>存储模块</h1><h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>点击右上角的存储图标，进入存储页面<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143526.png\"><br>可以在侧边栏中右击目录，点击上传文件，在弹窗中选择上传文件，可以选择点击或拖拽的方式上传文件<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143500.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143906.png\"></p>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p>右击文件，可以对文件进行操作，如：下载，复制，剪切，彻底删除，重命名，查看详细信息，生成二维码等<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731151057.png\"></p>\n<h1 id=\"办事模块\"><a href=\"#办事模块\" class=\"headerlink\" title=\"办事模块\"></a>办事模块</h1><h2 id=\"发起办事\"><a href=\"#发起办事\" class=\"headerlink\" title=\"发起办事\"></a>发起办事</h2><p>在存储页面中点击应用，可以在引用中查看办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152521.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152546.png\"><br>点击办事，填写表单信息即可<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152648.png\"></p>\n<h2 id=\"审核办事\"><a href=\"#审核办事\" class=\"headerlink\" title=\"审核办事\"></a>审核办事</h2><p>在您发起了一则办事之后，会在“我发起的”下显示该办事，并且可以实时查看审批状态<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153132.png\"><br>若您是审批人，再他人发起了一则办事后，会在“待办事项”下显示需要审批的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153018.png\"><br>点击办事之后，会打开办事的审批页面，显示办事的详细信息，可以点击通过或驳回<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153759.png\"><br>若您发起的办事审批结束，会在“已办事项”下显示已审批完毕的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153520.png\"></p>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"沟通模块\"><a href=\"#沟通模块\" class=\"headerlink\" title=\"沟通模块\"></a>沟通模块</h1><p>点击右上角的聊天图标，进入沟通页面</p>\n<h2 id=\"群聊\"><a href=\"#群聊\" class=\"headerlink\" title=\"群聊\"></a>群聊</h2><p>用户可以在侧边栏中选择群聊，或者在列表中选择群聊，另外单位也可以作为群聊，属于全员群<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135535.png\"><br>在单位和个人下存在着超级管理权群，单位下有着超级管理权的人员都会加入到该群。因为个人对自己有着最高的权限，个人页面下也会显示超级管理权群，且只有自己一人<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140654.png\"><br>点击群聊图标，进入聊天页面之后即可开始聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731135745.png\"></p>\n<h2 id=\"单聊\"><a href=\"#单聊\" class=\"headerlink\" title=\"单聊\"></a>单聊</h2><p>同样在沟通页面下，点击个人的头像，则可显示好友以及个人，可以与好友或或者自己聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731140815.png\"><br>在加入的组织下，可以查看和您处于同一组织的人员，并选择与同一组织的人员聊天<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141144.png\"></p>\n<h2 id=\"文件传输和存储\"><a href=\"#文件传输和存储\" class=\"headerlink\" title=\"文件传输和存储\"></a>文件传输和存储</h2><p>在聊天输入框的上方，点击文件图标即可选择文件上传<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731141705.png\"><br>上传的文件会在聊天框中显示，可以点击文件，打开并预览文件<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142029.png\"><br>若是右击文件，还可以选择将文件下载到本地<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142253.png\"><br>所有聊天时所发送的文件都会保存在存储中，用户可以点击共享目录在存储查看<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142513.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731142748.png\"></p>\n<h2 id=\"查询聊天记录\"><a href=\"#查询聊天记录\" class=\"headerlink\" title=\"查询聊天记录\"></a>查询聊天记录</h2><p>同样在聊天的详情下，点击查找聊天记录，在弹窗的搜索框中可以模糊搜索聊天记录<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143039.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143207.png\"></p>\n<h1 id=\"存储模块\"><a href=\"#存储模块\" class=\"headerlink\" title=\"存储模块\"></a>存储模块</h1><h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>点击右上角的存储图标，进入存储页面<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143526.png\"><br>可以在侧边栏中右击目录，点击上传文件，在弹窗中选择上传文件，可以选择点击或拖拽的方式上传文件<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143500.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731143906.png\"></p>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p>右击文件，可以对文件进行操作，如：下载，复制，剪切，彻底删除，重命名，查看详细信息，生成二维码等<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731151057.png\"></p>\n<h1 id=\"办事模块\"><a href=\"#办事模块\" class=\"headerlink\" title=\"办事模块\"></a>办事模块</h1><h2 id=\"发起办事\"><a href=\"#发起办事\" class=\"headerlink\" title=\"发起办事\"></a>发起办事</h2><p>在存储页面中点击应用，可以在引用中查看办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152521.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152546.png\"><br>点击办事，填写表单信息即可<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731152648.png\"></p>\n<h2 id=\"审核办事\"><a href=\"#审核办事\" class=\"headerlink\" title=\"审核办事\"></a>审核办事</h2><p>在您发起了一则办事之后，会在“我发起的”下显示该办事，并且可以实时查看审批状态<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153132.png\"><br>若您是审批人，再他人发起了一则办事后，会在“待办事项”下显示需要审批的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153018.png\"><br>点击办事之后，会打开办事的审批页面，显示办事的详细信息，可以点击通过或驳回<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153759.png\"><br>若您发起的办事审批结束，会在“已办事项”下显示已审批完毕的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230731153520.png\"></p>\n"},{"title":"orginone功能开发——应用开发手册","date":"2023-08-07T13:21:00.000Z","updated":"2023-09-14T08:23:36.026Z","keywords":null,"description":null,"_content":"\n\n本教程将引导你逐步实现一个简单的大型仪器预约应用，实现新增大型仪器以及对仪器进行预约申请。在此过程中你会学习到基于 orginone 平台进行应用开发的基本过程，同时又助于让你对 orginone 平台有更深入的理解。\n\n# 设置属性\n\n所谓 `属性` 是指表单中各个字段的标签，用于标识表单中每个字段的类型和名称。一个 `属性` 可以添加到多个表单中，为表单添加一项字段，而表单中的字段被称为 `特性`，若将 `属性` 比作父母，则 `特性` 就好比孩子。\n\n在该应用中我们需要两个表单，分别是 `仪器列表` 和 `预约申请`，接下来我们为这两个表单创建属性。\n\n为了方便创建应用，我们先在个人页面中创建一个单位，命名为 `功能示范`，在该单位下创建目录 `大型仪器共享`，在该目录下创建目录 `属性`，用来存放该应用下的所有属性。\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194453.png)\n\n右键目录空白处，依次点击 `新建更多>新建属性`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194540.png)\n\n在弹出的表单中填写我们的第一个属性：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808140934.png)\n\n创建好了仪器的名称属性后，我们再一一创建单位、分类、价值属性，单位和分类我们选择 `描述型`，价值我们选择 `数值型`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808141728.png)\n\n设置好 `仪器列表` 的属性后，我们设置 `预约申请` 的属性。`预约申请` 的属性只需开始时间和结束时间，添加开始时间和结束时间即可，这两个属性的类型都设置为 `时间型`。\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808195446.png)\n\n# 设置分类\n\n如果一些属性其值是固定的几个之一，我们可以建立 `分类`，来限定属性值，方便录入和统计，当然这一步不是必要的，不设立分类也可以实现本功能如果没有这方面的需求可以跳过。在要建立分类的属性的同级目录下，创建分类。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223540.png)\n\n之后点击分类，录入分类项目：医疗仪器、工业仪器、办公设备。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223620.png)\n\n设置好分类之后，回到目录右击仪器分类，点击更新信息。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224007.png)\n\n将属性类型改为 `分类型`，在选择分类中选择刚刚创建好分类。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224136.png)\n\n# 创建实体表单\n`实体表单` 对应着的是实际存在的事物，而与之相对的 `事项表单` 是抽象的事物，例如在该应用中大型仪器应当使用实体表单，而预约申请则应当使用事项表单。\n\n我们在 `大型仪器共享` 目录下再创建一个目录 `实体表单`，在该目录下右击空白处创建实体表单。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224744.png)\n\n在表单的配置面板点击 `新增特性`，依次点击对应的目录，找到要新增的特性，这里我们选择：仪器名称、单位、仪器分类、仪器价值。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225148.png)\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225254.png)\n\n\n# 创建事项表单\n\n与实体表单类似，我们同样在先创建一个事项目录，在目录下新建事项表单，并将 开始时间以及结束时间作为表单特性。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135509.png)\n\n#  创建办事\n\n办事只能存在于应用下，我们先在空白处右击，点击 `新建更多>新建应用`，命名为大型仪器共享\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110655.png)\n\n双击应用后进入应用，再右击空白处，新建办事。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110806.png)\n\n将办事命名为 `仪器预约`，其余配置如下图所示：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815133907.png)\n\n双击办事，进入办事设计页面，在起始节点处关联子表，将 `预约申请` 以及 `大型仪器` 表单设置为子表：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134046.png)\n\n在点击起始节点下方的加号，添加审批节点，在审批节点处添加审批对象管理员。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134206.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134218.png)\n\n# 发起办事\n\n自此，一个简单的应用示例就完成了，接下来我们来发起办事。先切换到 `储存` 页面下，进入到应用，找到 `仪器预约` 办事。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134439.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134746.png)\n\n再双击打开办事，点击 `大型仪器` 表单的 `新增` 按钮，并填写仪器数据。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134911.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135110.png)\n\n填写完毕后，点击 `预约申请` ，切换到 `预约申请` 子表，填写预约的开始时间和结束时间。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135908.png)\n\n点击提交后，办事流程会进入 `审批节点`，在管理员审批过后，数据才会存档，这一办事流程才会结束。\n管理员切换到办事页面，会在看到一项待审批的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140119.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140212.png)\n\n可以在此处查看办事发起人提交的信息，审核无误后，点击通过。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140234.png)\n\n之后在存储页面下，双击大型仪器表单，可以查看录入的仪器数据\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814231140.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140921.png)\n\n预约申请事项表单只有两个字段，要想查看对应的仪器数据，应点击相应的记录查看归档痕迹，可以查看提交办事时一并提交的大型仪器子表。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815141110.png)\n# 通过导入标准快速配置\n\n以上的教程中，从创建属性到创建表单的流程略显繁琐，在表单数量众多，属性复杂庞大的情况下会让工作量异常巨大，可以借助 `导入标准` 功能简化工作流程。\n\n在 `设置` 页面下，左键单位右侧的三个点，或是右击目录的空白处，再依次点击 `新建更多>导入标准`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814122702.png)\n\n点击 `导入模板下载`：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123057.png)\n\n打开下载下来的模板 xlsx 文件，该模板文件有 8 张表，可以批量导入目录、字典、分类、属性和表单信息，下面我们拿属性定义为例\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123355.png)\n\n例如，我们录入之前创建的属性信息：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814124350.png)\n>目录代码是新创建的属性所属的目录，目录代码可右击目录点击 `详细信息` 获得。\n\n之后再右击目录空白处，依次点击 `新建更多>导入标准` 选择文件上传，上传之后确认录入的信息即可：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814201621.png)\n\n","source":"_posts/orginone实习经历/orginone功能开发——应用开发手册.md","raw":"---\ntitle: orginone功能开发——应用开发手册\ndate: 2023-08-07 21:21\nupdated: 星期二 15日 八月 2023 14:17:54\ntags: []\ncategories: [orginone实习经历]\nkeywords:\ndescription: \n---\n\n\n本教程将引导你逐步实现一个简单的大型仪器预约应用，实现新增大型仪器以及对仪器进行预约申请。在此过程中你会学习到基于 orginone 平台进行应用开发的基本过程，同时又助于让你对 orginone 平台有更深入的理解。\n\n# 设置属性\n\n所谓 `属性` 是指表单中各个字段的标签，用于标识表单中每个字段的类型和名称。一个 `属性` 可以添加到多个表单中，为表单添加一项字段，而表单中的字段被称为 `特性`，若将 `属性` 比作父母，则 `特性` 就好比孩子。\n\n在该应用中我们需要两个表单，分别是 `仪器列表` 和 `预约申请`，接下来我们为这两个表单创建属性。\n\n为了方便创建应用，我们先在个人页面中创建一个单位，命名为 `功能示范`，在该单位下创建目录 `大型仪器共享`，在该目录下创建目录 `属性`，用来存放该应用下的所有属性。\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194453.png)\n\n右键目录空白处，依次点击 `新建更多>新建属性`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194540.png)\n\n在弹出的表单中填写我们的第一个属性：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808140934.png)\n\n创建好了仪器的名称属性后，我们再一一创建单位、分类、价值属性，单位和分类我们选择 `描述型`，价值我们选择 `数值型`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808141728.png)\n\n设置好 `仪器列表` 的属性后，我们设置 `预约申请` 的属性。`预约申请` 的属性只需开始时间和结束时间，添加开始时间和结束时间即可，这两个属性的类型都设置为 `时间型`。\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808195446.png)\n\n# 设置分类\n\n如果一些属性其值是固定的几个之一，我们可以建立 `分类`，来限定属性值，方便录入和统计，当然这一步不是必要的，不设立分类也可以实现本功能如果没有这方面的需求可以跳过。在要建立分类的属性的同级目录下，创建分类。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223540.png)\n\n之后点击分类，录入分类项目：医疗仪器、工业仪器、办公设备。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223620.png)\n\n设置好分类之后，回到目录右击仪器分类，点击更新信息。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224007.png)\n\n将属性类型改为 `分类型`，在选择分类中选择刚刚创建好分类。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224136.png)\n\n# 创建实体表单\n`实体表单` 对应着的是实际存在的事物，而与之相对的 `事项表单` 是抽象的事物，例如在该应用中大型仪器应当使用实体表单，而预约申请则应当使用事项表单。\n\n我们在 `大型仪器共享` 目录下再创建一个目录 `实体表单`，在该目录下右击空白处创建实体表单。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224744.png)\n\n在表单的配置面板点击 `新增特性`，依次点击对应的目录，找到要新增的特性，这里我们选择：仪器名称、单位、仪器分类、仪器价值。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225148.png)\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225254.png)\n\n\n# 创建事项表单\n\n与实体表单类似，我们同样在先创建一个事项目录，在目录下新建事项表单，并将 开始时间以及结束时间作为表单特性。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135509.png)\n\n#  创建办事\n\n办事只能存在于应用下，我们先在空白处右击，点击 `新建更多>新建应用`，命名为大型仪器共享\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110655.png)\n\n双击应用后进入应用，再右击空白处，新建办事。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110806.png)\n\n将办事命名为 `仪器预约`，其余配置如下图所示：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815133907.png)\n\n双击办事，进入办事设计页面，在起始节点处关联子表，将 `预约申请` 以及 `大型仪器` 表单设置为子表：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134046.png)\n\n在点击起始节点下方的加号，添加审批节点，在审批节点处添加审批对象管理员。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134206.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134218.png)\n\n# 发起办事\n\n自此，一个简单的应用示例就完成了，接下来我们来发起办事。先切换到 `储存` 页面下，进入到应用，找到 `仪器预约` 办事。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134439.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134746.png)\n\n再双击打开办事，点击 `大型仪器` 表单的 `新增` 按钮，并填写仪器数据。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134911.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135110.png)\n\n填写完毕后，点击 `预约申请` ，切换到 `预约申请` 子表，填写预约的开始时间和结束时间。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135908.png)\n\n点击提交后，办事流程会进入 `审批节点`，在管理员审批过后，数据才会存档，这一办事流程才会结束。\n管理员切换到办事页面，会在看到一项待审批的办事\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140119.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140212.png)\n\n可以在此处查看办事发起人提交的信息，审核无误后，点击通过。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140234.png)\n\n之后在存储页面下，双击大型仪器表单，可以查看录入的仪器数据\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814231140.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140921.png)\n\n预约申请事项表单只有两个字段，要想查看对应的仪器数据，应点击相应的记录查看归档痕迹，可以查看提交办事时一并提交的大型仪器子表。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815141110.png)\n# 通过导入标准快速配置\n\n以上的教程中，从创建属性到创建表单的流程略显繁琐，在表单数量众多，属性复杂庞大的情况下会让工作量异常巨大，可以借助 `导入标准` 功能简化工作流程。\n\n在 `设置` 页面下，左键单位右侧的三个点，或是右击目录的空白处，再依次点击 `新建更多>导入标准`。\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814122702.png)\n\n点击 `导入模板下载`：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123057.png)\n\n打开下载下来的模板 xlsx 文件，该模板文件有 8 张表，可以批量导入目录、字典、分类、属性和表单信息，下面我们拿属性定义为例\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123355.png)\n\n例如，我们录入之前创建的属性信息：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814124350.png)\n>目录代码是新创建的属性所属的目录，目录代码可右击目录点击 `详细信息` 获得。\n\n之后再右击目录空白处，依次点击 `新建更多>导入标准` 选择文件上传，上传之后确认录入的信息即可：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814201621.png)\n\n","slug":"orginone实习经历/orginone功能开发——应用开发手册","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7d0006i4v17jir9hck","content":"<p>本教程将引导你逐步实现一个简单的大型仪器预约应用，实现新增大型仪器以及对仪器进行预约申请。在此过程中你会学习到基于 orginone 平台进行应用开发的基本过程，同时又助于让你对 orginone 平台有更深入的理解。</p>\n<h1 id=\"设置属性\"><a href=\"#设置属性\" class=\"headerlink\" title=\"设置属性\"></a>设置属性</h1><p>所谓 <code>属性</code> 是指表单中各个字段的标签，用于标识表单中每个字段的类型和名称。一个 <code>属性</code> 可以添加到多个表单中，为表单添加一项字段，而表单中的字段被称为 <code>特性</code>，若将 <code>属性</code> 比作父母，则 <code>特性</code> 就好比孩子。</p>\n<p>在该应用中我们需要两个表单，分别是 <code>仪器列表</code> 和 <code>预约申请</code>，接下来我们为这两个表单创建属性。</p>\n<p>为了方便创建应用，我们先在个人页面中创建一个单位，命名为 <code>功能示范</code>，在该单位下创建目录 <code>大型仪器共享</code>，在该目录下创建目录 <code>属性</code>，用来存放该应用下的所有属性。</p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194453.png\"></p>\n<p>右键目录空白处，依次点击 <code>新建更多&gt;新建属性</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194540.png\"></p>\n<p>在弹出的表单中填写我们的第一个属性：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808140934.png\"></p>\n<p>创建好了仪器的名称属性后，我们再一一创建单位、分类、价值属性，单位和分类我们选择 <code>描述型</code>，价值我们选择 <code>数值型</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808141728.png\"></p>\n<p>设置好 <code>仪器列表</code> 的属性后，我们设置 <code>预约申请</code> 的属性。<code>预约申请</code> 的属性只需开始时间和结束时间，添加开始时间和结束时间即可，这两个属性的类型都设置为 <code>时间型</code>。</p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808195446.png\"></p>\n<h1 id=\"设置分类\"><a href=\"#设置分类\" class=\"headerlink\" title=\"设置分类\"></a>设置分类</h1><p>如果一些属性其值是固定的几个之一，我们可以建立 <code>分类</code>，来限定属性值，方便录入和统计，当然这一步不是必要的，不设立分类也可以实现本功能如果没有这方面的需求可以跳过。在要建立分类的属性的同级目录下，创建分类。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223540.png\"></p>\n<p>之后点击分类，录入分类项目：医疗仪器、工业仪器、办公设备。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223620.png\"></p>\n<p>设置好分类之后，回到目录右击仪器分类，点击更新信息。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224007.png\"></p>\n<p>将属性类型改为 <code>分类型</code>，在选择分类中选择刚刚创建好分类。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224136.png\"></p>\n<h1 id=\"创建实体表单\"><a href=\"#创建实体表单\" class=\"headerlink\" title=\"创建实体表单\"></a>创建实体表单</h1><p><code>实体表单</code> 对应着的是实际存在的事物，而与之相对的 <code>事项表单</code> 是抽象的事物，例如在该应用中大型仪器应当使用实体表单，而预约申请则应当使用事项表单。</p>\n<p>我们在 <code>大型仪器共享</code> 目录下再创建一个目录 <code>实体表单</code>，在该目录下右击空白处创建实体表单。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224744.png\"></p>\n<p>在表单的配置面板点击 <code>新增特性</code>，依次点击对应的目录，找到要新增的特性，这里我们选择：仪器名称、单位、仪器分类、仪器价值。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225148.png\"></p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225254.png\"></p>\n<h1 id=\"创建事项表单\"><a href=\"#创建事项表单\" class=\"headerlink\" title=\"创建事项表单\"></a>创建事项表单</h1><p>与实体表单类似，我们同样在先创建一个事项目录，在目录下新建事项表单，并将 开始时间以及结束时间作为表单特性。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135509.png\"></p>\n<h1 id=\"创建办事\"><a href=\"#创建办事\" class=\"headerlink\" title=\"创建办事\"></a>创建办事</h1><p>办事只能存在于应用下，我们先在空白处右击，点击 <code>新建更多&gt;新建应用</code>，命名为大型仪器共享<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110655.png\"></p>\n<p>双击应用后进入应用，再右击空白处，新建办事。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110806.png\"></p>\n<p>将办事命名为 <code>仪器预约</code>，其余配置如下图所示：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815133907.png\"></p>\n<p>双击办事，进入办事设计页面，在起始节点处关联子表，将 <code>预约申请</code> 以及 <code>大型仪器</code> 表单设置为子表：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134046.png\"></p>\n<p>在点击起始节点下方的加号，添加审批节点，在审批节点处添加审批对象管理员。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134206.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134218.png\"></p>\n<h1 id=\"发起办事\"><a href=\"#发起办事\" class=\"headerlink\" title=\"发起办事\"></a>发起办事</h1><p>自此，一个简单的应用示例就完成了，接下来我们来发起办事。先切换到 <code>储存</code> 页面下，进入到应用，找到 <code>仪器预约</code> 办事。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134439.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134746.png\"></p>\n<p>再双击打开办事，点击 <code>大型仪器</code> 表单的 <code>新增</code> 按钮，并填写仪器数据。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134911.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135110.png\"></p>\n<p>填写完毕后，点击 <code>预约申请</code> ，切换到 <code>预约申请</code> 子表，填写预约的开始时间和结束时间。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135908.png\"></p>\n<p>点击提交后，办事流程会进入 <code>审批节点</code>，在管理员审批过后，数据才会存档，这一办事流程才会结束。<br>管理员切换到办事页面，会在看到一项待审批的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140119.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140212.png\"></p>\n<p>可以在此处查看办事发起人提交的信息，审核无误后，点击通过。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140234.png\"></p>\n<p>之后在存储页面下，双击大型仪器表单，可以查看录入的仪器数据<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814231140.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140921.png\"></p>\n<p>预约申请事项表单只有两个字段，要想查看对应的仪器数据，应点击相应的记录查看归档痕迹，可以查看提交办事时一并提交的大型仪器子表。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815141110.png\"></p>\n<h1 id=\"通过导入标准快速配置\"><a href=\"#通过导入标准快速配置\" class=\"headerlink\" title=\"通过导入标准快速配置\"></a>通过导入标准快速配置</h1><p>以上的教程中，从创建属性到创建表单的流程略显繁琐，在表单数量众多，属性复杂庞大的情况下会让工作量异常巨大，可以借助 <code>导入标准</code> 功能简化工作流程。</p>\n<p>在 <code>设置</code> 页面下，左键单位右侧的三个点，或是右击目录的空白处，再依次点击 <code>新建更多&gt;导入标准</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814122702.png\"></p>\n<p>点击 <code>导入模板下载</code>：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123057.png\"></p>\n<p>打开下载下来的模板 xlsx 文件，该模板文件有 8 张表，可以批量导入目录、字典、分类、属性和表单信息，下面我们拿属性定义为例<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123355.png\"></p>\n<p>例如，我们录入之前创建的属性信息：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814124350.png\"></p>\n<blockquote>\n<p>目录代码是新创建的属性所属的目录，目录代码可右击目录点击 <code>详细信息</code> 获得。</p>\n</blockquote>\n<p>之后再右击目录空白处，依次点击 <code>新建更多&gt;导入标准</code> 选择文件上传，上传之后确认录入的信息即可：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814201621.png\"></p>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<p>本教程将引导你逐步实现一个简单的大型仪器预约应用，实现新增大型仪器以及对仪器进行预约申请。在此过程中你会学习到基于 orginone 平台进行应用开发的基本过程，同时又助于让你对 orginone 平台有更深入的理解。</p>\n<h1 id=\"设置属性\"><a href=\"#设置属性\" class=\"headerlink\" title=\"设置属性\"></a>设置属性</h1><p>所谓 <code>属性</code> 是指表单中各个字段的标签，用于标识表单中每个字段的类型和名称。一个 <code>属性</code> 可以添加到多个表单中，为表单添加一项字段，而表单中的字段被称为 <code>特性</code>，若将 <code>属性</code> 比作父母，则 <code>特性</code> 就好比孩子。</p>\n<p>在该应用中我们需要两个表单，分别是 <code>仪器列表</code> 和 <code>预约申请</code>，接下来我们为这两个表单创建属性。</p>\n<p>为了方便创建应用，我们先在个人页面中创建一个单位，命名为 <code>功能示范</code>，在该单位下创建目录 <code>大型仪器共享</code>，在该目录下创建目录 <code>属性</code>，用来存放该应用下的所有属性。</p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194453.png\"></p>\n<p>右键目录空白处，依次点击 <code>新建更多&gt;新建属性</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808194540.png\"></p>\n<p>在弹出的表单中填写我们的第一个属性：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808140934.png\"></p>\n<p>创建好了仪器的名称属性后，我们再一一创建单位、分类、价值属性，单位和分类我们选择 <code>描述型</code>，价值我们选择 <code>数值型</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808141728.png\"></p>\n<p>设置好 <code>仪器列表</code> 的属性后，我们设置 <code>预约申请</code> 的属性。<code>预约申请</code> 的属性只需开始时间和结束时间，添加开始时间和结束时间即可，这两个属性的类型都设置为 <code>时间型</code>。</p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230808195446.png\"></p>\n<h1 id=\"设置分类\"><a href=\"#设置分类\" class=\"headerlink\" title=\"设置分类\"></a>设置分类</h1><p>如果一些属性其值是固定的几个之一，我们可以建立 <code>分类</code>，来限定属性值，方便录入和统计，当然这一步不是必要的，不设立分类也可以实现本功能如果没有这方面的需求可以跳过。在要建立分类的属性的同级目录下，创建分类。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223540.png\"></p>\n<p>之后点击分类，录入分类项目：医疗仪器、工业仪器、办公设备。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814223620.png\"></p>\n<p>设置好分类之后，回到目录右击仪器分类，点击更新信息。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224007.png\"></p>\n<p>将属性类型改为 <code>分类型</code>，在选择分类中选择刚刚创建好分类。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224136.png\"></p>\n<h1 id=\"创建实体表单\"><a href=\"#创建实体表单\" class=\"headerlink\" title=\"创建实体表单\"></a>创建实体表单</h1><p><code>实体表单</code> 对应着的是实际存在的事物，而与之相对的 <code>事项表单</code> 是抽象的事物，例如在该应用中大型仪器应当使用实体表单，而预约申请则应当使用事项表单。</p>\n<p>我们在 <code>大型仪器共享</code> 目录下再创建一个目录 <code>实体表单</code>，在该目录下右击空白处创建实体表单。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814224744.png\"></p>\n<p>在表单的配置面板点击 <code>新增特性</code>，依次点击对应的目录，找到要新增的特性，这里我们选择：仪器名称、单位、仪器分类、仪器价值。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225148.png\"></p>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814225254.png\"></p>\n<h1 id=\"创建事项表单\"><a href=\"#创建事项表单\" class=\"headerlink\" title=\"创建事项表单\"></a>创建事项表单</h1><p>与实体表单类似，我们同样在先创建一个事项目录，在目录下新建事项表单，并将 开始时间以及结束时间作为表单特性。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135509.png\"></p>\n<h1 id=\"创建办事\"><a href=\"#创建办事\" class=\"headerlink\" title=\"创建办事\"></a>创建办事</h1><p>办事只能存在于应用下，我们先在空白处右击，点击 <code>新建更多&gt;新建应用</code>，命名为大型仪器共享<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110655.png\"></p>\n<p>双击应用后进入应用，再右击空白处，新建办事。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815110806.png\"></p>\n<p>将办事命名为 <code>仪器预约</code>，其余配置如下图所示：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815133907.png\"></p>\n<p>双击办事，进入办事设计页面，在起始节点处关联子表，将 <code>预约申请</code> 以及 <code>大型仪器</code> 表单设置为子表：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134046.png\"></p>\n<p>在点击起始节点下方的加号，添加审批节点，在审批节点处添加审批对象管理员。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134206.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134218.png\"></p>\n<h1 id=\"发起办事\"><a href=\"#发起办事\" class=\"headerlink\" title=\"发起办事\"></a>发起办事</h1><p>自此，一个简单的应用示例就完成了，接下来我们来发起办事。先切换到 <code>储存</code> 页面下，进入到应用，找到 <code>仪器预约</code> 办事。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134439.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134746.png\"></p>\n<p>再双击打开办事，点击 <code>大型仪器</code> 表单的 <code>新增</code> 按钮，并填写仪器数据。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815134911.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135110.png\"></p>\n<p>填写完毕后，点击 <code>预约申请</code> ，切换到 <code>预约申请</code> 子表，填写预约的开始时间和结束时间。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815135908.png\"></p>\n<p>点击提交后，办事流程会进入 <code>审批节点</code>，在管理员审批过后，数据才会存档，这一办事流程才会结束。<br>管理员切换到办事页面，会在看到一项待审批的办事<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140119.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140212.png\"></p>\n<p>可以在此处查看办事发起人提交的信息，审核无误后，点击通过。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140234.png\"></p>\n<p>之后在存储页面下，双击大型仪器表单，可以查看录入的仪器数据<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814231140.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815140921.png\"></p>\n<p>预约申请事项表单只有两个字段，要想查看对应的仪器数据，应点击相应的记录查看归档痕迹，可以查看提交办事时一并提交的大型仪器子表。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230815141110.png\"></p>\n<h1 id=\"通过导入标准快速配置\"><a href=\"#通过导入标准快速配置\" class=\"headerlink\" title=\"通过导入标准快速配置\"></a>通过导入标准快速配置</h1><p>以上的教程中，从创建属性到创建表单的流程略显繁琐，在表单数量众多，属性复杂庞大的情况下会让工作量异常巨大，可以借助 <code>导入标准</code> 功能简化工作流程。</p>\n<p>在 <code>设置</code> 页面下，左键单位右侧的三个点，或是右击目录的空白处，再依次点击 <code>新建更多&gt;导入标准</code>。<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814122702.png\"></p>\n<p>点击 <code>导入模板下载</code>：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123057.png\"></p>\n<p>打开下载下来的模板 xlsx 文件，该模板文件有 8 张表，可以批量导入目录、字典、分类、属性和表单信息，下面我们拿属性定义为例<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814123355.png\"></p>\n<p>例如，我们录入之前创建的属性信息：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814124350.png\"></p>\n<blockquote>\n<p>目录代码是新创建的属性所属的目录，目录代码可右击目录点击 <code>详细信息</code> 获得。</p>\n</blockquote>\n<p>之后再右击目录空白处，依次点击 <code>新建更多&gt;导入标准</code> 选择文件上传，上传之后确认录入的信息即可：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230814201621.png\"></p>\n"},{"title":"orginone平台解析——SignalR通信","date":"2023-07-04T08:21:00.000Z","updated":"2023-09-08T03:55:33.170Z","keywords":null,"description":null,"_content":"\n\n\n\n# Storehub\n> 关于 SignalR.HubConnection 的官方文档（不过官方貌似没有中文版的）： https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest\n> 对 SignIR 还不是很熟悉，和传统的 axios 请求不太一样，之后再继续学习这一块\n\nStorehub 功能是用来和服务器建立 SignIR 连接的\n1. constructor 构造方法：构造函数，用于建立与 SignalR 服务器的连接。主要是初始化了私有对象_connection，这是用来和 SignalR 服务器的连接的对象，后面的 invoke 就是通过这一方式和服务器连接的\n2. isConnected：检查是否连接\n3. dispose：销毁连接\n4. \\_starting：初次开始连接\n5. start：启动连接，如果没有启动，则调用_starting\n6. restart：重新建立连接，先停止连接，之后调用start\n7. onConnected：连接成功的回调函数，传入一个返回 `void` 的函数，用来在_starting 中执行\n8. onDisconnected：断开连接的回调，和成功连接的回调类似，在销毁连接时执行\n9. on：\n\t1. 接收两个参数一个是字符串（方法名），第二个是函数\n\t2. 这也是一个回调函数，官网上的解释是说注册一个处理程序，当调用具有指定方法名称的集线器方法时将调用该处理程序。我的理解是客户端去监听服务器，当服务器执行了第一个参数指定的方法时，就去执行后面的函数\n\t3. 例如：\n当服务器执行了 updated 方法后，会将结果传入第二个参数所定义的函数，从而做到服务器去调用客户端的方法\n```ts\nthis._storeHub.on('updated', (belongId, key, data) => {  \n  this._updated(belongId, key, data);  \n});\n```\n10. invoke：这是用来调用服务器的方法\n\t1. 接收的参数分为两个部分，第一个是调用的服务器端的方法，第二个是传入的参数\n\t2. 例如：在 kernelapi 中的登录方法：\n```\nres = await this._storeHub.invoke('Login', req);\n```\n我在 invoke 中打印了请求的方法和对应的请求结果：\n```ts\nthis._connection  \n  .invoke(methodName, ...args)  \n  .then((res: ResultType<any>) => {  \n    console.log(res); //打印请求结果 \n    console.log(methodName);  //打印请求方法\n\t//其他的代码省略\n  })\n```\n![](static/62adada267390657a16b2233edd71c7.png)\n# anyStore\nanyStore 功能主要是用来管理服务器的数据的，比如存储的文件，使用的连接方法是调用上面的 Storehub 对象\n1. \\_restRequest:使用 axios 请求后端，在 anyStore 的每一个方法下都会先判断一次，如果 StoreHub 没有连接上才会用 axios 请求，以下是 anyStore 涉及到的方法\n2. 对物的操作：创建、加载。物是平台中抽象的一个概念，把平台中所有的对象都抽象成物\n3. 对文件的操作：上传、查看\n4. 对 token 的操作：更新 token 到缓存中、获取 token\n5. 对对象的操作：查询、修改、删除\n","source":"_posts/orginone实习经历/orginone平台解析——SignalR通信.md","raw":"---\ntitle: orginone平台解析——SignalR通信\ndate: 2023-07-04 16:21\nupdated: 星期一 17日 七月 2023 09:31:37\ntags: []\ncategories: [orginone实习经历]\nkeywords:\ndescription: \n---\n\n\n\n\n# Storehub\n> 关于 SignalR.HubConnection 的官方文档（不过官方貌似没有中文版的）： https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest\n> 对 SignIR 还不是很熟悉，和传统的 axios 请求不太一样，之后再继续学习这一块\n\nStorehub 功能是用来和服务器建立 SignIR 连接的\n1. constructor 构造方法：构造函数，用于建立与 SignalR 服务器的连接。主要是初始化了私有对象_connection，这是用来和 SignalR 服务器的连接的对象，后面的 invoke 就是通过这一方式和服务器连接的\n2. isConnected：检查是否连接\n3. dispose：销毁连接\n4. \\_starting：初次开始连接\n5. start：启动连接，如果没有启动，则调用_starting\n6. restart：重新建立连接，先停止连接，之后调用start\n7. onConnected：连接成功的回调函数，传入一个返回 `void` 的函数，用来在_starting 中执行\n8. onDisconnected：断开连接的回调，和成功连接的回调类似，在销毁连接时执行\n9. on：\n\t1. 接收两个参数一个是字符串（方法名），第二个是函数\n\t2. 这也是一个回调函数，官网上的解释是说注册一个处理程序，当调用具有指定方法名称的集线器方法时将调用该处理程序。我的理解是客户端去监听服务器，当服务器执行了第一个参数指定的方法时，就去执行后面的函数\n\t3. 例如：\n当服务器执行了 updated 方法后，会将结果传入第二个参数所定义的函数，从而做到服务器去调用客户端的方法\n```ts\nthis._storeHub.on('updated', (belongId, key, data) => {  \n  this._updated(belongId, key, data);  \n});\n```\n10. invoke：这是用来调用服务器的方法\n\t1. 接收的参数分为两个部分，第一个是调用的服务器端的方法，第二个是传入的参数\n\t2. 例如：在 kernelapi 中的登录方法：\n```\nres = await this._storeHub.invoke('Login', req);\n```\n我在 invoke 中打印了请求的方法和对应的请求结果：\n```ts\nthis._connection  \n  .invoke(methodName, ...args)  \n  .then((res: ResultType<any>) => {  \n    console.log(res); //打印请求结果 \n    console.log(methodName);  //打印请求方法\n\t//其他的代码省略\n  })\n```\n![](static/62adada267390657a16b2233edd71c7.png)\n# anyStore\nanyStore 功能主要是用来管理服务器的数据的，比如存储的文件，使用的连接方法是调用上面的 Storehub 对象\n1. \\_restRequest:使用 axios 请求后端，在 anyStore 的每一个方法下都会先判断一次，如果 StoreHub 没有连接上才会用 axios 请求，以下是 anyStore 涉及到的方法\n2. 对物的操作：创建、加载。物是平台中抽象的一个概念，把平台中所有的对象都抽象成物\n3. 对文件的操作：上传、查看\n4. 对 token 的操作：更新 token 到缓存中、获取 token\n5. 对对象的操作：查询、修改、删除\n","slug":"orginone实习经历/orginone平台解析——SignalR通信","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7f0008i4v16igm321z","content":"<h1 id=\"Storehub\"><a href=\"#Storehub\" class=\"headerlink\" title=\"Storehub\"></a>Storehub</h1><blockquote>\n<p>关于 SignalR.HubConnection 的官方文档（不过官方貌似没有中文版的）： <a href=\"https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest\">https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest</a><br>对 SignIR 还不是很熟悉，和传统的 axios 请求不太一样，之后再继续学习这一块</p>\n</blockquote>\n<p>Storehub 功能是用来和服务器建立 SignIR 连接的</p>\n<ol>\n<li>constructor 构造方法：构造函数，用于建立与 SignalR 服务器的连接。主要是初始化了私有对象_connection，这是用来和 SignalR 服务器的连接的对象，后面的 invoke 就是通过这一方式和服务器连接的</li>\n<li>isConnected：检查是否连接</li>\n<li>dispose：销毁连接</li>\n<li>_starting：初次开始连接</li>\n<li>start：启动连接，如果没有启动，则调用_starting</li>\n<li>restart：重新建立连接，先停止连接，之后调用start</li>\n<li>onConnected：连接成功的回调函数，传入一个返回 <code>void</code> 的函数，用来在_starting 中执行</li>\n<li>onDisconnected：断开连接的回调，和成功连接的回调类似，在销毁连接时执行</li>\n<li>on：<ol>\n<li>接收两个参数一个是字符串（方法名），第二个是函数</li>\n<li>这也是一个回调函数，官网上的解释是说注册一个处理程序，当调用具有指定方法名称的集线器方法时将调用该处理程序。我的理解是客户端去监听服务器，当服务器执行了第一个参数指定的方法时，就去执行后面的函数</li>\n<li>例如：<br>当服务器执行了 updated 方法后，会将结果传入第二个参数所定义的函数，从而做到服务器去调用客户端的方法<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_storeHub</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;updated&#x27;</span>, <span class=\"function\">(<span class=\"params\">belongId, key, data</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_updated</span>(belongId, key, data);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>invoke：这是用来调用服务器的方法<ol>\n<li>接收的参数分为两个部分，第一个是调用的服务器端的方法，第二个是传入的参数</li>\n<li>例如：在 kernelapi 中的登录方法：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = await this._storeHub.invoke(&#x27;Login&#x27;, req);</span><br></pre></td></tr></table></figure>\n我在 invoke 中打印了请求的方法和对应的请求结果：<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_connection</span>  </span><br><span class=\"line\">  .<span class=\"title function_\">invoke</span>(methodName, ...args)  </span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res: ResultType&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">//打印请求结果 </span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(methodName);  <span class=\"comment\">//打印请求方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//其他的代码省略</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/static/62adada267390657a16b2233edd71c7.png\"></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"anyStore\"><a href=\"#anyStore\" class=\"headerlink\" title=\"anyStore\"></a>anyStore</h1><p>anyStore 功能主要是用来管理服务器的数据的，比如存储的文件，使用的连接方法是调用上面的 Storehub 对象</p>\n<ol>\n<li>_restRequest:使用 axios 请求后端，在 anyStore 的每一个方法下都会先判断一次，如果 StoreHub 没有连接上才会用 axios 请求，以下是 anyStore 涉及到的方法</li>\n<li>对物的操作：创建、加载。物是平台中抽象的一个概念，把平台中所有的对象都抽象成物</li>\n<li>对文件的操作：上传、查看</li>\n<li>对 token 的操作：更新 token 到缓存中、获取 token</li>\n<li>对对象的操作：查询、修改、删除</li>\n</ol>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"Storehub\"><a href=\"#Storehub\" class=\"headerlink\" title=\"Storehub\"></a>Storehub</h1><blockquote>\n<p>关于 SignalR.HubConnection 的官方文档（不过官方貌似没有中文版的）： <a href=\"https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest\">https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest</a><br>对 SignIR 还不是很熟悉，和传统的 axios 请求不太一样，之后再继续学习这一块</p>\n</blockquote>\n<p>Storehub 功能是用来和服务器建立 SignIR 连接的</p>\n<ol>\n<li>constructor 构造方法：构造函数，用于建立与 SignalR 服务器的连接。主要是初始化了私有对象_connection，这是用来和 SignalR 服务器的连接的对象，后面的 invoke 就是通过这一方式和服务器连接的</li>\n<li>isConnected：检查是否连接</li>\n<li>dispose：销毁连接</li>\n<li>_starting：初次开始连接</li>\n<li>start：启动连接，如果没有启动，则调用_starting</li>\n<li>restart：重新建立连接，先停止连接，之后调用start</li>\n<li>onConnected：连接成功的回调函数，传入一个返回 <code>void</code> 的函数，用来在_starting 中执行</li>\n<li>onDisconnected：断开连接的回调，和成功连接的回调类似，在销毁连接时执行</li>\n<li>on：<ol>\n<li>接收两个参数一个是字符串（方法名），第二个是函数</li>\n<li>这也是一个回调函数，官网上的解释是说注册一个处理程序，当调用具有指定方法名称的集线器方法时将调用该处理程序。我的理解是客户端去监听服务器，当服务器执行了第一个参数指定的方法时，就去执行后面的函数</li>\n<li>例如：<br>当服务器执行了 updated 方法后，会将结果传入第二个参数所定义的函数，从而做到服务器去调用客户端的方法<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_storeHub</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;updated&#x27;</span>, <span class=\"function\">(<span class=\"params\">belongId, key, data</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_updated</span>(belongId, key, data);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>invoke：这是用来调用服务器的方法<ol>\n<li>接收的参数分为两个部分，第一个是调用的服务器端的方法，第二个是传入的参数</li>\n<li>例如：在 kernelapi 中的登录方法：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = await this._storeHub.invoke(&#x27;Login&#x27;, req);</span><br></pre></td></tr></table></figure>\n我在 invoke 中打印了请求的方法和对应的请求结果：<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_connection</span>  </span><br><span class=\"line\">  .<span class=\"title function_\">invoke</span>(methodName, ...args)  </span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res: ResultType&lt;<span class=\"built_in\">any</span>&gt;</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res); <span class=\"comment\">//打印请求结果 </span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(methodName);  <span class=\"comment\">//打印请求方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//其他的代码省略</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<img src=\"/static/62adada267390657a16b2233edd71c7.png\"></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"anyStore\"><a href=\"#anyStore\" class=\"headerlink\" title=\"anyStore\"></a>anyStore</h1><p>anyStore 功能主要是用来管理服务器的数据的，比如存储的文件，使用的连接方法是调用上面的 Storehub 对象</p>\n<ol>\n<li>_restRequest:使用 axios 请求后端，在 anyStore 的每一个方法下都会先判断一次，如果 StoreHub 没有连接上才会用 axios 请求，以下是 anyStore 涉及到的方法</li>\n<li>对物的操作：创建、加载。物是平台中抽象的一个概念，把平台中所有的对象都抽象成物</li>\n<li>对文件的操作：上传、查看</li>\n<li>对 token 的操作：更新 token 到缓存中、获取 token</li>\n<li>对对象的操作：查询、修改、删除</li>\n</ol>\n"},{"title":"orginone平台解析——anystore的api","date":"2023-07-23T04:04:00.000Z","updated":"2023-09-08T03:55:38.825Z","keywords":null,"description":null,"_content":"\n\n# AnyStore 类\n## getInstance\n\n获取任意数据存储单例。\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n\n{\n\n    \"methodName\":\"getInstance\",\n\n    \"args\":{\n\n        \"url\": string,//远端地址，默认为\"/orginone/anydata/hub\"\n\n    },\n\n    \"timeout\":2\n\n}\n\n```\n\n\n## isOnline\n  \n判断是否在线。\n\n**请求方式**：Post\n\n\n```json\n\n{\n    \"methodName\":\"isOnline\",\n    \"args\":{\n        //无参数\n    },\n    \"timeout\":2\n}\n\n```\n\n## updateToken\n  \n更新 token。\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"updateToken\",\n    \"args\":{\n        \"accessToken\": string\n    },\n    \"timeout\":2\n}\n```\n\n## subscribed\n\n订阅对象变更。\n  \n**请求方式**：Post\n  \n**参数**：\n\n```json\n{\n    \"methodName\":\"subscribed\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n        \"callback\": (data: any) => void//变更回调函数\n    },\n    \"timeout\":2\n}\n```\n\n## unSubscribed\n\n取消订阅对象变更。\n  \n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"unSubscribed\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n\n## get\n\n查询对象。\n\n**请求地址**：'/orginone/anydata/Object/Get/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"get\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n  \n## set\n\n修改对象。\n\n**请求地址**：'/orginone/anydata/Object/Set/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"set\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n        \"setData\": any,//对象新的值\n    },\n    \"timeout\":2\n}\n```\n\n## delete\n\n删除对象。 \n\n**请求地址**：'/orginone/anydata/Object/Delete/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"delete\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n\n## insert\n\n添加数据到数据集。\n\n**请求地址**：'/orginone/anydata/Collection/Update/'\n\n**请求方式**：Post\n  \n**参数**：\n\n```json\n{\n    \"methodName\":\"insert\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"data\": any,//要添加的数据，对象/数组\n    },\n    \"timeout\":2\n}\n```\n  \n## update\n\n更新数据到数据集。\n\n**请求地址**：'/orginone/anydata/Collection/Update/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"update\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"update\": any,//更新操作（match匹配，update变更,options参数）\n    },\n    \"timeout\":2\n}\n```\n  \n  \n\n## remove\n\n从数据集移除数据。\n\n**请求地址**：'/orginone/anydata/Collection/Remove/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"remove\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"match\": any,//匹配信息\n    },\n    \"timeout\":2\n}\n```\n\n## aggregate\n\n从数据集查询数据。\n\n**请求地址**：'/orginone/anydata/Collection/Aggregate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"aggregate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"options\": any,//聚合管道(例如：{match:{a:1},skip:10,limit:10})\n    },\n    \"timeout\":2\n}\n```\n\n## pageRequest\n\n从数据集查询数据并进行分页。\n\n**请求方式**：Post\n\n**参数**：\n  \n```json\n{\n    \"methodName\":\"pageRequest\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"options\": any,//聚合管道(例如：{match:{a:1},skip:10,limit:10})\n        \"page\": PageModel //分页模型\n    },\n    \"timeout\":2\n}\n\n```\n\n## bucketOpreate\n\n进行桶操作。\n\n**请求地址**：'/orginone/anydata/Bucket/Operate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"bucketOpreate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"data\": BucketOpreateModel,//桶操作模型\n    },\n    \"timeout\":2\n}\n```\n  \n## fileUpdate\n\n文件上传。\n\n**请求地址**：'/orginone/anydata/Bucket/Operate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n\n{\n    \"methodName\":\"fileUpdateOpreate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"file\": Blob,//要上传的文件\n        \"key\": string,//文件的路径\n        \"progress\": ProgressEvent//进度事件\n    },\n    \"timeout\":2\n}\n\n```\n\n## loadThing\n\n加载数据。\n\n**请求地址**：'/orginone/anydata/Thing/Load/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"loadThing\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"options\": any//加载选项\n    },\n    \"timeout\":2\n}\n```\n  \n\n## createThing\n\n创建数据。\n\n**请求地址**：'/orginone/anydata/Thing/Create/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"createThing\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"name\": string//数据名称\n    },\n    \"timeout\":2\n}\n```","source":"_posts/orginone实习经历/orginone平台解析——anystore的api.md","raw":"---\ntitle: orginone平台解析——anystore的api\ndate: 2023-07-23 12:04\nupdated: 星期日 23日 七月 2023 22:53:24\ntags: []\ncategories: [orginone实习经历]\nkeywords:\ndescription: \n---\n\n\n# AnyStore 类\n## getInstance\n\n获取任意数据存储单例。\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n\n{\n\n    \"methodName\":\"getInstance\",\n\n    \"args\":{\n\n        \"url\": string,//远端地址，默认为\"/orginone/anydata/hub\"\n\n    },\n\n    \"timeout\":2\n\n}\n\n```\n\n\n## isOnline\n  \n判断是否在线。\n\n**请求方式**：Post\n\n\n```json\n\n{\n    \"methodName\":\"isOnline\",\n    \"args\":{\n        //无参数\n    },\n    \"timeout\":2\n}\n\n```\n\n## updateToken\n  \n更新 token。\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"updateToken\",\n    \"args\":{\n        \"accessToken\": string\n    },\n    \"timeout\":2\n}\n```\n\n## subscribed\n\n订阅对象变更。\n  \n**请求方式**：Post\n  \n**参数**：\n\n```json\n{\n    \"methodName\":\"subscribed\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n        \"callback\": (data: any) => void//变更回调函数\n    },\n    \"timeout\":2\n}\n```\n\n## unSubscribed\n\n取消订阅对象变更。\n  \n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"unSubscribed\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n\n## get\n\n查询对象。\n\n**请求地址**：'/orginone/anydata/Object/Get/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"get\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n  \n## set\n\n修改对象。\n\n**请求地址**：'/orginone/anydata/Object/Set/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"set\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n        \"setData\": any,//对象新的值\n    },\n    \"timeout\":2\n}\n```\n\n## delete\n\n删除对象。 \n\n**请求地址**：'/orginone/anydata/Object/Delete/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"delete\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"key\": string,//对象名称\n    },\n    \"timeout\":2\n}\n```\n\n## insert\n\n添加数据到数据集。\n\n**请求地址**：'/orginone/anydata/Collection/Update/'\n\n**请求方式**：Post\n  \n**参数**：\n\n```json\n{\n    \"methodName\":\"insert\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"data\": any,//要添加的数据，对象/数组\n    },\n    \"timeout\":2\n}\n```\n  \n## update\n\n更新数据到数据集。\n\n**请求地址**：'/orginone/anydata/Collection/Update/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"update\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"update\": any,//更新操作（match匹配，update变更,options参数）\n    },\n    \"timeout\":2\n}\n```\n  \n  \n\n## remove\n\n从数据集移除数据。\n\n**请求地址**：'/orginone/anydata/Collection/Remove/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"remove\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"match\": any,//匹配信息\n    },\n    \"timeout\":2\n}\n```\n\n## aggregate\n\n从数据集查询数据。\n\n**请求地址**：'/orginone/anydata/Collection/Aggregate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"aggregate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"options\": any,//聚合管道(例如：{match:{a:1},skip:10,limit:10})\n    },\n    \"timeout\":2\n}\n```\n\n## pageRequest\n\n从数据集查询数据并进行分页。\n\n**请求方式**：Post\n\n**参数**：\n  \n```json\n{\n    \"methodName\":\"pageRequest\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"collName\": string,//数据集名称\n        \"options\": any,//聚合管道(例如：{match:{a:1},skip:10,limit:10})\n        \"page\": PageModel //分页模型\n    },\n    \"timeout\":2\n}\n\n```\n\n## bucketOpreate\n\n进行桶操作。\n\n**请求地址**：'/orginone/anydata/Bucket/Operate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"bucketOpreate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"data\": BucketOpreateModel,//桶操作模型\n    },\n    \"timeout\":2\n}\n```\n  \n## fileUpdate\n\n文件上传。\n\n**请求地址**：'/orginone/anydata/Bucket/Operate/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n\n{\n    \"methodName\":\"fileUpdateOpreate\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"file\": Blob,//要上传的文件\n        \"key\": string,//文件的路径\n        \"progress\": ProgressEvent//进度事件\n    },\n    \"timeout\":2\n}\n\n```\n\n## loadThing\n\n加载数据。\n\n**请求地址**：'/orginone/anydata/Thing/Load/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"loadThing\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"options\": any//加载选项\n    },\n    \"timeout\":2\n}\n```\n  \n\n## createThing\n\n创建数据。\n\n**请求地址**：'/orginone/anydata/Thing/Create/'\n\n**请求方式**：Post\n\n**参数**：\n\n```json\n{\n    \"methodName\":\"createThing\",\n    \"args\":{\n        \"belongId\": string,//对象所在域\n        \"name\": string//数据名称\n    },\n    \"timeout\":2\n}\n```","slug":"orginone实习经历/orginone平台解析——anystore的api","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7g0009i4v1d2zshwvv","content":"<h1 id=\"AnyStore-类\"><a href=\"#AnyStore-类\" class=\"headerlink\" title=\"AnyStore 类\"></a>AnyStore 类</h1><h2 id=\"getInstance\"><a href=\"#getInstance\" class=\"headerlink\" title=\"getInstance\"></a>getInstance</h2><p>获取任意数据存储单例。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;getInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//远端地址，默认为&quot;/orginone/anydata/hub&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"isOnline\"><a href=\"#isOnline\" class=\"headerlink\" title=\"isOnline\"></a>isOnline</h2><p>判断是否在线。</p>\n<p><strong>请求方式</strong>：Post</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;isOnline&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//无参数</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"updateToken\"><a href=\"#updateToken\" class=\"headerlink\" title=\"updateToken\"></a>updateToken</h2><p>更新 token。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;updateToken&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;accessToken&quot;</span><span class=\"punctuation\">:</span> string</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"subscribed\"><a href=\"#subscribed\" class=\"headerlink\" title=\"subscribed\"></a>subscribed</h2><p>订阅对象变更。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;subscribed&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;callback&quot;</span><span class=\"punctuation\">:</span> (data<span class=\"punctuation\">:</span> any) =&gt; void<span class=\"comment\">//变更回调函数</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unSubscribed\"><a href=\"#unSubscribed\" class=\"headerlink\" title=\"unSubscribed\"></a>unSubscribed</h2><p>取消订阅对象变更。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;unSubscribed&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>查询对象。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Get&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>修改对象。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Set&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;set&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;setData&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//对象新的值</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><p>删除对象。 </p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Delete&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h2><p>添加数据到数据集。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Update&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;insert&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//要添加的数据，对象/数组</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h2><p>更新数据到数据集。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Update&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;update&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;update&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//更新操作（match匹配，update变更,options参数）</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h2><p>从数据集移除数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Remove&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;remove&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//匹配信息</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"aggregate\"><a href=\"#aggregate\" class=\"headerlink\" title=\"aggregate\"></a>aggregate</h2><p>从数据集查询数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Aggregate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;aggregate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//聚合管道(例如：&#123;match:&#123;a:1&#125;,skip:10,limit:10&#125;)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pageRequest\"><a href=\"#pageRequest\" class=\"headerlink\" title=\"pageRequest\"></a>pageRequest</h2><p>从数据集查询数据并进行分页。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;pageRequest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//聚合管道(例如：&#123;match:&#123;a:1&#125;,skip:10,limit:10&#125;)</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;page&quot;</span><span class=\"punctuation\">:</span> PageModel <span class=\"comment\">//分页模型</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bucketOpreate\"><a href=\"#bucketOpreate\" class=\"headerlink\" title=\"bucketOpreate\"></a>bucketOpreate</h2><p>进行桶操作。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Bucket&#x2F;Operate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;bucketOpreate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> BucketOpreateModel<span class=\"punctuation\">,</span><span class=\"comment\">//桶操作模型</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"fileUpdate\"><a href=\"#fileUpdate\" class=\"headerlink\" title=\"fileUpdate\"></a>fileUpdate</h2><p>文件上传。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Bucket&#x2F;Operate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;fileUpdateOpreate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> Blob<span class=\"punctuation\">,</span><span class=\"comment\">//要上传的文件</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//文件的路径</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;progress&quot;</span><span class=\"punctuation\">:</span> ProgressEvent<span class=\"comment\">//进度事件</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loadThing\"><a href=\"#loadThing\" class=\"headerlink\" title=\"loadThing\"></a>loadThing</h2><p>加载数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Thing&#x2F;Load&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;loadThing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"comment\">//加载选项</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"createThing\"><a href=\"#createThing\" class=\"headerlink\" title=\"createThing\"></a>createThing</h2><p>创建数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Thing&#x2F;Create&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;createThing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> string<span class=\"comment\">//数据名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"AnyStore-类\"><a href=\"#AnyStore-类\" class=\"headerlink\" title=\"AnyStore 类\"></a>AnyStore 类</h1><h2 id=\"getInstance\"><a href=\"#getInstance\" class=\"headerlink\" title=\"getInstance\"></a>getInstance</h2><p>获取任意数据存储单例。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;getInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//远端地址，默认为&quot;/orginone/anydata/hub&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"isOnline\"><a href=\"#isOnline\" class=\"headerlink\" title=\"isOnline\"></a>isOnline</h2><p>判断是否在线。</p>\n<p><strong>请求方式</strong>：Post</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;isOnline&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//无参数</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"updateToken\"><a href=\"#updateToken\" class=\"headerlink\" title=\"updateToken\"></a>updateToken</h2><p>更新 token。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;updateToken&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;accessToken&quot;</span><span class=\"punctuation\">:</span> string</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"subscribed\"><a href=\"#subscribed\" class=\"headerlink\" title=\"subscribed\"></a>subscribed</h2><p>订阅对象变更。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;subscribed&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;callback&quot;</span><span class=\"punctuation\">:</span> (data<span class=\"punctuation\">:</span> any) =&gt; void<span class=\"comment\">//变更回调函数</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unSubscribed\"><a href=\"#unSubscribed\" class=\"headerlink\" title=\"unSubscribed\"></a>unSubscribed</h2><p>取消订阅对象变更。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;unSubscribed&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>查询对象。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Get&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;get&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>修改对象。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Set&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;set&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;setData&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//对象新的值</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><p>删除对象。 </p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Object&#x2F;Delete&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;delete&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h2><p>添加数据到数据集。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Update&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;insert&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//要添加的数据，对象/数组</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h2><p>更新数据到数据集。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Update&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;update&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;update&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//更新操作（match匹配，update变更,options参数）</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h2><p>从数据集移除数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Remove&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;remove&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//匹配信息</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"aggregate\"><a href=\"#aggregate\" class=\"headerlink\" title=\"aggregate\"></a>aggregate</h2><p>从数据集查询数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Collection&#x2F;Aggregate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;aggregate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//聚合管道(例如：&#123;match:&#123;a:1&#125;,skip:10,limit:10&#125;)</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pageRequest\"><a href=\"#pageRequest\" class=\"headerlink\" title=\"pageRequest\"></a>pageRequest</h2><p>从数据集查询数据并进行分页。</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;pageRequest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;collName&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//数据集名称</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"punctuation\">,</span><span class=\"comment\">//聚合管道(例如：&#123;match:&#123;a:1&#125;,skip:10,limit:10&#125;)</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;page&quot;</span><span class=\"punctuation\">:</span> PageModel <span class=\"comment\">//分页模型</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bucketOpreate\"><a href=\"#bucketOpreate\" class=\"headerlink\" title=\"bucketOpreate\"></a>bucketOpreate</h2><p>进行桶操作。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Bucket&#x2F;Operate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;bucketOpreate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> BucketOpreateModel<span class=\"punctuation\">,</span><span class=\"comment\">//桶操作模型</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"fileUpdate\"><a href=\"#fileUpdate\" class=\"headerlink\" title=\"fileUpdate\"></a>fileUpdate</h2><p>文件上传。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Bucket&#x2F;Operate&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;fileUpdateOpreate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> Blob<span class=\"punctuation\">,</span><span class=\"comment\">//要上传的文件</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//文件的路径</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;progress&quot;</span><span class=\"punctuation\">:</span> ProgressEvent<span class=\"comment\">//进度事件</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loadThing\"><a href=\"#loadThing\" class=\"headerlink\" title=\"loadThing\"></a>loadThing</h2><p>加载数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Thing&#x2F;Load&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;loadThing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> any<span class=\"comment\">//加载选项</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"createThing\"><a href=\"#createThing\" class=\"headerlink\" title=\"createThing\"></a>createThing</h2><p>创建数据。</p>\n<p><strong>请求地址</strong>：’&#x2F;orginone&#x2F;anydata&#x2F;Thing&#x2F;Create&#x2F;‘</p>\n<p><strong>请求方式</strong>：Post</p>\n<p><strong>参数</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;methodName&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;createThing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;belongId&quot;</span><span class=\"punctuation\">:</span> string<span class=\"punctuation\">,</span><span class=\"comment\">//对象所在域</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> string<span class=\"comment\">//数据名称</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"orginone平台解析——沟通和储存","date":"2023-07-18T01:49:00.000Z","updated":"2023-09-14T08:13:32.864Z","keywords":null,"description":null,"_content":"\n\n\n# 沟通模块\n\n奥集能平台的聊天模块提供用户在群聊和单聊中进行自由沟通的功能。此外，也支持文件和聊天记录的储存以及查询。以下是详细的功能描述：\n\n1. 群聊功能\n用户可以在群聊中与多名用户同时进行聊天，实现集体讨论与交流。群聊功能非常适合处理工作协调、团队讨论等多人参与的情况。\n\n2. 单聊功能\n若用户希望与单位下的特定成员进行一对一的沟通，可以使用单聊功能。这个功能可以帮助用户进行更为私密或者针对性的交流。\n\n3. 文件传输\n在聊天过程中，用户可以发送各类文件给其他用户，该文件传输功能支持多种常见的文件格式，如文档、图片、音频、视频等，并且传输的所有文件可在共享文件中查看和下载。\n\n4. 聊天记录储存功能\n所有的聊天记录都将储存在数据内核中，用户可以根据关键词查找并定位到对应的聊天记录\n\n从用户发送消息，再到接收方显示消息的具体时序图如下：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230719131959.png)\n\n\n\n# 储存模块\n\n奥集能平台的储存模块秉承Linux系统中一切皆文件的概念，将平台所有的对象都抽象成了文件，包括单位、群组、用户、办事等。用户可以在储存模块下上传文件，并且支持多种常见文件格式的打开，为用户提供了一种简洁而统一的资源管理方式。以下是详细的功能描述：\n\n1. 文件化抽象\n储存模块将所有的对象都抽象为文件，这包括但不限于单位、群组、用户、办事等。这种文件化的抽象使得用户可以采用统一的方式处理和管理各种对象，大大简化了操作过程。\n\n2. 文件上传\n用户可以在储存模块下上传文件，无论是文档、图片还是音频、视频等各种类型的文件。上传后的文件将以文件的形式保存在储存模块中，方便用户在需要时进行查阅和使用。\n\n3. 文件打开\n储存模块支持打开多种常见的文件格式，包括但不限于 PDF、DOC、XLS、JPG、PNG、MP3、MP4等。用户上传的文件无需转换格式，直接上传后即可在平台上打开和查看。\n\n4. 文件管理\n用户可以对上传的文件进行管理，包括查看文件详情、修改文件信息、删除文件等。同时，用户也可以对单位、群组、用户、办事等抽象成文件的对象进行类似的管理操作。\n\n从用户上传文件，查看文件的具体时序图如下：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/orginone实习经历/orginone平台解析——沟通和储存.md","raw":"---\ntitle: orginone平台解析——沟通和储存\ndate: 2023-07-18 09:49\nupdated: 星期日 23日 七月 2023 12:59:47\ntags: []\ncategories: [orginone实习经历]\nkeywords:\ndescription: \n---\n\n\n\n# 沟通模块\n\n奥集能平台的聊天模块提供用户在群聊和单聊中进行自由沟通的功能。此外，也支持文件和聊天记录的储存以及查询。以下是详细的功能描述：\n\n1. 群聊功能\n用户可以在群聊中与多名用户同时进行聊天，实现集体讨论与交流。群聊功能非常适合处理工作协调、团队讨论等多人参与的情况。\n\n2. 单聊功能\n若用户希望与单位下的特定成员进行一对一的沟通，可以使用单聊功能。这个功能可以帮助用户进行更为私密或者针对性的交流。\n\n3. 文件传输\n在聊天过程中，用户可以发送各类文件给其他用户，该文件传输功能支持多种常见的文件格式，如文档、图片、音频、视频等，并且传输的所有文件可在共享文件中查看和下载。\n\n4. 聊天记录储存功能\n所有的聊天记录都将储存在数据内核中，用户可以根据关键词查找并定位到对应的聊天记录\n\n从用户发送消息，再到接收方显示消息的具体时序图如下：\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230719131959.png)\n\n\n\n# 储存模块\n\n奥集能平台的储存模块秉承Linux系统中一切皆文件的概念，将平台所有的对象都抽象成了文件，包括单位、群组、用户、办事等。用户可以在储存模块下上传文件，并且支持多种常见文件格式的打开，为用户提供了一种简洁而统一的资源管理方式。以下是详细的功能描述：\n\n1. 文件化抽象\n储存模块将所有的对象都抽象为文件，这包括但不限于单位、群组、用户、办事等。这种文件化的抽象使得用户可以采用统一的方式处理和管理各种对象，大大简化了操作过程。\n\n2. 文件上传\n用户可以在储存模块下上传文件，无论是文档、图片还是音频、视频等各种类型的文件。上传后的文件将以文件的形式保存在储存模块中，方便用户在需要时进行查阅和使用。\n\n3. 文件打开\n储存模块支持打开多种常见的文件格式，包括但不限于 PDF、DOC、XLS、JPG、PNG、MP3、MP4等。用户上传的文件无需转换格式，直接上传后即可在平台上打开和查看。\n\n4. 文件管理\n用户可以对上传的文件进行管理，包括查看文件详情、修改文件信息、删除文件等。同时，用户也可以对单位、群组、用户、办事等抽象成文件的对象进行类似的管理操作。\n\n从用户上传文件，查看文件的具体时序图如下：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"orginone实习经历/orginone平台解析——沟通和储存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7h000ai4v1dllv8vep","content":"<h1 id=\"沟通模块\"><a href=\"#沟通模块\" class=\"headerlink\" title=\"沟通模块\"></a>沟通模块</h1><p>奥集能平台的聊天模块提供用户在群聊和单聊中进行自由沟通的功能。此外，也支持文件和聊天记录的储存以及查询。以下是详细的功能描述：</p>\n<ol>\n<li><p>群聊功能<br>用户可以在群聊中与多名用户同时进行聊天，实现集体讨论与交流。群聊功能非常适合处理工作协调、团队讨论等多人参与的情况。</p>\n</li>\n<li><p>单聊功能<br>若用户希望与单位下的特定成员进行一对一的沟通，可以使用单聊功能。这个功能可以帮助用户进行更为私密或者针对性的交流。</p>\n</li>\n<li><p>文件传输<br>在聊天过程中，用户可以发送各类文件给其他用户，该文件传输功能支持多种常见的文件格式，如文档、图片、音频、视频等，并且传输的所有文件可在共享文件中查看和下载。</p>\n</li>\n<li><p>聊天记录储存功能<br>所有的聊天记录都将储存在数据内核中，用户可以根据关键词查找并定位到对应的聊天记录</p>\n</li>\n</ol>\n<p>从用户发送消息，再到接收方显示消息的具体时序图如下：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230719131959.png\"></p>\n<h1 id=\"储存模块\"><a href=\"#储存模块\" class=\"headerlink\" title=\"储存模块\"></a>储存模块</h1><p>奥集能平台的储存模块秉承Linux系统中一切皆文件的概念，将平台所有的对象都抽象成了文件，包括单位、群组、用户、办事等。用户可以在储存模块下上传文件，并且支持多种常见文件格式的打开，为用户提供了一种简洁而统一的资源管理方式。以下是详细的功能描述：</p>\n<ol>\n<li><p>文件化抽象<br>储存模块将所有的对象都抽象为文件，这包括但不限于单位、群组、用户、办事等。这种文件化的抽象使得用户可以采用统一的方式处理和管理各种对象，大大简化了操作过程。</p>\n</li>\n<li><p>文件上传<br>用户可以在储存模块下上传文件，无论是文档、图片还是音频、视频等各种类型的文件。上传后的文件将以文件的形式保存在储存模块中，方便用户在需要时进行查阅和使用。</p>\n</li>\n<li><p>文件打开<br>储存模块支持打开多种常见的文件格式，包括但不限于 PDF、DOC、XLS、JPG、PNG、MP3、MP4等。用户上传的文件无需转换格式，直接上传后即可在平台上打开和查看。</p>\n</li>\n<li><p>文件管理<br>用户可以对上传的文件进行管理，包括查看文件详情、修改文件信息、删除文件等。同时，用户也可以对单位、群组、用户、办事等抽象成文件的对象进行类似的管理操作。</p>\n</li>\n</ol>\n<p>从用户上传文件，查看文件的具体时序图如下：</p>\n","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"沟通模块\"><a href=\"#沟通模块\" class=\"headerlink\" title=\"沟通模块\"></a>沟通模块</h1><p>奥集能平台的聊天模块提供用户在群聊和单聊中进行自由沟通的功能。此外，也支持文件和聊天记录的储存以及查询。以下是详细的功能描述：</p>\n<ol>\n<li><p>群聊功能<br>用户可以在群聊中与多名用户同时进行聊天，实现集体讨论与交流。群聊功能非常适合处理工作协调、团队讨论等多人参与的情况。</p>\n</li>\n<li><p>单聊功能<br>若用户希望与单位下的特定成员进行一对一的沟通，可以使用单聊功能。这个功能可以帮助用户进行更为私密或者针对性的交流。</p>\n</li>\n<li><p>文件传输<br>在聊天过程中，用户可以发送各类文件给其他用户，该文件传输功能支持多种常见的文件格式，如文档、图片、音频、视频等，并且传输的所有文件可在共享文件中查看和下载。</p>\n</li>\n<li><p>聊天记录储存功能<br>所有的聊天记录都将储存在数据内核中，用户可以根据关键词查找并定位到对应的聊天记录</p>\n</li>\n</ol>\n<p>从用户发送消息，再到接收方显示消息的具体时序图如下：<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230719131959.png\"></p>\n<h1 id=\"储存模块\"><a href=\"#储存模块\" class=\"headerlink\" title=\"储存模块\"></a>储存模块</h1><p>奥集能平台的储存模块秉承Linux系统中一切皆文件的概念，将平台所有的对象都抽象成了文件，包括单位、群组、用户、办事等。用户可以在储存模块下上传文件，并且支持多种常见文件格式的打开，为用户提供了一种简洁而统一的资源管理方式。以下是详细的功能描述：</p>\n<ol>\n<li><p>文件化抽象<br>储存模块将所有的对象都抽象为文件，这包括但不限于单位、群组、用户、办事等。这种文件化的抽象使得用户可以采用统一的方式处理和管理各种对象，大大简化了操作过程。</p>\n</li>\n<li><p>文件上传<br>用户可以在储存模块下上传文件，无论是文档、图片还是音频、视频等各种类型的文件。上传后的文件将以文件的形式保存在储存模块中，方便用户在需要时进行查阅和使用。</p>\n</li>\n<li><p>文件打开<br>储存模块支持打开多种常见的文件格式，包括但不限于 PDF、DOC、XLS、JPG、PNG、MP3、MP4等。用户上传的文件无需转换格式，直接上传后即可在平台上打开和查看。</p>\n</li>\n<li><p>文件管理<br>用户可以对上传的文件进行管理，包括查看文件详情、修改文件信息、删除文件等。同时，用户也可以对单位、群组、用户、办事等抽象成文件的对象进行类似的管理操作。</p>\n</li>\n</ol>\n<p>从用户上传文件，查看文件的具体时序图如下：</p>\n"},{"title":"React基础知识入门","date":"2023-06-20T05:19:00.000Z","updated":"2023-09-08T03:58:35.816Z","keywords":null,"description":null,"_content":"\n\ncategories:\n---\n这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。\n我参照的学习资料来自[掘金的一篇文章](https://juejin.cn/post/7021674818621669389)以及[官方的入门教程]( https://react.docschina.org/learn#components )，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分\n再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。\n# 创建 React 项目\n- 确保安装了 node.js 后就可以使用命令安装 react\n```Terminal\nnpx creat-react-app my-app\n```\n> my-app 为创建的 react 项目名\n# 初始 jsx 与组件\n> 下面介绍有关 React 的基础知识\n## 创建 React 组件\n- React 通常有一个主入口文件，如：index.js 或 index.tsx\n- 首先利用 ReactDOM.createRoot 创建一个 root \n```JSX\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n```\n- document.getElementById 作用是什么？\n> 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上\n- Id 为什么是“root”\n> 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名\n- 之后再用 root.render 将内部的 React 组件（<App/>）渲染到 root（根容器）中\n```jsx\nroot.render(  \n  <React.StrictMode>  \n    <App />  </React.StrictMode>);\n```\n- App 组件是你引入的一个 React 组件\n- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了\n> 注意：\n> React 组件必须以大写字母开头\n> 最外层的标签必须闭合，这和 HTML 不同\n```jsx\nfunction App() {  \n  return (  \n    <div className=\"App\">  \n    Hello，World！\n      </div>  );  \n}\n```\n- 要想组件在其他的组件里去使用要用 export defsult \n```jsx\nexport default App;\n```\n##  添加样式\n- 使用 className 指定一个样式表\n```jsx\nimport \"./App.css\"\n<img className=\"demo\">\n```\n```css\n/*在App.css文件中*/\n.demo{\n\twidth：100px;\n\theight：100px;\n}\n```\n# 条件渲染\n- if 语句\n```jsx\nlet content;  \nif (isLoggedIn) {  \ncontent = <AdminPanel />;  \n} else {  \ncontent = <LoginForm />;  \n}  \nreturn (  \n<div>  \n{content}  \n</div>  \n);\n```\n- 三元表达式\n```jsx\nlet content;  \ncontent = isLoggedIn ? <AdminPanel />:<LoginForm />;  \n}  \nreturn (  \n<div>  \n{content}  \n</div>  \n);\n```\n- 短路运算（逻辑中断）\n```jsx\n<div>  \n{isLoggedIn && <AdminPanel />}  \n</div>\n```\n## 列表渲染\n- 利用 [Array 的 map 方法]( https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map )来渲染列表\n```jsx\nconst listItems = products.map(product =>  \n<li key={product.id}>  \n{product.title}  \n</li>  );\n\nreturn (  \n<ul>{listItems}</ul>  \n);\n```\n> 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告\n## 响应事件\n- 在函数组件内部声明一个事件处理函数来响应事件\n```jsx\n//这是函数组件\nfunction MyButton() {  \n//这是事件处理函数\nfunction handleClick() {  \nalert('You clicked me!');  \n}  \n\nreturn (\n<button onClick={handleClick}>  \nClick me  \n</button>  \n);  \n}\n```\n# 组件\n## 函数组件\n- 函数名大写开头，函数内返回标签\n```jsx\nfunction Hello(){\n\treturn (\n\t<div>hello,world!</div>\n\t)\n}\n```\n- 渲染函数组件\n> 直接使用<Hello/>标签\n```jsx\nReactDOM.render(<Hello/>, root)\n```\n- 箭头函数语法\n```jsx\nconst Hello = ()=> <div>Hello</div>\n```\n## 类组件\n1. 必须继承 React.Component 父类\n2. 必须有一个 render 方法 \n3. render 方法必须要有返回值\n```jsx\nclass Hello extends React.Component{\n\trender(){\n\t\treturn(\n\t\t<div>hello</div>\n\t\t)\n\t}\n}\n```\n- 类组件的渲染和函数组件一致\n## 绑定事件\n- 函数组件绑定事件\n```jsx\nfunction handleClick(){  \n  console.log(\"abc\")  \n}  \n  \nfunction App() {  \n  return (  \n    <div className=\"App\">  \n    <button onClick={handleClick}></button>  \n    </div>  );  \n}\n```\n- 类组件绑定事件\n> 在类中定义事件函数，要用 `this.funName` 的方式引用\n```jsx\nClass App extends React.Component {\n\thandleClick(){\n\t\tconsole.log(\"点击\")\n\t}\t\n\trender(){\n\treturn(\n\t\t<button onClick={this.hanleClick}></button>\n\t) }\n}\n ```\n ## 事件对象\n- 通过 preventDefault 方法获取到事件对象，阻止运行\n```jsx\nfunction handleClick(e){\n\t//e就是这个点击事件的对象，也叫合成对象\n\te.preventDefault()//阻止了链接的跳转\n} \n<a onClick={handleClick}></a>\n```\n# 插值和状态\n## class 写法和 Hook 写法\n> 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了\n## class 写法\n- 初始化数据：state = {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据\n- 修改数据：this.setState({要修改的值})，`注意：不能直接修改state`\n> 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。\n> 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的\n```jsx\nclass App extends React.Component{  \n  state={  \n    count : 0  \n  }  \n  handleClick = ()=>{  \n    this.setState({  \n      count: this.state.count +1  \n    })  \n  }  \n  render() {  \n    return( <div>  \n          <h1>{this.state.count}</h1>  \n          <button onClick={this.handleClick}></button>  \n        </div>    )  \n  }  \n}\n```\n##  Hook 写法\n- \n# 挂载和状态设置\n# 生命周期\n# ","source":"_posts/前端学习/React基础知识入门.md","raw":"---\ntitle: React基础知识入门\ndate: 2023-06-20 13:19\nupdated: 星期一 17日 七月 2023 09:32:36\ntags: []\ncategories: [前端学习]\nkeywords:\ndescription: \n---\n\n\ncategories:\n---\n这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。\n我参照的学习资料来自[掘金的一篇文章](https://juejin.cn/post/7021674818621669389)以及[官方的入门教程]( https://react.docschina.org/learn#components )，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分\n再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。\n# 创建 React 项目\n- 确保安装了 node.js 后就可以使用命令安装 react\n```Terminal\nnpx creat-react-app my-app\n```\n> my-app 为创建的 react 项目名\n# 初始 jsx 与组件\n> 下面介绍有关 React 的基础知识\n## 创建 React 组件\n- React 通常有一个主入口文件，如：index.js 或 index.tsx\n- 首先利用 ReactDOM.createRoot 创建一个 root \n```JSX\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n```\n- document.getElementById 作用是什么？\n> 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上\n- Id 为什么是“root”\n> 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名\n- 之后再用 root.render 将内部的 React 组件（<App/>）渲染到 root（根容器）中\n```jsx\nroot.render(  \n  <React.StrictMode>  \n    <App />  </React.StrictMode>);\n```\n- App 组件是你引入的一个 React 组件\n- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了\n> 注意：\n> React 组件必须以大写字母开头\n> 最外层的标签必须闭合，这和 HTML 不同\n```jsx\nfunction App() {  \n  return (  \n    <div className=\"App\">  \n    Hello，World！\n      </div>  );  \n}\n```\n- 要想组件在其他的组件里去使用要用 export defsult \n```jsx\nexport default App;\n```\n##  添加样式\n- 使用 className 指定一个样式表\n```jsx\nimport \"./App.css\"\n<img className=\"demo\">\n```\n```css\n/*在App.css文件中*/\n.demo{\n\twidth：100px;\n\theight：100px;\n}\n```\n# 条件渲染\n- if 语句\n```jsx\nlet content;  \nif (isLoggedIn) {  \ncontent = <AdminPanel />;  \n} else {  \ncontent = <LoginForm />;  \n}  \nreturn (  \n<div>  \n{content}  \n</div>  \n);\n```\n- 三元表达式\n```jsx\nlet content;  \ncontent = isLoggedIn ? <AdminPanel />:<LoginForm />;  \n}  \nreturn (  \n<div>  \n{content}  \n</div>  \n);\n```\n- 短路运算（逻辑中断）\n```jsx\n<div>  \n{isLoggedIn && <AdminPanel />}  \n</div>\n```\n## 列表渲染\n- 利用 [Array 的 map 方法]( https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map )来渲染列表\n```jsx\nconst listItems = products.map(product =>  \n<li key={product.id}>  \n{product.title}  \n</li>  );\n\nreturn (  \n<ul>{listItems}</ul>  \n);\n```\n> 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告\n## 响应事件\n- 在函数组件内部声明一个事件处理函数来响应事件\n```jsx\n//这是函数组件\nfunction MyButton() {  \n//这是事件处理函数\nfunction handleClick() {  \nalert('You clicked me!');  \n}  \n\nreturn (\n<button onClick={handleClick}>  \nClick me  \n</button>  \n);  \n}\n```\n# 组件\n## 函数组件\n- 函数名大写开头，函数内返回标签\n```jsx\nfunction Hello(){\n\treturn (\n\t<div>hello,world!</div>\n\t)\n}\n```\n- 渲染函数组件\n> 直接使用<Hello/>标签\n```jsx\nReactDOM.render(<Hello/>, root)\n```\n- 箭头函数语法\n```jsx\nconst Hello = ()=> <div>Hello</div>\n```\n## 类组件\n1. 必须继承 React.Component 父类\n2. 必须有一个 render 方法 \n3. render 方法必须要有返回值\n```jsx\nclass Hello extends React.Component{\n\trender(){\n\t\treturn(\n\t\t<div>hello</div>\n\t\t)\n\t}\n}\n```\n- 类组件的渲染和函数组件一致\n## 绑定事件\n- 函数组件绑定事件\n```jsx\nfunction handleClick(){  \n  console.log(\"abc\")  \n}  \n  \nfunction App() {  \n  return (  \n    <div className=\"App\">  \n    <button onClick={handleClick}></button>  \n    </div>  );  \n}\n```\n- 类组件绑定事件\n> 在类中定义事件函数，要用 `this.funName` 的方式引用\n```jsx\nClass App extends React.Component {\n\thandleClick(){\n\t\tconsole.log(\"点击\")\n\t}\t\n\trender(){\n\treturn(\n\t\t<button onClick={this.hanleClick}></button>\n\t) }\n}\n ```\n ## 事件对象\n- 通过 preventDefault 方法获取到事件对象，阻止运行\n```jsx\nfunction handleClick(e){\n\t//e就是这个点击事件的对象，也叫合成对象\n\te.preventDefault()//阻止了链接的跳转\n} \n<a onClick={handleClick}></a>\n```\n# 插值和状态\n## class 写法和 Hook 写法\n> 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了\n## class 写法\n- 初始化数据：state = {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据\n- 修改数据：this.setState({要修改的值})，`注意：不能直接修改state`\n> 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。\n> 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的\n```jsx\nclass App extends React.Component{  \n  state={  \n    count : 0  \n  }  \n  handleClick = ()=>{  \n    this.setState({  \n      count: this.state.count +1  \n    })  \n  }  \n  render() {  \n    return( <div>  \n          <h1>{this.state.count}</h1>  \n          <button onClick={this.handleClick}></button>  \n        </div>    )  \n  }  \n}\n```\n##  Hook 写法\n- \n# 挂载和状态设置\n# 生命周期\n# ","slug":"前端学习/React基础知识入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7k000ci4v15b4c56pn","content":"<h2 id=\"categories\"><a href=\"#categories\" class=\"headerlink\" title=\"categories:\"></a>categories:</h2><h2 id=\"这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法\"><a href=\"#这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法\" class=\"headerlink\" title=\"这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。# 创建 React 项目- 确保安装了 node.js 后就可以使用命令安装 react&gt; my-app 为创建的 react 项目名# 初始 jsx 与组件&gt; 下面介绍有关 React 的基础知识## 创建 React 组件- React 通常有一个主入口文件，如：index.js 或 index.tsx- 首先利用 ReactDOM.createRoot 创建一个 root- document.getElementById 作用是什么？&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上- Id 为什么是“root”&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名- 之后再用 root.render 将内部的 React 组件（）渲染到 root（根容器）中- App 组件是你引入的一个 React 组件- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了&gt; 注意：&gt; React 组件必须以大写字母开头&gt; 最外层的标签必须闭合，这和 HTML 不同- 要想组件在其他的组件里去使用要用 export defsult##  添加样式- 使用 className 指定一个样式表# 条件渲染- if 语句- 三元表达式- 短路运算（逻辑中断）## 列表渲染- 利用 Array 的 map 方法来渲染列表&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告## 响应事件- 在函数组件内部声明一个事件处理函数来响应事件# 组件## 函数组件- 函数名大写开头，函数内返回标签- 渲染函数组件&gt; 直接使用标签- 箭头函数语法## 类组件1. 必须继承 React.Component 父类2. 必须有一个 render 方法3. render 方法必须要有返回值- 类组件的渲染和函数组件一致## 绑定事件- 函数组件绑定事件- 类组件绑定事件&gt; 在类中定义事件函数，要用 this.funName 的方式引用 ## 事件对象- 通过 preventDefault 方法获取到事件对象，阻止运行# 插值和状态## class 写法和 Hook 写法&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了## class 写法- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据- 修改数据：this.setState({要修改的值})，注意：不能直接修改state&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的##  Hook 写法\"></a>这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。<br>我参照的学习资料来自<a href=\"https://juejin.cn/post/7021674818621669389\">掘金的一篇文章</a>以及<a href=\"https://react.docschina.org/learn#components\">官方的入门教程</a>，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分<br>再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。<br># 创建 React 项目<br>- 确保安装了 node.js 后就可以使用命令安装 react<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx creat-react-app my-app</span><br></pre></td></tr></table></figure><br>&gt; my-app 为创建的 react 项目名<br># 初始 jsx 与组件<br>&gt; 下面介绍有关 React 的基础知识<br>## 创建 React 组件<br>- React 通常有一个主入口文件，如：index.js 或 index.tsx<br>- 首先利用 ReactDOM.createRoot 创建一个 root<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- document.getElementById 作用是什么？<br>&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上<br>- Id 为什么是“root”<br>&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名<br>- 之后再用 root.render 将内部的 React 组件（<App/>）渲染到 root（根容器）中<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.<span class=\"title function_\">render</span>(  </span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">React.StrictMode</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">React.StrictMode</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><br>- App 组件是你引入的一个 React 组件<br>- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了<br>&gt; 注意：<br>&gt; React 组件必须以大写字母开头<br>&gt; 最外层的标签必须闭合，这和 HTML 不同<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    Hello，World！</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  );  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 要想组件在其他的组件里去使用要用 export defsult<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure><br>##  添加样式<br>- 使用 className 指定一个样式表<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span></span><br><span class=\"line\">&lt;img className=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*在App.css文件中*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>：<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>：<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br># 条件渲染<br>- if 语句<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> content;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLoggedIn) &#123;  </span><br><span class=\"line\">content = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">content = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginForm</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;content&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- 三元表达式<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> content;  </span><br><span class=\"line\">content = isLoggedIn ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>:<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginForm</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;content&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- 短路运算（逻辑中断）<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;  </span><br><span class=\"line\">&#123;isLoggedIn &amp;&amp; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>&#125;  </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>## 列表渲染<br>- 利用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array 的 map 方法</a>来渲染列表<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = products.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span>  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;product.id&#125;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;product.title&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>  );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告<br>## 响应事件<br>- 在函数组件内部声明一个事件处理函数来响应事件<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyButton</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\"><span class=\"comment\">//这是事件处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;You clicked me!&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">Click me  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>  </span><br><span class=\"line\">);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br># 组件<br>## 函数组件<br>- 函数名大写开头，函数内返回标签<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Hello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello,world!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 渲染函数组件<br>&gt; 直接使用<Hello/>标签<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span>/&gt;</span></span>, root)</span><br></pre></td></tr></table></figure><br>- 箭头函数语法<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Hello</span> = (<span class=\"params\"></span>)=&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>## 类组件<br>1. 必须继承 React.Component 父类<br>2. 必须有一个 render 方法<br>3. render 方法必须要有返回值<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件的渲染和函数组件一致<br>## 绑定事件<br>- 函数组件绑定事件<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>)&#123;  </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;abc&quot;</span>)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  );  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件绑定事件<br>&gt; 在类中定义事件函数，要用 <code>this.funName</code> 的方式引用<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">React</span>.<span class=\"property\">Component</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;点击&quot;</span>)</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.hanleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">\t) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br> ## 事件对象<br>- 通过 preventDefault 方法获取到事件对象，阻止运行<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//e就是这个点击事件的对象，也叫合成对象</span></span><br><span class=\"line\">\te.<span class=\"title function_\">preventDefault</span>()<span class=\"comment\">//阻止了链接的跳转</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;a onClick=&#123;handleClick&#125;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><br># 插值和状态<br>## class 写法和 Hook 写法<br>&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了<br>## class 写法<br>- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据<br>- 修改数据：this.setState({要修改的值})，<code>注意：不能直接修改state</code><br>&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。<br>&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&#123;  </span><br><span class=\"line\">  state=&#123;  </span><br><span class=\"line\">    count : <span class=\"number\">0</span>  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  handleClick = <span class=\"function\">()=&gt;</span>&#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;  </span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> +<span class=\"number\">1</span>  </span><br><span class=\"line\">    &#125;)  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>    )  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>##  Hook 写法</h2><h1 id=\"挂载和状态设置\"><a href=\"#挂载和状态设置\" class=\"headerlink\" title=\"挂载和状态设置\"></a>挂载和状态设置</h1><h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"categories\"><a href=\"#categories\" class=\"headerlink\" title=\"categories:\"></a>categories:</h2><h2 id=\"这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法\"><a href=\"#这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法\" class=\"headerlink\" title=\"这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。# 创建 React 项目- 确保安装了 node.js 后就可以使用命令安装 react&gt; my-app 为创建的 react 项目名# 初始 jsx 与组件&gt; 下面介绍有关 React 的基础知识## 创建 React 组件- React 通常有一个主入口文件，如：index.js 或 index.tsx- 首先利用 ReactDOM.createRoot 创建一个 root- document.getElementById 作用是什么？&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上- Id 为什么是“root”&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名- 之后再用 root.render 将内部的 React 组件（）渲染到 root（根容器）中- App 组件是你引入的一个 React 组件- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了&gt; 注意：&gt; React 组件必须以大写字母开头&gt; 最外层的标签必须闭合，这和 HTML 不同- 要想组件在其他的组件里去使用要用 export defsult##  添加样式- 使用 className 指定一个样式表# 条件渲染- if 语句- 三元表达式- 短路运算（逻辑中断）## 列表渲染- 利用 Array 的 map 方法来渲染列表&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告## 响应事件- 在函数组件内部声明一个事件处理函数来响应事件# 组件## 函数组件- 函数名大写开头，函数内返回标签- 渲染函数组件&gt; 直接使用标签- 箭头函数语法## 类组件1. 必须继承 React.Component 父类2. 必须有一个 render 方法3. render 方法必须要有返回值- 类组件的渲染和函数组件一致## 绑定事件- 函数组件绑定事件- 类组件绑定事件&gt; 在类中定义事件函数，要用 this.funName 的方式引用 ## 事件对象- 通过 preventDefault 方法获取到事件对象，阻止运行# 插值和状态## class 写法和 Hook 写法&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了## class 写法- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据- 修改数据：this.setState({要修改的值})，注意：不能直接修改state&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的##  Hook 写法\"></a>这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。<br>我参照的学习资料来自<a href=\"https://juejin.cn/post/7021674818621669389\">掘金的一篇文章</a>以及<a href=\"https://react.docschina.org/learn#components\">官方的入门教程</a>，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分<br>再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。<br># 创建 React 项目<br>- 确保安装了 node.js 后就可以使用命令安装 react<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx creat-react-app my-app</span><br></pre></td></tr></table></figure><br>&gt; my-app 为创建的 react 项目名<br># 初始 jsx 与组件<br>&gt; 下面介绍有关 React 的基础知识<br>## 创建 React 组件<br>- React 通常有一个主入口文件，如：index.js 或 index.tsx<br>- 首先利用 ReactDOM.createRoot 创建一个 root<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLElement</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- document.getElementById 作用是什么？<br>&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上<br>- Id 为什么是“root”<br>&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名<br>- 之后再用 root.render 将内部的 React 组件（<App/>）渲染到 root（根容器）中<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.<span class=\"title function_\">render</span>(  </span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">React.StrictMode</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">React.StrictMode</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><br>- App 组件是你引入的一个 React 组件<br>- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了<br>&gt; 注意：<br>&gt; React 组件必须以大写字母开头<br>&gt; 最外层的标签必须闭合，这和 HTML 不同<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    Hello，World！</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  );  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 要想组件在其他的组件里去使用要用 export defsult<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure><br>##  添加样式<br>- 使用 className 指定一个样式表<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./App.css&quot;</span></span><br><span class=\"line\">&lt;img className=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*在App.css文件中*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>：<span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>：<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br># 条件渲染<br>- if 语句<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> content;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (isLoggedIn) &#123;  </span><br><span class=\"line\">content = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">content = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginForm</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;content&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- 三元表达式<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> content;  </span><br><span class=\"line\">content = isLoggedIn ? <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>:<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">LoginForm</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;content&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>- 短路运算（逻辑中断）<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;  </span><br><span class=\"line\">&#123;isLoggedIn &amp;&amp; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">AdminPanel</span> /&gt;</span></span>&#125;  </span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>## 列表渲染<br>- 利用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array 的 map 方法</a>来渲染列表<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> listItems = products.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span>  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;product.id&#125;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">&#123;product.title&#125;  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span>  );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>&#123;listItems&#125;<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span>  </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><br>&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告<br>## 响应事件<br>- 在函数组件内部声明一个事件处理函数来响应事件<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是函数组件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyButton</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\"><span class=\"comment\">//这是事件处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;You clicked me!&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">Click me  </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>  </span><br><span class=\"line\">);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br># 组件<br>## 函数组件<br>- 函数名大写开头，函数内返回标签<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Hello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello,world!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 渲染函数组件<br>&gt; 直接使用<Hello/>标签<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span>/&gt;</span></span>, root)</span><br></pre></td></tr></table></figure><br>- 箭头函数语法<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Hello</span> = (<span class=\"params\"></span>)=&gt; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>## 类组件<br>1. 必须继承 React.Component 父类<br>2. 必须有一个 render 方法<br>3. render 方法必须要有返回值<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件的渲染和函数组件一致<br>## 绑定事件<br>- 函数组件绑定事件<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>)&#123;  </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;abc&quot;</span>)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  );  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件绑定事件<br>&gt; 在类中定义事件函数，要用 <code>this.funName</code> 的方式引用<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">React</span>.<span class=\"property\">Component</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;点击&quot;</span>)</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>(</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.hanleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">\t) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br> ## 事件对象<br>- 通过 preventDefault 方法获取到事件对象，阻止运行<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//e就是这个点击事件的对象，也叫合成对象</span></span><br><span class=\"line\">\te.<span class=\"title function_\">preventDefault</span>()<span class=\"comment\">//阻止了链接的跳转</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&lt;a onClick=&#123;handleClick&#125;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><br># 插值和状态<br>## class 写法和 Hook 写法<br>&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了<br>## class 写法<br>- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据<br>- 修改数据：this.setState({要修改的值})，<code>注意：不能直接修改state</code><br>&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。<br>&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&#123;  </span><br><span class=\"line\">  state=&#123;  </span><br><span class=\"line\">    count : <span class=\"number\">0</span>  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  handleClick = <span class=\"function\">()=&gt;</span>&#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;  </span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> +<span class=\"number\">1</span>  </span><br><span class=\"line\">    &#125;)  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>    )  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>##  Hook 写法</h2><h1 id=\"挂载和状态设置\"><a href=\"#挂载和状态设置\" class=\"headerlink\" title=\"挂载和状态设置\"></a>挂载和状态设置</h1><h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"VUE","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:57:55.755Z","keywords":null,"description":null,"_content":"\n\n","source":"_posts/前端学习/VUE.md","raw":"---\ntitle: VUE\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:03\ntags: []\ncategories: [前端学习]\nkeywords:\ndescription: \n---\n\n\n","slug":"前端学习/VUE","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7l000di4v1c5j9b5g2","content":"","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"title":"清除浮动的三种常用方式","date":"2023-07-10T07:12:00.000Z","updated":"2023-09-08T13:04:27.175Z","keywords":null,"description":null,"_content":"\n本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。\n\n## 一、为什么要清除浮动\n\n在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"floatDiv\">float left</div>     \n\t<div class=\"textDiv\">...</div>\n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n其样式为：\n\n```css\n.topDiv {     \nwidth: 500px;     \nborder: 2px solid black; \n} \n\n.floatDiv {     \nwidth: 100px;     \nheight: 100px;     \nborder: 2px dotted red;    \ncolor: red;     \nmargin: 4px;     \nfloat: left; \n} \n\n.bottomDiv \n{     \nwidth: 500px;     \nheight: 100px;     \nmargin: 5px 0;     \nborder: 2px dotted black; \n} \n\n.textDiv \n{     \ncolor: blue;     \nborder: 2px solid blue; \n}\n```\n\n在chrome中渲染的效果如下图所示：\n\n![浮动效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/2af797ffc0918352ac8d381994ff1a27~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n这肯定不是我们想要的渲染效果，它可能存在如下问题：\n\n1. 文字围绕浮动元素排版，但我们可能希望文字（`.textDiv`）排列在浮动元素下方，或者，我们并不希望`.textDiv`两边有浮动元素存在。\n2. 浮动元素排版超出了其父级元素（`.topDiv`），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。\n3. 浮动元素甚至影响到了其父元素的兄弟元素（`.bottomDiv`）排版。因为浮动元素脱离了文档流，`.bottomDiv`在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。\n\n解决第一个问题，需要清除`.textDiv`周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。\n\n接下来开始介绍清除浮动的方法。\n\n## 二、清除浮动的方法\n\n### 1. 父元素结束标签之前插入清除浮动的块级元素\n\nHTML结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素div：\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"textDiv\">...</div>     \n\t<div class=\"floatDiv\">float left</div>     \n\t<div class=\"blankDiv\"></div> \n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n```scss\n.topDiv {     \nwidth: 500px;     \nborder: 2px solid black;\n} \n.floatDiv {     \nwidth: 100px;     \nheight: 100px;\nborder: 2px dotted red;\ncolor: red;\nmargin: 4px;\nfloat: left;\n} \n.bottomDiv {     \nwidth: 500px;     \nheight: 100px;\nmargin: 5px 0;\nborder: 2px dotted black;\n} \n.textDiv {     \ncolor: blue;\nborder: 2px solid blue;\n} \n//区别在这里\n.blankDiv {    \nclear: both; // or left\n}\n```\n\n渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/7e3621e15592ac42f86c70734fe4e1dc~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n通过上面的样式，`.blankDiv` 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（`.floatDiv`）位置已经确定，浏览器在计算 `.blankDiv` 的位置时，为满足其需求，将 `.blankDiv` 渲染在浮动元素下方，保证了 `.blankDiv` 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 `.blankDiv` 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(`clear` 的值为 `both` 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 `both`)\n\n\n### 2. 利用伪元素（clearfix）\n\nHTML 结构如下，为了惯例相符，在 `.topDiv` 的 div 上再添加一个`clearfix`类：\n\n```html\n<div class=\"topDiv clearfix\">\n\t<div class=\"textDiv\">...</div>\n\t<div class=\"floatDiv\">float left</div>\n</div>\n<div class=\"bottomDiv\">...</div>\n```\n\n样式应用如下：\n\n```scss\n// 省略基本的样式 \n// 区别在这里 \n.clearfix:after {     \ncontent: '.';   \nheight: 0;\ndisplay: block;\nclear: both;\n}\n```\n\n该样式在`clearfix`，即父级元素的最后，添加了一个`:after`伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的`display`值为`block`，即，它是一个不可见的块级元素（有的地方使用`table`，因为`table`也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。\n\n### 3. 利用 overflow 清除浮动\n\n首先直观地看看，`overflow`是如何清除浮动的。\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"floatDiv\">float left</div>\n\t<div class=\"textDiv\">...</div> \n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n```scss\n.topDiv {    \nwidth: 500px;   \npadding: 4px;   \nborder: 2px solid black;  \n// 区别在这里  \noverflow: auto; \n} \n.floatDiv{   \nwidth: 100px; \nheight: 100px;   \nborder: 2px dotted red;  \ncolor: red;   \nmargin: 4px;   \nfloat: left; \n} \n.bottomDiv {    \nwidth: 500px; \nheight: 100px;   \nmargin: 5px 0;    \nborder: 2px dotted black; \nclear: both; \n} \n.textDiv { \ncolor: blue;   \nborder: 2px solid blue; \n}\n```\n\n不应用上面标识出来的CSS时，渲染结果和本文开始的第一个图形效果相同，应用CSS后的渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/cb75fb0469d3316e2ca6192f8316f7cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n仅仅只在父级元素上添加了一个值为auto的overflow属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的overflow值，还可以是除了\"visible\"之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll值会导致滚动条始终可见，hidden会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？\n\n要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是[块格式化上下文(BFC)](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context),然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。\n\n这是从[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)上摘下来的BFC定义：\n\n> A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.\n\n翻译过来就是：块级格式化上下文是CSS可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。\n\n块格式化上下文（BFC）有下面几个特点：\n\n1. BFC是就像一道屏障，隔离出了BFC内部和外部，内部和外部区域的渲染相互之间不影响。BFC有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。\n2. BFC的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和BFC区域是泾渭分明的，不可能重叠。\n3. BFC在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使BFC区域内只有一个浮动元素，BFC的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。\n4. HTML结构中，当构建BFC区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。[看这里](https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float)\n\n有了这几点，就可以尝试解释为什么`overflow`（值不为`visible`）可以清除浮动了。\n\n当元素设置了`overflow`样式，且值不为`visible`时，该元素就建构了一个BFC(哪些情况下，元素可以建构出BFC，可以看查看CSS文档对[BFC的定义](https://www.w3.org/TR/CSS2/visuren.html#block-formatting))。在我们的例子中，`.topDiv`因设置了值为`auto`的`overflow`样式，所以该元素建构出一个BFC，按照第三个特点，BFC的高度是要包括浮动元素的，所以`.topDiv`的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为`visible`的`overflow`不能建构BFC，[这个答案](https://stackoverflow.com/questions/9943503/why-does-css2-1-define-overflow-values-other-than-visible-to-establish-a-new-b?answertab=votes#tab-top)给了一个解释)\n\n其实，这里overflow的作用就是为了构建一个BFC区域，让内部浮动的影响都得以“内化”。如果你看了[BFC的定义](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)，你会发现，构建一个BFC区域的方法有很多种，`overflow`只是其中的一种，那在这里，我们是否也可以利用其它的方式构建BFC，且同样能达到清除浮动的目的呢？\n\nBFC定义中说，`inline-block`同样也能构建BFC，那我们就用该样式来试试：\n\n```scss\n.topDiv {     \nwidth: 500px;     \npadding: 4px;    \nborder: 2px solid black;    \n// 区别在这里    \ndisplay: inline-block; } \n// 其他样式相同，省略\n```\n\n\n\n\n渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/aa859ff15404ede93450f03430b2d3ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。\n\n当然，要说明的是，在实际项目中选择采用哪种方式构建BFC是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用`inline-block`和选用`overflow`效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对`overflow`值的选择也要考虑其表现和影响。在各种构建BFC的方式中，`overflow`方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用`overflow`来清除浮动的原因吧。\n\n到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。","source":"_posts/前端学习/清除浮动的三种常用方式.md","raw":"---\ntitle: 清除浮动的三种常用方式\ndate: 2023-07-10 15:12\nupdated: 星期二 29日 八月 2023 23:18:58\ntags: \n- 前端\n- 常用技巧\ncategories: [前端学习]\nkeywords:\ndescription: \n---\n\n本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。\n\n## 一、为什么要清除浮动\n\n在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"floatDiv\">float left</div>     \n\t<div class=\"textDiv\">...</div>\n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n其样式为：\n\n```css\n.topDiv {     \nwidth: 500px;     \nborder: 2px solid black; \n} \n\n.floatDiv {     \nwidth: 100px;     \nheight: 100px;     \nborder: 2px dotted red;    \ncolor: red;     \nmargin: 4px;     \nfloat: left; \n} \n\n.bottomDiv \n{     \nwidth: 500px;     \nheight: 100px;     \nmargin: 5px 0;     \nborder: 2px dotted black; \n} \n\n.textDiv \n{     \ncolor: blue;     \nborder: 2px solid blue; \n}\n```\n\n在chrome中渲染的效果如下图所示：\n\n![浮动效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/2af797ffc0918352ac8d381994ff1a27~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n这肯定不是我们想要的渲染效果，它可能存在如下问题：\n\n1. 文字围绕浮动元素排版，但我们可能希望文字（`.textDiv`）排列在浮动元素下方，或者，我们并不希望`.textDiv`两边有浮动元素存在。\n2. 浮动元素排版超出了其父级元素（`.topDiv`），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。\n3. 浮动元素甚至影响到了其父元素的兄弟元素（`.bottomDiv`）排版。因为浮动元素脱离了文档流，`.bottomDiv`在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。\n\n解决第一个问题，需要清除`.textDiv`周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。\n\n接下来开始介绍清除浮动的方法。\n\n## 二、清除浮动的方法\n\n### 1. 父元素结束标签之前插入清除浮动的块级元素\n\nHTML结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素div：\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"textDiv\">...</div>     \n\t<div class=\"floatDiv\">float left</div>     \n\t<div class=\"blankDiv\"></div> \n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n```scss\n.topDiv {     \nwidth: 500px;     \nborder: 2px solid black;\n} \n.floatDiv {     \nwidth: 100px;     \nheight: 100px;\nborder: 2px dotted red;\ncolor: red;\nmargin: 4px;\nfloat: left;\n} \n.bottomDiv {     \nwidth: 500px;     \nheight: 100px;\nmargin: 5px 0;\nborder: 2px dotted black;\n} \n.textDiv {     \ncolor: blue;\nborder: 2px solid blue;\n} \n//区别在这里\n.blankDiv {    \nclear: both; // or left\n}\n```\n\n渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/7e3621e15592ac42f86c70734fe4e1dc~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n通过上面的样式，`.blankDiv` 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（`.floatDiv`）位置已经确定，浏览器在计算 `.blankDiv` 的位置时，为满足其需求，将 `.blankDiv` 渲染在浮动元素下方，保证了 `.blankDiv` 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 `.blankDiv` 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(`clear` 的值为 `both` 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 `both`)\n\n\n### 2. 利用伪元素（clearfix）\n\nHTML 结构如下，为了惯例相符，在 `.topDiv` 的 div 上再添加一个`clearfix`类：\n\n```html\n<div class=\"topDiv clearfix\">\n\t<div class=\"textDiv\">...</div>\n\t<div class=\"floatDiv\">float left</div>\n</div>\n<div class=\"bottomDiv\">...</div>\n```\n\n样式应用如下：\n\n```scss\n// 省略基本的样式 \n// 区别在这里 \n.clearfix:after {     \ncontent: '.';   \nheight: 0;\ndisplay: block;\nclear: both;\n}\n```\n\n该样式在`clearfix`，即父级元素的最后，添加了一个`:after`伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的`display`值为`block`，即，它是一个不可见的块级元素（有的地方使用`table`，因为`table`也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。\n\n### 3. 利用 overflow 清除浮动\n\n首先直观地看看，`overflow`是如何清除浮动的。\n\n```html\n<div class=\"topDiv\">     \n\t<div class=\"floatDiv\">float left</div>\n\t<div class=\"textDiv\">...</div> \n</div> \n<div class=\"bottomDiv\">...</div>\n```\n\n```scss\n.topDiv {    \nwidth: 500px;   \npadding: 4px;   \nborder: 2px solid black;  \n// 区别在这里  \noverflow: auto; \n} \n.floatDiv{   \nwidth: 100px; \nheight: 100px;   \nborder: 2px dotted red;  \ncolor: red;   \nmargin: 4px;   \nfloat: left; \n} \n.bottomDiv {    \nwidth: 500px; \nheight: 100px;   \nmargin: 5px 0;    \nborder: 2px dotted black; \nclear: both; \n} \n.textDiv { \ncolor: blue;   \nborder: 2px solid blue; \n}\n```\n\n不应用上面标识出来的CSS时，渲染结果和本文开始的第一个图形效果相同，应用CSS后的渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/cb75fb0469d3316e2ca6192f8316f7cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n仅仅只在父级元素上添加了一个值为auto的overflow属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的overflow值，还可以是除了\"visible\"之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll值会导致滚动条始终可见，hidden会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？\n\n要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是[块格式化上下文(BFC)](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context),然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。\n\n这是从[MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)上摘下来的BFC定义：\n\n> A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.\n\n翻译过来就是：块级格式化上下文是CSS可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。\n\n块格式化上下文（BFC）有下面几个特点：\n\n1. BFC是就像一道屏障，隔离出了BFC内部和外部，内部和外部区域的渲染相互之间不影响。BFC有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。\n2. BFC的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和BFC区域是泾渭分明的，不可能重叠。\n3. BFC在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使BFC区域内只有一个浮动元素，BFC的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。\n4. HTML结构中，当构建BFC区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。[看这里](https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float)\n\n有了这几点，就可以尝试解释为什么`overflow`（值不为`visible`）可以清除浮动了。\n\n当元素设置了`overflow`样式，且值不为`visible`时，该元素就建构了一个BFC(哪些情况下，元素可以建构出BFC，可以看查看CSS文档对[BFC的定义](https://www.w3.org/TR/CSS2/visuren.html#block-formatting))。在我们的例子中，`.topDiv`因设置了值为`auto`的`overflow`样式，所以该元素建构出一个BFC，按照第三个特点，BFC的高度是要包括浮动元素的，所以`.topDiv`的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为`visible`的`overflow`不能建构BFC，[这个答案](https://stackoverflow.com/questions/9943503/why-does-css2-1-define-overflow-values-other-than-visible-to-establish-a-new-b?answertab=votes#tab-top)给了一个解释)\n\n其实，这里overflow的作用就是为了构建一个BFC区域，让内部浮动的影响都得以“内化”。如果你看了[BFC的定义](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)，你会发现，构建一个BFC区域的方法有很多种，`overflow`只是其中的一种，那在这里，我们是否也可以利用其它的方式构建BFC，且同样能达到清除浮动的目的呢？\n\nBFC定义中说，`inline-block`同样也能构建BFC，那我们就用该样式来试试：\n\n```scss\n.topDiv {     \nwidth: 500px;     \npadding: 4px;    \nborder: 2px solid black;    \n// 区别在这里    \ndisplay: inline-block; } \n// 其他样式相同，省略\n```\n\n\n\n\n渲染效果如下：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/aa859ff15404ede93450f03430b2d3ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。\n\n当然，要说明的是，在实际项目中选择采用哪种方式构建BFC是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用`inline-block`和选用`overflow`效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对`overflow`值的选择也要考虑其表现和影响。在各种构建BFC的方式中，`overflow`方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用`overflow`来清除浮动的原因吧。\n\n到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。","slug":"前端学习/清除浮动的三种常用方式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7m000gi4v11vcpcurd","content":"<p>本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。</p>\n<h2 id=\"一、为什么要清除浮动\"><a href=\"#一、为什么要清除浮动\" class=\"headerlink\" title=\"一、为什么要清除浮动\"></a>一、为什么要清除浮动</h2><p>在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其样式为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;    </span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;     </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在chrome中渲染的效果如下图所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/2af797ffc0918352ac8d381994ff1a27~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\" alt=\"浮动效果\"></p>\n<p>这肯定不是我们想要的渲染效果，它可能存在如下问题：</p>\n<ol>\n<li>文字围绕浮动元素排版，但我们可能希望文字（<code>.textDiv</code>）排列在浮动元素下方，或者，我们并不希望<code>.textDiv</code>两边有浮动元素存在。</li>\n<li>浮动元素排版超出了其父级元素（<code>.topDiv</code>），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。</li>\n<li>浮动元素甚至影响到了其父元素的兄弟元素（<code>.bottomDiv</code>）排版。因为浮动元素脱离了文档流，<code>.bottomDiv</code>在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。</li>\n</ol>\n<p>解决第一个问题，需要清除<code>.textDiv</code>周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。</p>\n<p>接下来开始介绍清除浮动的方法。</p>\n<h2 id=\"二、清除浮动的方法\"><a href=\"#二、清除浮动的方法\" class=\"headerlink\" title=\"二、清除浮动的方法\"></a>二、清除浮动的方法</h2><h3 id=\"1-父元素结束标签之前插入清除浮动的块级元素\"><a href=\"#1-父元素结束标签之前插入清除浮动的块级元素\" class=\"headerlink\" title=\"1. 父元素结束标签之前插入清除浮动的块级元素\"></a>1. 父元素结束标签之前插入清除浮动的块级元素</h3><p>HTML结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素div：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;blankDiv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//区别在这里</span></span><br><span class=\"line\"><span class=\"selector-class\">.blankDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both; <span class=\"comment\">// or left</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/7e3621e15592ac42f86c70734fe4e1dc~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>通过上面的样式，<code>.blankDiv</code> 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（<code>.floatDiv</code>）位置已经确定，浏览器在计算 <code>.blankDiv</code> 的位置时，为满足其需求，将 <code>.blankDiv</code> 渲染在浮动元素下方，保证了 <code>.blankDiv</code> 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 <code>.blankDiv</code> 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(<code>clear</code> 的值为 <code>both</code> 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 <code>both</code>)</p>\n<h3 id=\"2-利用伪元素（clearfix）\"><a href=\"#2-利用伪元素（clearfix）\" class=\"headerlink\" title=\"2. 利用伪元素（clearfix）\"></a>2. 利用伪元素（clearfix）</h3><p>HTML 结构如下，为了惯例相符，在 <code>.topDiv</code> 的 div 上再添加一个<code>clearfix</code>类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>样式应用如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略基本的样式 </span></span><br><span class=\"line\"><span class=\"comment\">// 区别在这里 </span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">&#x27;.&#x27;</span>;   </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该样式在<code>clearfix</code>，即父级元素的最后，添加了一个<code>:after</code>伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的<code>display</code>值为<code>block</code>，即，它是一个不可见的块级元素（有的地方使用<code>table</code>，因为<code>table</code>也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。</p>\n<h3 id=\"3-利用-overflow-清除浮动\"><a href=\"#3-利用-overflow-清除浮动\" class=\"headerlink\" title=\"3. 利用 overflow 清除浮动\"></a>3. 利用 overflow 清除浮动</h3><p>首先直观地看看，<code>overflow</code>是如何清除浮动的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;  </span><br><span class=\"line\"><span class=\"comment\">// 区别在这里  </span></span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: auto; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span>&#123;   </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;  </span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;   </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black; </span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> &#123; </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不应用上面标识出来的CSS时，渲染结果和本文开始的第一个图形效果相同，应用CSS后的渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/cb75fb0469d3316e2ca6192f8316f7cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>仅仅只在父级元素上添加了一个值为auto的overflow属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的overflow值，还可以是除了”visible”之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll值会导致滚动条始终可见，hidden会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？</p>\n<p>要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">块格式化上下文(BFC)</a>,然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。</p>\n<p>这是从<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">MDN</a>上摘下来的BFC定义：</p>\n<blockquote>\n<p>A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.</p>\n</blockquote>\n<p>翻译过来就是：块级格式化上下文是CSS可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。</p>\n<p>块格式化上下文（BFC）有下面几个特点：</p>\n<ol>\n<li>BFC是就像一道屏障，隔离出了BFC内部和外部，内部和外部区域的渲染相互之间不影响。BFC有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。</li>\n<li>BFC的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和BFC区域是泾渭分明的，不可能重叠。</li>\n<li>BFC在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使BFC区域内只有一个浮动元素，BFC的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。</li>\n<li>HTML结构中，当构建BFC区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。<a href=\"https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float\">看这里</a></li>\n</ol>\n<p>有了这几点，就可以尝试解释为什么<code>overflow</code>（值不为<code>visible</code>）可以清除浮动了。</p>\n<p>当元素设置了<code>overflow</code>样式，且值不为<code>visible</code>时，该元素就建构了一个BFC(哪些情况下，元素可以建构出BFC，可以看查看CSS文档对<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\">BFC的定义</a>)。在我们的例子中，<code>.topDiv</code>因设置了值为<code>auto</code>的<code>overflow</code>样式，所以该元素建构出一个BFC，按照第三个特点，BFC的高度是要包括浮动元素的，所以<code>.topDiv</code>的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为<code>visible</code>的<code>overflow</code>不能建构BFC，<a href=\"https://stackoverflow.com/questions/9943503/why-does-css2-1-define-overflow-values-other-than-visible-to-establish-a-new-b?answertab=votes#tab-top\">这个答案</a>给了一个解释)</p>\n<p>其实，这里overflow的作用就是为了构建一个BFC区域，让内部浮动的影响都得以“内化”。如果你看了<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\">BFC的定义</a>，你会发现，构建一个BFC区域的方法有很多种，<code>overflow</code>只是其中的一种，那在这里，我们是否也可以利用其它的方式构建BFC，且同样能达到清除浮动的目的呢？</p>\n<p>BFC定义中说，<code>inline-block</code>同样也能构建BFC，那我们就用该样式来试试：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;    </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;    </span><br><span class=\"line\"><span class=\"comment\">// 区别在这里    </span></span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block; &#125; </span><br><span class=\"line\"><span class=\"comment\">// 其他样式相同，省略</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/aa859ff15404ede93450f03430b2d3ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。</p>\n<p>当然，要说明的是，在实际项目中选择采用哪种方式构建BFC是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用<code>inline-block</code>和选用<code>overflow</code>效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对<code>overflow</code>值的选择也要考虑其表现和影响。在各种构建BFC的方式中，<code>overflow</code>方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用<code>overflow</code>来清除浮动的原因吧。</p>\n<p>到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。</p>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<p>本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。</p>\n<h2 id=\"一、为什么要清除浮动\"><a href=\"#一、为什么要清除浮动\" class=\"headerlink\" title=\"一、为什么要清除浮动\"></a>一、为什么要清除浮动</h2><p>在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其样式为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;    </span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;     </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在chrome中渲染的效果如下图所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/2af797ffc0918352ac8d381994ff1a27~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\" alt=\"浮动效果\"></p>\n<p>这肯定不是我们想要的渲染效果，它可能存在如下问题：</p>\n<ol>\n<li>文字围绕浮动元素排版，但我们可能希望文字（<code>.textDiv</code>）排列在浮动元素下方，或者，我们并不希望<code>.textDiv</code>两边有浮动元素存在。</li>\n<li>浮动元素排版超出了其父级元素（<code>.topDiv</code>），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。</li>\n<li>浮动元素甚至影响到了其父元素的兄弟元素（<code>.bottomDiv</code>）排版。因为浮动元素脱离了文档流，<code>.bottomDiv</code>在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。</li>\n</ol>\n<p>解决第一个问题，需要清除<code>.textDiv</code>周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。</p>\n<p>接下来开始介绍清除浮动的方法。</p>\n<h2 id=\"二、清除浮动的方法\"><a href=\"#二、清除浮动的方法\" class=\"headerlink\" title=\"二、清除浮动的方法\"></a>二、清除浮动的方法</h2><h3 id=\"1-父元素结束标签之前插入清除浮动的块级元素\"><a href=\"#1-父元素结束标签之前插入清除浮动的块级元素\" class=\"headerlink\" title=\"1. 父元素结束标签之前插入清除浮动的块级元素\"></a>1. 父元素结束标签之前插入清除浮动的块级元素</h3><p>HTML结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素div：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;blankDiv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\"><span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//区别在这里</span></span><br><span class=\"line\"><span class=\"selector-class\">.blankDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both; <span class=\"comment\">// or left</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/7e3621e15592ac42f86c70734fe4e1dc~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>通过上面的样式，<code>.blankDiv</code> 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（<code>.floatDiv</code>）位置已经确定，浏览器在计算 <code>.blankDiv</code> 的位置时，为满足其需求，将 <code>.blankDiv</code> 渲染在浮动元素下方，保证了 <code>.blankDiv</code> 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 <code>.blankDiv</code> 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(<code>clear</code> 的值为 <code>both</code> 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 <code>both</code>)</p>\n<h3 id=\"2-利用伪元素（clearfix）\"><a href=\"#2-利用伪元素（clearfix）\" class=\"headerlink\" title=\"2. 利用伪元素（clearfix）\"></a>2. 利用伪元素（clearfix）</h3><p>HTML 结构如下，为了惯例相符，在 <code>.topDiv</code> 的 div 上再添加一个<code>clearfix</code>类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>样式应用如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略基本的样式 </span></span><br><span class=\"line\"><span class=\"comment\">// 区别在这里 </span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">content</span>: <span class=\"string\">&#x27;.&#x27;</span>;   </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该样式在<code>clearfix</code>，即父级元素的最后，添加了一个<code>:after</code>伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的<code>display</code>值为<code>block</code>，即，它是一个不可见的块级元素（有的地方使用<code>table</code>，因为<code>table</code>也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。</p>\n<h3 id=\"3-利用-overflow-清除浮动\"><a href=\"#3-利用-overflow-清除浮动\" class=\"headerlink\" title=\"3. 利用 overflow 清除浮动\"></a>3. 利用 overflow 清除浮动</h3><p>首先直观地看看，<code>overflow</code>是如何清除浮动的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;floatDiv&quot;</span>&gt;</span>float left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;textDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottomDiv&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;  </span><br><span class=\"line\"><span class=\"comment\">// 区别在这里  </span></span><br><span class=\"line\"><span class=\"attribute\">overflow</span>: auto; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.floatDiv</span>&#123;   </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">100px</span>; </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted red;  </span><br><span class=\"line\"><span class=\"attribute\">color</span>: red;   </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">4px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">float</span>: left; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.bottomDiv</span> &#123;    </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;   </span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted black; </span><br><span class=\"line\"><span class=\"attribute\">clear</span>: both; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.textDiv</span> &#123; </span><br><span class=\"line\"><span class=\"attribute\">color</span>: blue;   </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid blue; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不应用上面标识出来的CSS时，渲染结果和本文开始的第一个图形效果相同，应用CSS后的渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/cb75fb0469d3316e2ca6192f8316f7cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>仅仅只在父级元素上添加了一个值为auto的overflow属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的overflow值，还可以是除了”visible”之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll值会导致滚动条始终可见，hidden会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？</p>\n<p>要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">块格式化上下文(BFC)</a>,然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。</p>\n<p>这是从<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">MDN</a>上摘下来的BFC定义：</p>\n<blockquote>\n<p>A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.</p>\n</blockquote>\n<p>翻译过来就是：块级格式化上下文是CSS可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。</p>\n<p>块格式化上下文（BFC）有下面几个特点：</p>\n<ol>\n<li>BFC是就像一道屏障，隔离出了BFC内部和外部，内部和外部区域的渲染相互之间不影响。BFC有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。</li>\n<li>BFC的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和BFC区域是泾渭分明的，不可能重叠。</li>\n<li>BFC在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使BFC区域内只有一个浮动元素，BFC的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。</li>\n<li>HTML结构中，当构建BFC区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。<a href=\"https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float\">看这里</a></li>\n</ol>\n<p>有了这几点，就可以尝试解释为什么<code>overflow</code>（值不为<code>visible</code>）可以清除浮动了。</p>\n<p>当元素设置了<code>overflow</code>样式，且值不为<code>visible</code>时，该元素就建构了一个BFC(哪些情况下，元素可以建构出BFC，可以看查看CSS文档对<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\">BFC的定义</a>)。在我们的例子中，<code>.topDiv</code>因设置了值为<code>auto</code>的<code>overflow</code>样式，所以该元素建构出一个BFC，按照第三个特点，BFC的高度是要包括浮动元素的，所以<code>.topDiv</code>的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为<code>visible</code>的<code>overflow</code>不能建构BFC，<a href=\"https://stackoverflow.com/questions/9943503/why-does-css2-1-define-overflow-values-other-than-visible-to-establish-a-new-b?answertab=votes#tab-top\">这个答案</a>给了一个解释)</p>\n<p>其实，这里overflow的作用就是为了构建一个BFC区域，让内部浮动的影响都得以“内化”。如果你看了<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\">BFC的定义</a>，你会发现，构建一个BFC区域的方法有很多种，<code>overflow</code>只是其中的一种，那在这里，我们是否也可以利用其它的方式构建BFC，且同样能达到清除浮动的目的呢？</p>\n<p>BFC定义中说，<code>inline-block</code>同样也能构建BFC，那我们就用该样式来试试：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.topDiv</span> &#123;     </span><br><span class=\"line\"><span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;     </span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;    </span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid black;    </span><br><span class=\"line\"><span class=\"comment\">// 区别在这里    </span></span><br><span class=\"line\"><span class=\"attribute\">display</span>: inline-block; &#125; </span><br><span class=\"line\"><span class=\"comment\">// 其他样式相同，省略</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>渲染效果如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/aa859ff15404ede93450f03430b2d3ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。</p>\n<p>当然，要说明的是，在实际项目中选择采用哪种方式构建BFC是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用<code>inline-block</code>和选用<code>overflow</code>效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对<code>overflow</code>值的选择也要考虑其表现和影响。在各种构建BFC的方式中，<code>overflow</code>方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用<code>overflow</code>来清除浮动的原因吧。</p>\n<p>到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。</p>\n"},{"title":"前端鉴权","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:58:22.502Z","keywords":null,"description":null,"_content":"\n\n# 什么是前端鉴权\n# Cookie\n# session\n# token\n","source":"_posts/前端学习/前端鉴权.md","raw":"---\ntitle: 前端鉴权\ndate: 2023-04-26 15:16\nupdated: 星期一 10日 七月 2023 17:31:26\ntags: []\ncategories: [前端学习]\nkeywords:\ndescription: \n---\n\n\n# 什么是前端鉴权\n# Cookie\n# session\n# token\n","slug":"前端学习/前端鉴权","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7n000ii4v16p79cur7","content":"<h1 id=\"什么是前端鉴权\"><a href=\"#什么是前端鉴权\" class=\"headerlink\" title=\"什么是前端鉴权\"></a>什么是前端鉴权</h1><h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><h1 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h1><h1 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h1>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"什么是前端鉴权\"><a href=\"#什么是前端鉴权\" class=\"headerlink\" title=\"什么是前端鉴权\"></a>什么是前端鉴权</h1><h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><h1 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h1><h1 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h1>"},{"title":"Spring Boot入门","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:41.004Z","keywords":null,"description":null,"_content":"\n\n# 环境搭建\n## Spring Initializr\n[Spring Initializr](https://start.spring.io/)创建开发框架\n## JDK\nJava的开发工具包\n## Maven\nJava项目的构建工具\n作用：\n1. 统一项目结构\n2. 管理项目使用的jar包\n## git\n版本管理工具\n## Mysql\n数据库\n## IDAE\n集成开发工具\n# 创建项目\n## 创建maven项目结构\n## \n\n\n\n","source":"_posts/后端学习/Spring Boot入门.md","raw":"---\ntitle: Spring Boot入门\ndate: 2023-04-26 15:16\nupdated: 星期五 8日 九月 2023 11:59:37\ntags: []\ncategories: [后端学习]\nkeywords:\ndescription: \n---\n\n\n# 环境搭建\n## Spring Initializr\n[Spring Initializr](https://start.spring.io/)创建开发框架\n## JDK\nJava的开发工具包\n## Maven\nJava项目的构建工具\n作用：\n1. 统一项目结构\n2. 管理项目使用的jar包\n## git\n版本管理工具\n## Mysql\n数据库\n## IDAE\n集成开发工具\n# 创建项目\n## 创建maven项目结构\n## \n\n\n\n","slug":"后端学习/Spring Boot入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7p000mi4v18acj3jtl","content":"<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><h2 id=\"Spring-Initializr\"><a href=\"#Spring-Initializr\" class=\"headerlink\" title=\"Spring Initializr\"></a>Spring Initializr</h2><p><a href=\"https://start.spring.io/\">Spring Initializr</a>创建开发框架</p>\n<h2 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h2><p>Java的开发工具包</p>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>Java项目的构建工具<br>作用：</p>\n<ol>\n<li>统一项目结构</li>\n<li>管理项目使用的jar包</li>\n</ol>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p>版本管理工具</p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><p>数据库</p>\n<h2 id=\"IDAE\"><a href=\"#IDAE\" class=\"headerlink\" title=\"IDAE\"></a>IDAE</h2><p>集成开发工具</p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><h2 id=\"创建maven项目结构\"><a href=\"#创建maven项目结构\" class=\"headerlink\" title=\"创建maven项目结构\"></a>创建maven项目结构</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><h2 id=\"Spring-Initializr\"><a href=\"#Spring-Initializr\" class=\"headerlink\" title=\"Spring Initializr\"></a>Spring Initializr</h2><p><a href=\"https://start.spring.io/\">Spring Initializr</a>创建开发框架</p>\n<h2 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h2><p>Java的开发工具包</p>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>Java项目的构建工具<br>作用：</p>\n<ol>\n<li>统一项目结构</li>\n<li>管理项目使用的jar包</li>\n</ol>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p>版本管理工具</p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><p>数据库</p>\n<h2 id=\"IDAE\"><a href=\"#IDAE\" class=\"headerlink\" title=\"IDAE\"></a>IDAE</h2><p>集成开发工具</p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><h2 id=\"创建maven项目结构\"><a href=\"#创建maven项目结构\" class=\"headerlink\" title=\"创建maven项目结构\"></a>创建maven项目结构</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"title":"SpringBoot接入阿里云SLS云日志服务","date":"2023-09-12T08:13:00.000Z","updated":"2023-09-14T07:53:53.298Z","keywords":"标签外挂","description":"本学期会计大数据课程的第一个小组作业，对材料中利用云日志同一采集数据比较感兴趣，在这里基于springboot的logback日志输出的基础上，引入阿里云相关依赖，在指定的类中输出日志到阿里云SLS中，并储存到阿里云OSS中","_content":"\n# 准备工作\n\n本教程需要先完成以下工作，若已完成可直接跳到第二部分\n1. 获取阿里云账号的 AccessKey 以及 AccessKey Secret。（建议使用 RAM 访问控制，仅授权部分权限）\n2. 开通阿里云 SLS 服务，创建 Project 和 logstore\n\n{% hideToggle 准备工作 %}\n1. 要使用阿里云的云服务要先注册阿里云的账号，点击右上角的头像，进入 AccessKey，获取 AccessKey 以及 AccessKey Secret。官方建议使用 RAM 仅开放有限的权限，可查看官方文档的具体操作： [官方文档](https://help.aliyun.com/zh/ram/getting-started/create-a-ram-user-1)\n[sls 控制台，点击跳转](https://sls.console.aliyun.com/lognext/profile)\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082917.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082948.png)\n2. 开通阿里云 SLS，创建 Project,这里名字命名为 school-accounting，注意分隔符是 `-` 不是 `_` \n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913083948.png)\n**注意地域要选择和服务器同一地域的**\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084052.png)\n3. 创建 Logstore，这里名字命名为 cost_center\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084859.png)\n4. 在记下地域所属的 endpoint，之后会用到\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084722.png)\n{% endhideToggle %}\n\n# 在 SpringBoot 中配置SLS\nSpringBoot 支持多种日志框架，如 JavaUtilLogging，Log4J，Log4J2和 Logback。SpringBoot 默认采用 `Logback` 如没有特别需求，使用 Logback\n即可，这里的示例也是采用 Logback\n\n## 配置文件\n\n1. 在项目的启动模块的 `pom.xml` 中加入阿里云 sls 相关的依赖,并且重新生成 `Maven项目依赖`\n```xml\n<dependencies>\n    <dependency>  \n        <groupId>com.google.protobuf</groupId>  \n        <artifactId>protobuf-java</artifactId>  \n        <version>2.5.0</version>  \n    </dependency>    \n    <dependency>\n\t    <groupId>com.aliyun.openservices</groupId>  \n        <artifactId>aliyun-log-logback-appender</artifactId>  \n        <version>0.1.18</version>  \n    </dependency>\n</dependencies>\n```\n2. 修改 `resources` 文件夹下的 `logback-spring.xml` 文件\n```xml\n<!--阿里云SLS-->  \n<!--为了防止进程退出时，内存中的数据丢失，请加上此选项-->  \n<shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/>  \n  \n<appender name=\"loghubAppender\" class=\"com.aliyun.openservices.log.logback.LoghubAppender\">  \n   <!--必选项-->  \n   <!-- 账号及网络配置 -->  \n   <endpoint>你的endpoint</endpoint>  \n   <accessKeyId>accessKeyId</accessKeyId>  \n   <accessKeySecret>你的accessKeySecret</accessKeySecret>  \n  \n   <!-- sls 项目配置 -->  \n   <project>school-accounting</project>  \n   <logStore>cost_center</logStore>  \n   <!--必选项 (end)-->   <totalSizeInBytes>104857600</totalSizeInBytes>  \n   <maxBlockMs>0</maxBlockMs>  \n   <ioThreadCount>8</ioThreadCount>  \n   <batchSizeThresholdInBytes>524288</batchSizeThresholdInBytes>  \n   <batchCountThreshold>4096</batchCountThreshold>  \n   <lingerMs>2000</lingerMs>  \n   <retries>10</retries>  \n   <baseRetryBackoffMs>100</baseRetryBackoffMs>  \n   <maxRetryBackoffMs>50000</maxRetryBackoffMs>  \n  \n   <encoder>      <pattern>%d %-5level [%thread] %logger{0}: %msg</pattern>  \n   </encoder>  \n   <!-- 只打印INFO级别的日志 -->  \n   <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">  \n      <level>INFO</level>  \n      <onMatch>ACCEPT</onMatch>  \n      <onMismatch>DENY</onMismatch>  \n   </filter>\n</appender>  \n<!--阿里云SLS (end)-->\n```\n> 以上配置之后还没有指定哪个模块输出的日志要上传的 sls 中，下面的配置根据项目的具体需求来选择，这里演示了两种:\n\n\n{% tabs sls %}  \n<!-- tab 指定业务中的类才会接入sls -->  \n例如以下只有拦截器中的日志会被输入到 sls 中，其中 `loghubAppender` 是上面的配置的 appender name，会输入到 sls 中；STDOUT 是同时也在输出到控制台中\n```xml\n<logger name=\"org.jeecg.config.mybatis.MybatisInterceptor\" level=\"info\" additivity=\"false\">  \n   <appender-ref ref=\"STDOUT\" />  \n   <appender-ref ref=\"loghubAppender\" />  \n</logger>\n```\n<!-- endtab -->  \n  \n<!-- tab 所有的日志都接入到sls中 -->  \n```xml\n<root level=\"INFO\">  \n\t<appender-ref ref=\"STDOUT\" />  \n\t<appender-ref ref=\"FILE\" />  \n\t<appender-ref ref=\"HTML\" />  \n\t<appender-ref ref=\"FILE_HTML\" />  \n+\t<appender-ref ref=\"loghubAppender\" />  \n</root>\n``` \n<!-- endtab -->  \n{% endtabs %}\n\n## 在程序中输出日志\n在下列的示例中，拦截了 mybatis 的插入方法，指定了特定的表，将插入的对象以支付串的形式输出。当系统往 `cd_calc_main` 表中插入记录时，会往 sls 中输出日志\n```java\n@Slf4j  \n@Component  \n@Intercepts({ @Signature(type = Executor.class, method = \"update\", args = { MappedStatement.class, Object.class }),  \n      @Signature(type = StatementHandler.class, method = \"prepare\", args = {Connection.class, Integer.class})  \n})  \npublic class MybatisInterceptor implements Interceptor {  \n  \n   private final Logger logger = LoggerFactory.getLogger(MybatisInterceptor.class);  \n   \n@Override  \npublic Object intercept(Invocation invocation) throws Throwable {\n\tif (SqlCommandType.INSERT == sqlCommandType) {  \n\t\n\t\tMappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n\t\t//其他代码省略\n\t\t\n\t   //写入阿里云的sls中  \n\t   BoundSql boundSql = mappedStatement.getBoundSql(parameter);  \n\t   String sql = boundSql.getSql();  \n\t   String tableName = getTableNameFromSql(sql);  \n\t   if (Objects.equals(tableName, \"cd_calc_main\")){  \n\t      ObjectMapper mapper = new ObjectMapper();  \n\t      String json = mapper.writeValueAsString(parameter);  \n\t      logger.info(json);  \n\t   }  \n\t}\n}\n\n//获取插入数据sql的表名，匹配into后面的单词\nprivate static final Pattern TABLE_NAME_PATTERN =  \n      Pattern.compile(\"\\\\binto\\\\b\\\\s*(\\\\w+)\", Pattern.CASE_INSENSITIVE);  \nprivate String getTableNameFromSql(String sql) {  \n   Matcher matcher = TABLE_NAME_PATTERN.matcher(sql);  \n   if (matcher.find()) {  \n      return matcher.group(1);  \n   }  \n   return null;  \n}\n}\n```\n\n## 运行项目，预览数据接入情况\n点击右侧边栏数据接入的＋号\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085917.png)\n\n阿里云的 SLS 支持 JAVA 的 Logback、Log4J 和 Log4J2，在弹出窗口中点击 `LogBack接入`\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085712.png)\n\n之后运行程序，在预览界面查看 sls 接受到的日志数据\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913101935.png)\n\nSLS 中一个十分好用的功能是 `自动生成索引`，在上面的例子中我们把 CdCalcMain 对象的每个属性转换成了 `Json` 格式的字符串作为 message 的 value，点击 `自动生成索引`，SLS 能自动试别 message 为 `json` 格式，标记了每个 key 值\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143106.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143354.png)\n观察输出的日志格式，有以下几个字段：\n1. \\_\\_source\\_\\_：表示发出日志的 ip 地址，在本实例中就是本机的 ip 地址\n2. \\_\\_topic\\_\\_：日志主题，可以在 `logback-spring.xml` 中配置\n3. location：是程序输出的位置\n4. log：是程序控制台输出日志的内容\n5. message：是日志输出的内容\n\n","source":"_posts/后端学习/SpringBoot接入阿里云SLS云日志服务.md","raw":"---\ntitle: SpringBoot接入阿里云SLS云日志服务\ndate: 2023-09-12 16:13\nupdated: 星期二 12日 九月 2023 16:13:21\ntags:\n  - java\n  - 云日志\n  - 大数据\ncategories:\n  - 后端学习\nkeywords: 标签外挂\ndescription: 本学期会计大数据课程的第一个小组作业，对材料中利用云日志同一采集数据比较感兴趣，在这里基于springboot的logback日志输出的基础上，引入阿里云相关依赖，在指定的类中输出日志到阿里云SLS中，并储存到阿里云OSS中\n---\n\n# 准备工作\n\n本教程需要先完成以下工作，若已完成可直接跳到第二部分\n1. 获取阿里云账号的 AccessKey 以及 AccessKey Secret。（建议使用 RAM 访问控制，仅授权部分权限）\n2. 开通阿里云 SLS 服务，创建 Project 和 logstore\n\n{% hideToggle 准备工作 %}\n1. 要使用阿里云的云服务要先注册阿里云的账号，点击右上角的头像，进入 AccessKey，获取 AccessKey 以及 AccessKey Secret。官方建议使用 RAM 仅开放有限的权限，可查看官方文档的具体操作： [官方文档](https://help.aliyun.com/zh/ram/getting-started/create-a-ram-user-1)\n[sls 控制台，点击跳转](https://sls.console.aliyun.com/lognext/profile)\n\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082917.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082948.png)\n2. 开通阿里云 SLS，创建 Project,这里名字命名为 school-accounting，注意分隔符是 `-` 不是 `_` \n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913083948.png)\n**注意地域要选择和服务器同一地域的**\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084052.png)\n3. 创建 Logstore，这里名字命名为 cost_center\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084859.png)\n4. 在记下地域所属的 endpoint，之后会用到\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084722.png)\n{% endhideToggle %}\n\n# 在 SpringBoot 中配置SLS\nSpringBoot 支持多种日志框架，如 JavaUtilLogging，Log4J，Log4J2和 Logback。SpringBoot 默认采用 `Logback` 如没有特别需求，使用 Logback\n即可，这里的示例也是采用 Logback\n\n## 配置文件\n\n1. 在项目的启动模块的 `pom.xml` 中加入阿里云 sls 相关的依赖,并且重新生成 `Maven项目依赖`\n```xml\n<dependencies>\n    <dependency>  \n        <groupId>com.google.protobuf</groupId>  \n        <artifactId>protobuf-java</artifactId>  \n        <version>2.5.0</version>  \n    </dependency>    \n    <dependency>\n\t    <groupId>com.aliyun.openservices</groupId>  \n        <artifactId>aliyun-log-logback-appender</artifactId>  \n        <version>0.1.18</version>  \n    </dependency>\n</dependencies>\n```\n2. 修改 `resources` 文件夹下的 `logback-spring.xml` 文件\n```xml\n<!--阿里云SLS-->  \n<!--为了防止进程退出时，内存中的数据丢失，请加上此选项-->  \n<shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/>  \n  \n<appender name=\"loghubAppender\" class=\"com.aliyun.openservices.log.logback.LoghubAppender\">  \n   <!--必选项-->  \n   <!-- 账号及网络配置 -->  \n   <endpoint>你的endpoint</endpoint>  \n   <accessKeyId>accessKeyId</accessKeyId>  \n   <accessKeySecret>你的accessKeySecret</accessKeySecret>  \n  \n   <!-- sls 项目配置 -->  \n   <project>school-accounting</project>  \n   <logStore>cost_center</logStore>  \n   <!--必选项 (end)-->   <totalSizeInBytes>104857600</totalSizeInBytes>  \n   <maxBlockMs>0</maxBlockMs>  \n   <ioThreadCount>8</ioThreadCount>  \n   <batchSizeThresholdInBytes>524288</batchSizeThresholdInBytes>  \n   <batchCountThreshold>4096</batchCountThreshold>  \n   <lingerMs>2000</lingerMs>  \n   <retries>10</retries>  \n   <baseRetryBackoffMs>100</baseRetryBackoffMs>  \n   <maxRetryBackoffMs>50000</maxRetryBackoffMs>  \n  \n   <encoder>      <pattern>%d %-5level [%thread] %logger{0}: %msg</pattern>  \n   </encoder>  \n   <!-- 只打印INFO级别的日志 -->  \n   <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">  \n      <level>INFO</level>  \n      <onMatch>ACCEPT</onMatch>  \n      <onMismatch>DENY</onMismatch>  \n   </filter>\n</appender>  \n<!--阿里云SLS (end)-->\n```\n> 以上配置之后还没有指定哪个模块输出的日志要上传的 sls 中，下面的配置根据项目的具体需求来选择，这里演示了两种:\n\n\n{% tabs sls %}  \n<!-- tab 指定业务中的类才会接入sls -->  \n例如以下只有拦截器中的日志会被输入到 sls 中，其中 `loghubAppender` 是上面的配置的 appender name，会输入到 sls 中；STDOUT 是同时也在输出到控制台中\n```xml\n<logger name=\"org.jeecg.config.mybatis.MybatisInterceptor\" level=\"info\" additivity=\"false\">  \n   <appender-ref ref=\"STDOUT\" />  \n   <appender-ref ref=\"loghubAppender\" />  \n</logger>\n```\n<!-- endtab -->  \n  \n<!-- tab 所有的日志都接入到sls中 -->  \n```xml\n<root level=\"INFO\">  \n\t<appender-ref ref=\"STDOUT\" />  \n\t<appender-ref ref=\"FILE\" />  \n\t<appender-ref ref=\"HTML\" />  \n\t<appender-ref ref=\"FILE_HTML\" />  \n+\t<appender-ref ref=\"loghubAppender\" />  \n</root>\n``` \n<!-- endtab -->  \n{% endtabs %}\n\n## 在程序中输出日志\n在下列的示例中，拦截了 mybatis 的插入方法，指定了特定的表，将插入的对象以支付串的形式输出。当系统往 `cd_calc_main` 表中插入记录时，会往 sls 中输出日志\n```java\n@Slf4j  \n@Component  \n@Intercepts({ @Signature(type = Executor.class, method = \"update\", args = { MappedStatement.class, Object.class }),  \n      @Signature(type = StatementHandler.class, method = \"prepare\", args = {Connection.class, Integer.class})  \n})  \npublic class MybatisInterceptor implements Interceptor {  \n  \n   private final Logger logger = LoggerFactory.getLogger(MybatisInterceptor.class);  \n   \n@Override  \npublic Object intercept(Invocation invocation) throws Throwable {\n\tif (SqlCommandType.INSERT == sqlCommandType) {  \n\t\n\t\tMappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];\n\t\t//其他代码省略\n\t\t\n\t   //写入阿里云的sls中  \n\t   BoundSql boundSql = mappedStatement.getBoundSql(parameter);  \n\t   String sql = boundSql.getSql();  \n\t   String tableName = getTableNameFromSql(sql);  \n\t   if (Objects.equals(tableName, \"cd_calc_main\")){  \n\t      ObjectMapper mapper = new ObjectMapper();  \n\t      String json = mapper.writeValueAsString(parameter);  \n\t      logger.info(json);  \n\t   }  \n\t}\n}\n\n//获取插入数据sql的表名，匹配into后面的单词\nprivate static final Pattern TABLE_NAME_PATTERN =  \n      Pattern.compile(\"\\\\binto\\\\b\\\\s*(\\\\w+)\", Pattern.CASE_INSENSITIVE);  \nprivate String getTableNameFromSql(String sql) {  \n   Matcher matcher = TABLE_NAME_PATTERN.matcher(sql);  \n   if (matcher.find()) {  \n      return matcher.group(1);  \n   }  \n   return null;  \n}\n}\n```\n\n## 运行项目，预览数据接入情况\n点击右侧边栏数据接入的＋号\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085917.png)\n\n阿里云的 SLS 支持 JAVA 的 Logback、Log4J 和 Log4J2，在弹出窗口中点击 `LogBack接入`\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085712.png)\n\n之后运行程序，在预览界面查看 sls 接受到的日志数据\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913101935.png)\n\nSLS 中一个十分好用的功能是 `自动生成索引`，在上面的例子中我们把 CdCalcMain 对象的每个属性转换成了 `Json` 格式的字符串作为 message 的 value，点击 `自动生成索引`，SLS 能自动试别 message 为 `json` 格式，标记了每个 key 值\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143106.png)\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143354.png)\n观察输出的日志格式，有以下几个字段：\n1. \\_\\_source\\_\\_：表示发出日志的 ip 地址，在本实例中就是本机的 ip 地址\n2. \\_\\_topic\\_\\_：日志主题，可以在 `logback-spring.xml` 中配置\n3. location：是程序输出的位置\n4. log：是程序控制台输出日志的内容\n5. message：是日志输出的内容\n\n","slug":"后端学习/SpringBoot接入阿里云SLS云日志服务","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7q000oi4v12euhey4k","content":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>本教程需要先完成以下工作，若已完成可直接跳到第二部分</p>\n<ol>\n<li>获取阿里云账号的 AccessKey 以及 AccessKey Secret。（建议使用 RAM 访问控制，仅授权部分权限）</li>\n<li>开通阿里云 SLS 服务，创建 Project 和 logstore</li>\n</ol>\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">准备工作</summary><div class=\"toggle-content\"><ol>\n<li>要使用阿里云的云服务要先注册阿里云的账号，点击右上角的头像，进入 AccessKey，获取 AccessKey 以及 AccessKey Secret。官方建议使用 RAM 仅开放有限的权限，可查看官方文档的具体操作： <a href=\"https://help.aliyun.com/zh/ram/getting-started/create-a-ram-user-1\">官方文档</a><br><a href=\"https://sls.console.aliyun.com/lognext/profile\">sls 控制台，点击跳转</a></li>\n</ol>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082917.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082948.png\"><br>2. 开通阿里云 SLS，创建 Project,这里名字命名为 school-accounting，注意分隔符是 <code>-</code> 不是 <code>_</code><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913083948.png\"><br><strong>注意地域要选择和服务器同一地域的</strong><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084052.png\"><br>3. 创建 Logstore，这里名字命名为 cost_center<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084859.png\"><br>4. 在记下地域所属的 endpoint，之后会用到<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084722.png\"></p>\n</div></details>\n\n<h1 id=\"在-SpringBoot-中配置SLS\"><a href=\"#在-SpringBoot-中配置SLS\" class=\"headerlink\" title=\"在 SpringBoot 中配置SLS\"></a>在 SpringBoot 中配置SLS</h1><p>SpringBoot 支持多种日志框架，如 JavaUtilLogging，Log4J，Log4J2和 Logback。SpringBoot 默认采用 <code>Logback</code> 如没有特别需求，使用 Logback<br>即可，这里的示例也是采用 Logback</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ol>\n<li>在项目的启动模块的 <code>pom.xml</code> 中加入阿里云 sls 相关的依赖,并且重新生成 <code>Maven项目依赖</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.protobuf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>protobuf-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.openservices<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-log-logback-appender<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.18<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>修改 <code>resources</code> 文件夹下的 <code>logback-spring.xml</code> 文件<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--阿里云SLS--&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!--为了防止进程退出时，内存中的数据丢失，请加上此选项--&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shutdownHook</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.hook.DelayingShutdownHook&quot;</span>/&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.aliyun.openservices.log.logback.LoghubAppender&quot;</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!--必选项--&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 账号及网络配置 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">endpoint</span>&gt;</span>你的endpoint<span class=\"tag\">&lt;/<span class=\"name\">endpoint</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">accessKeyId</span>&gt;</span>accessKeyId<span class=\"tag\">&lt;/<span class=\"name\">accessKeyId</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">accessKeySecret</span>&gt;</span>你的accessKeySecret<span class=\"tag\">&lt;/<span class=\"name\">accessKeySecret</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- sls 项目配置 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span>school-accounting<span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">logStore</span>&gt;</span>cost_center<span class=\"tag\">&lt;/<span class=\"name\">logStore</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!--必选项 (end)--&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">totalSizeInBytes</span>&gt;</span>104857600<span class=\"tag\">&lt;/<span class=\"name\">totalSizeInBytes</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">maxBlockMs</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">maxBlockMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ioThreadCount</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">ioThreadCount</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">batchSizeThresholdInBytes</span>&gt;</span>524288<span class=\"tag\">&lt;/<span class=\"name\">batchSizeThresholdInBytes</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">batchCountThreshold</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">batchCountThreshold</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">lingerMs</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">lingerMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">retries</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">retries</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">baseRetryBackoffMs</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">baseRetryBackoffMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">maxRetryBackoffMs</span>&gt;</span>50000<span class=\"tag\">&lt;/<span class=\"name\">maxRetryBackoffMs</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d %-5level [%thread] %logger&#123;0&#125;: %msg<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 只打印INFO级别的日志 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!--阿里云SLS (end)--&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上配置之后还没有指定哪个模块输出的日志要上传的 sls 中，下面的配置根据项目的具体需求来选择，这里演示了两种:</p>\n</blockquote>\n</li>\n</ol>\n<div class=\"tabs\" id=\"sls\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#sls-1\">指定业务中的类才会接入sls</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#sls-2\">所有的日志都接入到sls中</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"sls-1\"><p>例如以下只有拦截器中的日志会被输入到 sls 中，其中 <code>loghubAppender</code> 是上面的配置的 appender name，会输入到 sls 中；STDOUT 是同时也在输出到控制台中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.jeecg.config.mybatis.MybatisInterceptor&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span> <span class=\"attr\">additivity</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"sls-2\"><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span>&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;FILE&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;HTML&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;FILE_HTML&quot;</span> /&gt;</span>  </span><br><span class=\"line\">+\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"在程序中输出日志\"><a href=\"#在程序中输出日志\" class=\"headerlink\" title=\"在程序中输出日志\"></a>在程序中输出日志</h2><p>在下列的示例中，拦截了 mybatis 的插入方法，指定了特定的表，将插入的对象以支付串的形式输出。当系统往 <code>cd_calc_main</code> 表中插入记录时，会往 sls 中输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"meta\">@Intercepts(&#123; @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123; MappedStatement.class, Object.class &#125;),  </span></span><br><span class=\"line\"><span class=\"meta\">      @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;)  </span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interceptor</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MybatisInterceptor.class);  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT == sqlCommandType) &#123;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">MappedStatement</span> <span class=\"variable\">mappedStatement</span> <span class=\"operator\">=</span> (MappedStatement) invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//其他代码省略</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t   <span class=\"comment\">//写入阿里云的sls中  </span></span><br><span class=\"line\">\t   <span class=\"type\">BoundSql</span> <span class=\"variable\">boundSql</span> <span class=\"operator\">=</span> mappedStatement.getBoundSql(parameter);  </span><br><span class=\"line\">\t   <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> boundSql.getSql();  </span><br><span class=\"line\">\t   <span class=\"type\">String</span> <span class=\"variable\">tableName</span> <span class=\"operator\">=</span> getTableNameFromSql(sql);  </span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (Objects.equals(tableName, <span class=\"string\">&quot;cd_calc_main&quot;</span>))&#123;  </span><br><span class=\"line\">\t      <span class=\"type\">ObjectMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();  </span><br><span class=\"line\">\t      <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> mapper.writeValueAsString(parameter);  </span><br><span class=\"line\">\t      logger.info(json);  </span><br><span class=\"line\">\t   &#125;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取插入数据sql的表名，匹配into后面的单词</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Pattern</span> <span class=\"variable\">TABLE_NAME_PATTERN</span> <span class=\"operator\">=</span>  </span><br><span class=\"line\">      Pattern.compile(<span class=\"string\">&quot;\\\\binto\\\\b\\\\s*(\\\\w+)&quot;</span>, Pattern.CASE_INSENSITIVE);  </span><br><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">getTableNameFromSql</span><span class=\"params\">(String sql)</span> &#123;  </span><br><span class=\"line\">   <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> TABLE_NAME_PATTERN.matcher(sql);  </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (matcher.find()) &#123;  </span><br><span class=\"line\">      <span class=\"keyword\">return</span> matcher.group(<span class=\"number\">1</span>);  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行项目，预览数据接入情况\"><a href=\"#运行项目，预览数据接入情况\" class=\"headerlink\" title=\"运行项目，预览数据接入情况\"></a>运行项目，预览数据接入情况</h2><p>点击右侧边栏数据接入的＋号<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085917.png\"></p>\n<p>阿里云的 SLS 支持 JAVA 的 Logback、Log4J 和 Log4J2，在弹出窗口中点击 <code>LogBack接入</code><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085712.png\"></p>\n<p>之后运行程序，在预览界面查看 sls 接受到的日志数据<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913101935.png\"></p>\n<p>SLS 中一个十分好用的功能是 <code>自动生成索引</code>，在上面的例子中我们把 CdCalcMain 对象的每个属性转换成了 <code>Json</code> 格式的字符串作为 message 的 value，点击 <code>自动生成索引</code>，SLS 能自动试别 message 为 <code>json</code> 格式，标记了每个 key 值<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143106.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143354.png\"><br>观察输出的日志格式，有以下几个字段：</p>\n<ol>\n<li>__source__：表示发出日志的 ip 地址，在本实例中就是本机的 ip 地址</li>\n<li>__topic__：日志主题，可以在 <code>logback-spring.xml</code> 中配置</li>\n<li>location：是程序输出的位置</li>\n<li>log：是程序控制台输出日志的内容</li>\n<li>message：是日志输出的内容</li>\n</ol>\n","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>本教程需要先完成以下工作，若已完成可直接跳到第二部分</p>\n<ol>\n<li>获取阿里云账号的 AccessKey 以及 AccessKey Secret。（建议使用 RAM 访问控制，仅授权部分权限）</li>\n<li>开通阿里云 SLS 服务，创建 Project 和 logstore</li>\n</ol>\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">准备工作</summary><div class=\"toggle-content\"><ol>\n<li>要使用阿里云的云服务要先注册阿里云的账号，点击右上角的头像，进入 AccessKey，获取 AccessKey 以及 AccessKey Secret。官方建议使用 RAM 仅开放有限的权限，可查看官方文档的具体操作： <a href=\"https://help.aliyun.com/zh/ram/getting-started/create-a-ram-user-1\">官方文档</a><br><a href=\"https://sls.console.aliyun.com/lognext/profile\">sls 控制台，点击跳转</a></li>\n</ol>\n<p><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082917.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913082948.png\"><br>2. 开通阿里云 SLS，创建 Project,这里名字命名为 school-accounting，注意分隔符是 <code>-</code> 不是 <code>_</code><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913083948.png\"><br><strong>注意地域要选择和服务器同一地域的</strong><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084052.png\"><br>3. 创建 Logstore，这里名字命名为 cost_center<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084859.png\"><br>4. 在记下地域所属的 endpoint，之后会用到<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913084722.png\"></p>\n</div></details>\n\n<h1 id=\"在-SpringBoot-中配置SLS\"><a href=\"#在-SpringBoot-中配置SLS\" class=\"headerlink\" title=\"在 SpringBoot 中配置SLS\"></a>在 SpringBoot 中配置SLS</h1><p>SpringBoot 支持多种日志框架，如 JavaUtilLogging，Log4J，Log4J2和 Logback。SpringBoot 默认采用 <code>Logback</code> 如没有特别需求，使用 Logback<br>即可，这里的示例也是采用 Logback</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><ol>\n<li>在项目的启动模块的 <code>pom.xml</code> 中加入阿里云 sls 相关的依赖,并且重新生成 <code>Maven项目依赖</code><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.protobuf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>protobuf-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.aliyun.openservices<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aliyun-log-logback-appender<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1.18<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>修改 <code>resources</code> 文件夹下的 <code>logback-spring.xml</code> 文件<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--阿里云SLS--&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!--为了防止进程退出时，内存中的数据丢失，请加上此选项--&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shutdownHook</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.hook.DelayingShutdownHook&quot;</span>/&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.aliyun.openservices.log.logback.LoghubAppender&quot;</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!--必选项--&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 账号及网络配置 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">endpoint</span>&gt;</span>你的endpoint<span class=\"tag\">&lt;/<span class=\"name\">endpoint</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">accessKeyId</span>&gt;</span>accessKeyId<span class=\"tag\">&lt;/<span class=\"name\">accessKeyId</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">accessKeySecret</span>&gt;</span>你的accessKeySecret<span class=\"tag\">&lt;/<span class=\"name\">accessKeySecret</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- sls 项目配置 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span>school-accounting<span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">logStore</span>&gt;</span>cost_center<span class=\"tag\">&lt;/<span class=\"name\">logStore</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!--必选项 (end)--&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">totalSizeInBytes</span>&gt;</span>104857600<span class=\"tag\">&lt;/<span class=\"name\">totalSizeInBytes</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">maxBlockMs</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">maxBlockMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ioThreadCount</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">ioThreadCount</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">batchSizeThresholdInBytes</span>&gt;</span>524288<span class=\"tag\">&lt;/<span class=\"name\">batchSizeThresholdInBytes</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">batchCountThreshold</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">batchCountThreshold</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">lingerMs</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">lingerMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">retries</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">retries</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">baseRetryBackoffMs</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">baseRetryBackoffMs</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">maxRetryBackoffMs</span>&gt;</span>50000<span class=\"tag\">&lt;/<span class=\"name\">maxRetryBackoffMs</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d %-5level [%thread] %logger&#123;0&#125;: %msg<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 只打印INFO级别的日志 --&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"comment\">&lt;!--阿里云SLS (end)--&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上配置之后还没有指定哪个模块输出的日志要上传的 sls 中，下面的配置根据项目的具体需求来选择，这里演示了两种:</p>\n</blockquote>\n</li>\n</ol>\n<div class=\"tabs\" id=\"sls\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#sls-1\">指定业务中的类才会接入sls</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#sls-2\">所有的日志都接入到sls中</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"sls-1\"><p>例如以下只有拦截器中的日志会被输入到 sls 中，其中 <code>loghubAppender</code> 是上面的配置的 appender name，会输入到 sls 中；STDOUT 是同时也在输出到控制台中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.jeecg.config.mybatis.MybatisInterceptor&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span> <span class=\"attr\">additivity</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"sls-2\"><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span>&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;STDOUT&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;FILE&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;HTML&quot;</span> /&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;FILE_HTML&quot;</span> /&gt;</span>  </span><br><span class=\"line\">+\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loghubAppender&quot;</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"在程序中输出日志\"><a href=\"#在程序中输出日志\" class=\"headerlink\" title=\"在程序中输出日志\"></a>在程序中输出日志</h2><p>在下列的示例中，拦截了 mybatis 的插入方法，指定了特定的表，将插入的对象以支付串的形式输出。当系统往 <code>cd_calc_main</code> 表中插入记录时，会往 sls 中输出日志</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"meta\">@Intercepts(&#123; @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123; MappedStatement.class, Object.class &#125;),  </span></span><br><span class=\"line\"><span class=\"meta\">      @Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = &#123;Connection.class, Integer.class&#125;)  </span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interceptor</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MybatisInterceptor.class);  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (SqlCommandType.INSERT == sqlCommandType) &#123;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"type\">MappedStatement</span> <span class=\"variable\">mappedStatement</span> <span class=\"operator\">=</span> (MappedStatement) invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//其他代码省略</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t   <span class=\"comment\">//写入阿里云的sls中  </span></span><br><span class=\"line\">\t   <span class=\"type\">BoundSql</span> <span class=\"variable\">boundSql</span> <span class=\"operator\">=</span> mappedStatement.getBoundSql(parameter);  </span><br><span class=\"line\">\t   <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> boundSql.getSql();  </span><br><span class=\"line\">\t   <span class=\"type\">String</span> <span class=\"variable\">tableName</span> <span class=\"operator\">=</span> getTableNameFromSql(sql);  </span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> (Objects.equals(tableName, <span class=\"string\">&quot;cd_calc_main&quot;</span>))&#123;  </span><br><span class=\"line\">\t      <span class=\"type\">ObjectMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();  </span><br><span class=\"line\">\t      <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> mapper.writeValueAsString(parameter);  </span><br><span class=\"line\">\t      logger.info(json);  </span><br><span class=\"line\">\t   &#125;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取插入数据sql的表名，匹配into后面的单词</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Pattern</span> <span class=\"variable\">TABLE_NAME_PATTERN</span> <span class=\"operator\">=</span>  </span><br><span class=\"line\">      Pattern.compile(<span class=\"string\">&quot;\\\\binto\\\\b\\\\s*(\\\\w+)&quot;</span>, Pattern.CASE_INSENSITIVE);  </span><br><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">getTableNameFromSql</span><span class=\"params\">(String sql)</span> &#123;  </span><br><span class=\"line\">   <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> TABLE_NAME_PATTERN.matcher(sql);  </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (matcher.find()) &#123;  </span><br><span class=\"line\">      <span class=\"keyword\">return</span> matcher.group(<span class=\"number\">1</span>);  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行项目，预览数据接入情况\"><a href=\"#运行项目，预览数据接入情况\" class=\"headerlink\" title=\"运行项目，预览数据接入情况\"></a>运行项目，预览数据接入情况</h2><p>点击右侧边栏数据接入的＋号<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085917.png\"></p>\n<p>阿里云的 SLS 支持 JAVA 的 Logback、Log4J 和 Log4J2，在弹出窗口中点击 <code>LogBack接入</code><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913085712.png\"></p>\n<p>之后运行程序，在预览界面查看 sls 接受到的日志数据<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913101935.png\"></p>\n<p>SLS 中一个十分好用的功能是 <code>自动生成索引</code>，在上面的例子中我们把 CdCalcMain 对象的每个属性转换成了 <code>Json</code> 格式的字符串作为 message 的 value，点击 <code>自动生成索引</code>，SLS 能自动试别 message 为 <code>json</code> 格式，标记了每个 key 值<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143106.png\"><br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230913143354.png\"><br>观察输出的日志格式，有以下几个字段：</p>\n<ol>\n<li>__source__：表示发出日志的 ip 地址，在本实例中就是本机的 ip 地址</li>\n<li>__topic__：日志主题，可以在 <code>logback-spring.xml</code> 中配置</li>\n<li>location：是程序输出的位置</li>\n<li>log：是程序控制台输出日志的内容</li>\n<li>message：是日志输出的内容</li>\n</ol>\n"},{"title":"hexo标签外挂","date":"2023-09-13T00:25:00.000Z","updated":"2023-09-14T15:59:22.426Z","keywords":"标签外挂","description":null,"_content":"\n# Note\n\n语法：\n```markdown\n{% note [class] [no-icon] [style] %}  \nAny content (support inline tags too.io).  \n{% endnote %}\n```\n\n|名称|用法|\n|---|---|\n|class|【可选】标识，不同的标识有不同的配色  <br>（ default / primary / success / info / warning / danger ）|\n|no-icon|【可选】不显示 icon |\n|style|【可选】可以覆盖配置中的 style  <br>（simple/modern/flat/disabled）|\n\n例子：\n```markdown\n{% note flat %}  \n默认 提示块标签  \n{% endnote %}  \n{% note default flat %}  \ndefault 提示块标签  \n{% endnote %}  \n{% note primary flat %}  \nprimary 提示块标签  \n{% endnote %}  \n{% note success flat %}  \nsuccess 提示块标签  \n{% endnote %}  \n{% note info flat %}  \ninfo 提示块标签  \n{% endnote %}  \n{% note warning flat %}  \nwarning 提示块标签  \n{% endnote %}  \n{% note danger flat %}  \ndanger 提示块标签  \n{% endnote %}\n```\n\n预览：\n\n{% note flat %}  \n默认提示块标签  \n{% endnote %}  \n{% note default flat %}  \ndefault 提示块标签  \n{% endnote %}  \n{% note primary flat %}  \nprimary 提示块标签  \n{% endnote %}  \n{% note success flat %}  \nsuccess 提示块标签  \n{% endnote %}  \n{% note info flat %}  \ninfo 提示块标签  \n{% endnote %}  \n{% note warning flat %}  \nwarning 提示块标签  \n{% endnote %}  \n{% note danger flat %}  \ndanger 提示块标签  \n{% endnote %}\n\n# Tag-hide\n如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。( display 不能包含英文逗号，可用 `&sbquo;`)\n\n语法：\n```markdown\n{% hideToggle display,bg,color %} \n<br>content <br>\n{% endhideToggle %}\n```\n\n例子：\n```markdown\n{% hideToggle Butterfly安装方法 %}  \n在你的博客根目录里  \n  \ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n如果想要安装比较新的dev分支，可以  \n  \ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n{% endhideToggle %}\n```\n\n{% hideToggle Butterfly 安装方法 %}  \n在你的博客根目录里  \n  \ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n如果想要安装比较新的 dev 分支，可以  \n  \ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n{% endhideToggle %}\n\n# Tabs\n\n语法：\n```markdown\n{% tabs Unique name, [index] %}  \n<!-- tab [Tab caption] [@icon] -->  \nAny content (support inline tags too).  \n<!-- endtab -->  \n{% endtabs %}  \n  \nUnique name   : Unique name of tabs block tag without comma.  \n                Will be used in #id's as prefix for each tab with their index numbers.  \n                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.  \n                Only for current url of post/page must be unique!  \n[index]       : Index number of active tab.  \n                If not specified, first tab (1) will be selected.  \n                If index is -1, no tab will be selected. It's will be something like spoiler.  \n                Optional parameter.  \n[Tab caption] : Caption of current tab.  \n                If not caption specified, unique name with tab index suffix will be used as caption of tab.  \n                If not caption specified, but specified icon, caption will empty.  \n                Optional parameter.  \n[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')  \n                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.  \n                Optional parameter.\n```\n\n例子：\n```markdown\n{% tabs Tab %}  \n<!-- tab 第一个Tab -->  \n**tab名字为第一个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第二个Tab -->  \n**tab名字为第二个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第三个Tab -->  \n**tab名字为第三个Tab**  \n<!-- endtab -->  \n  \n<!-- tab @fab fa-apple-pay -->  \n**只有图标 没有Tab名字**  \n<!-- endtab -->  \n  \n<!-- tab 炸弹@fas fa-bomb -->  \n**名字+icon**  \n<!-- endtab -->  \n{% endtabs %}\n```\n\n{% tabs Tab %}  \n<!-- tab 第一个Tab -->  \n**tab名字为第一个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第二个Tab -->  \n**tab名字为第二个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第三个Tab -->  \n**tab名字为第三个Tab**  \n<!-- endtab -->  \n  \n<!-- tab @fab fa-apple-pay -->  \n**只有图标 没有Tab名字**  \n<!-- endtab -->  \n  \n<!-- tab 炸弹@fas fa-bomb -->  \n**名字+icon**  \n<!-- endtab -->  \n{% endtabs %}\n\n# Button\n\n语法：\n```markdown\n{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}  \n  \n[url]         : 链接  \n[text]        : 按钮文字  \n[icon]        : [可选] 图标  \n[color]       : [可选] 按钮背景顔色(默认style时）  \n                      按钮字体和边框顔色(outline时)  \n                      default/blue/pink/red/purple/orange/green  \n[style]       : [可选] 按钮样式 默认实心  \n                      outline/留空  \n[layout]      : [可选] 按钮佈局 默认为line  \n                      block/留空  \n[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边  \n                      center/right/留空  \n[size]        : [可选] 按钮大小  \n                      larger/留空\n```\n\n例子：\n```markdown\n<div class=\"btn-center\">  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,blue larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,pink larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,red larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block outline purple larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block center outline orange larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block right outline green larger %}  \n</div>\n```\n\n<div class=\"btn-center\">  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,blue larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,pink larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,red larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block outline purple larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block center outline orange larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block right outline green larger %}  \n</div>\n\n# Label\n\n高亮所需的文字\n\n语法：\n```\n{% label text color %}\n```\n\n|参数|解释|\n|---|---|\n|text|文字|\n|color|【可选】背景颜色，默认为 default  <br>default/blue/pink/red/purple/orange/green|\n\n例子：\n```markdown\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  \n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n```\n\n预览：\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  \n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n\n# inlineimg\n\n主题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂。\n\n语法：\n```markdown\n{% inlineImg [src] [height] %}  \n  \n[src]      :    图片链接  \n[height]   ：   图片高度限制【可选】\n```\n\n例子：\n```markdown\n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %} 一段话。  \n  \n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %} 一段话。\n```\n\n预览：\n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %} 一段话。  \n  \n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %} 一段话。\n\n# Mermai\n\n用 mermaid 标籤可以绘製 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 [mermaid 文档](https://mermaid-js.github.io/mermaid/#/)\n\n语法：\n```markdown\n{% mermaid %}  \nmermaid语法\n{% endmermaid %\n```\n\n\n{% mermaid %}  <br>pie  <br>    title Key elements in Product X  <br>    \"Calcium\" : 42.96  <br>    \"Potassium\" : 50.05  <br>    \"Magnesium\" : 10.01  <br>    \"Iron\" :  5  <br>{% endmermaid %}","source":"_posts/博客搭建与配置/hexo标签外挂.md","raw":"---\ntitle: hexo标签外挂\ndate: 2023-09-13 08:25\nupdated: 星期三 13日 九月 2023 08:25:30\ntags: \n- \ncategories: [博客搭建与配置]\nkeywords: 标签外挂\ndescription: \n---\n\n# Note\n\n语法：\n```markdown\n{% note [class] [no-icon] [style] %}  \nAny content (support inline tags too.io).  \n{% endnote %}\n```\n\n|名称|用法|\n|---|---|\n|class|【可选】标识，不同的标识有不同的配色  <br>（ default / primary / success / info / warning / danger ）|\n|no-icon|【可选】不显示 icon |\n|style|【可选】可以覆盖配置中的 style  <br>（simple/modern/flat/disabled）|\n\n例子：\n```markdown\n{% note flat %}  \n默认 提示块标签  \n{% endnote %}  \n{% note default flat %}  \ndefault 提示块标签  \n{% endnote %}  \n{% note primary flat %}  \nprimary 提示块标签  \n{% endnote %}  \n{% note success flat %}  \nsuccess 提示块标签  \n{% endnote %}  \n{% note info flat %}  \ninfo 提示块标签  \n{% endnote %}  \n{% note warning flat %}  \nwarning 提示块标签  \n{% endnote %}  \n{% note danger flat %}  \ndanger 提示块标签  \n{% endnote %}\n```\n\n预览：\n\n{% note flat %}  \n默认提示块标签  \n{% endnote %}  \n{% note default flat %}  \ndefault 提示块标签  \n{% endnote %}  \n{% note primary flat %}  \nprimary 提示块标签  \n{% endnote %}  \n{% note success flat %}  \nsuccess 提示块标签  \n{% endnote %}  \n{% note info flat %}  \ninfo 提示块标签  \n{% endnote %}  \n{% note warning flat %}  \nwarning 提示块标签  \n{% endnote %}  \n{% note danger flat %}  \ndanger 提示块标签  \n{% endnote %}\n\n# Tag-hide\n如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。( display 不能包含英文逗号，可用 `&sbquo;`)\n\n语法：\n```markdown\n{% hideToggle display,bg,color %} \n<br>content <br>\n{% endhideToggle %}\n```\n\n例子：\n```markdown\n{% hideToggle Butterfly安装方法 %}  \n在你的博客根目录里  \n  \ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n如果想要安装比较新的dev分支，可以  \n  \ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n{% endhideToggle %}\n```\n\n{% hideToggle Butterfly 安装方法 %}  \n在你的博客根目录里  \n  \ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n如果想要安装比较新的 dev 分支，可以  \n  \ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  \n  \n{% endhideToggle %}\n\n# Tabs\n\n语法：\n```markdown\n{% tabs Unique name, [index] %}  \n<!-- tab [Tab caption] [@icon] -->  \nAny content (support inline tags too).  \n<!-- endtab -->  \n{% endtabs %}  \n  \nUnique name   : Unique name of tabs block tag without comma.  \n                Will be used in #id's as prefix for each tab with their index numbers.  \n                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.  \n                Only for current url of post/page must be unique!  \n[index]       : Index number of active tab.  \n                If not specified, first tab (1) will be selected.  \n                If index is -1, no tab will be selected. It's will be something like spoiler.  \n                Optional parameter.  \n[Tab caption] : Caption of current tab.  \n                If not caption specified, unique name with tab index suffix will be used as caption of tab.  \n                If not caption specified, but specified icon, caption will empty.  \n                Optional parameter.  \n[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')  \n                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.  \n                Optional parameter.\n```\n\n例子：\n```markdown\n{% tabs Tab %}  \n<!-- tab 第一个Tab -->  \n**tab名字为第一个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第二个Tab -->  \n**tab名字为第二个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第三个Tab -->  \n**tab名字为第三个Tab**  \n<!-- endtab -->  \n  \n<!-- tab @fab fa-apple-pay -->  \n**只有图标 没有Tab名字**  \n<!-- endtab -->  \n  \n<!-- tab 炸弹@fas fa-bomb -->  \n**名字+icon**  \n<!-- endtab -->  \n{% endtabs %}\n```\n\n{% tabs Tab %}  \n<!-- tab 第一个Tab -->  \n**tab名字为第一个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第二个Tab -->  \n**tab名字为第二个Tab**  \n<!-- endtab -->  \n  \n<!-- tab 第三个Tab -->  \n**tab名字为第三个Tab**  \n<!-- endtab -->  \n  \n<!-- tab @fab fa-apple-pay -->  \n**只有图标 没有Tab名字**  \n<!-- endtab -->  \n  \n<!-- tab 炸弹@fas fa-bomb -->  \n**名字+icon**  \n<!-- endtab -->  \n{% endtabs %}\n\n# Button\n\n语法：\n```markdown\n{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}  \n  \n[url]         : 链接  \n[text]        : 按钮文字  \n[icon]        : [可选] 图标  \n[color]       : [可选] 按钮背景顔色(默认style时）  \n                      按钮字体和边框顔色(outline时)  \n                      default/blue/pink/red/purple/orange/green  \n[style]       : [可选] 按钮样式 默认实心  \n                      outline/留空  \n[layout]      : [可选] 按钮佈局 默认为line  \n                      block/留空  \n[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边  \n                      center/right/留空  \n[size]        : [可选] 按钮大小  \n                      larger/留空\n```\n\n例子：\n```markdown\n<div class=\"btn-center\">  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,blue larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,pink larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,red larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block outline purple larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block center outline orange larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block right outline green larger %}  \n</div>\n```\n\n<div class=\"btn-center\">  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,blue larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,pink larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,red larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block outline purple larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block center outline orange larger %}  \n{% btn 'https://blog.falling42.top/',Falling42のBlog,far fa-hand-point-right,block right outline green larger %}  \n</div>\n\n# Label\n\n高亮所需的文字\n\n语法：\n```\n{% label text color %}\n```\n\n|参数|解释|\n|---|---|\n|text|文字|\n|color|【可选】背景颜色，默认为 default  <br>default/blue/pink/red/purple/orange/green|\n\n例子：\n```markdown\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  \n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n```\n\n预览：\n臣亮言：{% label 先帝 %}创业未半，而{% label 中道崩殂 blue %}。今天下三分，{% label 益州疲敝 pink %}，此诚{% label 危急存亡之秋 red %}也！然侍衞之臣，不懈于内；{% label 忠志之士 purple %}，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  \n宫中、府中，俱为一体；陟罚臧否，不宜异同。若有{% label 作奸 orange %}、{% label 犯科 green %}，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。\n\n# inlineimg\n\n主题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂。\n\n语法：\n```markdown\n{% inlineImg [src] [height] %}  \n  \n[src]      :    图片链接  \n[height]   ：   图片高度限制【可选】\n```\n\n例子：\n```markdown\n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %} 一段话。  \n  \n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %} 一段话。\n```\n\n预览：\n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %} 一段话。  \n  \n这是{% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %} 一段话。\n\n# Mermai\n\n用 mermaid 标籤可以绘製 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 [mermaid 文档](https://mermaid-js.github.io/mermaid/#/)\n\n语法：\n```markdown\n{% mermaid %}  \nmermaid语法\n{% endmermaid %\n```\n\n\n{% mermaid %}  <br>pie  <br>    title Key elements in Product X  <br>    \"Calcium\" : 42.96  <br>    \"Potassium\" : 50.05  <br>    \"Magnesium\" : 10.01  <br>    \"Iron\" :  5  <br>{% endmermaid %}","slug":"博客搭建与配置/hexo标签外挂","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7r000ri4v160539rj9","content":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;  </span><br><span class=\"line\">Any content (support inline tags too.io).  </span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td>【可选】标识，不同的标识有不同的配色  <br>（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td>【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td>【可选】可以覆盖配置中的 style  <br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note flat %&#125;  </span><br><span class=\"line\">默认 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note default flat %&#125;  </span><br><span class=\"line\">default 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note primary flat %&#125;  </span><br><span class=\"line\">primary 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note success flat %&#125;  </span><br><span class=\"line\">success 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note info flat %&#125;  </span><br><span class=\"line\">info 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note warning flat %&#125;  </span><br><span class=\"line\">warning 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note danger flat %&#125;  </span><br><span class=\"line\">danger 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预览：</p>\n<div class=\"note flat\"><p>默认提示块标签  </p>\n</div>  \n<div class=\"note default flat\"><p>default 提示块标签  </p>\n</div>  \n<div class=\"note primary flat\"><p>primary 提示块标签  </p>\n</div>  \n<div class=\"note success flat\"><p>success 提示块标签  </p>\n</div>  \n<div class=\"note info flat\"><p>info 提示块标签  </p>\n</div>  \n<div class=\"note warning flat\"><p>warning 提示块标签  </p>\n</div>  \n<div class=\"note danger flat\"><p>danger 提示块标签  </p>\n</div>\n\n<h1 id=\"Tag-hide\"><a href=\"#Tag-hide\" class=\"headerlink\" title=\"Tag-hide\"></a>Tag-hide</h1><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。( display 不能包含英文逗号，可用 <code>&amp;sbquo;</code>)</p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideToggle display,bg,color %&#125; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span>content <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideToggle Butterfly安装方法 %&#125;  </span><br><span class=\"line\">在你的博客根目录里  </span><br><span class=\"line\">  </span><br><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  </span><br><span class=\"line\">  </span><br><span class=\"line\">如果想要安装比较新的dev分支，可以  </span><br><span class=\"line\">  </span><br><span class=\"line\">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">Butterfly 安装方法</summary><div class=\"toggle-content\"><p>在你的博客根目录里  </p>\n<p>git clone -b master <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly  </p>\n<p>如果想要安装比较新的 dev 分支，可以  </p>\n<p>git clone -b dev <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly  \n  </p>\n</div></details>\n\n<h1 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;  </span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;  </span><br><span class=\"line\">Any content (support inline tags too).  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">&#123;% endtabs %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">Unique name   : Unique name of tabs block tag without comma.  </span><br><span class=\"line\"><span class=\"code\">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.  </span></span><br><span class=\"line\"><span class=\"code\">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.  </span></span><br><span class=\"line\"><span class=\"code\">                Only for current url of post/page must be unique!  </span></span><br><span class=\"line\"><span class=\"code\">[index]       : Index number of active tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not specified, first tab (1) will be selected.  </span></span><br><span class=\"line\"><span class=\"code\">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.  </span></span><br><span class=\"line\"><span class=\"code\">[Tab caption] : Caption of current tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, unique name with tab index suffix will be used as caption of tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, but specified icon, caption will empty.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.  </span></span><br><span class=\"line\"><span class=\"code\">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)  </span></span><br><span class=\"line\"><span class=\"code\">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab %&#125;  </span><br><span class=\"line\">&lt;!-- tab 第一个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第一个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 第二个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第二个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 第三个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第三个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab @fab fa-apple-pay --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**只有图标 没有Tab名字**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 炸弹@fas fa-bomb --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**名字+icon**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"tab\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#tab-1\">第一个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-2\">第二个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-3\">第三个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-4\"><i class=\"fab fa-apple-pay\" style=\"text-align: center;\"></i></button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-5\"><i class=\"fas fa-bomb\"></i>炸弹</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"tab-1\"><p><strong>tab名字为第一个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-2\"><p><strong>tab名字为第二个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-3\"><p><strong>tab名字为第三个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-4\"><p><strong>只有图标 没有Tab名字</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-5\"><p><strong>名字+icon</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">[url]         : 链接  </span><br><span class=\"line\">[text]        : 按钮文字  </span><br><span class=\"line\">[icon]        : [可选] 图标  </span><br><span class=\"line\">[color]       : [可选] 按钮背景顔色(默认style时）  </span><br><span class=\"line\"><span class=\"code\">                      按钮字体和边框顔色(outline时)  </span></span><br><span class=\"line\"><span class=\"code\">                      default/blue/pink/red/purple/orange/green  </span></span><br><span class=\"line\"><span class=\"code\">[style]       : [可选] 按钮样式 默认实心  </span></span><br><span class=\"line\"><span class=\"code\">                      outline/留空  </span></span><br><span class=\"line\"><span class=\"code\">[layout]      : [可选] 按钮佈局 默认为line  </span></span><br><span class=\"line\"><span class=\"code\">                      block/留空  </span></span><br><span class=\"line\"><span class=\"code\">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边  </span></span><br><span class=\"line\"><span class=\"code\">                      center/right/留空  </span></span><br><span class=\"line\"><span class=\"code\">[size]        : [可选] 按钮大小  </span></span><br><span class=\"line\"><span class=\"code\">                      larger/留空</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-center&quot;</span>&gt;</span></span>  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,blue larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,pink larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,red larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block outline purple larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block center outline orange larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block right outline green larger %&#125;  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div class=\"btn-center\">  \n<a class=\"btn-beautify larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify blue larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify pink larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify red larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block outline purple larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block center outline orange larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block right outline green larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n</div>\n\n<h1 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h1><p>高亮所需的文字</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>text</td>\n<td>文字</td>\n</tr>\n<tr>\n<td>color</td>\n<td>【可选】背景颜色，默认为 default  <br>default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  </span><br><span class=\"line\">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure>\n\n<p>预览：<br>臣亮言：<mark class=\"hl-label default\">先帝</mark> 创业未半，而<mark class=\"hl-label blue\">中道崩殂</mark> 。今天下三分，<mark class=\"hl-label pink\">益州疲敝</mark> ，此诚<mark class=\"hl-label red\">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class=\"hl-label purple\">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class=\"hl-label orange\">作奸</mark> 、<mark class=\"hl-label green\">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>\n<h1 id=\"inlineimg\"><a href=\"#inlineimg\" class=\"headerlink\" title=\"inlineimg\"></a>inlineimg</h1><p>主题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂。</p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% inlineImg [src] [height] %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">[src]      :    图片链接  </span><br><span class=\"line\">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是&#123;% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %&#125; 一段话。  </span><br><span class=\"line\">  </span><br><span class=\"line\">这是&#123;% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %&#125; 一段话。</span><br></pre></td></tr></table></figure>\n\n<p>预览：<br>这是<img class=\"inline-img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:20px\"/> 一段话。  </p>\n<p>这是<img class=\"inline-img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:40px\"/> 一段话。</p>\n<h1 id=\"Mermai\"><a href=\"#Mermai\" class=\"headerlink\" title=\"Mermai\"></a>Mermai</h1><p>用 mermaid 标籤可以绘製 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 <a href=\"https://mermaid-js.github.io/mermaid/#/\">mermaid 文档</a></p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid %&#125;  </span><br><span class=\"line\">mermaid语法</span><br><span class=\"line\">&#123;% endmermaid %</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"mermaid-wrap\"><pre class=\"mermaid-src\" hidden>\n  &lt;br&gt;pie  &lt;br&gt;    title Key elements in Product X  &lt;br&gt;    &quot;Calcium&quot; : 42.96  &lt;br&gt;    &quot;Potassium&quot; : 50.05  &lt;br&gt;    &quot;Magnesium&quot; : 10.01  &lt;br&gt;    &quot;Iron&quot; :  5  &lt;br&gt;\n  </pre></div>","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [style] %&#125;  </span><br><span class=\"line\">Any content (support inline tags too.io).  </span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>class</td>\n<td>【可选】标识，不同的标识有不同的配色  <br>（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td>\n</tr>\n<tr>\n<td>no-icon</td>\n<td>【可选】不显示 icon</td>\n</tr>\n<tr>\n<td>style</td>\n<td>【可选】可以覆盖配置中的 style  <br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note flat %&#125;  </span><br><span class=\"line\">默认 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note default flat %&#125;  </span><br><span class=\"line\">default 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note primary flat %&#125;  </span><br><span class=\"line\">primary 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note success flat %&#125;  </span><br><span class=\"line\">success 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note info flat %&#125;  </span><br><span class=\"line\">info 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note warning flat %&#125;  </span><br><span class=\"line\">warning 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;  </span><br><span class=\"line\">&#123;% note danger flat %&#125;  </span><br><span class=\"line\">danger 提示块标签  </span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>预览：</p>\n<div class=\"note flat\"><p>默认提示块标签  </p>\n</div>  \n<div class=\"note default flat\"><p>default 提示块标签  </p>\n</div>  \n<div class=\"note primary flat\"><p>primary 提示块标签  </p>\n</div>  \n<div class=\"note success flat\"><p>success 提示块标签  </p>\n</div>  \n<div class=\"note info flat\"><p>info 提示块标签  </p>\n</div>  \n<div class=\"note warning flat\"><p>warning 提示块标签  </p>\n</div>  \n<div class=\"note danger flat\"><p>danger 提示块标签  </p>\n</div>\n\n<h1 id=\"Tag-hide\"><a href=\"#Tag-hide\" class=\"headerlink\" title=\"Tag-hide\"></a>Tag-hide</h1><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。( display 不能包含英文逗号，可用 <code>&amp;sbquo;</code>)</p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideToggle display,bg,color %&#125; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span>content <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% hideToggle Butterfly安装方法 %&#125;  </span><br><span class=\"line\">在你的博客根目录里  </span><br><span class=\"line\">  </span><br><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  </span><br><span class=\"line\">  </span><br><span class=\"line\">如果想要安装比较新的dev分支，可以  </span><br><span class=\"line\">  </span><br><span class=\"line\">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">Butterfly 安装方法</summary><div class=\"toggle-content\"><p>在你的博客根目录里  </p>\n<p>git clone -b master <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly  </p>\n<p>如果想要安装比较新的 dev 分支，可以  </p>\n<p>git clone -b dev <a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly  \n  </p>\n</div></details>\n\n<h1 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;  </span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;  </span><br><span class=\"line\">Any content (support inline tags too).  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">&#123;% endtabs %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">Unique name   : Unique name of tabs block tag without comma.  </span><br><span class=\"line\"><span class=\"code\">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.  </span></span><br><span class=\"line\"><span class=\"code\">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.  </span></span><br><span class=\"line\"><span class=\"code\">                Only for current url of post/page must be unique!  </span></span><br><span class=\"line\"><span class=\"code\">[index]       : Index number of active tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not specified, first tab (1) will be selected.  </span></span><br><span class=\"line\"><span class=\"code\">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.  </span></span><br><span class=\"line\"><span class=\"code\">[Tab caption] : Caption of current tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, unique name with tab index suffix will be used as caption of tab.  </span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, but specified icon, caption will empty.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.  </span></span><br><span class=\"line\"><span class=\"code\">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)  </span></span><br><span class=\"line\"><span class=\"code\">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.  </span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab %&#125;  </span><br><span class=\"line\">&lt;!-- tab 第一个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第一个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 第二个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第二个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 第三个Tab --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**tab名字为第三个Tab**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab @fab fa-apple-pay --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**只有图标 没有Tab名字**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;!-- tab 炸弹@fas fa-bomb --&gt;  </span><br><span class=\"line\"><span class=\"strong\">**名字+icon**</span>  </span><br><span class=\"line\">&lt;!-- endtab --&gt;  </span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"tab\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#tab-1\">第一个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-2\">第二个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-3\">第三个Tab</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-4\"><i class=\"fab fa-apple-pay\" style=\"text-align: center;\"></i></button></li><li class=\"tab\"><button type=\"button\" data-href=\"#tab-5\"><i class=\"fas fa-bomb\"></i>炸弹</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"tab-1\"><p><strong>tab名字为第一个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-2\"><p><strong>tab名字为第二个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-3\"><p><strong>tab名字为第三个Tab</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-4\"><p><strong>只有图标 没有Tab名字</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"tab-5\"><p><strong>名字+icon</strong>  </p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h1><p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">[url]         : 链接  </span><br><span class=\"line\">[text]        : 按钮文字  </span><br><span class=\"line\">[icon]        : [可选] 图标  </span><br><span class=\"line\">[color]       : [可选] 按钮背景顔色(默认style时）  </span><br><span class=\"line\"><span class=\"code\">                      按钮字体和边框顔色(outline时)  </span></span><br><span class=\"line\"><span class=\"code\">                      default/blue/pink/red/purple/orange/green  </span></span><br><span class=\"line\"><span class=\"code\">[style]       : [可选] 按钮样式 默认实心  </span></span><br><span class=\"line\"><span class=\"code\">                      outline/留空  </span></span><br><span class=\"line\"><span class=\"code\">[layout]      : [可选] 按钮佈局 默认为line  </span></span><br><span class=\"line\"><span class=\"code\">                      block/留空  </span></span><br><span class=\"line\"><span class=\"code\">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边  </span></span><br><span class=\"line\"><span class=\"code\">                      center/right/留空  </span></span><br><span class=\"line\"><span class=\"code\">[size]        : [可选] 按钮大小  </span></span><br><span class=\"line\"><span class=\"code\">                      larger/留空</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn-center&quot;</span>&gt;</span></span>  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,blue larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,pink larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,red larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block outline purple larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block center outline orange larger %&#125;  </span><br><span class=\"line\">&#123;% btn &#x27;https://blog.falling42.top/&#x27;,Falling42のBlog,far fa-hand-point-right,block right outline green larger %&#125;  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div class=\"btn-center\">  \n<a class=\"btn-beautify larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify blue larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify pink larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify red larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block outline purple larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block center outline orange larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n<a class=\"btn-beautify block right outline green larger\" href=\"https://blog.falling42.top/\" \n  title=\"Falling42のBlog\"><i class=\"far fa-hand-point-right\"></i><span>Falling42のBlog</span></a>  \n</div>\n\n<h1 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h1><p>高亮所需的文字</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>text</td>\n<td>文字</td>\n</tr>\n<tr>\n<td>color</td>\n<td>【可选】背景颜色，默认为 default  <br>default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。  </span><br><span class=\"line\">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure>\n\n<p>预览：<br>臣亮言：<mark class=\"hl-label default\">先帝</mark> 创业未半，而<mark class=\"hl-label blue\">中道崩殂</mark> 。今天下三分，<mark class=\"hl-label pink\">益州疲敝</mark> ，此诚<mark class=\"hl-label red\">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class=\"hl-label purple\">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class=\"hl-label orange\">作奸</mark> 、<mark class=\"hl-label green\">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>\n<h1 id=\"inlineimg\"><a href=\"#inlineimg\" class=\"headerlink\" title=\"inlineimg\"></a>inlineimg</h1><p>主题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂。</p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% inlineImg [src] [height] %&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">[src]      :    图片链接  </span><br><span class=\"line\">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是&#123;% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 20px %&#125; 一段话。  </span><br><span class=\"line\">  </span><br><span class=\"line\">这是&#123;% inlineImg https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif 40px %&#125; 一段话。</span><br></pre></td></tr></table></figure>\n\n<p>预览：<br>这是<img class=\"inline-img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:20px\"/> 一段话。  </p>\n<p>这是<img class=\"inline-img\" src=\"https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif\" style=\"height:40px\"/> 一段话。</p>\n<h1 id=\"Mermai\"><a href=\"#Mermai\" class=\"headerlink\" title=\"Mermai\"></a>Mermai</h1><p>用 mermaid 标籤可以绘製 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 <a href=\"https://mermaid-js.github.io/mermaid/#/\">mermaid 文档</a></p>\n<p>语法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid %&#125;  </span><br><span class=\"line\">mermaid语法</span><br><span class=\"line\">&#123;% endmermaid %</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"mermaid-wrap\"><pre class=\"mermaid-src\" hidden>\n  &lt;br&gt;pie  &lt;br&gt;    title Key elements in Product X  &lt;br&gt;    &quot;Calcium&quot; : 42.96  &lt;br&gt;    &quot;Potassium&quot; : 50.05  &lt;br&gt;    &quot;Magnesium&quot; : 10.01  &lt;br&gt;    &quot;Iron&quot; :  5  &lt;br&gt;\n  </pre></div>"},{"title":"Matlab","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:57:50.336Z","keywords":null,"description":null,"_content":"\n\n<a name=\"SJaac\"></a>\n# 可视化\n<a name=\"EsaD1\"></a>\n## 绘图基本步骤\n<a name=\"M07Q9\"></a>\n### 设置参数\n### 选定图形窗口\n### 绘图指令\n- plot(X,'s')\n1. X是实向量\n\n横坐标是下标值，纵坐标是元素值\n\n2. X是实矩阵\n\n有几列就有几条曲线，横坐标是每列元素的下标值，纵坐标是元素值\n\n3. X是复数矩阵\n\n有几列就有几条曲线，横坐标是每列元素值的实部，纵坐标是元素值的虚部\n\n---\n\n- plot(X,Y,'s')\n1. X,Y是同维向量\n2. X是向量，Y有一维与X等维\n\n画出Y另一维和X维数不同的图线，X作为这些曲线的共同横坐标，纵坐标\n\n3. X,Y是同维矩阵\n\n画出与矩阵列数相同的图线，X,Y对应列元素维对应的列元素为横纵坐标\n\n---\n\n- plot(X1,Y1,'s1',X2,Y2,'s2')\n\n相当于plot画图了两次在同一个坐标轴里\n<a name=\"M9eSo\"></a>\n### 设置轴的范围\n<a name=\"Ivl2U\"></a>\n### 图形注释\n<a name=\"htfAT\"></a>\n### hold on 与hold off\n<a name=\"idf1D\"></a>\n## 曲线的色彩、线型和数据点型\nplot(x,y,'s','PropertyName',PropertyValue)\n\n- 'PropertyName'属性名\n- PropertyValue 属性值\n<a name=\"fTpNW\"></a>\n### 色彩\n<a name=\"Omb2r\"></a>\n### 线型\n<a name=\"IXa1c\"></a>\n### 点型\n若设置点型，不会连线\n<a name=\"qhXY8\"></a>\n### 线宽和点的大小\n<a name=\"ykJKm\"></a>\n## 三维图形设置\n<a name=\"RUYUh\"></a>\n### 着色、明暗、材质\n<a name=\"DjdQc\"></a>\n### 视点，三度比（横、纵、高）\n<a name=\"DA6Wj\"></a>\n## 图形句柄与图形窗工具条\n\n- get\n- set\n<a name=\"vTe1C\"></a>\n### 对数坐标\n<a name=\"I0wje\"></a>\n## 输出\n# M函数文件\n## M函数的一般结构\n```matlab\nfunction grade=trans(score)\nif score>100 ||score<0\n\tgrade='ERR';\nelseif score>=90\n\tgrade='A';\nelseif score>=80 && score<89\n\tgrade='B';\nelseif score>=70 && score<79\n\tgrade='C';\nelse\n\tgrade='E';\nend\n\nif score>=0 && score<=100\n\tstr=['The grade of score ', num2str(score),' is ', grade];\nelse\n\tstr='Error, the score exceeds range';\nend\n\ndisp(str);\n```\n## 调用M函数文件\n```matlab\n%% 调用函数，trans返回值赋值给grade\ngrade=trans(78);\n%% 帮助\nhelp trans\n%% 显示M文件函数的内容\ntype trans\n\n```\n## 输入输出宗量检测指令\n```matlab\nnargin    %% 获取实际输入的宗量个数\nnargout      %% 获取实际输出的宗量的个数\nnargin('fun')      %% 在函数体外获取实际输入的宗量个数\nnargout('fun')      %% 在函数体外获取实际输出的宗量的个数\ninputname(n)        %% 在函数体内使用,给出第n个输入宗量的实际 调用变量名\n```\n## 函数句柄\n","source":"_posts/数学建模/Matlab.md","raw":"---\ntitle: Matlab\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:02\ntags: []\ncategories: [数学建模]\nkeywords:\ndescription: \n---\n\n\n<a name=\"SJaac\"></a>\n# 可视化\n<a name=\"EsaD1\"></a>\n## 绘图基本步骤\n<a name=\"M07Q9\"></a>\n### 设置参数\n### 选定图形窗口\n### 绘图指令\n- plot(X,'s')\n1. X是实向量\n\n横坐标是下标值，纵坐标是元素值\n\n2. X是实矩阵\n\n有几列就有几条曲线，横坐标是每列元素的下标值，纵坐标是元素值\n\n3. X是复数矩阵\n\n有几列就有几条曲线，横坐标是每列元素值的实部，纵坐标是元素值的虚部\n\n---\n\n- plot(X,Y,'s')\n1. X,Y是同维向量\n2. X是向量，Y有一维与X等维\n\n画出Y另一维和X维数不同的图线，X作为这些曲线的共同横坐标，纵坐标\n\n3. X,Y是同维矩阵\n\n画出与矩阵列数相同的图线，X,Y对应列元素维对应的列元素为横纵坐标\n\n---\n\n- plot(X1,Y1,'s1',X2,Y2,'s2')\n\n相当于plot画图了两次在同一个坐标轴里\n<a name=\"M9eSo\"></a>\n### 设置轴的范围\n<a name=\"Ivl2U\"></a>\n### 图形注释\n<a name=\"htfAT\"></a>\n### hold on 与hold off\n<a name=\"idf1D\"></a>\n## 曲线的色彩、线型和数据点型\nplot(x,y,'s','PropertyName',PropertyValue)\n\n- 'PropertyName'属性名\n- PropertyValue 属性值\n<a name=\"fTpNW\"></a>\n### 色彩\n<a name=\"Omb2r\"></a>\n### 线型\n<a name=\"IXa1c\"></a>\n### 点型\n若设置点型，不会连线\n<a name=\"qhXY8\"></a>\n### 线宽和点的大小\n<a name=\"ykJKm\"></a>\n## 三维图形设置\n<a name=\"RUYUh\"></a>\n### 着色、明暗、材质\n<a name=\"DjdQc\"></a>\n### 视点，三度比（横、纵、高）\n<a name=\"DA6Wj\"></a>\n## 图形句柄与图形窗工具条\n\n- get\n- set\n<a name=\"vTe1C\"></a>\n### 对数坐标\n<a name=\"I0wje\"></a>\n## 输出\n# M函数文件\n## M函数的一般结构\n```matlab\nfunction grade=trans(score)\nif score>100 ||score<0\n\tgrade='ERR';\nelseif score>=90\n\tgrade='A';\nelseif score>=80 && score<89\n\tgrade='B';\nelseif score>=70 && score<79\n\tgrade='C';\nelse\n\tgrade='E';\nend\n\nif score>=0 && score<=100\n\tstr=['The grade of score ', num2str(score),' is ', grade];\nelse\n\tstr='Error, the score exceeds range';\nend\n\ndisp(str);\n```\n## 调用M函数文件\n```matlab\n%% 调用函数，trans返回值赋值给grade\ngrade=trans(78);\n%% 帮助\nhelp trans\n%% 显示M文件函数的内容\ntype trans\n\n```\n## 输入输出宗量检测指令\n```matlab\nnargin    %% 获取实际输入的宗量个数\nnargout      %% 获取实际输出的宗量的个数\nnargin('fun')      %% 在函数体外获取实际输入的宗量个数\nnargout('fun')      %% 在函数体外获取实际输出的宗量的个数\ninputname(n)        %% 在函数体内使用,给出第n个输入宗量的实际 调用变量名\n```\n## 函数句柄\n","slug":"数学建模/Matlab","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7s000ti4v11oivf54r","content":"<p><a name=\"SJaac\"></a></p>\n<h1 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h1><p><a name=\"EsaD1\"></a></p>\n<h2 id=\"绘图基本步骤\"><a href=\"#绘图基本步骤\" class=\"headerlink\" title=\"绘图基本步骤\"></a>绘图基本步骤</h2><p><a name=\"M07Q9\"></a></p>\n<h3 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h3><h3 id=\"选定图形窗口\"><a href=\"#选定图形窗口\" class=\"headerlink\" title=\"选定图形窗口\"></a>选定图形窗口</h3><h3 id=\"绘图指令\"><a href=\"#绘图指令\" class=\"headerlink\" title=\"绘图指令\"></a>绘图指令</h3><ul>\n<li>plot(X,’s’)</li>\n</ul>\n<ol>\n<li>X是实向量</li>\n</ol>\n<p>横坐标是下标值，纵坐标是元素值</p>\n<ol start=\"2\">\n<li>X是实矩阵</li>\n</ol>\n<p>有几列就有几条曲线，横坐标是每列元素的下标值，纵坐标是元素值</p>\n<ol start=\"3\">\n<li>X是复数矩阵</li>\n</ol>\n<p>有几列就有几条曲线，横坐标是每列元素值的实部，纵坐标是元素值的虚部</p>\n<hr>\n<ul>\n<li>plot(X,Y,’s’)</li>\n</ul>\n<ol>\n<li>X,Y是同维向量</li>\n<li>X是向量，Y有一维与X等维</li>\n</ol>\n<p>画出Y另一维和X维数不同的图线，X作为这些曲线的共同横坐标，纵坐标</p>\n<ol start=\"3\">\n<li>X,Y是同维矩阵</li>\n</ol>\n<p>画出与矩阵列数相同的图线，X,Y对应列元素维对应的列元素为横纵坐标</p>\n<hr>\n<ul>\n<li>plot(X1,Y1,’s1’,X2,Y2,’s2’)</li>\n</ul>\n<p>相当于plot画图了两次在同一个坐标轴里<br><a name=\"M9eSo\"></a></p>\n<h3 id=\"设置轴的范围\"><a href=\"#设置轴的范围\" class=\"headerlink\" title=\"设置轴的范围\"></a>设置轴的范围</h3><p><a name=\"Ivl2U\"></a></p>\n<h3 id=\"图形注释\"><a href=\"#图形注释\" class=\"headerlink\" title=\"图形注释\"></a>图形注释</h3><p><a name=\"htfAT\"></a></p>\n<h3 id=\"hold-on-与hold-off\"><a href=\"#hold-on-与hold-off\" class=\"headerlink\" title=\"hold on 与hold off\"></a>hold on 与hold off</h3><p><a name=\"idf1D\"></a></p>\n<h2 id=\"曲线的色彩、线型和数据点型\"><a href=\"#曲线的色彩、线型和数据点型\" class=\"headerlink\" title=\"曲线的色彩、线型和数据点型\"></a>曲线的色彩、线型和数据点型</h2><p>plot(x,y,’s’,’PropertyName’,PropertyValue)</p>\n<ul>\n<li>‘PropertyName’属性名</li>\n<li>PropertyValue 属性值<br><a name=\"fTpNW\"></a></li>\n</ul>\n<h3 id=\"色彩\"><a href=\"#色彩\" class=\"headerlink\" title=\"色彩\"></a>色彩</h3><p><a name=\"Omb2r\"></a></p>\n<h3 id=\"线型\"><a href=\"#线型\" class=\"headerlink\" title=\"线型\"></a>线型</h3><p><a name=\"IXa1c\"></a></p>\n<h3 id=\"点型\"><a href=\"#点型\" class=\"headerlink\" title=\"点型\"></a>点型</h3><p>若设置点型，不会连线<br><a name=\"qhXY8\"></a></p>\n<h3 id=\"线宽和点的大小\"><a href=\"#线宽和点的大小\" class=\"headerlink\" title=\"线宽和点的大小\"></a>线宽和点的大小</h3><p><a name=\"ykJKm\"></a></p>\n<h2 id=\"三维图形设置\"><a href=\"#三维图形设置\" class=\"headerlink\" title=\"三维图形设置\"></a>三维图形设置</h2><p><a name=\"RUYUh\"></a></p>\n<h3 id=\"着色、明暗、材质\"><a href=\"#着色、明暗、材质\" class=\"headerlink\" title=\"着色、明暗、材质\"></a>着色、明暗、材质</h3><p><a name=\"DjdQc\"></a></p>\n<h3 id=\"视点，三度比（横、纵、高）\"><a href=\"#视点，三度比（横、纵、高）\" class=\"headerlink\" title=\"视点，三度比（横、纵、高）\"></a>视点，三度比（横、纵、高）</h3><p><a name=\"DA6Wj\"></a></p>\n<h2 id=\"图形句柄与图形窗工具条\"><a href=\"#图形句柄与图形窗工具条\" class=\"headerlink\" title=\"图形句柄与图形窗工具条\"></a>图形句柄与图形窗工具条</h2><ul>\n<li>get</li>\n<li>set<br><a name=\"vTe1C\"></a></li>\n</ul>\n<h3 id=\"对数坐标\"><a href=\"#对数坐标\" class=\"headerlink\" title=\"对数坐标\"></a>对数坐标</h3><p><a name=\"I0wje\"></a></p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><h1 id=\"M函数文件\"><a href=\"#M函数文件\" class=\"headerlink\" title=\"M函数文件\"></a>M函数文件</h1><h2 id=\"M函数的一般结构\"><a href=\"#M函数的一般结构\" class=\"headerlink\" title=\"M函数的一般结构\"></a>M函数的一般结构</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grade</span>=<span class=\"title\">trans</span><span class=\"params\">(score)</span></span></span><br><span class=\"line\"><span class=\"keyword\">if</span> score&gt;<span class=\"number\">100</span> ||score&lt;<span class=\"number\">0</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;ERR&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">90</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">80</span> &amp;&amp; score&lt;<span class=\"number\">89</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">70</span> &amp;&amp; score&lt;<span class=\"number\">79</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;E&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> score&gt;=<span class=\"number\">0</span> &amp;&amp; score&lt;=<span class=\"number\">100</span></span><br><span class=\"line\">\tstr=[<span class=\"string\">&#x27;The grade of score &#x27;</span>, num2str(score),<span class=\"string\">&#x27; is &#x27;</span>, grade];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tstr=<span class=\"string\">&#x27;Error, the score exceeds range&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">disp</span>(str);</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用M函数文件\"><a href=\"#调用M函数文件\" class=\"headerlink\" title=\"调用M函数文件\"></a>调用M函数文件</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%% 调用函数，trans返回值赋值给grade</span></span><br><span class=\"line\">grade=trans(<span class=\"number\">78</span>);</span><br><span class=\"line\"><span class=\"comment\">%% 帮助</span></span><br><span class=\"line\">help trans</span><br><span class=\"line\"><span class=\"comment\">%% 显示M文件函数的内容</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> trans</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入输出宗量检测指令\"><a href=\"#输入输出宗量检测指令\" class=\"headerlink\" title=\"输入输出宗量检测指令\"></a>输入输出宗量检测指令</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nargin    <span class=\"comment\">%% 获取实际输入的宗量个数</span></span><br><span class=\"line\">nargout      <span class=\"comment\">%% 获取实际输出的宗量的个数</span></span><br><span class=\"line\">nargin(<span class=\"string\">&#x27;fun&#x27;</span>)      <span class=\"comment\">%% 在函数体外获取实际输入的宗量个数</span></span><br><span class=\"line\">nargout(<span class=\"string\">&#x27;fun&#x27;</span>)      <span class=\"comment\">%% 在函数体外获取实际输出的宗量的个数</span></span><br><span class=\"line\">inputname(n)        <span class=\"comment\">%% 在函数体内使用,给出第n个输入宗量的实际 调用变量名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数句柄\"><a href=\"#函数句柄\" class=\"headerlink\" title=\"函数句柄\"></a>函数句柄</h2>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<p><a name=\"SJaac\"></a></p>\n<h1 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h1><p><a name=\"EsaD1\"></a></p>\n<h2 id=\"绘图基本步骤\"><a href=\"#绘图基本步骤\" class=\"headerlink\" title=\"绘图基本步骤\"></a>绘图基本步骤</h2><p><a name=\"M07Q9\"></a></p>\n<h3 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h3><h3 id=\"选定图形窗口\"><a href=\"#选定图形窗口\" class=\"headerlink\" title=\"选定图形窗口\"></a>选定图形窗口</h3><h3 id=\"绘图指令\"><a href=\"#绘图指令\" class=\"headerlink\" title=\"绘图指令\"></a>绘图指令</h3><ul>\n<li>plot(X,’s’)</li>\n</ul>\n<ol>\n<li>X是实向量</li>\n</ol>\n<p>横坐标是下标值，纵坐标是元素值</p>\n<ol start=\"2\">\n<li>X是实矩阵</li>\n</ol>\n<p>有几列就有几条曲线，横坐标是每列元素的下标值，纵坐标是元素值</p>\n<ol start=\"3\">\n<li>X是复数矩阵</li>\n</ol>\n<p>有几列就有几条曲线，横坐标是每列元素值的实部，纵坐标是元素值的虚部</p>\n<hr>\n<ul>\n<li>plot(X,Y,’s’)</li>\n</ul>\n<ol>\n<li>X,Y是同维向量</li>\n<li>X是向量，Y有一维与X等维</li>\n</ol>\n<p>画出Y另一维和X维数不同的图线，X作为这些曲线的共同横坐标，纵坐标</p>\n<ol start=\"3\">\n<li>X,Y是同维矩阵</li>\n</ol>\n<p>画出与矩阵列数相同的图线，X,Y对应列元素维对应的列元素为横纵坐标</p>\n<hr>\n<ul>\n<li>plot(X1,Y1,’s1’,X2,Y2,’s2’)</li>\n</ul>\n<p>相当于plot画图了两次在同一个坐标轴里<br><a name=\"M9eSo\"></a></p>\n<h3 id=\"设置轴的范围\"><a href=\"#设置轴的范围\" class=\"headerlink\" title=\"设置轴的范围\"></a>设置轴的范围</h3><p><a name=\"Ivl2U\"></a></p>\n<h3 id=\"图形注释\"><a href=\"#图形注释\" class=\"headerlink\" title=\"图形注释\"></a>图形注释</h3><p><a name=\"htfAT\"></a></p>\n<h3 id=\"hold-on-与hold-off\"><a href=\"#hold-on-与hold-off\" class=\"headerlink\" title=\"hold on 与hold off\"></a>hold on 与hold off</h3><p><a name=\"idf1D\"></a></p>\n<h2 id=\"曲线的色彩、线型和数据点型\"><a href=\"#曲线的色彩、线型和数据点型\" class=\"headerlink\" title=\"曲线的色彩、线型和数据点型\"></a>曲线的色彩、线型和数据点型</h2><p>plot(x,y,’s’,’PropertyName’,PropertyValue)</p>\n<ul>\n<li>‘PropertyName’属性名</li>\n<li>PropertyValue 属性值<br><a name=\"fTpNW\"></a></li>\n</ul>\n<h3 id=\"色彩\"><a href=\"#色彩\" class=\"headerlink\" title=\"色彩\"></a>色彩</h3><p><a name=\"Omb2r\"></a></p>\n<h3 id=\"线型\"><a href=\"#线型\" class=\"headerlink\" title=\"线型\"></a>线型</h3><p><a name=\"IXa1c\"></a></p>\n<h3 id=\"点型\"><a href=\"#点型\" class=\"headerlink\" title=\"点型\"></a>点型</h3><p>若设置点型，不会连线<br><a name=\"qhXY8\"></a></p>\n<h3 id=\"线宽和点的大小\"><a href=\"#线宽和点的大小\" class=\"headerlink\" title=\"线宽和点的大小\"></a>线宽和点的大小</h3><p><a name=\"ykJKm\"></a></p>\n<h2 id=\"三维图形设置\"><a href=\"#三维图形设置\" class=\"headerlink\" title=\"三维图形设置\"></a>三维图形设置</h2><p><a name=\"RUYUh\"></a></p>\n<h3 id=\"着色、明暗、材质\"><a href=\"#着色、明暗、材质\" class=\"headerlink\" title=\"着色、明暗、材质\"></a>着色、明暗、材质</h3><p><a name=\"DjdQc\"></a></p>\n<h3 id=\"视点，三度比（横、纵、高）\"><a href=\"#视点，三度比（横、纵、高）\" class=\"headerlink\" title=\"视点，三度比（横、纵、高）\"></a>视点，三度比（横、纵、高）</h3><p><a name=\"DA6Wj\"></a></p>\n<h2 id=\"图形句柄与图形窗工具条\"><a href=\"#图形句柄与图形窗工具条\" class=\"headerlink\" title=\"图形句柄与图形窗工具条\"></a>图形句柄与图形窗工具条</h2><ul>\n<li>get</li>\n<li>set<br><a name=\"vTe1C\"></a></li>\n</ul>\n<h3 id=\"对数坐标\"><a href=\"#对数坐标\" class=\"headerlink\" title=\"对数坐标\"></a>对数坐标</h3><p><a name=\"I0wje\"></a></p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><h1 id=\"M函数文件\"><a href=\"#M函数文件\" class=\"headerlink\" title=\"M函数文件\"></a>M函数文件</h1><h2 id=\"M函数的一般结构\"><a href=\"#M函数的一般结构\" class=\"headerlink\" title=\"M函数的一般结构\"></a>M函数的一般结构</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grade</span>=<span class=\"title\">trans</span><span class=\"params\">(score)</span></span></span><br><span class=\"line\"><span class=\"keyword\">if</span> score&gt;<span class=\"number\">100</span> ||score&lt;<span class=\"number\">0</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;ERR&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">90</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">80</span> &amp;&amp; score&lt;<span class=\"number\">89</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">elseif</span> score&gt;=<span class=\"number\">70</span> &amp;&amp; score&lt;<span class=\"number\">79</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tgrade=<span class=\"string\">&#x27;E&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> score&gt;=<span class=\"number\">0</span> &amp;&amp; score&lt;=<span class=\"number\">100</span></span><br><span class=\"line\">\tstr=[<span class=\"string\">&#x27;The grade of score &#x27;</span>, num2str(score),<span class=\"string\">&#x27; is &#x27;</span>, grade];</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tstr=<span class=\"string\">&#x27;Error, the score exceeds range&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">disp</span>(str);</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用M函数文件\"><a href=\"#调用M函数文件\" class=\"headerlink\" title=\"调用M函数文件\"></a>调用M函数文件</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%% 调用函数，trans返回值赋值给grade</span></span><br><span class=\"line\">grade=trans(<span class=\"number\">78</span>);</span><br><span class=\"line\"><span class=\"comment\">%% 帮助</span></span><br><span class=\"line\">help trans</span><br><span class=\"line\"><span class=\"comment\">%% 显示M文件函数的内容</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> trans</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入输出宗量检测指令\"><a href=\"#输入输出宗量检测指令\" class=\"headerlink\" title=\"输入输出宗量检测指令\"></a>输入输出宗量检测指令</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nargin    <span class=\"comment\">%% 获取实际输入的宗量个数</span></span><br><span class=\"line\">nargout      <span class=\"comment\">%% 获取实际输出的宗量的个数</span></span><br><span class=\"line\">nargin(<span class=\"string\">&#x27;fun&#x27;</span>)      <span class=\"comment\">%% 在函数体外获取实际输入的宗量个数</span></span><br><span class=\"line\">nargout(<span class=\"string\">&#x27;fun&#x27;</span>)      <span class=\"comment\">%% 在函数体外获取实际输出的宗量的个数</span></span><br><span class=\"line\">inputname(n)        <span class=\"comment\">%% 在函数体内使用,给出第n个输入宗量的实际 调用变量名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数句柄\"><a href=\"#函数句柄\" class=\"headerlink\" title=\"函数句柄\"></a>函数句柄</h2>"},{"title":"MongoDB基础语法","date":"2023-09-11T03:10:00.000Z","updated":"2023-09-15T03:54:10.184Z","keywords":null,"description":null,"_content":"# \n\n\n\n","source":"_posts/数据库/MongoDB基础语法.md","raw":"---\ntitle: MongoDB基础语法\ndate: 2023-09-11 11:10\nupdated: 星期一 11日 九月 2023 11:10:18\ntags: \n- \ncategories: [数据库]\nkeywords:\ndescription: \n---\n# \n\n\n\n","slug":"数据库/MongoDB基础语法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7s000wi4v19foc4dia","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"仿真复习","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:57:53.362Z","keywords":null,"description":null,"_content":"\n\n# 画图样式\n## 网格线\n```matlab\ngrid on %坐标网格线\n```\n## 显示坐标框\n```matlab\nbox on \n```\n## 设置轴的范围\n```matlab\naxis([x1,x2,y1,y2]) % 平面坐标范围 \naxis([x1,x2,y1,y2,z1,z2]) % 三维坐标范围 \n```\n## 设置坐标轴间隔\n```matlab\nX=0:1:12;  \nY=-0.5:0.25:1;  \nset(gca,'xtick',X,'ytick',Y)\n```\n## 在同一个坐标里画图\n```matlab\nhold on \n```\n## 零点辅助线\n```matlab\nhold on; % 在每一次重复作图都要hold on \nplot(t, zeros(size(t)),‘k’); % 零点辅助直线\n```\n## 一个窗口多个坐标轴\n```matlab\nsubplot(a,b,c)\n% 第一个参数是有几行\n% 第二个参数是有几列\n% 第三个参数是当前是第几个\n```\n## 改变角度\n```matlab\n\n```\n# 画图方法\n## 同时绘制多个类似的图,Y是二维矩阵\n> 横坐标要先转置再矩阵乘法一个向量（1\\*n）\n> Y的每一列作为纵坐标\n> 也可以直接在一个plot函数里画图\n```matlab\nt=(0:pi/50:2*pi)'; % t(101 x 1)\nk=0.4:0.1:1; % k(1 x 7)\nY=cos(t)*k; % 矩阵相乘, \nY(101 x 7) plot(t,Y), hold on; % 7条幅度调制的余弦曲线 \nplot(t, zeros(size(t)),‘k’); % 零点辅助直线\n```\n## 包络线\n> 包络线函数一般题目给出\n> \n```matlab\nt=(0:pi/100:pi)';\nk = [-1,1];\ny1=sin(t)*k; % 两条包络线\ny2=sin(t).*sin(9*t);\nt3=pi*(0:9)/9; % 函数零点，即sin(9t)=0的点\ny3=sin(t3).*sin(9*t3);\nplot( t,y1,'r:', t,y2,'b', t3,y3,'bo')\naxis([0,pi,-1,1])\n```\n## 双坐标轴并调范围和设置坐标轴范围\n```matlab\nx3 = 0:0.001:20;\ny3 = 150*exp(-0.05*x3).*sin(x3);\nz3 = 0.8*exp(-0.5*x3).*sin(10*x3);\nyyaxis left\nplot(x3,y3);\nhold on\naxis([0 20 -150 150])\nyyaxis right\nplot(x3,z3)\naxis([0 20 -1 1])\n```\n## 对数坐标\n```matlab\nloglog(x,y, 's', 'PropertyName', PropertyValue, ) %全对数坐标\nsemilogx(x,y, 's', 'PropertyName', PropertyValue, ) %x对数坐标\nsemilogy(x,y, 's', 'PropertyName', PropertyValue, ) %y对数坐标\n```\n## 三维区线图\n```matlab\nplot3(x,y,z,\"r+\")\n```\n## 三维网线图\n\n## 三维面图\n\n## 三维等高线图","source":"_posts/数学建模/仿真复习.md","raw":"---\ntitle: 仿真复习\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:03\ntags: []\ncategories: [数学建模]\nkeywords:\ndescription: \n---\n\n\n# 画图样式\n## 网格线\n```matlab\ngrid on %坐标网格线\n```\n## 显示坐标框\n```matlab\nbox on \n```\n## 设置轴的范围\n```matlab\naxis([x1,x2,y1,y2]) % 平面坐标范围 \naxis([x1,x2,y1,y2,z1,z2]) % 三维坐标范围 \n```\n## 设置坐标轴间隔\n```matlab\nX=0:1:12;  \nY=-0.5:0.25:1;  \nset(gca,'xtick',X,'ytick',Y)\n```\n## 在同一个坐标里画图\n```matlab\nhold on \n```\n## 零点辅助线\n```matlab\nhold on; % 在每一次重复作图都要hold on \nplot(t, zeros(size(t)),‘k’); % 零点辅助直线\n```\n## 一个窗口多个坐标轴\n```matlab\nsubplot(a,b,c)\n% 第一个参数是有几行\n% 第二个参数是有几列\n% 第三个参数是当前是第几个\n```\n## 改变角度\n```matlab\n\n```\n# 画图方法\n## 同时绘制多个类似的图,Y是二维矩阵\n> 横坐标要先转置再矩阵乘法一个向量（1\\*n）\n> Y的每一列作为纵坐标\n> 也可以直接在一个plot函数里画图\n```matlab\nt=(0:pi/50:2*pi)'; % t(101 x 1)\nk=0.4:0.1:1; % k(1 x 7)\nY=cos(t)*k; % 矩阵相乘, \nY(101 x 7) plot(t,Y), hold on; % 7条幅度调制的余弦曲线 \nplot(t, zeros(size(t)),‘k’); % 零点辅助直线\n```\n## 包络线\n> 包络线函数一般题目给出\n> \n```matlab\nt=(0:pi/100:pi)';\nk = [-1,1];\ny1=sin(t)*k; % 两条包络线\ny2=sin(t).*sin(9*t);\nt3=pi*(0:9)/9; % 函数零点，即sin(9t)=0的点\ny3=sin(t3).*sin(9*t3);\nplot( t,y1,'r:', t,y2,'b', t3,y3,'bo')\naxis([0,pi,-1,1])\n```\n## 双坐标轴并调范围和设置坐标轴范围\n```matlab\nx3 = 0:0.001:20;\ny3 = 150*exp(-0.05*x3).*sin(x3);\nz3 = 0.8*exp(-0.5*x3).*sin(10*x3);\nyyaxis left\nplot(x3,y3);\nhold on\naxis([0 20 -150 150])\nyyaxis right\nplot(x3,z3)\naxis([0 20 -1 1])\n```\n## 对数坐标\n```matlab\nloglog(x,y, 's', 'PropertyName', PropertyValue, ) %全对数坐标\nsemilogx(x,y, 's', 'PropertyName', PropertyValue, ) %x对数坐标\nsemilogy(x,y, 's', 'PropertyName', PropertyValue, ) %y对数坐标\n```\n## 三维区线图\n```matlab\nplot3(x,y,z,\"r+\")\n```\n## 三维网线图\n\n## 三维面图\n\n## 三维等高线图","slug":"数学建模/仿真复习","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7u000yi4v1fpuab4ya","content":"<h1 id=\"画图样式\"><a href=\"#画图样式\" class=\"headerlink\" title=\"画图样式\"></a>画图样式</h1><h2 id=\"网格线\"><a href=\"#网格线\" class=\"headerlink\" title=\"网格线\"></a>网格线</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid on <span class=\"comment\">%坐标网格线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示坐标框\"><a href=\"#显示坐标框\" class=\"headerlink\" title=\"显示坐标框\"></a>显示坐标框</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box on </span><br></pre></td></tr></table></figure>\n<h2 id=\"设置轴的范围\"><a href=\"#设置轴的范围\" class=\"headerlink\" title=\"设置轴的范围\"></a>设置轴的范围</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axis([x1,x2,y1,y2]) <span class=\"comment\">% 平面坐标范围 </span></span><br><span class=\"line\">axis([x1,x2,y1,y2,z1,z2]) <span class=\"comment\">% 三维坐标范围 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"设置坐标轴间隔\"><a href=\"#设置坐标轴间隔\" class=\"headerlink\" title=\"设置坐标轴间隔\"></a>设置坐标轴间隔</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=<span class=\"number\">0</span>:<span class=\"number\">1</span>:<span class=\"number\">12</span>;  </span><br><span class=\"line\">Y=<span class=\"number\">-0.5</span>:<span class=\"number\">0.25</span>:<span class=\"number\">1</span>;  </span><br><span class=\"line\">set(gca,<span class=\"string\">&#x27;xtick&#x27;</span>,X,<span class=\"string\">&#x27;ytick&#x27;</span>,Y)</span><br></pre></td></tr></table></figure>\n<h2 id=\"在同一个坐标里画图\"><a href=\"#在同一个坐标里画图\" class=\"headerlink\" title=\"在同一个坐标里画图\"></a>在同一个坐标里画图</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">hold</span> on </span><br></pre></td></tr></table></figure>\n<h2 id=\"零点辅助线\"><a href=\"#零点辅助线\" class=\"headerlink\" title=\"零点辅助线\"></a>零点辅助线</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">hold</span> on; <span class=\"comment\">% 在每一次重复作图都要hold on </span></span><br><span class=\"line\"><span class=\"built_in\">plot</span>(t, <span class=\"built_in\">zeros</span>(<span class=\"built_in\">size</span>(t)),‘k’); <span class=\"comment\">% 零点辅助直线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一个窗口多个坐标轴\"><a href=\"#一个窗口多个坐标轴\" class=\"headerlink\" title=\"一个窗口多个坐标轴\"></a>一个窗口多个坐标轴</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(a,b,c)</span><br><span class=\"line\"><span class=\"comment\">% 第一个参数是有几行</span></span><br><span class=\"line\"><span class=\"comment\">% 第二个参数是有几列</span></span><br><span class=\"line\"><span class=\"comment\">% 第三个参数是当前是第几个</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"改变角度\"><a href=\"#改变角度\" class=\"headerlink\" title=\"改变角度\"></a>改变角度</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"画图方法\"><a href=\"#画图方法\" class=\"headerlink\" title=\"画图方法\"></a>画图方法</h1><h2 id=\"同时绘制多个类似的图-Y是二维矩阵\"><a href=\"#同时绘制多个类似的图-Y是二维矩阵\" class=\"headerlink\" title=\"同时绘制多个类似的图,Y是二维矩阵\"></a>同时绘制多个类似的图,Y是二维矩阵</h2><blockquote>\n<p>横坐标要先转置再矩阵乘法一个向量（1*n）<br>Y的每一列作为纵坐标<br>也可以直接在一个plot函数里画图</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=(<span class=\"number\">0</span>:<span class=\"built_in\">pi</span>/<span class=\"number\">50</span>:<span class=\"number\">2</span>*<span class=\"built_in\">pi</span>)&#x27;; <span class=\"comment\">% t(101 x 1)</span></span><br><span class=\"line\">k=<span class=\"number\">0.4</span>:<span class=\"number\">0.1</span>:<span class=\"number\">1</span>; <span class=\"comment\">% k(1 x 7)</span></span><br><span class=\"line\">Y=<span class=\"built_in\">cos</span>(t)*k; <span class=\"comment\">% 矩阵相乘, </span></span><br><span class=\"line\">Y(<span class=\"number\">101</span> x <span class=\"number\">7</span>) <span class=\"built_in\">plot</span>(t,Y), <span class=\"built_in\">hold</span> on; <span class=\"comment\">% 7条幅度调制的余弦曲线 </span></span><br><span class=\"line\"><span class=\"built_in\">plot</span>(t, <span class=\"built_in\">zeros</span>(<span class=\"built_in\">size</span>(t)),‘k’); <span class=\"comment\">% 零点辅助直线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"包络线\"><a href=\"#包络线\" class=\"headerlink\" title=\"包络线\"></a>包络线</h2><blockquote>\n<p>包络线函数一般题目给出</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=(<span class=\"number\">0</span>:<span class=\"built_in\">pi</span>/<span class=\"number\">100</span>:<span class=\"built_in\">pi</span>)&#x27;;</span><br><span class=\"line\">k = [<span class=\"number\">-1</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\">y1=<span class=\"built_in\">sin</span>(t)*k; <span class=\"comment\">% 两条包络线</span></span><br><span class=\"line\">y2=<span class=\"built_in\">sin</span>(t).*<span class=\"built_in\">sin</span>(<span class=\"number\">9</span>*t);</span><br><span class=\"line\">t3=<span class=\"built_in\">pi</span>*(<span class=\"number\">0</span>:<span class=\"number\">9</span>)/<span class=\"number\">9</span>; <span class=\"comment\">% 函数零点，即sin(9t)=0的点</span></span><br><span class=\"line\">y3=<span class=\"built_in\">sin</span>(t3).*<span class=\"built_in\">sin</span>(<span class=\"number\">9</span>*t3);</span><br><span class=\"line\"><span class=\"built_in\">plot</span>( t,y1,<span class=\"string\">&#x27;r:&#x27;</span>, t,y2,<span class=\"string\">&#x27;b&#x27;</span>, t3,y3,<span class=\"string\">&#x27;bo&#x27;</span>)</span><br><span class=\"line\">axis([<span class=\"number\">0</span>,<span class=\"built_in\">pi</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"双坐标轴并调范围和设置坐标轴范围\"><a href=\"#双坐标轴并调范围和设置坐标轴范围\" class=\"headerlink\" title=\"双坐标轴并调范围和设置坐标轴范围\"></a>双坐标轴并调范围和设置坐标轴范围</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x3 = <span class=\"number\">0</span>:<span class=\"number\">0.001</span>:<span class=\"number\">20</span>;</span><br><span class=\"line\">y3 = <span class=\"number\">150</span>*<span class=\"built_in\">exp</span>(<span class=\"number\">-0.05</span>*x3).*<span class=\"built_in\">sin</span>(x3);</span><br><span class=\"line\">z3 = <span class=\"number\">0.8</span>*<span class=\"built_in\">exp</span>(<span class=\"number\">-0.5</span>*x3).*<span class=\"built_in\">sin</span>(<span class=\"number\">10</span>*x3);</span><br><span class=\"line\">yyaxis left</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x3,y3);</span><br><span class=\"line\"><span class=\"built_in\">hold</span> on</span><br><span class=\"line\">axis([<span class=\"number\">0</span> <span class=\"number\">20</span> <span class=\"number\">-150</span> <span class=\"number\">150</span>])</span><br><span class=\"line\">yyaxis right</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x3,z3)</span><br><span class=\"line\">axis([<span class=\"number\">0</span> <span class=\"number\">20</span> <span class=\"number\">-1</span> <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数坐标\"><a href=\"#对数坐标\" class=\"headerlink\" title=\"对数坐标\"></a>对数坐标</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loglog(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%全对数坐标</span></span><br><span class=\"line\">semilogx(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%x对数坐标</span></span><br><span class=\"line\">semilogy(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%y对数坐标</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三维区线图\"><a href=\"#三维区线图\" class=\"headerlink\" title=\"三维区线图\"></a>三维区线图</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">plot3</span>(x,y,z,<span class=\"string\">&quot;r+&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三维网线图\"><a href=\"#三维网线图\" class=\"headerlink\" title=\"三维网线图\"></a>三维网线图</h2><h2 id=\"三维面图\"><a href=\"#三维面图\" class=\"headerlink\" title=\"三维面图\"></a>三维面图</h2><h2 id=\"三维等高线图\"><a href=\"#三维等高线图\" class=\"headerlink\" title=\"三维等高线图\"></a>三维等高线图</h2>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"画图样式\"><a href=\"#画图样式\" class=\"headerlink\" title=\"画图样式\"></a>画图样式</h1><h2 id=\"网格线\"><a href=\"#网格线\" class=\"headerlink\" title=\"网格线\"></a>网格线</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid on <span class=\"comment\">%坐标网格线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示坐标框\"><a href=\"#显示坐标框\" class=\"headerlink\" title=\"显示坐标框\"></a>显示坐标框</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box on </span><br></pre></td></tr></table></figure>\n<h2 id=\"设置轴的范围\"><a href=\"#设置轴的范围\" class=\"headerlink\" title=\"设置轴的范围\"></a>设置轴的范围</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axis([x1,x2,y1,y2]) <span class=\"comment\">% 平面坐标范围 </span></span><br><span class=\"line\">axis([x1,x2,y1,y2,z1,z2]) <span class=\"comment\">% 三维坐标范围 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"设置坐标轴间隔\"><a href=\"#设置坐标轴间隔\" class=\"headerlink\" title=\"设置坐标轴间隔\"></a>设置坐标轴间隔</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=<span class=\"number\">0</span>:<span class=\"number\">1</span>:<span class=\"number\">12</span>;  </span><br><span class=\"line\">Y=<span class=\"number\">-0.5</span>:<span class=\"number\">0.25</span>:<span class=\"number\">1</span>;  </span><br><span class=\"line\">set(gca,<span class=\"string\">&#x27;xtick&#x27;</span>,X,<span class=\"string\">&#x27;ytick&#x27;</span>,Y)</span><br></pre></td></tr></table></figure>\n<h2 id=\"在同一个坐标里画图\"><a href=\"#在同一个坐标里画图\" class=\"headerlink\" title=\"在同一个坐标里画图\"></a>在同一个坐标里画图</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">hold</span> on </span><br></pre></td></tr></table></figure>\n<h2 id=\"零点辅助线\"><a href=\"#零点辅助线\" class=\"headerlink\" title=\"零点辅助线\"></a>零点辅助线</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">hold</span> on; <span class=\"comment\">% 在每一次重复作图都要hold on </span></span><br><span class=\"line\"><span class=\"built_in\">plot</span>(t, <span class=\"built_in\">zeros</span>(<span class=\"built_in\">size</span>(t)),‘k’); <span class=\"comment\">% 零点辅助直线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一个窗口多个坐标轴\"><a href=\"#一个窗口多个坐标轴\" class=\"headerlink\" title=\"一个窗口多个坐标轴\"></a>一个窗口多个坐标轴</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(a,b,c)</span><br><span class=\"line\"><span class=\"comment\">% 第一个参数是有几行</span></span><br><span class=\"line\"><span class=\"comment\">% 第二个参数是有几列</span></span><br><span class=\"line\"><span class=\"comment\">% 第三个参数是当前是第几个</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"改变角度\"><a href=\"#改变角度\" class=\"headerlink\" title=\"改变角度\"></a>改变角度</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"画图方法\"><a href=\"#画图方法\" class=\"headerlink\" title=\"画图方法\"></a>画图方法</h1><h2 id=\"同时绘制多个类似的图-Y是二维矩阵\"><a href=\"#同时绘制多个类似的图-Y是二维矩阵\" class=\"headerlink\" title=\"同时绘制多个类似的图,Y是二维矩阵\"></a>同时绘制多个类似的图,Y是二维矩阵</h2><blockquote>\n<p>横坐标要先转置再矩阵乘法一个向量（1*n）<br>Y的每一列作为纵坐标<br>也可以直接在一个plot函数里画图</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=(<span class=\"number\">0</span>:<span class=\"built_in\">pi</span>/<span class=\"number\">50</span>:<span class=\"number\">2</span>*<span class=\"built_in\">pi</span>)&#x27;; <span class=\"comment\">% t(101 x 1)</span></span><br><span class=\"line\">k=<span class=\"number\">0.4</span>:<span class=\"number\">0.1</span>:<span class=\"number\">1</span>; <span class=\"comment\">% k(1 x 7)</span></span><br><span class=\"line\">Y=<span class=\"built_in\">cos</span>(t)*k; <span class=\"comment\">% 矩阵相乘, </span></span><br><span class=\"line\">Y(<span class=\"number\">101</span> x <span class=\"number\">7</span>) <span class=\"built_in\">plot</span>(t,Y), <span class=\"built_in\">hold</span> on; <span class=\"comment\">% 7条幅度调制的余弦曲线 </span></span><br><span class=\"line\"><span class=\"built_in\">plot</span>(t, <span class=\"built_in\">zeros</span>(<span class=\"built_in\">size</span>(t)),‘k’); <span class=\"comment\">% 零点辅助直线</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"包络线\"><a href=\"#包络线\" class=\"headerlink\" title=\"包络线\"></a>包络线</h2><blockquote>\n<p>包络线函数一般题目给出</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=(<span class=\"number\">0</span>:<span class=\"built_in\">pi</span>/<span class=\"number\">100</span>:<span class=\"built_in\">pi</span>)&#x27;;</span><br><span class=\"line\">k = [<span class=\"number\">-1</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\">y1=<span class=\"built_in\">sin</span>(t)*k; <span class=\"comment\">% 两条包络线</span></span><br><span class=\"line\">y2=<span class=\"built_in\">sin</span>(t).*<span class=\"built_in\">sin</span>(<span class=\"number\">9</span>*t);</span><br><span class=\"line\">t3=<span class=\"built_in\">pi</span>*(<span class=\"number\">0</span>:<span class=\"number\">9</span>)/<span class=\"number\">9</span>; <span class=\"comment\">% 函数零点，即sin(9t)=0的点</span></span><br><span class=\"line\">y3=<span class=\"built_in\">sin</span>(t3).*<span class=\"built_in\">sin</span>(<span class=\"number\">9</span>*t3);</span><br><span class=\"line\"><span class=\"built_in\">plot</span>( t,y1,<span class=\"string\">&#x27;r:&#x27;</span>, t,y2,<span class=\"string\">&#x27;b&#x27;</span>, t3,y3,<span class=\"string\">&#x27;bo&#x27;</span>)</span><br><span class=\"line\">axis([<span class=\"number\">0</span>,<span class=\"built_in\">pi</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"双坐标轴并调范围和设置坐标轴范围\"><a href=\"#双坐标轴并调范围和设置坐标轴范围\" class=\"headerlink\" title=\"双坐标轴并调范围和设置坐标轴范围\"></a>双坐标轴并调范围和设置坐标轴范围</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x3 = <span class=\"number\">0</span>:<span class=\"number\">0.001</span>:<span class=\"number\">20</span>;</span><br><span class=\"line\">y3 = <span class=\"number\">150</span>*<span class=\"built_in\">exp</span>(<span class=\"number\">-0.05</span>*x3).*<span class=\"built_in\">sin</span>(x3);</span><br><span class=\"line\">z3 = <span class=\"number\">0.8</span>*<span class=\"built_in\">exp</span>(<span class=\"number\">-0.5</span>*x3).*<span class=\"built_in\">sin</span>(<span class=\"number\">10</span>*x3);</span><br><span class=\"line\">yyaxis left</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x3,y3);</span><br><span class=\"line\"><span class=\"built_in\">hold</span> on</span><br><span class=\"line\">axis([<span class=\"number\">0</span> <span class=\"number\">20</span> <span class=\"number\">-150</span> <span class=\"number\">150</span>])</span><br><span class=\"line\">yyaxis right</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x3,z3)</span><br><span class=\"line\">axis([<span class=\"number\">0</span> <span class=\"number\">20</span> <span class=\"number\">-1</span> <span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数坐标\"><a href=\"#对数坐标\" class=\"headerlink\" title=\"对数坐标\"></a>对数坐标</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loglog(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%全对数坐标</span></span><br><span class=\"line\">semilogx(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%x对数坐标</span></span><br><span class=\"line\">semilogy(x,y, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;PropertyName&#x27;</span>, PropertyValue, ) <span class=\"comment\">%y对数坐标</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三维区线图\"><a href=\"#三维区线图\" class=\"headerlink\" title=\"三维区线图\"></a>三维区线图</h2><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">plot3</span>(x,y,z,<span class=\"string\">&quot;r+&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三维网线图\"><a href=\"#三维网线图\" class=\"headerlink\" title=\"三维网线图\"></a>三维网线图</h2><h2 id=\"三维面图\"><a href=\"#三维面图\" class=\"headerlink\" title=\"三维面图\"></a>三维面图</h2><h2 id=\"三维等高线图\"><a href=\"#三维等高线图\" class=\"headerlink\" title=\"三维等高线图\"></a>三维等高线图</h2>"},{"title":"MySQL基础","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-11T03:10:14.497Z","keywords":null,"description":null,"_content":"\n\n\n# 数据库基本操作\n\n```sql\nSHOW DATABASES\t\t\t\t\t--显示所有数据库\nCREATE DATABASES 数据库名\t\t--创建数据库\nUSE 数据库名称\t\t\t\t\t--切换默认数据库 \nDROP DATABASE 数据库名\t\t\t--删除数据库\n```\n# 数据类型\n基础的数据类型忽略，只用重点看下面两个数据类型\n## enum单选\n```sql\nenum('男','女')\n```\n## set多选\n```sql\nset('打球','下棋','音乐','游泳')\n```\n## 定点数\n```sql\ndecimal(M,D)\n```\n- M是最大位数（精度），范围是1到65。可不指定，默认值是10。\n- D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。\n# 新增表create\n\n## 创建表副本\n\n> 注意，创建的副本没有定义主键和自动增加属性，要手动添加\n\n```sql\ncreate table orders_archived as\nselect * from orders\n```\n\n- 利用where语句\n```sql\ncreate table orders_archived as\nselect * from orders\nwhere order_data <'2019-01-01'\n```\n## 创建自定义表\n```sql\ncreate table '表名'(\n\t'列名1'    数据类型\n\t'列名2'    数据类型\n\t'列名3'    数据类型\n\t'列名4'    数据类型\n)\n```\n## 外键的设置\n- __子表的外键必须是主表的主键__\n```sql\ncreate table student_score(\n\tnumber int\n\tsubject varchar(30)\n\tscore tinyint \n\tconstraint poreign key(number) references student_info(number)\n)\n```\n\n# 删除表drop\n```sql\ndrop table 表1，表2，表3\n```\n- 删除不存在的表会报错，要判断一下是否存在\n```sql\ndrop table if exists 表1，表2，表3\n```\n# 增加记录insert\n## 表设置\n| Datatype           |                                             |\n| ------------------ | ------------------------------------------- |\n| PK                 | 主键                                        |\n| NN                 | 非空                                        |\n|UQ|唯一 |\n| B                  |二进制|\n| UN                 | 非负数，比text更大                          |\n| ZF                 | 填充，如Datatype是int(4)，内容是1，显示0001 |\n| AI                 | 自动增加                                    |\n| G                  | 生成列，这一列由其他列计算而得              |\n| Default/Expression | 默认值                                      |\n## 默认插入\n```sql\ninsert into customers\nvalues(\n\tdefault,\n  'first_name',\n  'last_name',\n  'birthday',\n  null,\n  'address'\n  'city',\n  'state',\n  default\n)\n\n```\n<a name=\"ulh2s\"></a>\n## 指定插入，多行插入\n```sql\ninsert into shippers(shipper_id,name)\nvalues\n\t('id1','name1'),\n\t('id2','name2'),\n\t('id3','name3'),\n\t('id4','name4'),\n\t\n```\n<a name=\"vfmzO\"></a>\n## last_insert_id主子表连接\n> 会返回上一次插入操作后的最后一个id值\n\n```sql\ninsert into orders(customer_id,order_date,status)\nvalues(1,'2019-01-02','1');\nselect LAST_INSERT_ID()\n```\n\n- 在子表中插入关联的id值\n```sql\ninsert into orders(customer_id,order_date,status)\nvalues(1,'2019-01-02','1');\ninsert into order_items\nvalues\n\t(last_insert_id,1,1,2.95),\n\t(last_insert_id,2,1,2.95)\n```\n<a name=\"SfaXj\"></a>\n\n# 删除delete\n<a name=\"KQsRW\"></a>\n## 基础语法\n> 若不写where语句会删除所有记录\n\n```sql\ndelete from invoices\nwhere invoice_id = 1\n```\n<a name=\"ehs6d\"></a>\n## 在where语句中使用select语句\n> 和update一样\n\n> 括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件\n\n```sql\ndelete invoices\nset \n\tpayment_totle = 1\n\tpayment_date = '2022-10-22'\nwhere client_id IN(\n  select client_id\n  from clients\n  where state in('CA','NY')\n)\n```\n\n# 修改update\n<a name=\"Ij2Ps\"></a>\n## 基本语法\n```sql\nupdate 表名\nset 键名1=键值1，\n\t键名2=键值2\nwhere 键名=键值 -- 筛选条件，确定是哪一行的数据更新\n```\n<a name=\"MlwIA\"></a>\n## 在where语句中使用select语句\n> 括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件\n\n```sql\nupdate invoices\nset \n\tpayment_totle = 1\n\tpayment_date = '2022-10-22'\nwhere client_id IN(\n  select client_id\n  from clients\n  where state in('CA','NY')\n)\n```\n<a name=\"V2ODC\"></a>\n\n# 查询select\n<a name=\"OgySP\"></a>\n## 语句结构\n```sql\nselect '要选择的列' \nfrom '要选择的表'\nwhere '筛选条件'\norder by '排序条件'\nlimit '要显示的记录数'\n```\n<a name=\"Qiz7R\"></a>\n## 选择列\n```sql\nselect \n\tlast_name,\t--不同的列用逗号隔开\n\tfirst_name,\n\tpoints,\n\tpoints+10 as 'new point' --可以做数学运算；as用来命名新的列\nfrom customers\n\nselect DISTINCT state --筛选出的值不会重复\nfrom customers\n```\n<a name=\"mKJSJ\"></a>\n## 选择记录\n<a name=\"C8DPK\"></a>\n### 关系运算符\n> 可比较数字和时间\n\n```sql\nselect *\nfrom customers\nwhere brith_date > '1990-01-01'\n\tand point >300\n```\n> 若有多个值需要配对，可用in或not in\n\n```sql\nselect *\nfrom customers\nwhere state not in ('VA','FL','GA')\n```\n> 若在一个范围内，可用between ... and ... \n> 可以是数字也可以是时间\n\n```sql\nselect *\nfrom customers\nwhere point between 1000 and 3000\n\tand birth_date between '1990-01-01' and '2000-01-01'\n```\n<a name=\"HHvJw\"></a>\n### like\n\n- 操作符\n| like  ' ' | 等于引号里字符的记录 |\n| --- | --- |\n| % | 任意字符 |\n| _ | 一个字符 |\n\n- 例：\n```sql\nSELECT * FROM Persons\nWHERE City LIKE '%lon%';\nSELECT * FROM Persons\nWHERE City NOT LIKE '%lon%'\n```\n<a name=\"QuG7X\"></a>\n### regexp\n\n- 常见正则表达式\n| regexp ' ' | 包含引号里字符的记录 |\n| --- | --- |\n| ^ | 以后面的字符开头的 |\n| $ | 以后面的字符结尾 |\n| &#124; | 逻辑或 |\n| [abc] | a,b,c中任意一个 |\n| [a-z] | a到z中选一个 |\n\n<a name=\"AWNUs\"></a>\n### limit\n\n- 规定要返回的记录的数目\n```sql\nSELECT *\nFROM Persons\nLIMIT 5\t\t--最多返回五条记录\n```\n<a name=\"iDkug\"></a>\n### is null 和 is not null\n\n- 可选出特定值空的记录，或非空的记录\n```sql\nSELECT * FROM Persons\nWHERE phone IS NOT NULL\n```\n<a name=\"HAqvR\"></a>\n## 结合join\n<a name=\"O8Mie\"></a>\n### 结合多个表\n> 使用using关键字，可以代替两个相同列的名称的值相等\n\n```sql\nSELECT *\nFROM Persons\n\tJOIN Orders\nON using(id_p)\n-- 这里的on一定要写，后面的是结合的条件\n```\n<a name=\"MfRzV\"></a>\n### 显示所有left join\n```sql\nSELECT *\nFROM Persons as p\nLEFT JOIN Orders as o\nON using(id_p)\n-- persons表中的所有列都会列出，即使匹配不到\n```\n<a name=\"Aqiv6\"></a>\n### 交叉结合nature join\n> 即笛卡尔积，前表中的每一行都与后表的所有行配对\n\n```sql\nselect *\nfrom shippers sh\ncross join products p\n-- 不需要写on\n```\n<a name=\"E1Mg6\"></a>\n## 合并结果集union\n> 1. 每个SELECT 语句必须拥有相同数量的列。\n> 2. 每个列也必须拥有相似的数据类型。\n> 3.  每条 SELECT 语句中的列的顺序必须相同。\n\n- 同一个表不同列结合\n```sql\nSELECT E_Name FROM Employees_China\nUNION -- 把两个查询的结果纵向结合\nSELECT E_Name FROM Employees_USA\n```\n\n- 不同的表之间结合\n```sql\nselect first_name\nfrom archived_order\nunion \nselect name\nfrom shippers\n```\n## 对查询结果排序\n\n\n|  |  |  |  |  |\n|:-:|:-:|:-:|:-:|:-:|\n|  |  |  |  |  |\n|  |  |  |  |  |\n|  |  |  |  |  |\n|  |  |  |  |  |\n\n","source":"_posts/数据库/MySQL基础.md","raw":"---\ntitle: MySQL基础\ndate: 2023-04-26 15:16\nupdated: 星期五 8日 九月 2023 11:55:05\ntags: \n- 后端\n- 语言基础\ncategories: [数据库]\nkeywords:\ndescription: \n---\n\n\n\n# 数据库基本操作\n\n```sql\nSHOW DATABASES\t\t\t\t\t--显示所有数据库\nCREATE DATABASES 数据库名\t\t--创建数据库\nUSE 数据库名称\t\t\t\t\t--切换默认数据库 \nDROP DATABASE 数据库名\t\t\t--删除数据库\n```\n# 数据类型\n基础的数据类型忽略，只用重点看下面两个数据类型\n## enum单选\n```sql\nenum('男','女')\n```\n## set多选\n```sql\nset('打球','下棋','音乐','游泳')\n```\n## 定点数\n```sql\ndecimal(M,D)\n```\n- M是最大位数（精度），范围是1到65。可不指定，默认值是10。\n- D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。\n# 新增表create\n\n## 创建表副本\n\n> 注意，创建的副本没有定义主键和自动增加属性，要手动添加\n\n```sql\ncreate table orders_archived as\nselect * from orders\n```\n\n- 利用where语句\n```sql\ncreate table orders_archived as\nselect * from orders\nwhere order_data <'2019-01-01'\n```\n## 创建自定义表\n```sql\ncreate table '表名'(\n\t'列名1'    数据类型\n\t'列名2'    数据类型\n\t'列名3'    数据类型\n\t'列名4'    数据类型\n)\n```\n## 外键的设置\n- __子表的外键必须是主表的主键__\n```sql\ncreate table student_score(\n\tnumber int\n\tsubject varchar(30)\n\tscore tinyint \n\tconstraint poreign key(number) references student_info(number)\n)\n```\n\n# 删除表drop\n```sql\ndrop table 表1，表2，表3\n```\n- 删除不存在的表会报错，要判断一下是否存在\n```sql\ndrop table if exists 表1，表2，表3\n```\n# 增加记录insert\n## 表设置\n| Datatype           |                                             |\n| ------------------ | ------------------------------------------- |\n| PK                 | 主键                                        |\n| NN                 | 非空                                        |\n|UQ|唯一 |\n| B                  |二进制|\n| UN                 | 非负数，比text更大                          |\n| ZF                 | 填充，如Datatype是int(4)，内容是1，显示0001 |\n| AI                 | 自动增加                                    |\n| G                  | 生成列，这一列由其他列计算而得              |\n| Default/Expression | 默认值                                      |\n## 默认插入\n```sql\ninsert into customers\nvalues(\n\tdefault,\n  'first_name',\n  'last_name',\n  'birthday',\n  null,\n  'address'\n  'city',\n  'state',\n  default\n)\n\n```\n<a name=\"ulh2s\"></a>\n## 指定插入，多行插入\n```sql\ninsert into shippers(shipper_id,name)\nvalues\n\t('id1','name1'),\n\t('id2','name2'),\n\t('id3','name3'),\n\t('id4','name4'),\n\t\n```\n<a name=\"vfmzO\"></a>\n## last_insert_id主子表连接\n> 会返回上一次插入操作后的最后一个id值\n\n```sql\ninsert into orders(customer_id,order_date,status)\nvalues(1,'2019-01-02','1');\nselect LAST_INSERT_ID()\n```\n\n- 在子表中插入关联的id值\n```sql\ninsert into orders(customer_id,order_date,status)\nvalues(1,'2019-01-02','1');\ninsert into order_items\nvalues\n\t(last_insert_id,1,1,2.95),\n\t(last_insert_id,2,1,2.95)\n```\n<a name=\"SfaXj\"></a>\n\n# 删除delete\n<a name=\"KQsRW\"></a>\n## 基础语法\n> 若不写where语句会删除所有记录\n\n```sql\ndelete from invoices\nwhere invoice_id = 1\n```\n<a name=\"ehs6d\"></a>\n## 在where语句中使用select语句\n> 和update一样\n\n> 括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件\n\n```sql\ndelete invoices\nset \n\tpayment_totle = 1\n\tpayment_date = '2022-10-22'\nwhere client_id IN(\n  select client_id\n  from clients\n  where state in('CA','NY')\n)\n```\n\n# 修改update\n<a name=\"Ij2Ps\"></a>\n## 基本语法\n```sql\nupdate 表名\nset 键名1=键值1，\n\t键名2=键值2\nwhere 键名=键值 -- 筛选条件，确定是哪一行的数据更新\n```\n<a name=\"MlwIA\"></a>\n## 在where语句中使用select语句\n> 括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件\n\n```sql\nupdate invoices\nset \n\tpayment_totle = 1\n\tpayment_date = '2022-10-22'\nwhere client_id IN(\n  select client_id\n  from clients\n  where state in('CA','NY')\n)\n```\n<a name=\"V2ODC\"></a>\n\n# 查询select\n<a name=\"OgySP\"></a>\n## 语句结构\n```sql\nselect '要选择的列' \nfrom '要选择的表'\nwhere '筛选条件'\norder by '排序条件'\nlimit '要显示的记录数'\n```\n<a name=\"Qiz7R\"></a>\n## 选择列\n```sql\nselect \n\tlast_name,\t--不同的列用逗号隔开\n\tfirst_name,\n\tpoints,\n\tpoints+10 as 'new point' --可以做数学运算；as用来命名新的列\nfrom customers\n\nselect DISTINCT state --筛选出的值不会重复\nfrom customers\n```\n<a name=\"mKJSJ\"></a>\n## 选择记录\n<a name=\"C8DPK\"></a>\n### 关系运算符\n> 可比较数字和时间\n\n```sql\nselect *\nfrom customers\nwhere brith_date > '1990-01-01'\n\tand point >300\n```\n> 若有多个值需要配对，可用in或not in\n\n```sql\nselect *\nfrom customers\nwhere state not in ('VA','FL','GA')\n```\n> 若在一个范围内，可用between ... and ... \n> 可以是数字也可以是时间\n\n```sql\nselect *\nfrom customers\nwhere point between 1000 and 3000\n\tand birth_date between '1990-01-01' and '2000-01-01'\n```\n<a name=\"HHvJw\"></a>\n### like\n\n- 操作符\n| like  ' ' | 等于引号里字符的记录 |\n| --- | --- |\n| % | 任意字符 |\n| _ | 一个字符 |\n\n- 例：\n```sql\nSELECT * FROM Persons\nWHERE City LIKE '%lon%';\nSELECT * FROM Persons\nWHERE City NOT LIKE '%lon%'\n```\n<a name=\"QuG7X\"></a>\n### regexp\n\n- 常见正则表达式\n| regexp ' ' | 包含引号里字符的记录 |\n| --- | --- |\n| ^ | 以后面的字符开头的 |\n| $ | 以后面的字符结尾 |\n| &#124; | 逻辑或 |\n| [abc] | a,b,c中任意一个 |\n| [a-z] | a到z中选一个 |\n\n<a name=\"AWNUs\"></a>\n### limit\n\n- 规定要返回的记录的数目\n```sql\nSELECT *\nFROM Persons\nLIMIT 5\t\t--最多返回五条记录\n```\n<a name=\"iDkug\"></a>\n### is null 和 is not null\n\n- 可选出特定值空的记录，或非空的记录\n```sql\nSELECT * FROM Persons\nWHERE phone IS NOT NULL\n```\n<a name=\"HAqvR\"></a>\n## 结合join\n<a name=\"O8Mie\"></a>\n### 结合多个表\n> 使用using关键字，可以代替两个相同列的名称的值相等\n\n```sql\nSELECT *\nFROM Persons\n\tJOIN Orders\nON using(id_p)\n-- 这里的on一定要写，后面的是结合的条件\n```\n<a name=\"MfRzV\"></a>\n### 显示所有left join\n```sql\nSELECT *\nFROM Persons as p\nLEFT JOIN Orders as o\nON using(id_p)\n-- persons表中的所有列都会列出，即使匹配不到\n```\n<a name=\"Aqiv6\"></a>\n### 交叉结合nature join\n> 即笛卡尔积，前表中的每一行都与后表的所有行配对\n\n```sql\nselect *\nfrom shippers sh\ncross join products p\n-- 不需要写on\n```\n<a name=\"E1Mg6\"></a>\n## 合并结果集union\n> 1. 每个SELECT 语句必须拥有相同数量的列。\n> 2. 每个列也必须拥有相似的数据类型。\n> 3.  每条 SELECT 语句中的列的顺序必须相同。\n\n- 同一个表不同列结合\n```sql\nSELECT E_Name FROM Employees_China\nUNION -- 把两个查询的结果纵向结合\nSELECT E_Name FROM Employees_USA\n```\n\n- 不同的表之间结合\n```sql\nselect first_name\nfrom archived_order\nunion \nselect name\nfrom shippers\n```\n## 对查询结果排序\n\n\n|  |  |  |  |  |\n|:-:|:-:|:-:|:-:|:-:|\n|  |  |  |  |  |\n|  |  |  |  |  |\n|  |  |  |  |  |\n|  |  |  |  |  |\n\n","slug":"数据库/MySQL基础","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7v0012i4v1a8dj6opa","content":"<h1 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> DATABASES\t\t\t\t\t<span class=\"comment\">--显示所有数据库</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASES 数据库名\t\t<span class=\"comment\">--创建数据库</span></span><br><span class=\"line\">USE 数据库名称\t\t\t\t\t<span class=\"comment\">--切换默认数据库 </span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE 数据库名\t\t\t<span class=\"comment\">--删除数据库</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>基础的数据类型忽略，只用重点看下面两个数据类型</p>\n<h2 id=\"enum单选\"><a href=\"#enum单选\" class=\"headerlink\" title=\"enum单选\"></a>enum单选</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum(<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"set多选\"><a href=\"#set多选\" class=\"headerlink\" title=\"set多选\"></a>set多选</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(<span class=\"string\">&#x27;打球&#x27;</span>,<span class=\"string\">&#x27;下棋&#x27;</span>,<span class=\"string\">&#x27;音乐&#x27;</span>,<span class=\"string\">&#x27;游泳&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"定点数\"><a href=\"#定点数\" class=\"headerlink\" title=\"定点数\"></a>定点数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">decimal</span>(M,D)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>M是最大位数（精度），范围是1到65。可不指定，默认值是10。</li>\n<li>D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。</li>\n</ul>\n<h1 id=\"新增表create\"><a href=\"#新增表create\" class=\"headerlink\" title=\"新增表create\"></a>新增表create</h1><h2 id=\"创建表副本\"><a href=\"#创建表副本\" class=\"headerlink\" title=\"创建表副本\"></a>创建表副本</h2><blockquote>\n<p>注意，创建的副本没有定义主键和自动增加属性，要手动添加</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> orders_archived <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> orders</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用where语句<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> orders_archived <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_data <span class=\"operator\">&lt;</span><span class=\"string\">&#x27;2019-01-01&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建自定义表\"><a href=\"#创建自定义表\" class=\"headerlink\" title=\"创建自定义表\"></a>创建自定义表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">&#x27;表名&#x27;</span>(</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名1&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名2&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名3&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名4&#x27;</span>    数据类型</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"外键的设置\"><a href=\"#外键的设置\" class=\"headerlink\" title=\"外键的设置\"></a>外键的设置</h2><ul>\n<li><strong>子表的外键必须是主表的主键</strong><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> student_score(</span><br><span class=\"line\">\tnumber <span class=\"type\">int</span></span><br><span class=\"line\">\tsubject <span class=\"type\">varchar</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">\tscore tinyint </span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> poreign key(number) <span class=\"keyword\">references</span> student_info(number)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"删除表drop\"><a href=\"#删除表drop\" class=\"headerlink\" title=\"删除表drop\"></a>删除表drop</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表<span class=\"number\">1</span>，表<span class=\"number\">2</span>，表<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除不存在的表会报错，要判断一下是否存在<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> 表<span class=\"number\">1</span>，表<span class=\"number\">2</span>，表<span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"增加记录insert\"><a href=\"#增加记录insert\" class=\"headerlink\" title=\"增加记录insert\"></a>增加记录insert</h1><h2 id=\"表设置\"><a href=\"#表设置\" class=\"headerlink\" title=\"表设置\"></a>表设置</h2><table>\n<thead>\n<tr>\n<th>Datatype</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PK</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>NN</td>\n<td>非空</td>\n</tr>\n<tr>\n<td>UQ</td>\n<td>唯一</td>\n</tr>\n<tr>\n<td>B</td>\n<td>二进制</td>\n</tr>\n<tr>\n<td>UN</td>\n<td>非负数，比text更大</td>\n</tr>\n<tr>\n<td>ZF</td>\n<td>填充，如Datatype是int(4)，内容是1，显示0001</td>\n</tr>\n<tr>\n<td>AI</td>\n<td>自动增加</td>\n</tr>\n<tr>\n<td>G</td>\n<td>生成列，这一列由其他列计算而得</td>\n</tr>\n<tr>\n<td>Default&#x2F;Expression</td>\n<td>默认值</td>\n</tr>\n</tbody></table>\n<h2 id=\"默认插入\"><a href=\"#默认插入\" class=\"headerlink\" title=\"默认插入\"></a>默认插入</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers</span><br><span class=\"line\"><span class=\"keyword\">values</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;first_name&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;last_name&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;birthday&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;address&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;city&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;state&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">default</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a name=\"ulh2s\"></a></p>\n<h2 id=\"指定插入，多行插入\"><a href=\"#指定插入，多行插入\" class=\"headerlink\" title=\"指定插入，多行插入\"></a>指定插入，多行插入</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> shippers(shipper_id,name)</span><br><span class=\"line\"><span class=\"keyword\">values</span></span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id1&#x27;</span>,<span class=\"string\">&#x27;name1&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id2&#x27;</span>,<span class=\"string\">&#x27;name2&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id3&#x27;</span>,<span class=\"string\">&#x27;name3&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id4&#x27;</span>,<span class=\"string\">&#x27;name4&#x27;</span>),</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n<p><a name=\"vfmzO\"></a></p>\n<h2 id=\"last-insert-id主子表连接\"><a href=\"#last-insert-id主子表连接\" class=\"headerlink\" title=\"last_insert_id主子表连接\"></a>last_insert_id主子表连接</h2><blockquote>\n<p>会返回上一次插入操作后的最后一个id值</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> orders(customer_id,order_date,status)</span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2019-01-02&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> LAST_INSERT_ID()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在子表中插入关联的id值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> orders(customer_id,order_date,status)</span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2019-01-02&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">values</span></span><br><span class=\"line\">\t(last_insert_id,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2.95</span>),</span><br><span class=\"line\">\t(last_insert_id,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2.95</span>)</span><br></pre></td></tr></table></figure>\n<a name=\"SfaXj\"></a></li>\n</ul>\n<h1 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h1><p><a name=\"KQsRW\"></a></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><blockquote>\n<p>若不写where语句会删除所有记录</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">where</span> invoice_id <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ehs6d\"></a></p>\n<h2 id=\"在where语句中使用select语句\"><a href=\"#在where语句中使用select语句\" class=\"headerlink\" title=\"在where语句中使用select语句\"></a>在where语句中使用select语句</h2><blockquote>\n<p>和update一样</p>\n</blockquote>\n<blockquote>\n<p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> </span><br><span class=\"line\">\tpayment_totle <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tpayment_date <span class=\"operator\">=</span> <span class=\"string\">&#x27;2022-10-22&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span>(<span class=\"string\">&#x27;CA&#x27;</span>,<span class=\"string\">&#x27;NY&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改update\"><a href=\"#修改update\" class=\"headerlink\" title=\"修改update\"></a>修改update</h1><p><a name=\"Ij2Ps\"></a></p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">set</span> 键名<span class=\"number\">1</span><span class=\"operator\">=</span>键值<span class=\"number\">1</span>，</span><br><span class=\"line\">\t键名<span class=\"number\">2</span><span class=\"operator\">=</span>键值<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> 键名<span class=\"operator\">=</span>键值 <span class=\"comment\">-- 筛选条件，确定是哪一行的数据更新</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"MlwIA\"></a></p>\n<h2 id=\"在where语句中使用select语句-1\"><a href=\"#在where语句中使用select语句-1\" class=\"headerlink\" title=\"在where语句中使用select语句\"></a>在where语句中使用select语句</h2><blockquote>\n<p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> </span><br><span class=\"line\">\tpayment_totle <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tpayment_date <span class=\"operator\">=</span> <span class=\"string\">&#x27;2022-10-22&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span>(<span class=\"string\">&#x27;CA&#x27;</span>,<span class=\"string\">&#x27;NY&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a name=\"V2ODC\"></a></p>\n<h1 id=\"查询select\"><a href=\"#查询select\" class=\"headerlink\" title=\"查询select\"></a>查询select</h1><p><a name=\"OgySP\"></a></p>\n<h2 id=\"语句结构\"><a href=\"#语句结构\" class=\"headerlink\" title=\"语句结构\"></a>语句结构</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;要选择的列&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"string\">&#x27;要选择的表&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">&#x27;筛选条件&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;排序条件&#x27;</span></span><br><span class=\"line\">limit <span class=\"string\">&#x27;要显示的记录数&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"Qiz7R\"></a></p>\n<h2 id=\"选择列\"><a href=\"#选择列\" class=\"headerlink\" title=\"选择列\"></a>选择列</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tlast_name,\t<span class=\"comment\">--不同的列用逗号隔开</span></span><br><span class=\"line\">\tfirst_name,</span><br><span class=\"line\">\tpoints,</span><br><span class=\"line\">\tpoints<span class=\"operator\">+</span><span class=\"number\">10</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;new point&#x27;</span> <span class=\"comment\">--可以做数学运算；as用来命名新的列</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">DISTINCT</span> state <span class=\"comment\">--筛选出的值不会重复</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n<p><a name=\"mKJSJ\"></a></p>\n<h2 id=\"选择记录\"><a href=\"#选择记录\" class=\"headerlink\" title=\"选择记录\"></a>选择记录</h2><p><a name=\"C8DPK\"></a></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><blockquote>\n<p>可比较数字和时间</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> brith_date <span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;1990-01-01&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> point <span class=\"operator\">&gt;</span><span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若有多个值需要配对，可用in或not in</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;VA&#x27;</span>,<span class=\"string\">&#x27;FL&#x27;</span>,<span class=\"string\">&#x27;GA&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若在一个范围内，可用between … and …<br>可以是数字也可以是时间</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> point <span class=\"keyword\">between</span> <span class=\"number\">1000</span> <span class=\"keyword\">and</span> <span class=\"number\">3000</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> birth_date <span class=\"keyword\">between</span> <span class=\"string\">&#x27;1990-01-01&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2000-01-01&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"HHvJw\"></a></p>\n<h3 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h3><ul>\n<li><p>操作符</p>\n<table>\n<thead>\n<tr>\n<th>like  ‘ ‘</th>\n<th>等于引号里字符的记录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%</td>\n<td>任意字符</td>\n</tr>\n<tr>\n<td>_</td>\n<td>一个字符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> City <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%lon%&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> City <span class=\"keyword\">NOT</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%lon%&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"QuG7X\"></a></p>\n</li>\n</ul>\n<h3 id=\"regexp\"><a href=\"#regexp\" class=\"headerlink\" title=\"regexp\"></a>regexp</h3><ul>\n<li>常见正则表达式<table>\n<thead>\n<tr>\n<th>regexp ‘ ‘</th>\n<th>包含引号里字符的记录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以后面的字符开头的</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以后面的字符结尾</td>\n</tr>\n<tr>\n<td>&amp;#124;</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>a,b,c中任意一个</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>a到z中选一个</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p><a name=\"AWNUs\"></a></p>\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h3><ul>\n<li>规定要返回的记录的数目<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\">LIMIT <span class=\"number\">5</span>\t\t<span class=\"comment\">--最多返回五条记录</span></span><br></pre></td></tr></table></figure>\n<a name=\"iDkug\"></a></li>\n</ul>\n<h3 id=\"is-null-和-is-not-null\"><a href=\"#is-null-和-is-not-null\" class=\"headerlink\" title=\"is null 和 is not null\"></a>is null 和 is not null</h3><ul>\n<li>可选出特定值空的记录，或非空的记录<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> phone <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure>\n<a name=\"HAqvR\"></a></li>\n</ul>\n<h2 id=\"结合join\"><a href=\"#结合join\" class=\"headerlink\" title=\"结合join\"></a>结合join</h2><p><a name=\"O8Mie\"></a></p>\n<h3 id=\"结合多个表\"><a href=\"#结合多个表\" class=\"headerlink\" title=\"结合多个表\"></a>结合多个表</h3><blockquote>\n<p>使用using关键字，可以代替两个相同列的名称的值相等</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\">\t<span class=\"keyword\">JOIN</span> Orders</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">using</span>(id_p)</span><br><span class=\"line\"><span class=\"comment\">-- 这里的on一定要写，后面的是结合的条件</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"MfRzV\"></a></p>\n<h3 id=\"显示所有left-join\"><a href=\"#显示所有left-join\" class=\"headerlink\" title=\"显示所有left join\"></a>显示所有left join</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">as</span> p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Orders <span class=\"keyword\">as</span> o</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">using</span>(id_p)</span><br><span class=\"line\"><span class=\"comment\">-- persons表中的所有列都会列出，即使匹配不到</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"Aqiv6\"></a></p>\n<h3 id=\"交叉结合nature-join\"><a href=\"#交叉结合nature-join\" class=\"headerlink\" title=\"交叉结合nature join\"></a>交叉结合nature join</h3><blockquote>\n<p>即笛卡尔积，前表中的每一行都与后表的所有行配对</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> shippers sh</span><br><span class=\"line\"><span class=\"keyword\">cross</span> <span class=\"keyword\">join</span> products p</span><br><span class=\"line\"><span class=\"comment\">-- 不需要写on</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"E1Mg6\"></a></p>\n<h2 id=\"合并结果集union\"><a href=\"#合并结果集union\" class=\"headerlink\" title=\"合并结果集union\"></a>合并结果集union</h2><blockquote>\n<ol>\n<li>每个SELECT 语句必须拥有相同数量的列。</li>\n<li>每个列也必须拥有相似的数据类型。</li>\n<li>每条 SELECT 语句中的列的顺序必须相同。</li>\n</ol>\n</blockquote>\n<ul>\n<li><p>同一个表不同列结合</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_China</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"comment\">-- 把两个查询的结果纵向结合</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_USA</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不同的表之间结合</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> archived_order</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> name</span><br><span class=\"line\"><span class=\"keyword\">from</span> shippers</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"对查询结果排序\"><a href=\"#对查询结果排序\" class=\"headerlink\" title=\"对查询结果排序\"></a>对查询结果排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> DATABASES\t\t\t\t\t<span class=\"comment\">--显示所有数据库</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASES 数据库名\t\t<span class=\"comment\">--创建数据库</span></span><br><span class=\"line\">USE 数据库名称\t\t\t\t\t<span class=\"comment\">--切换默认数据库 </span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE 数据库名\t\t\t<span class=\"comment\">--删除数据库</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>基础的数据类型忽略，只用重点看下面两个数据类型</p>\n<h2 id=\"enum单选\"><a href=\"#enum单选\" class=\"headerlink\" title=\"enum单选\"></a>enum单选</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum(<span class=\"string\">&#x27;男&#x27;</span>,<span class=\"string\">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"set多选\"><a href=\"#set多选\" class=\"headerlink\" title=\"set多选\"></a>set多选</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(<span class=\"string\">&#x27;打球&#x27;</span>,<span class=\"string\">&#x27;下棋&#x27;</span>,<span class=\"string\">&#x27;音乐&#x27;</span>,<span class=\"string\">&#x27;游泳&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"定点数\"><a href=\"#定点数\" class=\"headerlink\" title=\"定点数\"></a>定点数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">decimal</span>(M,D)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>M是最大位数（精度），范围是1到65。可不指定，默认值是10。</li>\n<li>D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。</li>\n</ul>\n<h1 id=\"新增表create\"><a href=\"#新增表create\" class=\"headerlink\" title=\"新增表create\"></a>新增表create</h1><h2 id=\"创建表副本\"><a href=\"#创建表副本\" class=\"headerlink\" title=\"创建表副本\"></a>创建表副本</h2><blockquote>\n<p>注意，创建的副本没有定义主键和自动增加属性，要手动添加</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> orders_archived <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> orders</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用where语句<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> orders_archived <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_data <span class=\"operator\">&lt;</span><span class=\"string\">&#x27;2019-01-01&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"创建自定义表\"><a href=\"#创建自定义表\" class=\"headerlink\" title=\"创建自定义表\"></a>创建自定义表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">&#x27;表名&#x27;</span>(</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名1&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名2&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名3&#x27;</span>    数据类型</span><br><span class=\"line\">\t<span class=\"string\">&#x27;列名4&#x27;</span>    数据类型</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"外键的设置\"><a href=\"#外键的设置\" class=\"headerlink\" title=\"外键的设置\"></a>外键的设置</h2><ul>\n<li><strong>子表的外键必须是主表的主键</strong><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> student_score(</span><br><span class=\"line\">\tnumber <span class=\"type\">int</span></span><br><span class=\"line\">\tsubject <span class=\"type\">varchar</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">\tscore tinyint </span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> poreign key(number) <span class=\"keyword\">references</span> student_info(number)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"删除表drop\"><a href=\"#删除表drop\" class=\"headerlink\" title=\"删除表drop\"></a>删除表drop</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表<span class=\"number\">1</span>，表<span class=\"number\">2</span>，表<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除不存在的表会报错，要判断一下是否存在<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> 表<span class=\"number\">1</span>，表<span class=\"number\">2</span>，表<span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"增加记录insert\"><a href=\"#增加记录insert\" class=\"headerlink\" title=\"增加记录insert\"></a>增加记录insert</h1><h2 id=\"表设置\"><a href=\"#表设置\" class=\"headerlink\" title=\"表设置\"></a>表设置</h2><table>\n<thead>\n<tr>\n<th>Datatype</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PK</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>NN</td>\n<td>非空</td>\n</tr>\n<tr>\n<td>UQ</td>\n<td>唯一</td>\n</tr>\n<tr>\n<td>B</td>\n<td>二进制</td>\n</tr>\n<tr>\n<td>UN</td>\n<td>非负数，比text更大</td>\n</tr>\n<tr>\n<td>ZF</td>\n<td>填充，如Datatype是int(4)，内容是1，显示0001</td>\n</tr>\n<tr>\n<td>AI</td>\n<td>自动增加</td>\n</tr>\n<tr>\n<td>G</td>\n<td>生成列，这一列由其他列计算而得</td>\n</tr>\n<tr>\n<td>Default&#x2F;Expression</td>\n<td>默认值</td>\n</tr>\n</tbody></table>\n<h2 id=\"默认插入\"><a href=\"#默认插入\" class=\"headerlink\" title=\"默认插入\"></a>默认插入</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers</span><br><span class=\"line\"><span class=\"keyword\">values</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;first_name&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;last_name&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;birthday&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;address&#x27;</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;city&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;state&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">default</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a name=\"ulh2s\"></a></p>\n<h2 id=\"指定插入，多行插入\"><a href=\"#指定插入，多行插入\" class=\"headerlink\" title=\"指定插入，多行插入\"></a>指定插入，多行插入</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> shippers(shipper_id,name)</span><br><span class=\"line\"><span class=\"keyword\">values</span></span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id1&#x27;</span>,<span class=\"string\">&#x27;name1&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id2&#x27;</span>,<span class=\"string\">&#x27;name2&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id3&#x27;</span>,<span class=\"string\">&#x27;name3&#x27;</span>),</span><br><span class=\"line\">\t(<span class=\"string\">&#x27;id4&#x27;</span>,<span class=\"string\">&#x27;name4&#x27;</span>),</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n<p><a name=\"vfmzO\"></a></p>\n<h2 id=\"last-insert-id主子表连接\"><a href=\"#last-insert-id主子表连接\" class=\"headerlink\" title=\"last_insert_id主子表连接\"></a>last_insert_id主子表连接</h2><blockquote>\n<p>会返回上一次插入操作后的最后一个id值</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> orders(customer_id,order_date,status)</span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2019-01-02&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> LAST_INSERT_ID()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在子表中插入关联的id值<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> orders(customer_id,order_date,status)</span><br><span class=\"line\"><span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;2019-01-02&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">values</span></span><br><span class=\"line\">\t(last_insert_id,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2.95</span>),</span><br><span class=\"line\">\t(last_insert_id,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2.95</span>)</span><br></pre></td></tr></table></figure>\n<a name=\"SfaXj\"></a></li>\n</ul>\n<h1 id=\"删除delete\"><a href=\"#删除delete\" class=\"headerlink\" title=\"删除delete\"></a>删除delete</h1><p><a name=\"KQsRW\"></a></p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><blockquote>\n<p>若不写where语句会删除所有记录</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">where</span> invoice_id <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ehs6d\"></a></p>\n<h2 id=\"在where语句中使用select语句\"><a href=\"#在where语句中使用select语句\" class=\"headerlink\" title=\"在where语句中使用select语句\"></a>在where语句中使用select语句</h2><blockquote>\n<p>和update一样</p>\n</blockquote>\n<blockquote>\n<p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> </span><br><span class=\"line\">\tpayment_totle <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tpayment_date <span class=\"operator\">=</span> <span class=\"string\">&#x27;2022-10-22&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span>(<span class=\"string\">&#x27;CA&#x27;</span>,<span class=\"string\">&#x27;NY&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改update\"><a href=\"#修改update\" class=\"headerlink\" title=\"修改update\"></a>修改update</h1><p><a name=\"Ij2Ps\"></a></p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">set</span> 键名<span class=\"number\">1</span><span class=\"operator\">=</span>键值<span class=\"number\">1</span>，</span><br><span class=\"line\">\t键名<span class=\"number\">2</span><span class=\"operator\">=</span>键值<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> 键名<span class=\"operator\">=</span>键值 <span class=\"comment\">-- 筛选条件，确定是哪一行的数据更新</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"MlwIA\"></a></p>\n<h2 id=\"在where语句中使用select语句-1\"><a href=\"#在where语句中使用select语句-1\" class=\"headerlink\" title=\"在where语句中使用select语句\"></a>在where语句中使用select语句</h2><blockquote>\n<p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> </span><br><span class=\"line\">\tpayment_totle <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tpayment_date <span class=\"operator\">=</span> <span class=\"string\">&#x27;2022-10-22&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span>(<span class=\"string\">&#x27;CA&#x27;</span>,<span class=\"string\">&#x27;NY&#x27;</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><a name=\"V2ODC\"></a></p>\n<h1 id=\"查询select\"><a href=\"#查询select\" class=\"headerlink\" title=\"查询select\"></a>查询select</h1><p><a name=\"OgySP\"></a></p>\n<h2 id=\"语句结构\"><a href=\"#语句结构\" class=\"headerlink\" title=\"语句结构\"></a>语句结构</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;要选择的列&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"string\">&#x27;要选择的表&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">&#x27;筛选条件&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;排序条件&#x27;</span></span><br><span class=\"line\">limit <span class=\"string\">&#x27;要显示的记录数&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"Qiz7R\"></a></p>\n<h2 id=\"选择列\"><a href=\"#选择列\" class=\"headerlink\" title=\"选择列\"></a>选择列</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">\tlast_name,\t<span class=\"comment\">--不同的列用逗号隔开</span></span><br><span class=\"line\">\tfirst_name,</span><br><span class=\"line\">\tpoints,</span><br><span class=\"line\">\tpoints<span class=\"operator\">+</span><span class=\"number\">10</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;new point&#x27;</span> <span class=\"comment\">--可以做数学运算；as用来命名新的列</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">DISTINCT</span> state <span class=\"comment\">--筛选出的值不会重复</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n<p><a name=\"mKJSJ\"></a></p>\n<h2 id=\"选择记录\"><a href=\"#选择记录\" class=\"headerlink\" title=\"选择记录\"></a>选择记录</h2><p><a name=\"C8DPK\"></a></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><blockquote>\n<p>可比较数字和时间</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> brith_date <span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;1990-01-01&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> point <span class=\"operator\">&gt;</span><span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若有多个值需要配对，可用in或not in</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;VA&#x27;</span>,<span class=\"string\">&#x27;FL&#x27;</span>,<span class=\"string\">&#x27;GA&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若在一个范围内，可用between … and …<br>可以是数字也可以是时间</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br><span class=\"line\"><span class=\"keyword\">where</span> point <span class=\"keyword\">between</span> <span class=\"number\">1000</span> <span class=\"keyword\">and</span> <span class=\"number\">3000</span></span><br><span class=\"line\">\t<span class=\"keyword\">and</span> birth_date <span class=\"keyword\">between</span> <span class=\"string\">&#x27;1990-01-01&#x27;</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;2000-01-01&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"HHvJw\"></a></p>\n<h3 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h3><ul>\n<li><p>操作符</p>\n<table>\n<thead>\n<tr>\n<th>like  ‘ ‘</th>\n<th>等于引号里字符的记录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%</td>\n<td>任意字符</td>\n</tr>\n<tr>\n<td>_</td>\n<td>一个字符</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> City <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%lon%&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> City <span class=\"keyword\">NOT</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%lon%&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"QuG7X\"></a></p>\n</li>\n</ul>\n<h3 id=\"regexp\"><a href=\"#regexp\" class=\"headerlink\" title=\"regexp\"></a>regexp</h3><ul>\n<li>常见正则表达式<table>\n<thead>\n<tr>\n<th>regexp ‘ ‘</th>\n<th>包含引号里字符的记录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>以后面的字符开头的</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以后面的字符结尾</td>\n</tr>\n<tr>\n<td>&amp;#124;</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>a,b,c中任意一个</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>a到z中选一个</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p><a name=\"AWNUs\"></a></p>\n<h3 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h3><ul>\n<li>规定要返回的记录的数目<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\">LIMIT <span class=\"number\">5</span>\t\t<span class=\"comment\">--最多返回五条记录</span></span><br></pre></td></tr></table></figure>\n<a name=\"iDkug\"></a></li>\n</ul>\n<h3 id=\"is-null-和-is-not-null\"><a href=\"#is-null-和-is-not-null\" class=\"headerlink\" title=\"is null 和 is not null\"></a>is null 和 is not null</h3><ul>\n<li>可选出特定值空的记录，或非空的记录<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> phone <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br></pre></td></tr></table></figure>\n<a name=\"HAqvR\"></a></li>\n</ul>\n<h2 id=\"结合join\"><a href=\"#结合join\" class=\"headerlink\" title=\"结合join\"></a>结合join</h2><p><a name=\"O8Mie\"></a></p>\n<h3 id=\"结合多个表\"><a href=\"#结合多个表\" class=\"headerlink\" title=\"结合多个表\"></a>结合多个表</h3><blockquote>\n<p>使用using关键字，可以代替两个相同列的名称的值相等</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons</span><br><span class=\"line\">\t<span class=\"keyword\">JOIN</span> Orders</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">using</span>(id_p)</span><br><span class=\"line\"><span class=\"comment\">-- 这里的on一定要写，后面的是结合的条件</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"MfRzV\"></a></p>\n<h3 id=\"显示所有left-join\"><a href=\"#显示所有left-join\" class=\"headerlink\" title=\"显示所有left join\"></a>显示所有left join</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons <span class=\"keyword\">as</span> p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Orders <span class=\"keyword\">as</span> o</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">using</span>(id_p)</span><br><span class=\"line\"><span class=\"comment\">-- persons表中的所有列都会列出，即使匹配不到</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"Aqiv6\"></a></p>\n<h3 id=\"交叉结合nature-join\"><a href=\"#交叉结合nature-join\" class=\"headerlink\" title=\"交叉结合nature join\"></a>交叉结合nature join</h3><blockquote>\n<p>即笛卡尔积，前表中的每一行都与后表的所有行配对</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> shippers sh</span><br><span class=\"line\"><span class=\"keyword\">cross</span> <span class=\"keyword\">join</span> products p</span><br><span class=\"line\"><span class=\"comment\">-- 不需要写on</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"E1Mg6\"></a></p>\n<h2 id=\"合并结果集union\"><a href=\"#合并结果集union\" class=\"headerlink\" title=\"合并结果集union\"></a>合并结果集union</h2><blockquote>\n<ol>\n<li>每个SELECT 语句必须拥有相同数量的列。</li>\n<li>每个列也必须拥有相似的数据类型。</li>\n<li>每条 SELECT 语句中的列的顺序必须相同。</li>\n</ol>\n</blockquote>\n<ul>\n<li><p>同一个表不同列结合</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_China</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"comment\">-- 把两个查询的结果纵向结合</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> E_Name <span class=\"keyword\">FROM</span> Employees_USA</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不同的表之间结合</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> archived_order</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> name</span><br><span class=\"line\"><span class=\"keyword\">from</span> shippers</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"对查询结果排序\"><a href=\"#对查询结果排序\" class=\"headerlink\" title=\"对查询结果排序\"></a>对查询结果排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n"},{"title":"SQL进阶","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-11T03:10:10.662Z","keywords":null,"description":null,"_content":"\n\n","source":"_posts/数据库/SQL进阶.md","raw":"---\ntitle: SQL进阶\ndate: 2023-04-26 15:16\nupdated: 星期二 20日 六月 2023 14:36:03\ntags: []\ncategories: [数据库]\nkeywords:\ndescription: \n---\n\n\n","slug":"数据库/SQL进阶","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7w0015i4v1djxu562c","content":"","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"title":"写了三年博客，有一些想说的话","date":"2023-09-10T12:01:00.000Z","updated":"2023-09-14T08:26:19.696Z","keywords":null,"description":null,"_content":"\n# 一些心得✍\n\n使用博客也算是很长时间了，其实博客也无非就是四个核心部分组成：\n1. 博客生成框架\n2. 文件托管平台\n3. 站点生成服务\n4. 访问加速服务\n\n博客生成框架我使用过的有 wordpress、Typecho、hexo、hugo，其中 wordpress 和 Typecho 类似，hexo 和 hugo 类似，前两种自定义程度较低，适合小白，后两种自定义程度较高，适合有基础的人\n\n说说我认为最佳的博客解决方案吧：\n1. 笔记软件：Obsidian，在 `soruce//_post` 下写文章\n3. git：使用 Obsidian 插件，设置固定的时间间隔上传，无需手动提交\n4. 博客生成框架：hexop\n5. 文件托管平台：github\n6. 站点生成服务：netlify，同时运行命令设置为`npm run clean && npm run build`\n7. 访问加速服务：cloudflare\n其中前两步不是必须的， Typora 也可以，只是提供一个思路，能将同步 + 渲染 ＋ 部署这一套流程自动化的都是好方案。\n\n# 关于这次魔改\n\n自从上个学期云服务器到期，域名转手（之前的域名 lilmingcoding.top 10 块买的转手 280 卖了，简直血赚）我的博客就一直是毛坯房的状态，只是一个 hexo 的默认主题，让人看着一点创作欲望也没有，那时我临近期末考了就一直搁置到了暑假，而在假期心事也渐渐不在博客上了，果然博客还是不能拖啊。而在几天之前，软著和实习都差不多结束了，我这才开始着手美化。\n\n魔改的样式是模仿的店长的 [源计划-方舟](https://akilar.top/) ，然而个人实力有限，很多功能没有实现，比如加载框我只能用一个丐版的（笑），店长的加载框是真的帅，科技风满满。还有一些细节还没有完善，不过也差不多了，很快就能写好。\n\n总的来说，这次魔改还是比较满意的，不过过程不太顺利，`Stylus` 写起来很不习惯，但是有点 css 基础的都能改；主要是 `pug` 简直对我来说是一门新的语言，只能现学了。最终效果也是有赛博朋克那味了哈哈哈，先立个 flag 哈，下个学期多多内容输出，一周至少两更。\n\n# 为何要创建博客🤔\n\n其实很多博主都会被问到这个问题，或许在看这篇博文的你也有同样的困惑，分享日常有朋友圈、小红书，交流技术有开源社区，为什么还要费这么大劲，又是学习博客框架，又是部署托管，对颜值有要求的可能还要像我魔改，~~写出来还没人看（笑）😂~~。三年前暑假，高考完的我懵懵懂懂，在宝塔上用 wordpress 成功运行了属于我的第一个网站，这对于那时的我来说不单单有一种踏入新世界的好奇，更多的是各种技术运用所带来的成就感，如果你问三年前的我，我的回答会是：因为有趣。\n\n是的我创建博客的理由很简单，就是因为酷，想展现自己的技术力~~装逼~~，这又未尝不可呢。然而坚持写博客的理由却不一样，一时的热血和激情过去，等待博客的只是死刑缓期的搁置，仅仅一个简单甚至幼稚的理由不可能坚持三年。我不管是待人还是处事都是 `爱好驱动`，我很喜欢一句话，`热爱可抵岁月漫长`，即使我转专业失败也至今没有放弃编程，主动去认识了很多技术大佬，尽可能去参加任何对自己有帮助的活动，比如实习、OSPP、字节青训营，同时也是为自己打破信息壁垒。因此，我现在的回复是：**想拥有一个属于自己的技术圈子**  。当然开源社区也能满足，但是过多的限制也会让人抓狂，我是个不喜欢被约束的人，搭博客肯定是首选。\n\n\n\n","source":"_posts/碎碎念/写了三年博客，有一些想说的话.md","raw":"---\ntitle: 写了三年博客，有一些想说的话\ndate: 2023-09-10 20:01\nupdated: 星期日 10日 九月 2023 20:23:31\ntags: \n- \ncategories: [碎碎念]\nkeywords:\ndescription: \n---\n\n# 一些心得✍\n\n使用博客也算是很长时间了，其实博客也无非就是四个核心部分组成：\n1. 博客生成框架\n2. 文件托管平台\n3. 站点生成服务\n4. 访问加速服务\n\n博客生成框架我使用过的有 wordpress、Typecho、hexo、hugo，其中 wordpress 和 Typecho 类似，hexo 和 hugo 类似，前两种自定义程度较低，适合小白，后两种自定义程度较高，适合有基础的人\n\n说说我认为最佳的博客解决方案吧：\n1. 笔记软件：Obsidian，在 `soruce//_post` 下写文章\n3. git：使用 Obsidian 插件，设置固定的时间间隔上传，无需手动提交\n4. 博客生成框架：hexop\n5. 文件托管平台：github\n6. 站点生成服务：netlify，同时运行命令设置为`npm run clean && npm run build`\n7. 访问加速服务：cloudflare\n其中前两步不是必须的， Typora 也可以，只是提供一个思路，能将同步 + 渲染 ＋ 部署这一套流程自动化的都是好方案。\n\n# 关于这次魔改\n\n自从上个学期云服务器到期，域名转手（之前的域名 lilmingcoding.top 10 块买的转手 280 卖了，简直血赚）我的博客就一直是毛坯房的状态，只是一个 hexo 的默认主题，让人看着一点创作欲望也没有，那时我临近期末考了就一直搁置到了暑假，而在假期心事也渐渐不在博客上了，果然博客还是不能拖啊。而在几天之前，软著和实习都差不多结束了，我这才开始着手美化。\n\n魔改的样式是模仿的店长的 [源计划-方舟](https://akilar.top/) ，然而个人实力有限，很多功能没有实现，比如加载框我只能用一个丐版的（笑），店长的加载框是真的帅，科技风满满。还有一些细节还没有完善，不过也差不多了，很快就能写好。\n\n总的来说，这次魔改还是比较满意的，不过过程不太顺利，`Stylus` 写起来很不习惯，但是有点 css 基础的都能改；主要是 `pug` 简直对我来说是一门新的语言，只能现学了。最终效果也是有赛博朋克那味了哈哈哈，先立个 flag 哈，下个学期多多内容输出，一周至少两更。\n\n# 为何要创建博客🤔\n\n其实很多博主都会被问到这个问题，或许在看这篇博文的你也有同样的困惑，分享日常有朋友圈、小红书，交流技术有开源社区，为什么还要费这么大劲，又是学习博客框架，又是部署托管，对颜值有要求的可能还要像我魔改，~~写出来还没人看（笑）😂~~。三年前暑假，高考完的我懵懵懂懂，在宝塔上用 wordpress 成功运行了属于我的第一个网站，这对于那时的我来说不单单有一种踏入新世界的好奇，更多的是各种技术运用所带来的成就感，如果你问三年前的我，我的回答会是：因为有趣。\n\n是的我创建博客的理由很简单，就是因为酷，想展现自己的技术力~~装逼~~，这又未尝不可呢。然而坚持写博客的理由却不一样，一时的热血和激情过去，等待博客的只是死刑缓期的搁置，仅仅一个简单甚至幼稚的理由不可能坚持三年。我不管是待人还是处事都是 `爱好驱动`，我很喜欢一句话，`热爱可抵岁月漫长`，即使我转专业失败也至今没有放弃编程，主动去认识了很多技术大佬，尽可能去参加任何对自己有帮助的活动，比如实习、OSPP、字节青训营，同时也是为自己打破信息壁垒。因此，我现在的回复是：**想拥有一个属于自己的技术圈子**  。当然开源社区也能满足，但是过多的限制也会让人抓狂，我是个不喜欢被约束的人，搭博客肯定是首选。\n\n\n\n","slug":"碎碎念/写了三年博客，有一些想说的话","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7w0018i4v12492c9dg","content":"<h1 id=\"一些心得✍\"><a href=\"#一些心得✍\" class=\"headerlink\" title=\"一些心得✍\"></a>一些心得✍</h1><p>使用博客也算是很长时间了，其实博客也无非就是四个核心部分组成：</p>\n<ol>\n<li>博客生成框架</li>\n<li>文件托管平台</li>\n<li>站点生成服务</li>\n<li>访问加速服务</li>\n</ol>\n<p>博客生成框架我使用过的有 wordpress、Typecho、hexo、hugo，其中 wordpress 和 Typecho 类似，hexo 和 hugo 类似，前两种自定义程度较低，适合小白，后两种自定义程度较高，适合有基础的人</p>\n<p>说说我认为最佳的博客解决方案吧：</p>\n<ol>\n<li>笔记软件：Obsidian，在 <code>soruce//_post</code> 下写文章</li>\n<li>git：使用 Obsidian 插件，设置固定的时间间隔上传，无需手动提交</li>\n<li>博客生成框架：hexop</li>\n<li>文件托管平台：github</li>\n<li>站点生成服务：netlify，同时运行命令设置为<code>npm run clean &amp;&amp; npm run build</code></li>\n<li>访问加速服务：cloudflare<br>其中前两步不是必须的， Typora 也可以，只是提供一个思路，能将同步 + 渲染 ＋ 部署这一套流程自动化的都是好方案。</li>\n</ol>\n<h1 id=\"关于这次魔改\"><a href=\"#关于这次魔改\" class=\"headerlink\" title=\"关于这次魔改\"></a>关于这次魔改</h1><p>自从上个学期云服务器到期，域名转手（之前的域名 lilmingcoding.top 10 块买的转手 280 卖了，简直血赚）我的博客就一直是毛坯房的状态，只是一个 hexo 的默认主题，让人看着一点创作欲望也没有，那时我临近期末考了就一直搁置到了暑假，而在假期心事也渐渐不在博客上了，果然博客还是不能拖啊。而在几天之前，软著和实习都差不多结束了，我这才开始着手美化。</p>\n<p>魔改的样式是模仿的店长的 <a href=\"https://akilar.top/\">源计划-方舟</a> ，然而个人实力有限，很多功能没有实现，比如加载框我只能用一个丐版的（笑），店长的加载框是真的帅，科技风满满。还有一些细节还没有完善，不过也差不多了，很快就能写好。</p>\n<p>总的来说，这次魔改还是比较满意的，不过过程不太顺利，<code>Stylus</code> 写起来很不习惯，但是有点 css 基础的都能改；主要是 <code>pug</code> 简直对我来说是一门新的语言，只能现学了。最终效果也是有赛博朋克那味了哈哈哈，先立个 flag 哈，下个学期多多内容输出，一周至少两更。</p>\n<h1 id=\"为何要创建博客🤔\"><a href=\"#为何要创建博客🤔\" class=\"headerlink\" title=\"为何要创建博客🤔\"></a>为何要创建博客🤔</h1><p>其实很多博主都会被问到这个问题，或许在看这篇博文的你也有同样的困惑，分享日常有朋友圈、小红书，交流技术有开源社区，为什么还要费这么大劲，又是学习博客框架，又是部署托管，对颜值有要求的可能还要像我魔改，<del>写出来还没人看（笑）😂</del>。三年前暑假，高考完的我懵懵懂懂，在宝塔上用 wordpress 成功运行了属于我的第一个网站，这对于那时的我来说不单单有一种踏入新世界的好奇，更多的是各种技术运用所带来的成就感，如果你问三年前的我，我的回答会是：因为有趣。</p>\n<p>是的我创建博客的理由很简单，就是因为酷，想展现自己的技术力<del>装逼</del>，这又未尝不可呢。然而坚持写博客的理由却不一样，一时的热血和激情过去，等待博客的只是死刑缓期的搁置，仅仅一个简单甚至幼稚的理由不可能坚持三年。我不管是待人还是处事都是 <code>爱好驱动</code>，我很喜欢一句话，<code>热爱可抵岁月漫长</code>，即使我转专业失败也至今没有放弃编程，主动去认识了很多技术大佬，尽可能去参加任何对自己有帮助的活动，比如实习、OSPP、字节青训营，同时也是为自己打破信息壁垒。因此，我现在的回复是：<strong>想拥有一个属于自己的技术圈子</strong>  。当然开源社区也能满足，但是过多的限制也会让人抓狂，我是个不喜欢被约束的人，搭博客肯定是首选。</p>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"一些心得✍\"><a href=\"#一些心得✍\" class=\"headerlink\" title=\"一些心得✍\"></a>一些心得✍</h1><p>使用博客也算是很长时间了，其实博客也无非就是四个核心部分组成：</p>\n<ol>\n<li>博客生成框架</li>\n<li>文件托管平台</li>\n<li>站点生成服务</li>\n<li>访问加速服务</li>\n</ol>\n<p>博客生成框架我使用过的有 wordpress、Typecho、hexo、hugo，其中 wordpress 和 Typecho 类似，hexo 和 hugo 类似，前两种自定义程度较低，适合小白，后两种自定义程度较高，适合有基础的人</p>\n<p>说说我认为最佳的博客解决方案吧：</p>\n<ol>\n<li>笔记软件：Obsidian，在 <code>soruce//_post</code> 下写文章</li>\n<li>git：使用 Obsidian 插件，设置固定的时间间隔上传，无需手动提交</li>\n<li>博客生成框架：hexop</li>\n<li>文件托管平台：github</li>\n<li>站点生成服务：netlify，同时运行命令设置为<code>npm run clean &amp;&amp; npm run build</code></li>\n<li>访问加速服务：cloudflare<br>其中前两步不是必须的， Typora 也可以，只是提供一个思路，能将同步 + 渲染 ＋ 部署这一套流程自动化的都是好方案。</li>\n</ol>\n<h1 id=\"关于这次魔改\"><a href=\"#关于这次魔改\" class=\"headerlink\" title=\"关于这次魔改\"></a>关于这次魔改</h1><p>自从上个学期云服务器到期，域名转手（之前的域名 lilmingcoding.top 10 块买的转手 280 卖了，简直血赚）我的博客就一直是毛坯房的状态，只是一个 hexo 的默认主题，让人看着一点创作欲望也没有，那时我临近期末考了就一直搁置到了暑假，而在假期心事也渐渐不在博客上了，果然博客还是不能拖啊。而在几天之前，软著和实习都差不多结束了，我这才开始着手美化。</p>\n<p>魔改的样式是模仿的店长的 <a href=\"https://akilar.top/\">源计划-方舟</a> ，然而个人实力有限，很多功能没有实现，比如加载框我只能用一个丐版的（笑），店长的加载框是真的帅，科技风满满。还有一些细节还没有完善，不过也差不多了，很快就能写好。</p>\n<p>总的来说，这次魔改还是比较满意的，不过过程不太顺利，<code>Stylus</code> 写起来很不习惯，但是有点 css 基础的都能改；主要是 <code>pug</code> 简直对我来说是一门新的语言，只能现学了。最终效果也是有赛博朋克那味了哈哈哈，先立个 flag 哈，下个学期多多内容输出，一周至少两更。</p>\n<h1 id=\"为何要创建博客🤔\"><a href=\"#为何要创建博客🤔\" class=\"headerlink\" title=\"为何要创建博客🤔\"></a>为何要创建博客🤔</h1><p>其实很多博主都会被问到这个问题，或许在看这篇博文的你也有同样的困惑，分享日常有朋友圈、小红书，交流技术有开源社区，为什么还要费这么大劲，又是学习博客框架，又是部署托管，对颜值有要求的可能还要像我魔改，<del>写出来还没人看（笑）😂</del>。三年前暑假，高考完的我懵懵懂懂，在宝塔上用 wordpress 成功运行了属于我的第一个网站，这对于那时的我来说不单单有一种踏入新世界的好奇，更多的是各种技术运用所带来的成就感，如果你问三年前的我，我的回答会是：因为有趣。</p>\n<p>是的我创建博客的理由很简单，就是因为酷，想展现自己的技术力<del>装逼</del>，这又未尝不可呢。然而坚持写博客的理由却不一样，一时的热血和激情过去，等待博客的只是死刑缓期的搁置，仅仅一个简单甚至幼稚的理由不可能坚持三年。我不管是待人还是处事都是 <code>爱好驱动</code>，我很喜欢一句话，<code>热爱可抵岁月漫长</code>，即使我转专业失败也至今没有放弃编程，主动去认识了很多技术大佬，尽可能去参加任何对自己有帮助的活动，比如实习、OSPP、字节青训营，同时也是为自己打破信息壁垒。因此，我现在的回复是：<strong>想拥有一个属于自己的技术圈子</strong>  。当然开源社区也能满足，但是过多的限制也会让人抓狂，我是个不喜欢被约束的人，搭博客肯定是首选。</p>\n"},{"title":"UML","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:12.019Z","keywords":null,"description":null,"_content":"\n\n\n","source":"_posts/计算机基础/UML.md","raw":"---\ntitle: UML\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:33:57\ntags: []\ncategories: [计算机基础]\nkeywords:\ndescription: \n---\n\n\n\n","slug":"计算机基础/UML","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7x001ai4v14zbd1iwm","content":"","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"title":"git命令","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:15.722Z","keywords":null,"description":null,"_content":"\n\n\n<a name=\"eASn7\"></a>\n# 拉取与建立仓库\n## 用户签名\n```git\ngit config          --global user.name 用户名\ngit config          --global user.email 邮箱\ncat ~/.gitconfig\n```\n<a name=\"UrEas\"></a>\n## 拉取代码\n```git\ngit clone 远程仓库地址\n```\n<a name=\"Uacb3\"></a>\n## 初始化仓库\n```git\ngit init                    -- 初始化本地仓库\ngit status               --查询本地库状态\n```\n> 会建立并转到master分支下\n<a name=\"dGPp5\"></a>\n# 提交代码\n## 提交 \n```git\ngit add .                    -- 将改动提交至暂存区\ngit commit -m \"日志信息\"             -- 提交所有改动过的文件\ngit push origin master\ngit reflog                   --   查看历史记录\n```\n<a name=\"aSnWT\"></a>\n## 撤销\n```git\ngit reset --hard HEAD                     -- 撤销所有未提交文件的修改内容\ngit checkout HEAD 文件名                    --撤销所有未提交文件的修改内容\ngit revert <commit>\t                      -- 撤销提交\n```\n<a name=\"tDAWL\"></a>\n# 分支\n## 添加远程分支\n```bash\ngit remote add origin https://XXX\n```\n## 查看分支\n```bash\ngit branch -a                   --查看本地分支和远程分支\n```\n## 查看远程分支 URL\n```bash\ngit remote show origin\n```\n## 更新远程分支 URL\n```bash\ngit remote set-url origin https://github.com/user/new-repo.git\n```\n## 创建分支\n```git\ngit branch 分支名                 -- 创建分支\n```\n## 切换分支\n ```git\n git checkout 分支名                  -- 切换分支\n```\n ## 合并分支\n>首先要切换到master分支下\n```git\n git checkout master\n git merge 分支名                  --合并分支\n```\n## 上传到 main 分支\n需要合并到 main 分支\n1.  git fetch origin\n2.  git checkout main\n3.  git merge master --allow-unrelated-histories（合并分支解决冲突）\n- 有可能两个文件有冲突，要人为决定\n- 此处有[解决方案](https://blog.csdn.net/qq_35077107/article/details/108025911)\n# 添加安全权限\n```git\ngit config --global --add safe.directory \"*\"\n```","source":"_posts/计算机基础/git命令.md","raw":"---\ntitle: git命令\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:43:16\ntags: []\ncategories: [计算机基础]\nkeywords:\ndescription: \n---\n\n\n\n<a name=\"eASn7\"></a>\n# 拉取与建立仓库\n## 用户签名\n```git\ngit config          --global user.name 用户名\ngit config          --global user.email 邮箱\ncat ~/.gitconfig\n```\n<a name=\"UrEas\"></a>\n## 拉取代码\n```git\ngit clone 远程仓库地址\n```\n<a name=\"Uacb3\"></a>\n## 初始化仓库\n```git\ngit init                    -- 初始化本地仓库\ngit status               --查询本地库状态\n```\n> 会建立并转到master分支下\n<a name=\"dGPp5\"></a>\n# 提交代码\n## 提交 \n```git\ngit add .                    -- 将改动提交至暂存区\ngit commit -m \"日志信息\"             -- 提交所有改动过的文件\ngit push origin master\ngit reflog                   --   查看历史记录\n```\n<a name=\"aSnWT\"></a>\n## 撤销\n```git\ngit reset --hard HEAD                     -- 撤销所有未提交文件的修改内容\ngit checkout HEAD 文件名                    --撤销所有未提交文件的修改内容\ngit revert <commit>\t                      -- 撤销提交\n```\n<a name=\"tDAWL\"></a>\n# 分支\n## 添加远程分支\n```bash\ngit remote add origin https://XXX\n```\n## 查看分支\n```bash\ngit branch -a                   --查看本地分支和远程分支\n```\n## 查看远程分支 URL\n```bash\ngit remote show origin\n```\n## 更新远程分支 URL\n```bash\ngit remote set-url origin https://github.com/user/new-repo.git\n```\n## 创建分支\n```git\ngit branch 分支名                 -- 创建分支\n```\n## 切换分支\n ```git\n git checkout 分支名                  -- 切换分支\n```\n ## 合并分支\n>首先要切换到master分支下\n```git\n git checkout master\n git merge 分支名                  --合并分支\n```\n## 上传到 main 分支\n需要合并到 main 分支\n1.  git fetch origin\n2.  git checkout main\n3.  git merge master --allow-unrelated-histories（合并分支解决冲突）\n- 有可能两个文件有冲突，要人为决定\n- 此处有[解决方案](https://blog.csdn.net/qq_35077107/article/details/108025911)\n# 添加安全权限\n```git\ngit config --global --add safe.directory \"*\"\n```","slug":"计算机基础/git命令","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7y001di4v19l8wetkz","content":"<p><a name=\"eASn7\"></a></p>\n<h1 id=\"拉取与建立仓库\"><a href=\"#拉取与建立仓库\" class=\"headerlink\" title=\"拉取与建立仓库\"></a>拉取与建立仓库</h1><h2 id=\"用户签名\"><a href=\"#用户签名\" class=\"headerlink\" title=\"用户签名\"></a>用户签名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config          --global user.name 用户名</span><br><span class=\"line\">git config          --global user.email 邮箱</span><br><span class=\"line\">cat ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p><a name=\"UrEas\"></a></p>\n<h2 id=\"拉取代码\"><a href=\"#拉取代码\" class=\"headerlink\" title=\"拉取代码\"></a>拉取代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 远程仓库地址</span><br></pre></td></tr></table></figure>\n<p><a name=\"Uacb3\"></a></p>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init                    -- 初始化本地仓库</span><br><span class=\"line\">git status               --查询本地库状态</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会建立并转到master分支下<br><a name=\"dGPp5\"></a></p>\n</blockquote>\n<h1 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h1><h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                    -- 将改动提交至暂存区</span><br><span class=\"line\">git commit -m &quot;日志信息&quot;             -- 提交所有改动过的文件</span><br><span class=\"line\">git push origin master</span><br><span class=\"line\">git reflog                   --   查看历史记录</span><br></pre></td></tr></table></figure>\n<p><a name=\"aSnWT\"></a></p>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD                     -- 撤销所有未提交文件的修改内容</span><br><span class=\"line\">git checkout HEAD 文件名                    --撤销所有未提交文件的修改内容</span><br><span class=\"line\">git revert &lt;commit&gt;\t                      -- 撤销提交</span><br></pre></td></tr></table></figure>\n<p><a name=\"tDAWL\"></a></p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><h2 id=\"添加远程分支\"><a href=\"#添加远程分支\" class=\"headerlink\" title=\"添加远程分支\"></a>添加远程分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://XXX</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a                   --查看本地分支和远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看远程分支-URL\"><a href=\"#查看远程分支-URL\" class=\"headerlink\" title=\"查看远程分支 URL\"></a>查看远程分支 URL</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新远程分支-URL\"><a href=\"#更新远程分支-URL\" class=\"headerlink\" title=\"更新远程分支 URL\"></a>更新远程分支 URL</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://github.com/user/new-repo.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名                 -- 创建分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名                  -- 切换分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><blockquote>\n<p>首先要切换到master分支下</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge 分支名                  --合并分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传到-main-分支\"><a href=\"#上传到-main-分支\" class=\"headerlink\" title=\"上传到 main 分支\"></a>上传到 main 分支</h2><p>需要合并到 main 分支</p>\n<ol>\n<li>git fetch origin</li>\n<li>git checkout main</li>\n<li>git merge master –allow-unrelated-histories（合并分支解决冲突）</li>\n</ol>\n<ul>\n<li>有可能两个文件有冲突，要人为决定</li>\n<li>此处有<a href=\"https://blog.csdn.net/qq_35077107/article/details/108025911\">解决方案</a></li>\n</ul>\n<h1 id=\"添加安全权限\"><a href=\"#添加安全权限\" class=\"headerlink\" title=\"添加安全权限\"></a>添加安全权限</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory &quot;*&quot;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<p><a name=\"eASn7\"></a></p>\n<h1 id=\"拉取与建立仓库\"><a href=\"#拉取与建立仓库\" class=\"headerlink\" title=\"拉取与建立仓库\"></a>拉取与建立仓库</h1><h2 id=\"用户签名\"><a href=\"#用户签名\" class=\"headerlink\" title=\"用户签名\"></a>用户签名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config          --global user.name 用户名</span><br><span class=\"line\">git config          --global user.email 邮箱</span><br><span class=\"line\">cat ~/.gitconfig</span><br></pre></td></tr></table></figure>\n<p><a name=\"UrEas\"></a></p>\n<h2 id=\"拉取代码\"><a href=\"#拉取代码\" class=\"headerlink\" title=\"拉取代码\"></a>拉取代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 远程仓库地址</span><br></pre></td></tr></table></figure>\n<p><a name=\"Uacb3\"></a></p>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init                    -- 初始化本地仓库</span><br><span class=\"line\">git status               --查询本地库状态</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会建立并转到master分支下<br><a name=\"dGPp5\"></a></p>\n</blockquote>\n<h1 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h1><h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                    -- 将改动提交至暂存区</span><br><span class=\"line\">git commit -m &quot;日志信息&quot;             -- 提交所有改动过的文件</span><br><span class=\"line\">git push origin master</span><br><span class=\"line\">git reflog                   --   查看历史记录</span><br></pre></td></tr></table></figure>\n<p><a name=\"aSnWT\"></a></p>\n<h2 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD                     -- 撤销所有未提交文件的修改内容</span><br><span class=\"line\">git checkout HEAD 文件名                    --撤销所有未提交文件的修改内容</span><br><span class=\"line\">git revert &lt;commit&gt;\t                      -- 撤销提交</span><br></pre></td></tr></table></figure>\n<p><a name=\"tDAWL\"></a></p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><h2 id=\"添加远程分支\"><a href=\"#添加远程分支\" class=\"headerlink\" title=\"添加远程分支\"></a>添加远程分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://XXX</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a                   --查看本地分支和远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看远程分支-URL\"><a href=\"#查看远程分支-URL\" class=\"headerlink\" title=\"查看远程分支 URL\"></a>查看远程分支 URL</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新远程分支-URL\"><a href=\"#更新远程分支-URL\" class=\"headerlink\" title=\"更新远程分支 URL\"></a>更新远程分支 URL</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://github.com/user/new-repo.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支名                 -- 创建分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名                  -- 切换分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><blockquote>\n<p>首先要切换到master分支下</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge 分支名                  --合并分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传到-main-分支\"><a href=\"#上传到-main-分支\" class=\"headerlink\" title=\"上传到 main 分支\"></a>上传到 main 分支</h2><p>需要合并到 main 分支</p>\n<ol>\n<li>git fetch origin</li>\n<li>git checkout main</li>\n<li>git merge master –allow-unrelated-histories（合并分支解决冲突）</li>\n</ol>\n<ul>\n<li>有可能两个文件有冲突，要人为决定</li>\n<li>此处有<a href=\"https://blog.csdn.net/qq_35077107/article/details/108025911\">解决方案</a></li>\n</ul>\n<h1 id=\"添加安全权限\"><a href=\"#添加安全权限\" class=\"headerlink\" title=\"添加安全权限\"></a>添加安全权限</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --add safe.directory &quot;*&quot;</span><br></pre></td></tr></table></figure>"},{"title":"CSS","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:05.869Z","keywords":null,"description":null,"_content":"\n\n\n<a name=\"qvVOh\"></a>\n# CSS基础\n> CSS是对HTML标签的属性设置方式，其特点有便于维护、增强表现力、使得网页风格统一\n> 表现方式：\n> - 写在HTML文件里：一是写在某个元素的属性部分，作为style属性的值；另一种是写在style标记内，style标记又在head标记里面\n> - 写在单独的CSS文件内，文件后缀为.css。这种方法更推荐，使得表现与内容分离\n\n\n<a name=\"F2UyX\"></a>\n## CSS基本语法\n \n","source":"_posts/计算机语言知识库/CSS.md","raw":"---\ntitle: CSS\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:33:44\ntags: []\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n\n<a name=\"qvVOh\"></a>\n# CSS基础\n> CSS是对HTML标签的属性设置方式，其特点有便于维护、增强表现力、使得网页风格统一\n> 表现方式：\n> - 写在HTML文件里：一是写在某个元素的属性部分，作为style属性的值；另一种是写在style标记内，style标记又在head标记里面\n> - 写在单独的CSS文件内，文件后缀为.css。这种方法更推荐，使得表现与内容分离\n\n\n<a name=\"F2UyX\"></a>\n## CSS基本语法\n \n","slug":"计算机语言知识库/CSS","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7y001ei4v11ncxc2lc","content":"<p><a name=\"qvVOh\"></a></p>\n<h1 id=\"CSS基础\"><a href=\"#CSS基础\" class=\"headerlink\" title=\"CSS基础\"></a>CSS基础</h1><blockquote>\n<p>CSS是对HTML标签的属性设置方式，其特点有便于维护、增强表现力、使得网页风格统一<br>表现方式：</p>\n<ul>\n<li>写在HTML文件里：一是写在某个元素的属性部分，作为style属性的值；另一种是写在style标记内，style标记又在head标记里面</li>\n<li>写在单独的CSS文件内，文件后缀为.css。这种方法更推荐，使得表现与内容分离</li>\n</ul>\n</blockquote>\n<p><a name=\"F2UyX\"></a></p>\n<h2 id=\"CSS基本语法\"><a href=\"#CSS基本语法\" class=\"headerlink\" title=\"CSS基本语法\"></a>CSS基本语法</h2>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<p><a name=\"qvVOh\"></a></p>\n<h1 id=\"CSS基础\"><a href=\"#CSS基础\" class=\"headerlink\" title=\"CSS基础\"></a>CSS基础</h1><blockquote>\n<p>CSS是对HTML标签的属性设置方式，其特点有便于维护、增强表现力、使得网页风格统一<br>表现方式：</p>\n<ul>\n<li>写在HTML文件里：一是写在某个元素的属性部分，作为style属性的值；另一种是写在style标记内，style标记又在head标记里面</li>\n<li>写在单独的CSS文件内，文件后缀为.css。这种方法更推荐，使得表现与内容分离</li>\n</ul>\n</blockquote>\n<p><a name=\"F2UyX\"></a></p>\n<h2 id=\"CSS基本语法\"><a href=\"#CSS基本语法\" class=\"headerlink\" title=\"CSS基本语法\"></a>CSS基本语法</h2>"},{"title":"Go语言基础入门","date":"2023-09-07T05:19:00.000Z","updated":"2023-09-10T12:21:47.168Z","keywords":null,"description":null,"_content":"\n\n# Golang 内置类型和函数\n\n##  内置类型\n\n###  值类型：\n\n```go\n    bool\n    int(32 or 64), int8, int16, int32, int64\n    uint(32 or 64), uint8(byte), uint16, uint32, uint64\n    float32, float64\n    string\n    complex64, complex128\n    array    -- 固定长度的数组\n```\n\n### 引用类型：(指针类型)\n\n```go\n    slice   -- 序列数组(最常用)\n    map     -- 映射\n    chan    -- 管道\n```\n\n## 内置函数\n\nGo 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。\n\n```go\n    append          -- 用来追加元素到数组、slice中,返回修改后的数组、slice\n    close           -- 主要用来关闭channel\n    delete            -- 从map中删除key对应的value\n    panic            -- 停止常规的goroutine  （panic和recover：用来做错误处理）\n    recover         -- 允许程序定义goroutine的panic动作\n    imag            -- 返回complex的实部   （complex、real imag：用于创建和操作复数）\n    real            -- 返回complex的虚部\n    make            -- 用来分配内存，返回Type本身(只能应用于slice, map, channel)\n    new                -- 用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针\n    cap                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）\n    copy            -- 用于复制和连接slice，返回复制的数目\n    len                -- 来求长度，比如string、array、slice、map、channel ，返回长度\n    print、println     -- 底层打印函数，在部署环境中建议使用 fmt 包\n```\n\n## 内置接口error\n\n```go\n    type error interface { //只要实现了Error()函数，返回值为String的都实现了err接口\n\n            Error()    String\n\n    }\n```\n\n# 2. Init 函数和 main 函数\n\n##  init 函数\n\ngo语言中`init`函数用于包`(package)`的初始化，该函数是go语言的一个重要特性。\n\n有下面的特征：\n\n1. init 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等\n\n2. 每个包可以拥有多个 init 函数\n\n3. 包的每个源文件也可以拥有多个 init 函数\n\n4. 同一个包中多个 init 函数的执行顺序 go 语言没有明确的定义(说明)\n\n5. 不同包的 init 函数按照包导入的依赖关系决定该初始化函数的执行顺序\n\n6. init 函数不能被其他函数调用，而是在 main 函数执行之前，自动被调用\n\n##  main函数\n\n```\n    Go语言程序的默认入口函数(主函数)：func main()\n    函数体用｛｝一对括号包裹。\n\n    func main(){\n        //函数体\n    }\n```\n\n##  init函数和main函数的异同\n\n```\n    相同点：\n        两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。\n    不同点：\n        init可以应用于任意包中，且可以重复定义多个。\n        main函数只能用于main包中，且只能定义一个。\n```\n\n两个函数的执行顺序：\n\n对同一个go文件的`init()`调用顺序是从上到下的。\n\n对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的`init()`函数。\n\n对于不同的`package`，如果不相互依赖的话，按照main包中\"先`import`的后调用\"的顺序调用其包中的`init()`，如果`package`存在依赖，则先调用最早被依赖的`package`中的`init()`，最后调用`main`函数。\n\n如果 `init` 函数中使用了 `println()` 或者 `print()` 你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。\n\n# 命令\n\n假如你已安装了golang环境，你可以在命令行执行go命令查看相关的Go语言命令：\n\n```shell\n$ go\nGo is a tool for managing Go source code.\n\nUsage:\n\n    go command [arguments]\n\nThe commands are:\n\n    build       compile packages and dependencies\n    clean       remove object files\n    doc         show documentation for package or symbol\n    env         print Go environment information\n    bug         start a bug report\n    fix         run go tool fix on packages\n    fmt         run gofmt on package sources\n    generate    generate Go files by processing source\n    get         download and install packages and dependencies\n    install     compile and install packages and dependencies\n    list        list packages\n    run         compile and run Go program\n    test        test packages\n    tool        run specified go tool\n    version     print Go version\n    vet         run go tool vet on packages\n\nUse \"go help [command]\" for more information about a command.\n\nAdditional help topics:\n\n    c           calling between Go and C\n    buildmode   description of build modes\n    filetype    file types\n    gopath      GOPATH environment variable\n    environment environment variables\n    importpath  import path syntax\n    packages    description of package lists\n    testflag    description of testing flags\n    testfunc    description of testing functions\n\nUse \"go help [topic]\" for more information about that topic.\n```\n\ngo env用于打印Go语言的环境信息。\n\ngo run命令可以编译并运行命令源码文件。\n\ngo get可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。\n\ngo build命令用于编译我们指定的源码文件或代码包以及它们的依赖包。\n\ngo install用于编译并安装指定的代码包及它们的依赖包。\n\ngo clean命令会删除掉执行其它命令时产生的一些文件和目录。\n\ngo doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。\n\ngo test命令用于对Go语言编写的程序进行测试。\n\ngo list命令的作用是列出指定的代码包的信息。\n\ngo fix会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。\n\ngo vet是一个用于检查Go语言源码中静态错误的简单工具。\n\ngo tool pprof命令来交互式的访问概要文件的内容。\n\n#   变量和常量\n\n## 变量\n\n### 变量的来历\n\n程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。\n\n### 变量类型\n\n变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。\n\nGo语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。\n\n### 变量声明\n\nGo语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n###  标准声明\n\nGo语言的变量声明格式为：\n\n```go\n    var 变量名 变量类型\n```\n\n变量声明以关键字`var`开头，变量类型放在变量的后面，行尾无需分号。 举个例子：\n\n```go\n    var name string\n    var age int\n    var isOk bool\n```\n\n###   批量声明\n\n每声明一个变量就需要写`var`关键字会比较繁琐，go语言中还支持批量变量声明：\n\n```go\n    var (\n        a string\n        b int\n        c bool\n        d float32\n    )\n```\n\n###  变量的初始化\n\nGo语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为`false`。 切片、函数、指针变量的默认为`nil`。\n\n当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：\n\n```go\n    var 变量名 类型 = 表达式\n```\n\n举个例子：\n\n```go\n    var name string = \"pprof.cn\"\n    var sex int = 1\n```\n\n或者一次初始化多个变量\n\n```go\n    var name, sex = \"pprof.cn\", 1\n```\n\n#### 类型推导\n\n有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n\n```go\n    var name = \"pprof.cn\"\n    var sex = 1\n```\n\n#### 短变量声明\n\n在函数内部，可以使用更简略的 := 方式声明并初始化变量。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n// 全局变量m\nvar m = 100\n\nfunc main() {\n    n := 10\n    m := 200 // 此处声明局部变量m\n    fmt.Println(m, n)\n}\n```\n\n#### 匿名变量\n\n在使用多重赋值时，如果想要忽略某个值，可以使用`匿名变量（anonymous variable）`。 匿名变量用一个下划线_表示，例如：\n\n```go\nfunc foo() (int, string) {\n    return 10, \"Q1mi\"\n}\nfunc main() {\n    x, _ := foo()\n    _, y := foo()\n    fmt.Println(\"x=\", x)\n    fmt.Println(\"y=\", y)\n}\n```\n\n匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。)\n\n注意事项：\n\n```go\n    函数外的每个语句都必须以关键字开始（var、const、func等）\n\n    :=不能使用在函数外。\n\n    _多用于占位，表示忽略值。\n```\n\n##  常量\n\n相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把`var`换成了`const`，常量在定义的时候必须赋值。\n\n```go\n    const pi = 3.1415\n    const e = 2.7182\n```\n\n声明了`pi`和`e`这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。\n\n多个常量也可以一起声明：\n\n```go\n    const (\n        pi = 3.1415\n        e = 2.7182\n    )\n```\n\n`const`同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：\n\n```go\n    const (\n        n1 = 100\n        n2\n        n3\n    )\n```\n\n上面示例中，常量`n1、n2、n3`的值都是`100`。\n\n###  iota\n\n`iota`是`go`语言的常量计数器，只能在常量的表达式中使用。 `iota`在`const`关键字出现时将被重置为`0`。`const`中每新增一行常量声明将使`iota`计数一次(`iota`可理解为`const`语句块中的行索引)。 使用`iota`能简化定义，在定义枚举时很有用。\n\n举个例子：\n\n```go\n    const (\n            n1 = iota //0\n            n2        //1\n            n3        //2\n            n4        //3\n        )\n```\n\n###  几个常见的iota示例:\n\n使用_跳过某些值\n\n```go\n    const (\n            n1 = iota //0\n            n2        //1\n            _\n            n4        //3\n        )\n```\n\n`iota`声明中间插队\n\n```go\n    const (\n            n1 = iota //0\n            n2 = 100  //100\n            n3 = iota //2\n            n4        //3\n        )\n    const n5 = iota //0\n```\n\n定义数量级 （这里的`<<`表示左移操作，`1<<10`表示将`1`的二进制表示向左移`10`位，也就是由`1`变成了`10000000000`，也就是十进制的`1024`。同理`2<<2`表示将`2`的二进制表示向左移`2`位，也就是由`10`变成了`1000`，也就是十进制的`8`。）\n\n```go\n    const (\n            _  = iota\n            KB = 1 << (10 * iota)\n            MB = 1 << (10 * iota)\n            GB = 1 << (10 * iota)\n            TB = 1 << (10 * iota)\n            PB = 1 << (10 * iota)\n        )\n```\n\n多个`iota`定义在一行\n\n```go\n    const (\n            a, b = iota + 1, iota + 2 //1,2\n            c, d                      //2,3\n            e, f                      //3,4\n        )\n```\n#  基本类型\n\n## 基本类型介绍\n\nGolang 更明确的数字类型命名，支持 Unicode，支持常用数据结构。\n\n|类型|长度(字节)|默认值|说明|\n|---|---|---|---|\n|bool|1|false||\n|byte|1|0|uint8|\n|rune|4|0|Unicode Code Point, int32|\n|int, uint|4或8|0|32 或 64 位|\n|int8, uint8|1|0|-128 ~ 127, 0 ~ 255，byte是uint8 的别名|\n|int16, uint16|2|0|-32768 ~ 32767, 0 ~ 65535|\n|int32, uint32|4|0|-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名|\n|int64, uint64|8|0||\n|float32|4|0.0||\n|float64|8|0.0||\n|complex64|8|||\n|complex128|16|||\n|uintptr|4或8||以存储指针的 uint32 或 uint64 整数|\n|array|||值类型|\n|struct|||值类型|\n|string||\"\"|UTF-8 字符串|\n|slice||nil|引用类型|\n|map||nil|引用类型|\n|channel||nil|引用类型|\n|interface||nil|接口|\n|function||nil|函数|\n\n支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。\n\n```go\n     a, b, c, d := 071, 0x1F, 1e9, math.MinInt16\n```\n\n空指针值 nil，而非C/C++ NULL。\n\n### 整型\n\n整型分为以下两个大类： 按长度分为：`int8`、`int16`、`int32`、`int64`对应的无符号整型：`uint8`、`uint16`、`uint32`、`uint64`\n\n其中，`uint8`就是我们熟知的`byte`型，`int16`对应C语言中的`short`型，`int64`对应C语言中的`long`型。\n\n### 浮点型\n\nGo语言支持两种浮点型数：`float32`和`float64`。这两种浮点型数据格式遵循`IEEE 754`标准： `float32` 的浮点数的最大范围约为`3.4e38`，可以使用常量定义：`math.MaxFloat32`。 `float64` 的浮点数的最大范围约为 `1.8e308`，可以使用一个常量定义：`math.MaxFloat64`。\n\n###  复数\n\n`complex64`和`complex128`\n\n复数有实部和虚部，`complex64`的实部和虚部为32位，`complex128`的实部和虚部为64位。\n\n### 布尔值\n\nGo语言中以`bool`类型进行声明布尔型数据，布尔型数据只有`true（真）`和`false（假）`两个值。\n\n```go\n    注意：\n\n    布尔类型变量的默认值为false。\n\n    Go 语言中不允许将整型强制转换为布尔型.\n\n    布尔型无法参与数值运算，也无法与其他类型进行转换。\n```\n\n###  字符串\n\nGo语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型`（int、bool、float32、float64 等）`一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(\")中的内容，可以在Go语言的源码中直接添加非`ASCII`码字符，例如：\n\n```go\ns1 := \"hello\"\ns2 := \"你好\"\n```\n\n### 字符串转义符\n\nGo 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。\n\n|转义|含义|\n|---|---|\n|\\r|回车符（返回行首）|\n|\\n|换行符（直接跳到下一行的同列位置）|\n|\\t|制表符|\n|\\'|单引号|\n|\\\"|双引号|\n|\\|反斜杠|\n\n举个例子，我们要打印一个Windows平台下的一个文件路径：\n\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"str := \\\"c:\\\\pprof\\\\main.exe\\\"\")\n}\n```\n\n###  多行字符串\n\nGo语言中要定义一个多行字符串时，就必须使用`反引号`字符：\n\n```go\n    s1 := `第一行\n    第二行\n    第三行\n    `\n    fmt.Println(s1)\n```\n\n反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。\n\n###  字符串的常用操作\n\n|方法|介绍|\n|---|---|\n|len(str)|求长度|\n|+或fmt.Sprintf|拼接字符串|\n|strings.Split|分割|\n|strings.Contains|判断是否包含|\n|strings.HasPrefix,strings.HasSuffix|前缀/后缀判断|\n|strings.Index(),strings.LastIndex()|子串出现的位置|\n|strings.Join(a[]string, sep string)|join操作|\n\n###  byte和rune类型\n\n组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：\n\n```go\n    var a := '中'\n\n    var b := 'x'\n```\n\nGo 语言的字符有以下两种：\n\n```go\n    uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。\n\n    rune类型，代表一个 UTF-8字符。\n```\n\n当需要处理中文、日文或者其他复合字符时，则需要用到`rune`类型。`rune`类型实际是一个`int32`。 Go 使用了特殊的 `rune` 类型来处理 `Unicode`，让基于 `Unicode`的文本处理更为方便，也可以使用 `byte` 型进行默认字符串处理，性能和扩展性都有照顾\n\n```go\n    // 遍历字符串\n    func traversalString() {\n        s := \"pprof.cn博客\"\n        for i := 0; i < len(s); i++ { //byte\n            fmt.Printf(\"%v(%c) \", s[i], s[i])\n        }\n        fmt.Println()\n        for _, r := range s { //rune\n            fmt.Printf(\"%v(%c) \", r, r)\n        }\n        fmt.Println()\n    }\n```\n\n输出：\n\n```go\n    112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 229(å) 141() 154() 229(å) 174(®) 162(¢)\n    112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 21338(博) 23458(客)\n```\n\n因为UTF8编码下一个中文汉字由`3~4`个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。\n\n字符串底层是一个byte数组，所以可以和[]byte类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。\n\n### 修改字符串\n\n要修改字符串，需要先将其转换成`[]rune或[]byte`，完成后再转换为`string`。无论哪种转换，都会重新分配内存，并复制字节数组。\n\n```go\n    func changeString() {\n        s1 := \"hello\"\n        // 强制类型转换\n        byteS1 := []byte(s1)\n        byteS1[0] = 'H'\n        fmt.Println(string(byteS1))\n\n        s2 := \"博客\"\n        runeS2 := []rune(s2)\n        runeS2[0] = '狗'\n        fmt.Println(string(runeS2))\n    }\n```\n\n###  类型转换\n\nGo语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。\n\n强制类型转换的基本语法如下：\n\n```go\n    T(表达式)\n```\n\n其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.\n\n比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。\n\n```go\n    func sqrtDemo() {\n        var a, b = 3, 4\n        var c int\n        // math.Sqrt()接收的参数是float64类型，需要强制转换\n        c = int(math.Sqrt(float64(a*a + b*b)))\n        fmt.Println(c)\n    }\n```\n# 数组 Array\n\nGolang Array和以往认知的数组有很大不同。\n\n```go\n    1. 数组：是同一种数据类型的固定长度的序列。\n    2. 数组定义：var a [len]int，比如：var a [5]int，数组长度必须是常量，且是类型的组成部分。一旦定义，长度不能变。\n    3. 长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型。\n    4. 数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1\n    for i := 0; i < len(a); i++ {\n    }\n    for index, v := range a {\n    }\n    5. 访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic\n    6. 数组是值类型，赋值和传参会复制整个数组，而不是指针。因此改变副本的值，不会改变本身的值。\n    7.支持 \"==\"、\"!=\" 操作符，因为内存总是被初始化过的。\n    8.指针数组 [n]*T，数组指针 *[n]T。\n```\n\n###  数组初始化：\n\n#### 一维数组：\n\n```go\n    全局：\n    var arr0 [5]int = [5]int{1, 2, 3}\n    var arr1 = [5]int{1, 2, 3, 4, 5}\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\n    var str = [5]string{3: \"hello world\", 4: \"tom\"}\n    局部：\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {\"user1\", 10}, // 可省略元素类型。\n        {\"user2\", 20}, // 别忘了最后一行的逗号。\n    }\n```\n\n代码：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar arr0 [5]int = [5]int{1, 2, 3}\nvar arr1 = [5]int{1, 2, 3, 4, 5}\nvar arr2 = [...]int{1, 2, 3, 4, 5, 6}\nvar str = [5]string{3: \"hello world\", 4: \"tom\"}\n\nfunc main() {\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {\"user1\", 10}, // 可省略元素类型。\n        {\"user2\", 20}, // 别忘了最后一行的逗号。\n    }\n    fmt.Println(arr0, arr1, arr2, str)\n    fmt.Println(a, b, c, d)\n}\n```\n\n输出结果:\n\n```go\n[1 2 3 0 0] [1 2 3 4 5] [1 2 3 4 5 6] [   hello world tom]\n[1 2 0] [1 2 3 4] [0 0 100 0 200] [{user1 10} {user2 20}]\n```\n\n#### 多维数组\n\n```go\n    全局\n    var arr0 [5][3]int\n    var arr1 [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n    局部：\n    a := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    b := [...][2]int{{1, 1}, {2, 2}, {3, 3}} // 第 2 纬度不能用 \"...\"。\n```\n\n代码：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar arr0 [5][3]int\nvar arr1 [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n\nfunc main() {\n    a := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    b := [...][2]int{{1, 1}, {2, 2}, {3, 3}} // 第 2 纬度不能用 \"...\"。\n    fmt.Println(arr0, arr1)\n    fmt.Println(a, b)\n}\n```\n\n输出结果：\n\n```go\n    [[0 0 0] [0 0 0] [0 0 0] [0 0 0] [0 0 0]] [[1 2 3] [7 8 9]]\n    [[1 2 3] [4 5 6]] [[1 1] [2 2] [3 3]]\n```\n\n值拷贝行为会造成性能问题，通常会建议使用 slice，或数组指针。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc test(x [2]int) {\n    fmt.Printf(\"x: %p\\n\", &x)\n    x[1] = 1000\n}\n\nfunc main() {\n    a := [2]int{}\n    fmt.Printf(\"a: %p\\n\", &a)\n\n    test(a)\n    fmt.Println(a)\n}\n```\n\n输出结果:\n\n```go\n    a: 0xc42007c010\n    x: 0xc42007c030\n    [0 0]\n```\n\n内置函数 len 和 cap 都返回数组长度 (元素数量)。\n\n```go\npackage main\n\nfunc main() {\n    a := [2]int{}\n    println(len(a), cap(a)) \n}\n```\n\n输出结果：\n\n```go\n2 2\n```\n\n#### 多维数组遍历：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    var f [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n\n    for k1, v1 := range f {\n        for k2, v2 := range v1 {\n            fmt.Printf(\"(%d,%d)=%d \", k1, k2, v2)\n        }\n        fmt.Println()\n    }\n}\n```\n\n输出结果：\n\n```go\n    (0,0)=1 (0,1)=2 (0,2)=3 \n    (1,0)=7 (1,1)=8 (1,2)=9\n```\n\n###  数组拷贝和传参\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc printArr(arr *[5]int) {\n    arr[0] = 10\n    for i, v := range arr {\n        fmt.Println(i, v)\n    }\n}\n\nfunc main() {\n    var arr1 [5]int\n    printArr(&arr1)\n    fmt.Println(arr1)\n    arr2 := [...]int{2, 4, 6, 8, 10}\n    printArr(&arr2)\n    fmt.Println(arr2)\n}\n```\n\n## Go 语言中的指针\n\nGo语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。类型指针不能进行偏移和运算。Go语言中的指针操作非常简单，只需要记住两个符号：`&`（取地址）和`*`（根据地址取值）。\n\n###  指针地址和指针类型\n\n每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型`（int、float、bool、string、array、struct）`都有对应的指针类型，如：`*int、*int64、*string`等。\n\n取变量指针的语法如下：\n\n```\n    ptr := &v    // v的类型为T\n```\n\n其中：\n\n```\n    v:代表被取地址的变量，类型为T\n    ptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。\n```\n\n举个例子：\n\n```\nfunc main() {\n    a := 10\n    b := &a\n    fmt.Printf(\"a:%d ptr:%p\\n\", a, &a) // a:10 ptr:0xc00001a078\n    fmt.Printf(\"b:%p type:%T\\n\", b, b) // b:0xc00001a078 type:*int\n    fmt.Println(&b)                    // 0xc00000e018\n}\n```\n\n我们来看一下`b := &a`的图示：\n\n![指针](https://www.topgoer.com/static/3.9/1.png \"指针\")\n\n###  指针取值\n\n在对普通变量使用&操作符取地址后会获得这个变量的指针，然后可以对指针使用`*`操作，也就是指针取值，代码如下。\n\n```\nfunc main() {\n    //指针取值\n    a := 10\n    b := &a // 取变量a的地址，将指针保存到b中\n    fmt.Printf(\"type of b:%T\\n\", b)\n    c := *b // 指针取值（根据指针去内存取值）\n    fmt.Printf(\"type of c:%T\\n\", c)\n    fmt.Printf(\"value of c:%v\\n\", c)\n}\n```\n\n输出如下：\n\n```\n    type of b:*int\n    type of c:int\n    value of c:10\n```\n\n总结： 取地址操作符&和取值操作符`*`是一对互补操作符，`&`取出地址，`*`根据地址取出地址指向的值。\n\n变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：\\\n\n```\n    1.对变量进行取地址（&）操作，可以获得这个变量的指针变量。\n    2.指针变量的值是指针地址。\n    3.对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。\n```\n\n指针传值示例：\n\n```\nfunc modify1(x int) {\n    x = 100\n}\n\nfunc modify2(x *int) {\n    *x = 100\n}\n\nfunc main() {\n    a := 10\n    modify1(a)\n    fmt.Println(a) // 10\n    modify2(&a)\n    fmt.Println(a) // 100\n}\n```\n\n###  空指针\n\n- 当一个指针被定义后没有分配到任何变量时，它的值为 nil\n- 空指针的判断\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var p *string\n    fmt.Println(p)\n    fmt.Printf(\"p的值是%s/n\", p)\n    if p != nil {\n        fmt.Println(\"非空\")\n    } else {\n        fmt.Println(\"空值\")\n    }\n}\n```\n\n### 1.1.4. new和make\n\n我们先来看一个例子：\n\n```\nfunc main() {\n    var a *int\n    *a = 100\n    fmt.Println(*a)\n\n    var b map[string]int\n    b[\"测试\"] = 100\n    fmt.Println(b)\n}\n```\n\n执行上面的代码会引发panic，为什么呢？ 在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存\n\n### new\n\nnew是一个内置的函数，它的函数签名如下：\n\n```\n    func new(Type) *Type\n```\n\n其中，\n\n```\n    1.Type表示类型，new函数只接受一个参数，这个参数是一个类型\n    2.*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。\n```\n\nnew函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：\n\n```\nfunc main() {\n    a := new(int)\n    b := new(bool)\n    fmt.Printf(\"%T\\n\", a) // *int\n    fmt.Printf(\"%T\\n\", b) // *bool\n    fmt.Println(*a)       // 0\n    fmt.Println(*b)       // false\n}\n```\n\n本节开始的示例代码中`var a *int`只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了：\n\n```\nfunc main() {\n    var a *int\n    a = new(int)\n    *a = 10\n    fmt.Println(*a)\n}\n```\n\n###  make\n\nmake也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：\n\n```\nfunc make(t Type, size ...IntegerType) Type\n```\n\nmake函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。这个我们在上一章中都有说明，关于channel我们会在后续的章节详细说明。\n\n本节开始的示例中`var b map[string]int`只是声明变量b是一个map类型的变量，需要像下面的示例代码一样使用make函数进行初始化操作之后，才能对其进行键值对赋值：\n\n```\nfunc main() {\n    var b map[string]int\n    b = make(map[string]int, 10)\n    b[\"测试\"] = 100\n    fmt.Println(b)\n}\n```\n\n### new与make的区别\n\n```\n    1.二者都是用来做内存分配的。\n    2.make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；\n    3.而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。\n```\n\n### 指针小练习\n\n- 程序定义一个int变量num的地址并打印\n- 将num的地址赋给指针ptr，并通过ptr去修改num的值\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var a int\n    fmt.Println(&a)\n    var p *int\n    p = &a\n    *p = 20\n    fmt.Println(a)\n}\n```\n\n# 结构体\n\nGo语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。\n\n## 类型别名和自定义类型\n\n###  自定义类型\n\n在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型，Go语言中可以使用type关键字来定义自定义类型。\n\n自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：\n\n```\n    //将MyInt定义为int类型\n    type MyInt int\n```\n\n通过Type关键字的定义，MyInt就是一种新的类型，它具有int的特性。\n\n###  类型别名\n\n类型别名是Go1.9版本添加的新功能。\n\n类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。\n\n```\n    type TypeAlias = Type\n```\n\n我们之前见过的rune和byte就是类型别名，他们的定义如下：\n\n```\n    type byte = uint8\n    type rune = int32\n```\n\n###  类型定义和类型别名的区别\n\n类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。\n\n```\n//类型定义\ntype NewInt int\n\n//类型别名\ntype MyInt = int\n\nfunc main() {\n    var a NewInt\n    var b MyInt\n\n    fmt.Printf(\"type of a:%T\\n\", a) //type of a:main.NewInt\n    fmt.Printf(\"type of b:%T\\n\", b) //type of b:int\n}\n```\n\n结果显示a的类型是main.NewInt，表示main包下定义的NewInt类型。b的类型是int。MyInt类型只会在代码中存在，编译完成时并不会有MyInt类型。\n\n##  结构体\n\nGo语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称struct。 也就是我们可以通过struct来定义自己的类型了。\n\nGo语言中通过struct来实现面向对象。\n\n###  结构体的定义\n\n使用type和struct关键字来定义结构体，具体代码格式如下：\n\n```\n    type 类型名 struct {\n        字段名 字段类型\n        字段名 字段类型\n        …\n    }\n```\n\n其中：\n\n```\n    1.类型名：标识自定义结构体的名称，在同一个包内不能重复。\n    2.字段名：表示结构体字段名。结构体中的字段名必须唯一。\n    3.字段类型：表示结构体字段的具体类型。\n```\n\n举个例子，我们定义一个Person（人）结构体，代码如下：\n\n```\n    type person struct {\n        name string\n        city string\n        age  int8\n    }\n```\n\n同样类型的字段也可以写在一行，\n\n```\n    type person1 struct {\n        name, city string\n        age        int8\n    }\n```\n\n这样我们就拥有了一个person的自定义类型，它有name、city、age三个字段，分别表示姓名、城市和年龄。这样我们使用这个person结构体就能够很方便的在程序中表示和存储人信息了。\n\n语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型\n\n###  结构体实例化\n\n只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。\n\n结构体本身也是一种类型，我们可以像声明内置类型一样使用var关键字声明结构体类型。\n\n```\n    var 结构体实例 结构体类型\n```\n\n###  基本实例化\n\n```\ntype person struct {\n    name string\n    city string\n    age  int8\n}\n\nfunc main() {\n    var p1 person\n    p1.name = \"pprof.cn\"\n    p1.city = \"北京\"\n    p1.age = 18\n    fmt.Printf(\"p1=%v\\n\", p1)  //p1={pprof.cn 北京 18}\n    fmt.Printf(\"p1=%#v\\n\", p1) //p1=main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n}\n```\n\n我们通过.来访问结构体的字段（成员变量）,例如p1.name和p1.age等。\n\n##  匿名结构体\n\n在定义一些临时数据结构等场景下还可以使用匿名结构体。\n\n```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var user struct{Name string; Age int}\n    user.Name = \"pprof.cn\"\n    user.Age = 18\n    fmt.Printf(\"%#v\\n\", user)\n}\n```\n\n###  创建指针类型结构体\n\n我们还可以通过使用new关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：\n\n```\n    var p2 = new(person)\n    fmt.Printf(\"%T\\n\", p2)     //*main.person\n    fmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"\", city:\"\", age:0}\n```\n\n从打印的结果中我们可以看出p2是一个结构体指针。\n\n需要注意的是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\n\n```\nvar p2 = new(person)\np2.name = \"测试\"\np2.age = 18\np2.city = \"北京\"\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"测试\", city:\"北京\", age:18}\n```\n\n###  取结构体的地址实例化\n\n使用&对结构体进行取地址操作相当于对该结构体类型进行了一次new实例化操作。\n\n```\np3 := &person{}\nfmt.Printf(\"%T\\n\", p3)     //*main.person\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"\", city:\"\", age:0}\np3.name = \"博客\"\np3.age = 30\np3.city = \"成都\"\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"博客\", city:\"成都\", age:30}\n```\n\np3.name = \"博客\"其实在底层是(*p3).name = \"博客\"，这是Go语言帮我们实现的语法糖。\n\n###  结构体初始化\n\n```\ntype person struct {\n    name string\n    city string\n    age  int8\n}\n\nfunc main() {\n    var p4 person\n    fmt.Printf(\"p4=%#v\\n\", p4) //p4=main.person{name:\"\", city:\"\", age:0}\n}\n```\n\n### 使用键值对初始化\n\n使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。\n\n```\np5 := person{\n    name: \"pprof.cn\",\n    city: \"北京\",\n    age:  18,\n}\nfmt.Printf(\"p5=%#v\\n\", p5) //p5=main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n也可以对结构体指针进行键值对初始化，例如：\n\n```\np6 := &person{\n    name: \"pprof.cn\",\n    city: \"北京\",\n    age:  18,\n}\nfmt.Printf(\"p6=%#v\\n\", p6) //p6=&main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。\n\n```\np7 := &person{\n    city: \"北京\",\n}\nfmt.Printf(\"p7=%#v\\n\", p7) //p7=&main.person{name:\"\", city:\"北京\", age:0}\n```\n\n###  使用值的列表初始化\n\n初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：\n\n```\np8 := &person{\n    \"pprof.cn\",\n    \"北京\",\n    18,\n}\nfmt.Printf(\"p8=%#v\\n\", p8) //p8=&main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n使用这种格式初始化时，需要注意：\n\n```\n    1.必须初始化结构体的所有字段。\n    2.初始值的填充顺序必须与字段在结构体中的声明顺序一致。\n    3.该方式不能和键值初始化方式混用。\n```\n\n### 结构体内存布局\n\n```\ntype test struct {\n    a int8\n    b int8\n    c int8\n    d int8\n}\nn := test{\n    1, 2, 3, 4,\n}\nfmt.Printf(\"n.a %p\\n\", &n.a)\nfmt.Printf(\"n.b %p\\n\", &n.b)\nfmt.Printf(\"n.c %p\\n\", &n.c)\nfmt.Printf(\"n.d %p\\n\", &n.d)\n```\n\n输出：\n\n```\n    n.a 0xc0000a0060\n    n.b 0xc0000a0061\n    n.c 0xc0000a0062\n    n.d 0xc0000a0063\n```\n\n### 面试题\n\n```\ntype student struct {\n    name string\n    age  int\n}\n\nfunc main() {\n    m := make(map[string]*student)\n    stus := []student{\n        {name: \"pprof.cn\", age: 18},\n        {name: \"测试\", age: 23},\n        {name: \"博客\", age: 28},\n    }\n\n    for _, stu := range stus {\n        m[stu.name] = &stu\n    }\n    for k, v := range m {\n        fmt.Println(k, \"=>\", v.name)\n    }\n}\n```\n\n###  构造函数\n\nGo语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。\n\n```\nfunc newPerson(name, city string, age int8) *person {\n    return &person{\n        name: name,\n        city: city,\n        age:  age,\n    }\n}\n```\n\n调用构造函数\n\n```\np9 := newPerson(\"pprof.cn\", \"测试\", 90)\nfmt.Printf(\"%#v\\n\", p9)\n```\n\n### 方法和接收者\n\nGo语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。接收者的概念就类似于其他语言中的this或者 self。\n\n方法的定义格式如下：\n\n```\n    func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {\n        函数体\n    }\n```\n\n其中，\n\n```\n    1.接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名的第一个小写字母，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。\n    2.接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。\n    3.方法名、参数列表、返回参数：具体格式与函数定义相同。\n```\n\n举个例子：\n\n```\n//Person 结构体\ntype Person struct {\n    name string\n    age  int8\n}\n\n//NewPerson 构造函数\nfunc NewPerson(name string, age int8) *Person {\n    return &Person{\n        name: name,\n        age:  age,\n    }\n}\n\n//Dream Person做梦的方法\nfunc (p Person) Dream() {\n    fmt.Printf(\"%s的梦想是学好Go语言！\\n\", p.name)\n}\n\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    p1.Dream()\n}\n```\n\n方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。\n\n### 指针类型的接收者\n\n指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。 例如我们为Person添加一个SetAge方法，来修改实例变量的年龄。\n\n```\n    // SetAge 设置p的年龄\n    // 使用指针接收者\n    func (p *Person) SetAge(newAge int8) {\n        p.age = newAge\n    }\n```\n\n调用该方法：\n\n```\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    fmt.Println(p1.age) // 25\n    p1.SetAge(30)\n    fmt.Println(p1.age) // 30\n}\n```\n\n### 值类型的接收者\n\n当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。\n\n```\n// SetAge2 设置p的年龄\n// 使用值接收者\nfunc (p Person) SetAge2(newAge int8) {\n    p.age = newAge\n}\n\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    p1.Dream()\n    fmt.Println(p1.age) // 25\n    p1.SetAge2(30) // (*p1).SetAge2(30)\n    fmt.Println(p1.age) // 25\n}\n```\n\n### 什么时候应该使用指针类型接收者\n\n```\n    1.需要修改接收者中的值\n    2.接收者是拷贝代价比较大的大对象\n    3.保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。\n```\n\n### 任意类型添加方法\n\n在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的int类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。\n\n```\n//MyInt 将int定义为自定义MyInt类型\ntype MyInt int\n\n//SayHello 为MyInt添加一个SayHello的方法\nfunc (m MyInt) SayHello() {\n    fmt.Println(\"Hello, 我是一个int。\")\n}\nfunc main() {\n    var m1 MyInt\n    m1.SayHello() //Hello, 我是一个int。\n    m1 = 100\n    fmt.Printf(\"%#v  %T\\n\", m1, m1) //100  main.MyInt\n}\n```\n\n注意事项： 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。\n\n### 结构体的匿名字段\n\n结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。\n\n```\n//Person 结构体Person类型\ntype Person struct {\n    string\n    int\n}\n\nfunc main() {\n    p1 := Person{\n        \"pprof.cn\",\n        18,\n    }\n    fmt.Printf(\"%#v\\n\", p1)        //main.Person{string:\"pprof.cn\", int:18}\n    fmt.Println(p1.string, p1.int) //pprof.cn 18\n}\n```\n\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\n\n### 嵌套结构体\n\n一个结构体中可以嵌套包含另一个结构体或结构体指针。\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province string\n    City     string\n}\n\n//User 用户结构体\ntype User struct {\n    Name    string\n    Gender  string\n    Address Address\n}\n\nfunc main() {\n    user1 := User{\n        Name:   \"pprof\",\n        Gender: \"女\",\n        Address: Address{\n            Province: \"黑龙江\",\n            City:     \"哈尔滨\",\n        },\n    }\n    fmt.Printf(\"user1=%#v\\n\", user1)//user1=main.User{Name:\"pprof\", Gender:\"女\", Address:main.Address{Province:\"黑龙江\", City:\"哈尔滨\"}}\n}\n```\n\n### 嵌套匿名结构体\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province string\n    City     string\n}\n\n//User 用户结构体\ntype User struct {\n    Name    string\n    Gender  string\n    Address //匿名结构体\n}\n\nfunc main() {\n    var user2 User\n    user2.Name = \"pprof\"\n    user2.Gender = \"女\"\n    user2.Address.Province = \"黑龙江\"    //通过匿名结构体.字段名访问\n    user2.City = \"哈尔滨\"                //直接访问匿名结构体的字段名\n    fmt.Printf(\"user2=%#v\\n\", user2) //user2=main.User{Name:\"pprof\", Gender:\"女\", Address:main.Address{Province:\"黑龙江\", City:\"哈尔滨\"}}\n}\n```\n\n当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。\n\n### 嵌套结构体的字段名冲突\n\n嵌套结构体内部可能存在相同的字段名。这个时候为了避免歧义需要指定具体的内嵌结构体的字段。\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province   string\n    City       string\n    CreateTime string\n}\n\n//Email 邮箱结构体\ntype Email struct {\n    Account    string\n    CreateTime string\n}\n\n//User 用户结构体\ntype User struct {\n    Name   string\n    Gender string\n    Address\n    Email\n}\n\nfunc main() {\n    var user3 User\n    user3.Name = \"pprof\"\n    user3.Gender = \"女\"\n    // user3.CreateTime = \"2019\" //ambiguous selector user3.CreateTime\n    user3.Address.CreateTime = \"2000\" //指定Address结构体中的CreateTime\n    user3.Email.CreateTime = \"2000\"   //指定Email结构体中的CreateTime\n}\n```\n\n### 结构体的“继承”\n\nGo语言中使用结构体也可以实现其他编程语言中面向对象的继承。\n\n```\n//Animal 动物\ntype Animal struct {\n    name string\n}\n\nfunc (a *Animal) move() {\n    fmt.Printf(\"%s会动！\\n\", a.name)\n}\n\n//Dog 狗\ntype Dog struct {\n    Feet    int8\n    *Animal //通过嵌套匿名结构体实现继承\n}\n\nfunc (d *Dog) wang() {\n    fmt.Printf(\"%s会汪汪汪~\\n\", d.name)\n}\n\nfunc main() {\n    d1 := &Dog{\n        Feet: 4,\n        Animal: &Animal{ //注意嵌套的是结构体指针\n            name: \"乐乐\",\n        },\n    }\n    d1.wang() //乐乐会汪汪汪~\n    d1.move() //乐乐会动！\n}\n```\n\n### 结构体字段的可见性\n\n结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。\n\n### 结构体与JSON序列化\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号\"\"包裹，使用冒号:分隔，然后紧接着值；多个键值之间使用英文,分隔。\n\n```\n//Student 学生\ntype Student struct {\n    ID     int\n    Gender string\n    Name   string\n}\n\n//Class 班级\ntype Class struct {\n    Title    string\n    Students []*Student\n}\n\nfunc main() {\n    c := &Class{\n        Title:    \"101\",\n        Students: make([]*Student, 0, 200),\n    }\n    for i := 0; i < 10; i++ {\n        stu := &Student{\n            Name:   fmt.Sprintf(\"stu%02d\", i),\n            Gender: \"男\",\n            ID:     i,\n        }\n        c.Students = append(c.Students, stu)\n    }\n    //JSON序列化：结构体-->JSON格式的字符串\n    data, err := json.Marshal(c)\n    if err != nil {\n        fmt.Println(\"json marshal failed\")\n        return\n    }\n    fmt.Printf(\"json:%s\\n\", data)\n    //JSON反序列化：JSON格式的字符串-->结构体\n    str := `{\"Title\":\"101\",\"Students\":[{\"ID\":0,\"Gender\":\"男\",\"Name\":\"stu00\"},{\"ID\":1,\"Gender\":\"男\",\"Name\":\"stu01\"},{\"ID\":2,\"Gender\":\"男\",\"Name\":\"stu02\"},{\"ID\":3,\"Gender\":\"男\",\"Name\":\"stu03\"},{\"ID\":4,\"Gender\":\"男\",\"Name\":\"stu04\"},{\"ID\":5,\"Gender\":\"男\",\"Name\":\"stu05\"},{\"ID\":6,\"Gender\":\"男\",\"Name\":\"stu06\"},{\"ID\":7,\"Gender\":\"男\",\"Name\":\"stu07\"},{\"ID\":8,\"Gender\":\"男\",\"Name\":\"stu08\"},{\"ID\":9,\"Gender\":\"男\",\"Name\":\"stu09\"}]}`\n    c1 := &Class{}\n    err = json.Unmarshal([]byte(str), c1)\n    if err != nil {\n        fmt.Println(\"json unmarshal failed!\")\n        return\n    }\n    fmt.Printf(\"%#v\\n\", c1)\n}\n```\n\n### 结构体标签（Tag）\n\nTag是结构体的元信息，可以在运行的时候通过反射的机制读取出来。\n\nTag在结构体字段的后方定义，由一对反引号包裹起来，具体的格式如下：\n\n```\n    `key1:\"value1\" key2:\"value2\"`\n```\n\n结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 注意事项： 为结构体编写Tag时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。\n\n例如我们为Student结构体的每个字段定义json序列化时使用的Tag：\n\n```\n//Student 学生\ntype Student struct {\n    ID     int    `json:\"id\"` //通过指定tag实现json序列化该字段时的key\n    Gender string //json序列化是默认使用字段名作为key\n    name   string //私有不能被json包访问\n}\n\nfunc main() {\n    s1 := Student{\n        ID:     1,\n        Gender: \"女\",\n        name:   \"pprof\",\n    }\n    data, err := json.Marshal(s1)\n    if err != nil {\n        fmt.Println(\"json marshal failed!\")\n        return\n    }\n    fmt.Printf(\"json str:%s\\n\", data) //json str:{\"id\":1,\"Gender\":\"女\"}\n}\n```\n\n### 小练习：\n\n猜一下下列代码运行的结果是什么\n\n```\npackage main\n\nimport \"fmt\"\n\ntype student struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc demo(ce []student) {\n    //切片是引用传递，是可以改变值的\n    ce[1].age = 999\n    // ce = append(ce, student{3, \"xiaowang\", 56})\n    // return ce\n}\nfunc main() {\n    var ce []student  //定义一个切片类型的结构体\n    ce = []student{\n        student{1, \"xiaoming\", 22},\n        student{2, \"xiaozhang\", 33},\n    }\n    fmt.Println(ce)\n    demo(ce)\n    fmt.Println(ce)\n}\n```\n\n### 删除map类型的结构体\n\n```\npackage main\n\nimport \"fmt\"\n\ntype student struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc main() {\n    ce := make(map[int]student)\n    ce[1] = student{1, \"xiaolizi\", 22}\n    ce[2] = student{2, \"wang\", 23}\n    fmt.Println(ce)\n    delete(ce, 2)\n    fmt.Println(ce)\n}\n```","source":"_posts/计算机语言知识库/Go语言基础入门.md","raw":"---\ntitle: Go语言基础入门\ndate: 2023-9-7 13:19\nupdated: 星期日 10日 九月 2023 20:21:34\ntags: \n- \ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n# Golang 内置类型和函数\n\n##  内置类型\n\n###  值类型：\n\n```go\n    bool\n    int(32 or 64), int8, int16, int32, int64\n    uint(32 or 64), uint8(byte), uint16, uint32, uint64\n    float32, float64\n    string\n    complex64, complex128\n    array    -- 固定长度的数组\n```\n\n### 引用类型：(指针类型)\n\n```go\n    slice   -- 序列数组(最常用)\n    map     -- 映射\n    chan    -- 管道\n```\n\n## 内置函数\n\nGo 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。\n\n```go\n    append          -- 用来追加元素到数组、slice中,返回修改后的数组、slice\n    close           -- 主要用来关闭channel\n    delete            -- 从map中删除key对应的value\n    panic            -- 停止常规的goroutine  （panic和recover：用来做错误处理）\n    recover         -- 允许程序定义goroutine的panic动作\n    imag            -- 返回complex的实部   （complex、real imag：用于创建和操作复数）\n    real            -- 返回complex的虚部\n    make            -- 用来分配内存，返回Type本身(只能应用于slice, map, channel)\n    new                -- 用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针\n    cap                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）\n    copy            -- 用于复制和连接slice，返回复制的数目\n    len                -- 来求长度，比如string、array、slice、map、channel ，返回长度\n    print、println     -- 底层打印函数，在部署环境中建议使用 fmt 包\n```\n\n## 内置接口error\n\n```go\n    type error interface { //只要实现了Error()函数，返回值为String的都实现了err接口\n\n            Error()    String\n\n    }\n```\n\n# 2. Init 函数和 main 函数\n\n##  init 函数\n\ngo语言中`init`函数用于包`(package)`的初始化，该函数是go语言的一个重要特性。\n\n有下面的特征：\n\n1. init 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等\n\n2. 每个包可以拥有多个 init 函数\n\n3. 包的每个源文件也可以拥有多个 init 函数\n\n4. 同一个包中多个 init 函数的执行顺序 go 语言没有明确的定义(说明)\n\n5. 不同包的 init 函数按照包导入的依赖关系决定该初始化函数的执行顺序\n\n6. init 函数不能被其他函数调用，而是在 main 函数执行之前，自动被调用\n\n##  main函数\n\n```\n    Go语言程序的默认入口函数(主函数)：func main()\n    函数体用｛｝一对括号包裹。\n\n    func main(){\n        //函数体\n    }\n```\n\n##  init函数和main函数的异同\n\n```\n    相同点：\n        两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。\n    不同点：\n        init可以应用于任意包中，且可以重复定义多个。\n        main函数只能用于main包中，且只能定义一个。\n```\n\n两个函数的执行顺序：\n\n对同一个go文件的`init()`调用顺序是从上到下的。\n\n对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的`init()`函数。\n\n对于不同的`package`，如果不相互依赖的话，按照main包中\"先`import`的后调用\"的顺序调用其包中的`init()`，如果`package`存在依赖，则先调用最早被依赖的`package`中的`init()`，最后调用`main`函数。\n\n如果 `init` 函数中使用了 `println()` 或者 `print()` 你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。\n\n# 命令\n\n假如你已安装了golang环境，你可以在命令行执行go命令查看相关的Go语言命令：\n\n```shell\n$ go\nGo is a tool for managing Go source code.\n\nUsage:\n\n    go command [arguments]\n\nThe commands are:\n\n    build       compile packages and dependencies\n    clean       remove object files\n    doc         show documentation for package or symbol\n    env         print Go environment information\n    bug         start a bug report\n    fix         run go tool fix on packages\n    fmt         run gofmt on package sources\n    generate    generate Go files by processing source\n    get         download and install packages and dependencies\n    install     compile and install packages and dependencies\n    list        list packages\n    run         compile and run Go program\n    test        test packages\n    tool        run specified go tool\n    version     print Go version\n    vet         run go tool vet on packages\n\nUse \"go help [command]\" for more information about a command.\n\nAdditional help topics:\n\n    c           calling between Go and C\n    buildmode   description of build modes\n    filetype    file types\n    gopath      GOPATH environment variable\n    environment environment variables\n    importpath  import path syntax\n    packages    description of package lists\n    testflag    description of testing flags\n    testfunc    description of testing functions\n\nUse \"go help [topic]\" for more information about that topic.\n```\n\ngo env用于打印Go语言的环境信息。\n\ngo run命令可以编译并运行命令源码文件。\n\ngo get可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。\n\ngo build命令用于编译我们指定的源码文件或代码包以及它们的依赖包。\n\ngo install用于编译并安装指定的代码包及它们的依赖包。\n\ngo clean命令会删除掉执行其它命令时产生的一些文件和目录。\n\ngo doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。\n\ngo test命令用于对Go语言编写的程序进行测试。\n\ngo list命令的作用是列出指定的代码包的信息。\n\ngo fix会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。\n\ngo vet是一个用于检查Go语言源码中静态错误的简单工具。\n\ngo tool pprof命令来交互式的访问概要文件的内容。\n\n#   变量和常量\n\n## 变量\n\n### 变量的来历\n\n程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。\n\n### 变量类型\n\n变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。\n\nGo语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。\n\n### 变量声明\n\nGo语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n###  标准声明\n\nGo语言的变量声明格式为：\n\n```go\n    var 变量名 变量类型\n```\n\n变量声明以关键字`var`开头，变量类型放在变量的后面，行尾无需分号。 举个例子：\n\n```go\n    var name string\n    var age int\n    var isOk bool\n```\n\n###   批量声明\n\n每声明一个变量就需要写`var`关键字会比较繁琐，go语言中还支持批量变量声明：\n\n```go\n    var (\n        a string\n        b int\n        c bool\n        d float32\n    )\n```\n\n###  变量的初始化\n\nGo语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为`false`。 切片、函数、指针变量的默认为`nil`。\n\n当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：\n\n```go\n    var 变量名 类型 = 表达式\n```\n\n举个例子：\n\n```go\n    var name string = \"pprof.cn\"\n    var sex int = 1\n```\n\n或者一次初始化多个变量\n\n```go\n    var name, sex = \"pprof.cn\", 1\n```\n\n#### 类型推导\n\n有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。\n\n```go\n    var name = \"pprof.cn\"\n    var sex = 1\n```\n\n#### 短变量声明\n\n在函数内部，可以使用更简略的 := 方式声明并初始化变量。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n// 全局变量m\nvar m = 100\n\nfunc main() {\n    n := 10\n    m := 200 // 此处声明局部变量m\n    fmt.Println(m, n)\n}\n```\n\n#### 匿名变量\n\n在使用多重赋值时，如果想要忽略某个值，可以使用`匿名变量（anonymous variable）`。 匿名变量用一个下划线_表示，例如：\n\n```go\nfunc foo() (int, string) {\n    return 10, \"Q1mi\"\n}\nfunc main() {\n    x, _ := foo()\n    _, y := foo()\n    fmt.Println(\"x=\", x)\n    fmt.Println(\"y=\", y)\n}\n```\n\n匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。)\n\n注意事项：\n\n```go\n    函数外的每个语句都必须以关键字开始（var、const、func等）\n\n    :=不能使用在函数外。\n\n    _多用于占位，表示忽略值。\n```\n\n##  常量\n\n相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把`var`换成了`const`，常量在定义的时候必须赋值。\n\n```go\n    const pi = 3.1415\n    const e = 2.7182\n```\n\n声明了`pi`和`e`这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。\n\n多个常量也可以一起声明：\n\n```go\n    const (\n        pi = 3.1415\n        e = 2.7182\n    )\n```\n\n`const`同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：\n\n```go\n    const (\n        n1 = 100\n        n2\n        n3\n    )\n```\n\n上面示例中，常量`n1、n2、n3`的值都是`100`。\n\n###  iota\n\n`iota`是`go`语言的常量计数器，只能在常量的表达式中使用。 `iota`在`const`关键字出现时将被重置为`0`。`const`中每新增一行常量声明将使`iota`计数一次(`iota`可理解为`const`语句块中的行索引)。 使用`iota`能简化定义，在定义枚举时很有用。\n\n举个例子：\n\n```go\n    const (\n            n1 = iota //0\n            n2        //1\n            n3        //2\n            n4        //3\n        )\n```\n\n###  几个常见的iota示例:\n\n使用_跳过某些值\n\n```go\n    const (\n            n1 = iota //0\n            n2        //1\n            _\n            n4        //3\n        )\n```\n\n`iota`声明中间插队\n\n```go\n    const (\n            n1 = iota //0\n            n2 = 100  //100\n            n3 = iota //2\n            n4        //3\n        )\n    const n5 = iota //0\n```\n\n定义数量级 （这里的`<<`表示左移操作，`1<<10`表示将`1`的二进制表示向左移`10`位，也就是由`1`变成了`10000000000`，也就是十进制的`1024`。同理`2<<2`表示将`2`的二进制表示向左移`2`位，也就是由`10`变成了`1000`，也就是十进制的`8`。）\n\n```go\n    const (\n            _  = iota\n            KB = 1 << (10 * iota)\n            MB = 1 << (10 * iota)\n            GB = 1 << (10 * iota)\n            TB = 1 << (10 * iota)\n            PB = 1 << (10 * iota)\n        )\n```\n\n多个`iota`定义在一行\n\n```go\n    const (\n            a, b = iota + 1, iota + 2 //1,2\n            c, d                      //2,3\n            e, f                      //3,4\n        )\n```\n#  基本类型\n\n## 基本类型介绍\n\nGolang 更明确的数字类型命名，支持 Unicode，支持常用数据结构。\n\n|类型|长度(字节)|默认值|说明|\n|---|---|---|---|\n|bool|1|false||\n|byte|1|0|uint8|\n|rune|4|0|Unicode Code Point, int32|\n|int, uint|4或8|0|32 或 64 位|\n|int8, uint8|1|0|-128 ~ 127, 0 ~ 255，byte是uint8 的别名|\n|int16, uint16|2|0|-32768 ~ 32767, 0 ~ 65535|\n|int32, uint32|4|0|-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名|\n|int64, uint64|8|0||\n|float32|4|0.0||\n|float64|8|0.0||\n|complex64|8|||\n|complex128|16|||\n|uintptr|4或8||以存储指针的 uint32 或 uint64 整数|\n|array|||值类型|\n|struct|||值类型|\n|string||\"\"|UTF-8 字符串|\n|slice||nil|引用类型|\n|map||nil|引用类型|\n|channel||nil|引用类型|\n|interface||nil|接口|\n|function||nil|函数|\n\n支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。\n\n```go\n     a, b, c, d := 071, 0x1F, 1e9, math.MinInt16\n```\n\n空指针值 nil，而非C/C++ NULL。\n\n### 整型\n\n整型分为以下两个大类： 按长度分为：`int8`、`int16`、`int32`、`int64`对应的无符号整型：`uint8`、`uint16`、`uint32`、`uint64`\n\n其中，`uint8`就是我们熟知的`byte`型，`int16`对应C语言中的`short`型，`int64`对应C语言中的`long`型。\n\n### 浮点型\n\nGo语言支持两种浮点型数：`float32`和`float64`。这两种浮点型数据格式遵循`IEEE 754`标准： `float32` 的浮点数的最大范围约为`3.4e38`，可以使用常量定义：`math.MaxFloat32`。 `float64` 的浮点数的最大范围约为 `1.8e308`，可以使用一个常量定义：`math.MaxFloat64`。\n\n###  复数\n\n`complex64`和`complex128`\n\n复数有实部和虚部，`complex64`的实部和虚部为32位，`complex128`的实部和虚部为64位。\n\n### 布尔值\n\nGo语言中以`bool`类型进行声明布尔型数据，布尔型数据只有`true（真）`和`false（假）`两个值。\n\n```go\n    注意：\n\n    布尔类型变量的默认值为false。\n\n    Go 语言中不允许将整型强制转换为布尔型.\n\n    布尔型无法参与数值运算，也无法与其他类型进行转换。\n```\n\n###  字符串\n\nGo语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型`（int、bool、float32、float64 等）`一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(\")中的内容，可以在Go语言的源码中直接添加非`ASCII`码字符，例如：\n\n```go\ns1 := \"hello\"\ns2 := \"你好\"\n```\n\n### 字符串转义符\n\nGo 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。\n\n|转义|含义|\n|---|---|\n|\\r|回车符（返回行首）|\n|\\n|换行符（直接跳到下一行的同列位置）|\n|\\t|制表符|\n|\\'|单引号|\n|\\\"|双引号|\n|\\|反斜杠|\n\n举个例子，我们要打印一个Windows平台下的一个文件路径：\n\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"str := \\\"c:\\\\pprof\\\\main.exe\\\"\")\n}\n```\n\n###  多行字符串\n\nGo语言中要定义一个多行字符串时，就必须使用`反引号`字符：\n\n```go\n    s1 := `第一行\n    第二行\n    第三行\n    `\n    fmt.Println(s1)\n```\n\n反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。\n\n###  字符串的常用操作\n\n|方法|介绍|\n|---|---|\n|len(str)|求长度|\n|+或fmt.Sprintf|拼接字符串|\n|strings.Split|分割|\n|strings.Contains|判断是否包含|\n|strings.HasPrefix,strings.HasSuffix|前缀/后缀判断|\n|strings.Index(),strings.LastIndex()|子串出现的位置|\n|strings.Join(a[]string, sep string)|join操作|\n\n###  byte和rune类型\n\n组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：\n\n```go\n    var a := '中'\n\n    var b := 'x'\n```\n\nGo 语言的字符有以下两种：\n\n```go\n    uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。\n\n    rune类型，代表一个 UTF-8字符。\n```\n\n当需要处理中文、日文或者其他复合字符时，则需要用到`rune`类型。`rune`类型实际是一个`int32`。 Go 使用了特殊的 `rune` 类型来处理 `Unicode`，让基于 `Unicode`的文本处理更为方便，也可以使用 `byte` 型进行默认字符串处理，性能和扩展性都有照顾\n\n```go\n    // 遍历字符串\n    func traversalString() {\n        s := \"pprof.cn博客\"\n        for i := 0; i < len(s); i++ { //byte\n            fmt.Printf(\"%v(%c) \", s[i], s[i])\n        }\n        fmt.Println()\n        for _, r := range s { //rune\n            fmt.Printf(\"%v(%c) \", r, r)\n        }\n        fmt.Println()\n    }\n```\n\n输出：\n\n```go\n    112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 229(å) 141() 154() 229(å) 174(®) 162(¢)\n    112(p) 112(p) 114(r) 111(o) 102(f) 46(.) 99(c) 110(n) 21338(博) 23458(客)\n```\n\n因为UTF8编码下一个中文汉字由`3~4`个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。\n\n字符串底层是一个byte数组，所以可以和[]byte类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。\n\n### 修改字符串\n\n要修改字符串，需要先将其转换成`[]rune或[]byte`，完成后再转换为`string`。无论哪种转换，都会重新分配内存，并复制字节数组。\n\n```go\n    func changeString() {\n        s1 := \"hello\"\n        // 强制类型转换\n        byteS1 := []byte(s1)\n        byteS1[0] = 'H'\n        fmt.Println(string(byteS1))\n\n        s2 := \"博客\"\n        runeS2 := []rune(s2)\n        runeS2[0] = '狗'\n        fmt.Println(string(runeS2))\n    }\n```\n\n###  类型转换\n\nGo语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。\n\n强制类型转换的基本语法如下：\n\n```go\n    T(表达式)\n```\n\n其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.\n\n比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。\n\n```go\n    func sqrtDemo() {\n        var a, b = 3, 4\n        var c int\n        // math.Sqrt()接收的参数是float64类型，需要强制转换\n        c = int(math.Sqrt(float64(a*a + b*b)))\n        fmt.Println(c)\n    }\n```\n# 数组 Array\n\nGolang Array和以往认知的数组有很大不同。\n\n```go\n    1. 数组：是同一种数据类型的固定长度的序列。\n    2. 数组定义：var a [len]int，比如：var a [5]int，数组长度必须是常量，且是类型的组成部分。一旦定义，长度不能变。\n    3. 长度是数组类型的一部分，因此，var a[5] int和var a[10]int是不同的类型。\n    4. 数组可以通过下标进行访问，下标是从0开始，最后一个元素下标是：len-1\n    for i := 0; i < len(a); i++ {\n    }\n    for index, v := range a {\n    }\n    5. 访问越界，如果下标在数组合法范围之外，则触发访问越界，会panic\n    6. 数组是值类型，赋值和传参会复制整个数组，而不是指针。因此改变副本的值，不会改变本身的值。\n    7.支持 \"==\"、\"!=\" 操作符，因为内存总是被初始化过的。\n    8.指针数组 [n]*T，数组指针 *[n]T。\n```\n\n###  数组初始化：\n\n#### 一维数组：\n\n```go\n    全局：\n    var arr0 [5]int = [5]int{1, 2, 3}\n    var arr1 = [5]int{1, 2, 3, 4, 5}\n    var arr2 = [...]int{1, 2, 3, 4, 5, 6}\n    var str = [5]string{3: \"hello world\", 4: \"tom\"}\n    局部：\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用索引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {\"user1\", 10}, // 可省略元素类型。\n        {\"user2\", 20}, // 别忘了最后一行的逗号。\n    }\n```\n\n代码：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar arr0 [5]int = [5]int{1, 2, 3}\nvar arr1 = [5]int{1, 2, 3, 4, 5}\nvar arr2 = [...]int{1, 2, 3, 4, 5, 6}\nvar str = [5]string{3: \"hello world\", 4: \"tom\"}\n\nfunc main() {\n    a := [3]int{1, 2}           // 未初始化元素值为 0。\n    b := [...]int{1, 2, 3, 4}   // 通过初始化值确定数组长度。\n    c := [5]int{2: 100, 4: 200} // 使用引号初始化元素。\n    d := [...]struct {\n        name string\n        age  uint8\n    }{\n        {\"user1\", 10}, // 可省略元素类型。\n        {\"user2\", 20}, // 别忘了最后一行的逗号。\n    }\n    fmt.Println(arr0, arr1, arr2, str)\n    fmt.Println(a, b, c, d)\n}\n```\n\n输出结果:\n\n```go\n[1 2 3 0 0] [1 2 3 4 5] [1 2 3 4 5 6] [   hello world tom]\n[1 2 0] [1 2 3 4] [0 0 100 0 200] [{user1 10} {user2 20}]\n```\n\n#### 多维数组\n\n```go\n    全局\n    var arr0 [5][3]int\n    var arr1 [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n    局部：\n    a := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    b := [...][2]int{{1, 1}, {2, 2}, {3, 3}} // 第 2 纬度不能用 \"...\"。\n```\n\n代码：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar arr0 [5][3]int\nvar arr1 [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n\nfunc main() {\n    a := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    b := [...][2]int{{1, 1}, {2, 2}, {3, 3}} // 第 2 纬度不能用 \"...\"。\n    fmt.Println(arr0, arr1)\n    fmt.Println(a, b)\n}\n```\n\n输出结果：\n\n```go\n    [[0 0 0] [0 0 0] [0 0 0] [0 0 0] [0 0 0]] [[1 2 3] [7 8 9]]\n    [[1 2 3] [4 5 6]] [[1 1] [2 2] [3 3]]\n```\n\n值拷贝行为会造成性能问题，通常会建议使用 slice，或数组指针。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc test(x [2]int) {\n    fmt.Printf(\"x: %p\\n\", &x)\n    x[1] = 1000\n}\n\nfunc main() {\n    a := [2]int{}\n    fmt.Printf(\"a: %p\\n\", &a)\n\n    test(a)\n    fmt.Println(a)\n}\n```\n\n输出结果:\n\n```go\n    a: 0xc42007c010\n    x: 0xc42007c030\n    [0 0]\n```\n\n内置函数 len 和 cap 都返回数组长度 (元素数量)。\n\n```go\npackage main\n\nfunc main() {\n    a := [2]int{}\n    println(len(a), cap(a)) \n}\n```\n\n输出结果：\n\n```go\n2 2\n```\n\n#### 多维数组遍历：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    var f [2][3]int = [...][3]int{{1, 2, 3}, {7, 8, 9}}\n\n    for k1, v1 := range f {\n        for k2, v2 := range v1 {\n            fmt.Printf(\"(%d,%d)=%d \", k1, k2, v2)\n        }\n        fmt.Println()\n    }\n}\n```\n\n输出结果：\n\n```go\n    (0,0)=1 (0,1)=2 (0,2)=3 \n    (1,0)=7 (1,1)=8 (1,2)=9\n```\n\n###  数组拷贝和传参\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc printArr(arr *[5]int) {\n    arr[0] = 10\n    for i, v := range arr {\n        fmt.Println(i, v)\n    }\n}\n\nfunc main() {\n    var arr1 [5]int\n    printArr(&arr1)\n    fmt.Println(arr1)\n    arr2 := [...]int{2, 4, 6, 8, 10}\n    printArr(&arr2)\n    fmt.Println(arr2)\n}\n```\n\n## Go 语言中的指针\n\nGo语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。类型指针不能进行偏移和运算。Go语言中的指针操作非常简单，只需要记住两个符号：`&`（取地址）和`*`（根据地址取值）。\n\n###  指针地址和指针类型\n\n每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型`（int、float、bool、string、array、struct）`都有对应的指针类型，如：`*int、*int64、*string`等。\n\n取变量指针的语法如下：\n\n```\n    ptr := &v    // v的类型为T\n```\n\n其中：\n\n```\n    v:代表被取地址的变量，类型为T\n    ptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。\n```\n\n举个例子：\n\n```\nfunc main() {\n    a := 10\n    b := &a\n    fmt.Printf(\"a:%d ptr:%p\\n\", a, &a) // a:10 ptr:0xc00001a078\n    fmt.Printf(\"b:%p type:%T\\n\", b, b) // b:0xc00001a078 type:*int\n    fmt.Println(&b)                    // 0xc00000e018\n}\n```\n\n我们来看一下`b := &a`的图示：\n\n![指针](https://www.topgoer.com/static/3.9/1.png \"指针\")\n\n###  指针取值\n\n在对普通变量使用&操作符取地址后会获得这个变量的指针，然后可以对指针使用`*`操作，也就是指针取值，代码如下。\n\n```\nfunc main() {\n    //指针取值\n    a := 10\n    b := &a // 取变量a的地址，将指针保存到b中\n    fmt.Printf(\"type of b:%T\\n\", b)\n    c := *b // 指针取值（根据指针去内存取值）\n    fmt.Printf(\"type of c:%T\\n\", c)\n    fmt.Printf(\"value of c:%v\\n\", c)\n}\n```\n\n输出如下：\n\n```\n    type of b:*int\n    type of c:int\n    value of c:10\n```\n\n总结： 取地址操作符&和取值操作符`*`是一对互补操作符，`&`取出地址，`*`根据地址取出地址指向的值。\n\n变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：\\\n\n```\n    1.对变量进行取地址（&）操作，可以获得这个变量的指针变量。\n    2.指针变量的值是指针地址。\n    3.对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。\n```\n\n指针传值示例：\n\n```\nfunc modify1(x int) {\n    x = 100\n}\n\nfunc modify2(x *int) {\n    *x = 100\n}\n\nfunc main() {\n    a := 10\n    modify1(a)\n    fmt.Println(a) // 10\n    modify2(&a)\n    fmt.Println(a) // 100\n}\n```\n\n###  空指针\n\n- 当一个指针被定义后没有分配到任何变量时，它的值为 nil\n- 空指针的判断\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var p *string\n    fmt.Println(p)\n    fmt.Printf(\"p的值是%s/n\", p)\n    if p != nil {\n        fmt.Println(\"非空\")\n    } else {\n        fmt.Println(\"空值\")\n    }\n}\n```\n\n### 1.1.4. new和make\n\n我们先来看一个例子：\n\n```\nfunc main() {\n    var a *int\n    *a = 100\n    fmt.Println(*a)\n\n    var b map[string]int\n    b[\"测试\"] = 100\n    fmt.Println(b)\n}\n```\n\n执行上面的代码会引发panic，为什么呢？ 在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存\n\n### new\n\nnew是一个内置的函数，它的函数签名如下：\n\n```\n    func new(Type) *Type\n```\n\n其中，\n\n```\n    1.Type表示类型，new函数只接受一个参数，这个参数是一个类型\n    2.*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。\n```\n\nnew函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：\n\n```\nfunc main() {\n    a := new(int)\n    b := new(bool)\n    fmt.Printf(\"%T\\n\", a) // *int\n    fmt.Printf(\"%T\\n\", b) // *bool\n    fmt.Println(*a)       // 0\n    fmt.Println(*b)       // false\n}\n```\n\n本节开始的示例代码中`var a *int`只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了：\n\n```\nfunc main() {\n    var a *int\n    a = new(int)\n    *a = 10\n    fmt.Println(*a)\n}\n```\n\n###  make\n\nmake也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：\n\n```\nfunc make(t Type, size ...IntegerType) Type\n```\n\nmake函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。这个我们在上一章中都有说明，关于channel我们会在后续的章节详细说明。\n\n本节开始的示例中`var b map[string]int`只是声明变量b是一个map类型的变量，需要像下面的示例代码一样使用make函数进行初始化操作之后，才能对其进行键值对赋值：\n\n```\nfunc main() {\n    var b map[string]int\n    b = make(map[string]int, 10)\n    b[\"测试\"] = 100\n    fmt.Println(b)\n}\n```\n\n### new与make的区别\n\n```\n    1.二者都是用来做内存分配的。\n    2.make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；\n    3.而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。\n```\n\n### 指针小练习\n\n- 程序定义一个int变量num的地址并打印\n- 将num的地址赋给指针ptr，并通过ptr去修改num的值\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var a int\n    fmt.Println(&a)\n    var p *int\n    p = &a\n    *p = 20\n    fmt.Println(a)\n}\n```\n\n# 结构体\n\nGo语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。\n\n## 类型别名和自定义类型\n\n###  自定义类型\n\n在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型，Go语言中可以使用type关键字来定义自定义类型。\n\n自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：\n\n```\n    //将MyInt定义为int类型\n    type MyInt int\n```\n\n通过Type关键字的定义，MyInt就是一种新的类型，它具有int的特性。\n\n###  类型别名\n\n类型别名是Go1.9版本添加的新功能。\n\n类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。\n\n```\n    type TypeAlias = Type\n```\n\n我们之前见过的rune和byte就是类型别名，他们的定义如下：\n\n```\n    type byte = uint8\n    type rune = int32\n```\n\n###  类型定义和类型别名的区别\n\n类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。\n\n```\n//类型定义\ntype NewInt int\n\n//类型别名\ntype MyInt = int\n\nfunc main() {\n    var a NewInt\n    var b MyInt\n\n    fmt.Printf(\"type of a:%T\\n\", a) //type of a:main.NewInt\n    fmt.Printf(\"type of b:%T\\n\", b) //type of b:int\n}\n```\n\n结果显示a的类型是main.NewInt，表示main包下定义的NewInt类型。b的类型是int。MyInt类型只会在代码中存在，编译完成时并不会有MyInt类型。\n\n##  结构体\n\nGo语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称struct。 也就是我们可以通过struct来定义自己的类型了。\n\nGo语言中通过struct来实现面向对象。\n\n###  结构体的定义\n\n使用type和struct关键字来定义结构体，具体代码格式如下：\n\n```\n    type 类型名 struct {\n        字段名 字段类型\n        字段名 字段类型\n        …\n    }\n```\n\n其中：\n\n```\n    1.类型名：标识自定义结构体的名称，在同一个包内不能重复。\n    2.字段名：表示结构体字段名。结构体中的字段名必须唯一。\n    3.字段类型：表示结构体字段的具体类型。\n```\n\n举个例子，我们定义一个Person（人）结构体，代码如下：\n\n```\n    type person struct {\n        name string\n        city string\n        age  int8\n    }\n```\n\n同样类型的字段也可以写在一行，\n\n```\n    type person1 struct {\n        name, city string\n        age        int8\n    }\n```\n\n这样我们就拥有了一个person的自定义类型，它有name、city、age三个字段，分别表示姓名、城市和年龄。这样我们使用这个person结构体就能够很方便的在程序中表示和存储人信息了。\n\n语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型\n\n###  结构体实例化\n\n只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。\n\n结构体本身也是一种类型，我们可以像声明内置类型一样使用var关键字声明结构体类型。\n\n```\n    var 结构体实例 结构体类型\n```\n\n###  基本实例化\n\n```\ntype person struct {\n    name string\n    city string\n    age  int8\n}\n\nfunc main() {\n    var p1 person\n    p1.name = \"pprof.cn\"\n    p1.city = \"北京\"\n    p1.age = 18\n    fmt.Printf(\"p1=%v\\n\", p1)  //p1={pprof.cn 北京 18}\n    fmt.Printf(\"p1=%#v\\n\", p1) //p1=main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n}\n```\n\n我们通过.来访问结构体的字段（成员变量）,例如p1.name和p1.age等。\n\n##  匿名结构体\n\n在定义一些临时数据结构等场景下还可以使用匿名结构体。\n\n```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    var user struct{Name string; Age int}\n    user.Name = \"pprof.cn\"\n    user.Age = 18\n    fmt.Printf(\"%#v\\n\", user)\n}\n```\n\n###  创建指针类型结构体\n\n我们还可以通过使用new关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：\n\n```\n    var p2 = new(person)\n    fmt.Printf(\"%T\\n\", p2)     //*main.person\n    fmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"\", city:\"\", age:0}\n```\n\n从打印的结果中我们可以看出p2是一个结构体指针。\n\n需要注意的是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。\n\n```\nvar p2 = new(person)\np2.name = \"测试\"\np2.age = 18\np2.city = \"北京\"\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"测试\", city:\"北京\", age:18}\n```\n\n###  取结构体的地址实例化\n\n使用&对结构体进行取地址操作相当于对该结构体类型进行了一次new实例化操作。\n\n```\np3 := &person{}\nfmt.Printf(\"%T\\n\", p3)     //*main.person\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"\", city:\"\", age:0}\np3.name = \"博客\"\np3.age = 30\np3.city = \"成都\"\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"博客\", city:\"成都\", age:30}\n```\n\np3.name = \"博客\"其实在底层是(*p3).name = \"博客\"，这是Go语言帮我们实现的语法糖。\n\n###  结构体初始化\n\n```\ntype person struct {\n    name string\n    city string\n    age  int8\n}\n\nfunc main() {\n    var p4 person\n    fmt.Printf(\"p4=%#v\\n\", p4) //p4=main.person{name:\"\", city:\"\", age:0}\n}\n```\n\n### 使用键值对初始化\n\n使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。\n\n```\np5 := person{\n    name: \"pprof.cn\",\n    city: \"北京\",\n    age:  18,\n}\nfmt.Printf(\"p5=%#v\\n\", p5) //p5=main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n也可以对结构体指针进行键值对初始化，例如：\n\n```\np6 := &person{\n    name: \"pprof.cn\",\n    city: \"北京\",\n    age:  18,\n}\nfmt.Printf(\"p6=%#v\\n\", p6) //p6=&main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。\n\n```\np7 := &person{\n    city: \"北京\",\n}\nfmt.Printf(\"p7=%#v\\n\", p7) //p7=&main.person{name:\"\", city:\"北京\", age:0}\n```\n\n###  使用值的列表初始化\n\n初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：\n\n```\np8 := &person{\n    \"pprof.cn\",\n    \"北京\",\n    18,\n}\nfmt.Printf(\"p8=%#v\\n\", p8) //p8=&main.person{name:\"pprof.cn\", city:\"北京\", age:18}\n```\n\n使用这种格式初始化时，需要注意：\n\n```\n    1.必须初始化结构体的所有字段。\n    2.初始值的填充顺序必须与字段在结构体中的声明顺序一致。\n    3.该方式不能和键值初始化方式混用。\n```\n\n### 结构体内存布局\n\n```\ntype test struct {\n    a int8\n    b int8\n    c int8\n    d int8\n}\nn := test{\n    1, 2, 3, 4,\n}\nfmt.Printf(\"n.a %p\\n\", &n.a)\nfmt.Printf(\"n.b %p\\n\", &n.b)\nfmt.Printf(\"n.c %p\\n\", &n.c)\nfmt.Printf(\"n.d %p\\n\", &n.d)\n```\n\n输出：\n\n```\n    n.a 0xc0000a0060\n    n.b 0xc0000a0061\n    n.c 0xc0000a0062\n    n.d 0xc0000a0063\n```\n\n### 面试题\n\n```\ntype student struct {\n    name string\n    age  int\n}\n\nfunc main() {\n    m := make(map[string]*student)\n    stus := []student{\n        {name: \"pprof.cn\", age: 18},\n        {name: \"测试\", age: 23},\n        {name: \"博客\", age: 28},\n    }\n\n    for _, stu := range stus {\n        m[stu.name] = &stu\n    }\n    for k, v := range m {\n        fmt.Println(k, \"=>\", v.name)\n    }\n}\n```\n\n###  构造函数\n\nGo语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。\n\n```\nfunc newPerson(name, city string, age int8) *person {\n    return &person{\n        name: name,\n        city: city,\n        age:  age,\n    }\n}\n```\n\n调用构造函数\n\n```\np9 := newPerson(\"pprof.cn\", \"测试\", 90)\nfmt.Printf(\"%#v\\n\", p9)\n```\n\n### 方法和接收者\n\nGo语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。接收者的概念就类似于其他语言中的this或者 self。\n\n方法的定义格式如下：\n\n```\n    func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {\n        函数体\n    }\n```\n\n其中，\n\n```\n    1.接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名的第一个小写字母，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。\n    2.接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。\n    3.方法名、参数列表、返回参数：具体格式与函数定义相同。\n```\n\n举个例子：\n\n```\n//Person 结构体\ntype Person struct {\n    name string\n    age  int8\n}\n\n//NewPerson 构造函数\nfunc NewPerson(name string, age int8) *Person {\n    return &Person{\n        name: name,\n        age:  age,\n    }\n}\n\n//Dream Person做梦的方法\nfunc (p Person) Dream() {\n    fmt.Printf(\"%s的梦想是学好Go语言！\\n\", p.name)\n}\n\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    p1.Dream()\n}\n```\n\n方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。\n\n### 指针类型的接收者\n\n指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。 例如我们为Person添加一个SetAge方法，来修改实例变量的年龄。\n\n```\n    // SetAge 设置p的年龄\n    // 使用指针接收者\n    func (p *Person) SetAge(newAge int8) {\n        p.age = newAge\n    }\n```\n\n调用该方法：\n\n```\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    fmt.Println(p1.age) // 25\n    p1.SetAge(30)\n    fmt.Println(p1.age) // 30\n}\n```\n\n### 值类型的接收者\n\n当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。\n\n```\n// SetAge2 设置p的年龄\n// 使用值接收者\nfunc (p Person) SetAge2(newAge int8) {\n    p.age = newAge\n}\n\nfunc main() {\n    p1 := NewPerson(\"测试\", 25)\n    p1.Dream()\n    fmt.Println(p1.age) // 25\n    p1.SetAge2(30) // (*p1).SetAge2(30)\n    fmt.Println(p1.age) // 25\n}\n```\n\n### 什么时候应该使用指针类型接收者\n\n```\n    1.需要修改接收者中的值\n    2.接收者是拷贝代价比较大的大对象\n    3.保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。\n```\n\n### 任意类型添加方法\n\n在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的int类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。\n\n```\n//MyInt 将int定义为自定义MyInt类型\ntype MyInt int\n\n//SayHello 为MyInt添加一个SayHello的方法\nfunc (m MyInt) SayHello() {\n    fmt.Println(\"Hello, 我是一个int。\")\n}\nfunc main() {\n    var m1 MyInt\n    m1.SayHello() //Hello, 我是一个int。\n    m1 = 100\n    fmt.Printf(\"%#v  %T\\n\", m1, m1) //100  main.MyInt\n}\n```\n\n注意事项： 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。\n\n### 结构体的匿名字段\n\n结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。\n\n```\n//Person 结构体Person类型\ntype Person struct {\n    string\n    int\n}\n\nfunc main() {\n    p1 := Person{\n        \"pprof.cn\",\n        18,\n    }\n    fmt.Printf(\"%#v\\n\", p1)        //main.Person{string:\"pprof.cn\", int:18}\n    fmt.Println(p1.string, p1.int) //pprof.cn 18\n}\n```\n\n匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\n\n### 嵌套结构体\n\n一个结构体中可以嵌套包含另一个结构体或结构体指针。\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province string\n    City     string\n}\n\n//User 用户结构体\ntype User struct {\n    Name    string\n    Gender  string\n    Address Address\n}\n\nfunc main() {\n    user1 := User{\n        Name:   \"pprof\",\n        Gender: \"女\",\n        Address: Address{\n            Province: \"黑龙江\",\n            City:     \"哈尔滨\",\n        },\n    }\n    fmt.Printf(\"user1=%#v\\n\", user1)//user1=main.User{Name:\"pprof\", Gender:\"女\", Address:main.Address{Province:\"黑龙江\", City:\"哈尔滨\"}}\n}\n```\n\n### 嵌套匿名结构体\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province string\n    City     string\n}\n\n//User 用户结构体\ntype User struct {\n    Name    string\n    Gender  string\n    Address //匿名结构体\n}\n\nfunc main() {\n    var user2 User\n    user2.Name = \"pprof\"\n    user2.Gender = \"女\"\n    user2.Address.Province = \"黑龙江\"    //通过匿名结构体.字段名访问\n    user2.City = \"哈尔滨\"                //直接访问匿名结构体的字段名\n    fmt.Printf(\"user2=%#v\\n\", user2) //user2=main.User{Name:\"pprof\", Gender:\"女\", Address:main.Address{Province:\"黑龙江\", City:\"哈尔滨\"}}\n}\n```\n\n当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。\n\n### 嵌套结构体的字段名冲突\n\n嵌套结构体内部可能存在相同的字段名。这个时候为了避免歧义需要指定具体的内嵌结构体的字段。\n\n```\n//Address 地址结构体\ntype Address struct {\n    Province   string\n    City       string\n    CreateTime string\n}\n\n//Email 邮箱结构体\ntype Email struct {\n    Account    string\n    CreateTime string\n}\n\n//User 用户结构体\ntype User struct {\n    Name   string\n    Gender string\n    Address\n    Email\n}\n\nfunc main() {\n    var user3 User\n    user3.Name = \"pprof\"\n    user3.Gender = \"女\"\n    // user3.CreateTime = \"2019\" //ambiguous selector user3.CreateTime\n    user3.Address.CreateTime = \"2000\" //指定Address结构体中的CreateTime\n    user3.Email.CreateTime = \"2000\"   //指定Email结构体中的CreateTime\n}\n```\n\n### 结构体的“继承”\n\nGo语言中使用结构体也可以实现其他编程语言中面向对象的继承。\n\n```\n//Animal 动物\ntype Animal struct {\n    name string\n}\n\nfunc (a *Animal) move() {\n    fmt.Printf(\"%s会动！\\n\", a.name)\n}\n\n//Dog 狗\ntype Dog struct {\n    Feet    int8\n    *Animal //通过嵌套匿名结构体实现继承\n}\n\nfunc (d *Dog) wang() {\n    fmt.Printf(\"%s会汪汪汪~\\n\", d.name)\n}\n\nfunc main() {\n    d1 := &Dog{\n        Feet: 4,\n        Animal: &Animal{ //注意嵌套的是结构体指针\n            name: \"乐乐\",\n        },\n    }\n    d1.wang() //乐乐会汪汪汪~\n    d1.move() //乐乐会动！\n}\n```\n\n### 结构体字段的可见性\n\n结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。\n\n### 结构体与JSON序列化\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号\"\"包裹，使用冒号:分隔，然后紧接着值；多个键值之间使用英文,分隔。\n\n```\n//Student 学生\ntype Student struct {\n    ID     int\n    Gender string\n    Name   string\n}\n\n//Class 班级\ntype Class struct {\n    Title    string\n    Students []*Student\n}\n\nfunc main() {\n    c := &Class{\n        Title:    \"101\",\n        Students: make([]*Student, 0, 200),\n    }\n    for i := 0; i < 10; i++ {\n        stu := &Student{\n            Name:   fmt.Sprintf(\"stu%02d\", i),\n            Gender: \"男\",\n            ID:     i,\n        }\n        c.Students = append(c.Students, stu)\n    }\n    //JSON序列化：结构体-->JSON格式的字符串\n    data, err := json.Marshal(c)\n    if err != nil {\n        fmt.Println(\"json marshal failed\")\n        return\n    }\n    fmt.Printf(\"json:%s\\n\", data)\n    //JSON反序列化：JSON格式的字符串-->结构体\n    str := `{\"Title\":\"101\",\"Students\":[{\"ID\":0,\"Gender\":\"男\",\"Name\":\"stu00\"},{\"ID\":1,\"Gender\":\"男\",\"Name\":\"stu01\"},{\"ID\":2,\"Gender\":\"男\",\"Name\":\"stu02\"},{\"ID\":3,\"Gender\":\"男\",\"Name\":\"stu03\"},{\"ID\":4,\"Gender\":\"男\",\"Name\":\"stu04\"},{\"ID\":5,\"Gender\":\"男\",\"Name\":\"stu05\"},{\"ID\":6,\"Gender\":\"男\",\"Name\":\"stu06\"},{\"ID\":7,\"Gender\":\"男\",\"Name\":\"stu07\"},{\"ID\":8,\"Gender\":\"男\",\"Name\":\"stu08\"},{\"ID\":9,\"Gender\":\"男\",\"Name\":\"stu09\"}]}`\n    c1 := &Class{}\n    err = json.Unmarshal([]byte(str), c1)\n    if err != nil {\n        fmt.Println(\"json unmarshal failed!\")\n        return\n    }\n    fmt.Printf(\"%#v\\n\", c1)\n}\n```\n\n### 结构体标签（Tag）\n\nTag是结构体的元信息，可以在运行的时候通过反射的机制读取出来。\n\nTag在结构体字段的后方定义，由一对反引号包裹起来，具体的格式如下：\n\n```\n    `key1:\"value1\" key2:\"value2\"`\n```\n\n结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 注意事项： 为结构体编写Tag时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。\n\n例如我们为Student结构体的每个字段定义json序列化时使用的Tag：\n\n```\n//Student 学生\ntype Student struct {\n    ID     int    `json:\"id\"` //通过指定tag实现json序列化该字段时的key\n    Gender string //json序列化是默认使用字段名作为key\n    name   string //私有不能被json包访问\n}\n\nfunc main() {\n    s1 := Student{\n        ID:     1,\n        Gender: \"女\",\n        name:   \"pprof\",\n    }\n    data, err := json.Marshal(s1)\n    if err != nil {\n        fmt.Println(\"json marshal failed!\")\n        return\n    }\n    fmt.Printf(\"json str:%s\\n\", data) //json str:{\"id\":1,\"Gender\":\"女\"}\n}\n```\n\n### 小练习：\n\n猜一下下列代码运行的结果是什么\n\n```\npackage main\n\nimport \"fmt\"\n\ntype student struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc demo(ce []student) {\n    //切片是引用传递，是可以改变值的\n    ce[1].age = 999\n    // ce = append(ce, student{3, \"xiaowang\", 56})\n    // return ce\n}\nfunc main() {\n    var ce []student  //定义一个切片类型的结构体\n    ce = []student{\n        student{1, \"xiaoming\", 22},\n        student{2, \"xiaozhang\", 33},\n    }\n    fmt.Println(ce)\n    demo(ce)\n    fmt.Println(ce)\n}\n```\n\n### 删除map类型的结构体\n\n```\npackage main\n\nimport \"fmt\"\n\ntype student struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc main() {\n    ce := make(map[int]student)\n    ce[1] = student{1, \"xiaolizi\", 22}\n    ce[2] = student{2, \"wang\", 23}\n    fmt.Println(ce)\n    delete(ce, 2)\n    fmt.Println(ce)\n}\n```","slug":"计算机语言知识库/Go语言基础入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x7z001ji4v18uid9aak","content":"<h1 id=\"Golang-内置类型和函数\"><a href=\"#Golang-内置类型和函数\" class=\"headerlink\" title=\"Golang 内置类型和函数\"></a>Golang 内置类型和函数</h1><h2 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h2><h3 id=\"值类型：\"><a href=\"#值类型：\" class=\"headerlink\" title=\"值类型：\"></a>值类型：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"type\">int</span>(<span class=\"number\">32</span> or <span class=\"number\">64</span>), <span class=\"type\">int8</span>, <span class=\"type\">int16</span>, <span class=\"type\">int32</span>, <span class=\"type\">int64</span></span><br><span class=\"line\"><span class=\"type\">uint</span>(<span class=\"number\">32</span> or <span class=\"number\">64</span>), <span class=\"type\">uint8</span>(<span class=\"type\">byte</span>), <span class=\"type\">uint16</span>, <span class=\"type\">uint32</span>, <span class=\"type\">uint64</span></span><br><span class=\"line\"><span class=\"type\">float32</span>, <span class=\"type\">float64</span></span><br><span class=\"line\"><span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"type\">complex64</span>, <span class=\"type\">complex128</span></span><br><span class=\"line\">array    -- 固定长度的数组</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型：-指针类型\"><a href=\"#引用类型：-指针类型\" class=\"headerlink\" title=\"引用类型：(指针类型)\"></a>引用类型：(指针类型)</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice   -- 序列数组(最常用)</span><br><span class=\"line\"><span class=\"keyword\">map</span>     -- 映射</span><br><span class=\"line\"><span class=\"keyword\">chan</span>    -- 管道</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">append</span>          -- 用来追加元素到数组、slice中,返回修改后的数组、slice</span><br><span class=\"line\"><span class=\"built_in\">close</span>           -- 主要用来关闭channel</span><br><span class=\"line\"><span class=\"built_in\">delete</span>            -- 从<span class=\"keyword\">map</span>中删除key对应的value</span><br><span class=\"line\"><span class=\"built_in\">panic</span>            -- 停止常规的goroutine  （<span class=\"built_in\">panic</span>和<span class=\"built_in\">recover</span>：用来做错误处理）</span><br><span class=\"line\"><span class=\"built_in\">recover</span>         -- 允许程序定义goroutine的<span class=\"built_in\">panic</span>动作</span><br><span class=\"line\"><span class=\"built_in\">imag</span>            -- 返回<span class=\"built_in\">complex</span>的实部   （<span class=\"built_in\">complex</span>、<span class=\"built_in\">real</span> <span class=\"built_in\">imag</span>：用于创建和操作复数）</span><br><span class=\"line\"><span class=\"built_in\">real</span>            -- 返回<span class=\"built_in\">complex</span>的虚部</span><br><span class=\"line\"><span class=\"built_in\">make</span>            -- 用来分配内存，返回Type本身(只能应用于slice, <span class=\"keyword\">map</span>, channel)</span><br><span class=\"line\"><span class=\"built_in\">new</span>                -- 用来分配内存，主要用来分配值类型，比如<span class=\"type\">int</span>、<span class=\"keyword\">struct</span>。返回指向Type的指针</span><br><span class=\"line\"><span class=\"built_in\">cap</span>                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 <span class=\"keyword\">map</span>）</span><br><span class=\"line\"><span class=\"built_in\">copy</span>            -- 用于复制和连接slice，返回复制的数目</span><br><span class=\"line\"><span class=\"built_in\">len</span>                -- 来求长度，比如<span class=\"type\">string</span>、array、slice、<span class=\"keyword\">map</span>、channel ，返回长度</span><br><span class=\"line\"><span class=\"built_in\">print</span>、<span class=\"built_in\">println</span>     -- 底层打印函数，在部署环境中建议使用 fmt 包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置接口error\"><a href=\"#内置接口error\" class=\"headerlink\" title=\"内置接口error\"></a>内置接口error</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123; <span class=\"comment\">//只要实现了Error()函数，返回值为String的都实现了err接口</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Error()    String</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Init-函数和-main-函数\"><a href=\"#2-Init-函数和-main-函数\" class=\"headerlink\" title=\"2. Init 函数和 main 函数\"></a>2. Init 函数和 main 函数</h1><h2 id=\"init-函数\"><a href=\"#init-函数\" class=\"headerlink\" title=\"init 函数\"></a>init 函数</h2><p>go语言中<code>init</code>函数用于包<code>(package)</code>的初始化，该函数是go语言的一个重要特性。</p>\n<p>有下面的特征：</p>\n<ol>\n<li><p>init 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等</p>\n</li>\n<li><p>每个包可以拥有多个 init 函数</p>\n</li>\n<li><p>包的每个源文件也可以拥有多个 init 函数</p>\n</li>\n<li><p>同一个包中多个 init 函数的执行顺序 go 语言没有明确的定义(说明)</p>\n</li>\n<li><p>不同包的 init 函数按照包导入的依赖关系决定该初始化函数的执行顺序</p>\n</li>\n<li><p>init 函数不能被其他函数调用，而是在 main 函数执行之前，自动被调用</p>\n</li>\n</ol>\n<h2 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go语言程序的默认入口函数(主函数)：func main()</span><br><span class=\"line\">函数体用｛｝一对括号包裹。</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    //函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"init函数和main函数的异同\"><a href=\"#init函数和main函数的异同\" class=\"headerlink\" title=\"init函数和main函数的异同\"></a>init函数和main函数的异同</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相同点：</span><br><span class=\"line\">    两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。</span><br><span class=\"line\">不同点：</span><br><span class=\"line\">    init可以应用于任意包中，且可以重复定义多个。</span><br><span class=\"line\">    main函数只能用于main包中，且只能定义一个。</span><br></pre></td></tr></table></figure>\n\n<p>两个函数的执行顺序：</p>\n<p>对同一个go文件的<code>init()</code>调用顺序是从上到下的。</p>\n<p>对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的<code>init()</code>函数。</p>\n<p>对于不同的<code>package</code>，如果不相互依赖的话，按照main包中”先<code>import</code>的后调用”的顺序调用其包中的<code>init()</code>，如果<code>package</code>存在依赖，则先调用最早被依赖的<code>package</code>中的<code>init()</code>，最后调用<code>main</code>函数。</p>\n<p>如果 <code>init</code> 函数中使用了 <code>println()</code> 或者 <code>print()</code> 你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><p>假如你已安装了golang环境，你可以在命令行执行go命令查看相关的Go语言命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">go</span></span><br><span class=\"line\">Go is a tool for managing Go source code.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    go command [arguments]</span><br><span class=\"line\"></span><br><span class=\"line\">The commands are:</span><br><span class=\"line\"></span><br><span class=\"line\">    build       compile packages and dependencies</span><br><span class=\"line\">    clean       remove object files</span><br><span class=\"line\">    doc         show documentation for package or symbol</span><br><span class=\"line\">    env         print Go environment information</span><br><span class=\"line\">    bug         start a bug report</span><br><span class=\"line\">    fix         run go tool fix on packages</span><br><span class=\"line\">    fmt         run gofmt on package sources</span><br><span class=\"line\">    generate    generate Go files by processing source</span><br><span class=\"line\">    get         download and install packages and dependencies</span><br><span class=\"line\">    install     compile and install packages and dependencies</span><br><span class=\"line\">    list        list packages</span><br><span class=\"line\">    run         compile and run Go program</span><br><span class=\"line\">    test        test packages</span><br><span class=\"line\">    tool        run specified go tool</span><br><span class=\"line\">    version     print Go version</span><br><span class=\"line\">    vet         run go tool vet on packages</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;go help [command]&quot; for more information about a command.</span><br><span class=\"line\"></span><br><span class=\"line\">Additional help topics:</span><br><span class=\"line\"></span><br><span class=\"line\">    c           calling between Go and C</span><br><span class=\"line\">    buildmode   description of build modes</span><br><span class=\"line\">    filetype    file types</span><br><span class=\"line\">    gopath      GOPATH environment variable</span><br><span class=\"line\">    environment environment variables</span><br><span class=\"line\">    importpath  import path syntax</span><br><span class=\"line\">    packages    description of package lists</span><br><span class=\"line\">    testflag    description of testing flags</span><br><span class=\"line\">    testfunc    description of testing functions</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;go help [topic]&quot; for more information about that topic.</span><br></pre></td></tr></table></figure>\n\n<p>go env用于打印Go语言的环境信息。</p>\n<p>go run命令可以编译并运行命令源码文件。</p>\n<p>go get可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。</p>\n<p>go build命令用于编译我们指定的源码文件或代码包以及它们的依赖包。</p>\n<p>go install用于编译并安装指定的代码包及它们的依赖包。</p>\n<p>go clean命令会删除掉执行其它命令时产生的一些文件和目录。</p>\n<p>go doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p>\n<p>go test命令用于对Go语言编写的程序进行测试。</p>\n<p>go list命令的作用是列出指定的代码包的信息。</p>\n<p>go fix会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。</p>\n<p>go vet是一个用于检查Go语言源码中静态错误的简单工具。</p>\n<p>go tool pprof命令来交互式的访问概要文件的内容。</p>\n<h1 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量的来历\"><a href=\"#变量的来历\" class=\"headerlink\" title=\"变量的来历\"></a>变量的来历</h3><p>程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><p>变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>\n<p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<h3 id=\"标准声明\"><a href=\"#标准声明\" class=\"headerlink\" title=\"标准声明\"></a>标准声明</h3><p>Go语言的变量声明格式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure>\n\n<p>变量声明以关键字<code>var</code>开头，变量类型放在变量的后面，行尾无需分号。 举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isOk <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"批量声明\"><a href=\"#批量声明\" class=\"headerlink\" title=\"批量声明\"></a>批量声明</h3><p>每声明一个变量就需要写<code>var</code>关键字会比较繁琐，go语言中还支持批量变量声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">    a <span class=\"type\">string</span></span><br><span class=\"line\">    b <span class=\"type\">int</span></span><br><span class=\"line\">    c <span class=\"type\">bool</span></span><br><span class=\"line\">    d <span class=\"type\">float32</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的初始化\"><a href=\"#变量的初始化\" class=\"headerlink\" title=\"变量的初始化\"></a>变量的初始化</h3><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p>\n<p>当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span> = <span class=\"string\">&quot;pprof.cn&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sex <span class=\"type\">int</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者一次初始化多个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name, sex = <span class=\"string\">&quot;pprof.cn&quot;</span>, <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h4><p>有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;pprof.cn&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sex = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"短变量声明\"><a href=\"#短变量声明\" class=\"headerlink\" title=\"短变量声明\"></a>短变量声明</h4><p>在函数内部，可以使用更简略的 :&#x3D; 方式声明并初始化变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 全局变量m</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    n := <span class=\"number\">10</span></span><br><span class=\"line\">    m := <span class=\"number\">200</span> <span class=\"comment\">// 此处声明局部变量m</span></span><br><span class=\"line\">    fmt.Println(m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匿名变量\"><a href=\"#匿名变量\" class=\"headerlink\" title=\"匿名变量\"></a>匿名变量</h4><p>在使用多重赋值时，如果想要忽略某个值，可以使用<code>匿名变量（anonymous variable）</code>。 匿名变量用一个下划线_表示，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> (<span class=\"type\">int</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>, <span class=\"string\">&quot;Q1mi&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x, _ := foo()</span><br><span class=\"line\">    _, y := foo()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x=&quot;</span>, x)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;y=&quot;</span>, y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。)</p>\n<p>注意事项：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数外的每个语句都必须以关键字开始（<span class=\"keyword\">var</span>、<span class=\"keyword\">const</span>、<span class=\"function\"><span class=\"keyword\">func</span>等）</span></span><br><span class=\"line\"></span><br><span class=\"line\">:=不能使用在函数外。</span><br><span class=\"line\"></span><br><span class=\"line\">_多用于占位，表示忽略值。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把<code>var</code>换成了<code>const</code>，常量在定义的时候必须赋值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"number\">2.7182</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了<code>pi</code>和<code>e</code>这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。</p>\n<p>多个常量也可以一起声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\">    e = <span class=\"number\">2.7182</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>const</code>同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    n1 = <span class=\"number\">100</span></span><br><span class=\"line\">    n2</span><br><span class=\"line\">    n3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>上面示例中，常量<code>n1、n2、n3</code>的值都是<code>100</code>。</p>\n<h3 id=\"iota\"><a href=\"#iota\" class=\"headerlink\" title=\"iota\"></a>iota</h3><p><code>iota</code>是<code>go</code>语言的常量计数器，只能在常量的表达式中使用。 <code>iota</code>在<code>const</code>关键字出现时将被重置为<code>0</code>。<code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次(<code>iota</code>可理解为<code>const</code>语句块中的行索引)。 使用<code>iota</code>能简化定义，在定义枚举时很有用。</p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2        <span class=\"comment\">//1</span></span><br><span class=\"line\">        n3        <span class=\"comment\">//2</span></span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"几个常见的iota示例\"><a href=\"#几个常见的iota示例\" class=\"headerlink\" title=\"几个常见的iota示例:\"></a>几个常见的iota示例:</h3><p>使用_跳过某些值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2        <span class=\"comment\">//1</span></span><br><span class=\"line\">        _</span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p><code>iota</code>声明中间插队</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2 = <span class=\"number\">100</span>  <span class=\"comment\">//100</span></span><br><span class=\"line\">        n3 = <span class=\"literal\">iota</span> <span class=\"comment\">//2</span></span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"keyword\">const</span> n5 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>定义数量级 （这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将<code>1</code>的二进制表示向左移<code>10</code>位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的<code>1024</code>。同理<code>2&lt;&lt;2</code>表示将<code>2</code>的二进制表示向左移<code>2</code>位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的<code>8</code>。）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        _  = <span class=\"literal\">iota</span></span><br><span class=\"line\">        KB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        MB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        GB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        TB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        PB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>多个<code>iota</code>定义在一行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        a, b = <span class=\"literal\">iota</span> + <span class=\"number\">1</span>, <span class=\"literal\">iota</span> + <span class=\"number\">2</span> <span class=\"comment\">//1,2</span></span><br><span class=\"line\">        c, d                      <span class=\"comment\">//2,3</span></span><br><span class=\"line\">        e, f                      <span class=\"comment\">//3,4</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h1><h2 id=\"基本类型介绍\"><a href=\"#基本类型介绍\" class=\"headerlink\" title=\"基本类型介绍\"></a>基本类型介绍</h2><p>Golang 更明确的数字类型命名，支持 Unicode，支持常用数据结构。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>长度(字节)</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool</td>\n<td>1</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1</td>\n<td>0</td>\n<td>uint8</td>\n</tr>\n<tr>\n<td>rune</td>\n<td>4</td>\n<td>0</td>\n<td>Unicode Code Point, int32</td>\n</tr>\n<tr>\n<td>int, uint</td>\n<td>4或8</td>\n<td>0</td>\n<td>32 或 64 位</td>\n</tr>\n<tr>\n<td>int8, uint8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127, 0 ~ 255，byte是uint8 的别名</td>\n</tr>\n<tr>\n<td>int16, uint16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767, 0 ~ 65535</td>\n</tr>\n<tr>\n<td>int32, uint32</td>\n<td>4</td>\n<td>0</td>\n<td>-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td>\n</tr>\n<tr>\n<td>int64, uint64</td>\n<td>8</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>float32</td>\n<td>4</td>\n<td>0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>float64</td>\n<td>8</td>\n<td>0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>complex64</td>\n<td>8</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>complex128</td>\n<td>16</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>4或8</td>\n<td></td>\n<td>以存储指针的 uint32 或 uint64 整数</td>\n</tr>\n<tr>\n<td>array</td>\n<td></td>\n<td></td>\n<td>值类型</td>\n</tr>\n<tr>\n<td>struct</td>\n<td></td>\n<td></td>\n<td>值类型</td>\n</tr>\n<tr>\n<td>string</td>\n<td></td>\n<td>“”</td>\n<td>UTF-8 字符串</td>\n</tr>\n<tr>\n<td>slice</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>map</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>channel</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>interface</td>\n<td></td>\n<td>nil</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>function</td>\n<td></td>\n<td>nil</td>\n<td>函数</td>\n</tr>\n</tbody></table>\n<p>支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b, c, d := <span class=\"number\">071</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">1e9</span>, math.MinInt16</span><br></pre></td></tr></table></figure>\n\n<p>空指针值 nil，而非C&#x2F;C++ NULL。</p>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><p>整型分为以下两个大类： 按长度分为：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>对应的无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code></p>\n<p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</p>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准： <code>float32</code> 的浮点数的最大范围约为<code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。 <code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p>\n<h3 id=\"复数\"><a href=\"#复数\" class=\"headerlink\" title=\"复数\"></a>复数</h3><p><code>complex64</code>和<code>complex128</code></p>\n<p>复数有实部和虚部，<code>complex64</code>的实部和虚部为32位，<code>complex128</code>的实部和虚部为64位。</p>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：</span><br><span class=\"line\"></span><br><span class=\"line\">布尔类型变量的默认值为<span class=\"literal\">false</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">Go 语言中不允许将整型强制转换为布尔型.</span><br><span class=\"line\"></span><br><span class=\"line\">布尔型无法参与数值运算，也无法与其他类型进行转换。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型<code>（int、bool、float32、float64 等）</code>一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(“)中的内容，可以在Go语言的源码中直接添加非<code>ASCII</code>码字符，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s2 := <span class=\"string\">&quot;你好&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串转义符\"><a href=\"#字符串转义符\" class=\"headerlink\" title=\"字符串转义符\"></a>字符串转义符</h3><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\r</td>\n<td>回车符（返回行首）</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符（直接跳到下一行的同列位置）</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>|反斜杠</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;str := \\&quot;c:\\\\pprof\\\\main.exe\\&quot;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h3><p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">第二行</span></span><br><span class=\"line\"><span class=\"string\">第三行</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">fmt.Println(s1)</span><br></pre></td></tr></table></figure>\n\n<p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>\n<h3 id=\"字符串的常用操作\"><a href=\"#字符串的常用操作\" class=\"headerlink\" title=\"字符串的常用操作\"></a>字符串的常用操作</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(str)</td>\n<td>求长度</td>\n</tr>\n<tr>\n<td>+或fmt.Sprintf</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>strings.Split</td>\n<td>分割</td>\n</tr>\n<tr>\n<td>strings.Contains</td>\n<td>判断是否包含</td>\n</tr>\n<tr>\n<td>strings.HasPrefix,strings.HasSuffix</td>\n<td>前缀&#x2F;后缀判断</td>\n</tr>\n<tr>\n<td>strings.Index(),strings.LastIndex()</td>\n<td>子串出现的位置</td>\n</tr>\n<tr>\n<td>strings.Join(a[]string, sep string)</td>\n<td>join操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"byte和rune类型\"><a href=\"#byte和rune类型\" class=\"headerlink\" title=\"byte和rune类型\"></a>byte和rune类型</h3><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a := <span class=\"string\">&#x27;中&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b := <span class=\"string\">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Go 语言的字符有以下两种：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8</span>类型，或者叫 <span class=\"type\">byte</span> 型，代表了ASCII码的一个字符。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">rune</span>类型，代表一个 UTF<span class=\"number\">-8</span>字符。</span><br></pre></td></tr></table></figure>\n\n<p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。 Go 使用了特殊的 <code>rune</code> 类型来处理 <code>Unicode</code>，让基于 <code>Unicode</code>的文本处理更为方便，也可以使用 <code>byte</code> 型进行默认字符串处理，性能和扩展性都有照顾</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">traversalString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"string\">&quot;pprof.cn博客&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123; <span class=\"comment\">//byte</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%v(%c) &quot;</span>, s[i], s[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> s &#123; <span class=\"comment\">//rune</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%v(%c) &quot;</span>, r, r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">112</span>(p) <span class=\"number\">112</span>(p) <span class=\"number\">114</span>(r) <span class=\"number\">111</span>(o) <span class=\"number\">102</span>(f) <span class=\"number\">46</span>(.) <span class=\"number\">99</span>(c) <span class=\"number\">110</span>(n) <span class=\"number\">229</span>(å) <span class=\"number\">141</span>() <span class=\"number\">154</span>() <span class=\"number\">229</span>(å) <span class=\"number\">174</span>(®) <span class=\"number\">162</span>(¢)</span><br><span class=\"line\"><span class=\"number\">112</span>(p) <span class=\"number\">112</span>(p) <span class=\"number\">114</span>(r) <span class=\"number\">111</span>(o) <span class=\"number\">102</span>(f) <span class=\"number\">46</span>(.) <span class=\"number\">99</span>(c) <span class=\"number\">110</span>(n) <span class=\"number\">21338</span>(博) <span class=\"number\">23458</span>(客)</span><br></pre></td></tr></table></figure>\n\n<p>因为UTF8编码下一个中文汉字由<code>3~4</code>个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>\n<p>字符串底层是一个byte数组，所以可以和[]byte类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>\n<h3 id=\"修改字符串\"><a href=\"#修改字符串\" class=\"headerlink\" title=\"修改字符串\"></a>修改字符串</h3><p>要修改字符串，需要先将其转换成<code>[]rune或[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s1 := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 强制类型转换</span></span><br><span class=\"line\">    byteS1 := []<span class=\"type\">byte</span>(s1)</span><br><span class=\"line\">    byteS1[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;H&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"type\">string</span>(byteS1))</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 := <span class=\"string\">&quot;博客&quot;</span></span><br><span class=\"line\">    runeS2 := []<span class=\"type\">rune</span>(s2)</span><br><span class=\"line\">    runeS2[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;狗&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"type\">string</span>(runeS2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p>\n<p>强制类型转换的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(表达式)</span><br></pre></td></tr></table></figure>\n\n<p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p>\n<p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrtDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a, b = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"comment\">// math.Sqrt()接收的参数是float64类型，需要强制转换</span></span><br><span class=\"line\">    c = <span class=\"type\">int</span>(math.Sqrt(<span class=\"type\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">    fmt.Println(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array\"></a>数组 Array</h1><p>Golang Array和以往认知的数组有很大不同。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 数组：是同一种数据类型的固定长度的序列。</span><br><span class=\"line\"><span class=\"number\">2.</span> 数组定义：<span class=\"keyword\">var</span> a [<span class=\"built_in\">len</span>]<span class=\"type\">int</span>，比如：<span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"type\">int</span>，数组长度必须是常量，且是类型的组成部分。一旦定义，长度不能变。</span><br><span class=\"line\"><span class=\"number\">3.</span> 长度是数组类型的一部分，因此，<span class=\"keyword\">var</span> a[<span class=\"number\">5</span>] <span class=\"type\">int</span>和<span class=\"keyword\">var</span> a[<span class=\"number\">10</span>]<span class=\"type\">int</span>是不同的类型。</span><br><span class=\"line\"><span class=\"number\">4.</span> 数组可以通过下标进行访问，下标是从<span class=\"number\">0</span>开始，最后一个元素下标是：<span class=\"built_in\">len</span><span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> index, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">5.</span> 访问越界，如果下标在数组合法范围之外，则触发访问越界，会<span class=\"built_in\">panic</span></span><br><span class=\"line\"><span class=\"number\">6.</span> 数组是值类型，赋值和传参会复制整个数组，而不是指针。因此改变副本的值，不会改变本身的值。</span><br><span class=\"line\"><span class=\"number\">7.</span>支持 <span class=\"string\">&quot;==&quot;</span>、<span class=\"string\">&quot;!=&quot;</span> 操作符，因为内存总是被初始化过的。</span><br><span class=\"line\"><span class=\"number\">8.</span>指针数组 [n]*T，数组指针 *[n]T。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组初始化：\"><a href=\"#数组初始化：\" class=\"headerlink\" title=\"数组初始化：\"></a>数组初始化：</h3><h4 id=\"一维数组：\"><a href=\"#一维数组：\" class=\"headerlink\" title=\"一维数组：\"></a>一维数组：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局：</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>]<span class=\"type\">int</span> = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"type\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">4</span>: <span class=\"string\">&quot;tom&quot;</span>&#125;</span><br><span class=\"line\">局部：</span><br><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;           <span class=\"comment\">// 未初始化元素值为 0。</span></span><br><span class=\"line\">b := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;   <span class=\"comment\">// 通过初始化值确定数组长度。</span></span><br><span class=\"line\">c := [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">4</span>: <span class=\"number\">200</span>&#125; <span class=\"comment\">// 使用索引号初始化元素。</span></span><br><span class=\"line\">d := [...]<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age  <span class=\"type\">uint8</span></span><br><span class=\"line\">&#125;&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;user1&quot;</span>, <span class=\"number\">10</span>&#125;, <span class=\"comment\">// 可省略元素类型。</span></span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;user2&quot;</span>, <span class=\"number\">20</span>&#125;, <span class=\"comment\">// 别忘了最后一行的逗号。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>]<span class=\"type\">int</span> = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"type\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">4</span>: <span class=\"string\">&quot;tom&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;           <span class=\"comment\">// 未初始化元素值为 0。</span></span><br><span class=\"line\">    b := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;   <span class=\"comment\">// 通过初始化值确定数组长度。</span></span><br><span class=\"line\">    c := [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">4</span>: <span class=\"number\">200</span>&#125; <span class=\"comment\">// 使用引号初始化元素。</span></span><br><span class=\"line\">    d := [...]<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        name <span class=\"type\">string</span></span><br><span class=\"line\">        age  <span class=\"type\">uint8</span></span><br><span class=\"line\">    &#125;&#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;user1&quot;</span>, <span class=\"number\">10</span>&#125;, <span class=\"comment\">// 可省略元素类型。</span></span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;user2&quot;</span>, <span class=\"number\">20</span>&#125;, <span class=\"comment\">// 别忘了最后一行的逗号。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(arr0, arr1, arr2, str)</span><br><span class=\"line\">    fmt.Println(a, b, c, d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span>] [   hello world tom]</span><br><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">0</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">100</span> <span class=\"number\">0</span> <span class=\"number\">200</span>] [&#123;user1 <span class=\"number\">10</span>&#125; &#123;user2 <span class=\"number\">20</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\">局部：</span><br><span class=\"line\">a := [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">b := [...][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>&#125;&#125; <span class=\"comment\">// 第 2 纬度不能用 &quot;...&quot;。</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">    b := [...][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>&#125;&#125; <span class=\"comment\">// 第 2 纬度不能用 &quot;...&quot;。</span></span><br><span class=\"line\">    fmt.Println(arr0, arr1)</span><br><span class=\"line\">    fmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]] [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] [<span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]]</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] [<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span>]] [[<span class=\"number\">1</span> <span class=\"number\">1</span>] [<span class=\"number\">2</span> <span class=\"number\">2</span>] [<span class=\"number\">3</span> <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>值拷贝行为会造成性能问题，通常会建议使用 slice，或数组指针。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(x [2]<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;x: %p\\n&quot;</span>, &amp;x)</span><br><span class=\"line\">    x[<span class=\"number\">1</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;a: %p\\n&quot;</span>, &amp;a)</span><br><span class=\"line\"></span><br><span class=\"line\">    test(a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: <span class=\"number\">0xc42007c010</span></span><br><span class=\"line\">x: <span class=\"number\">0xc42007c030</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>内置函数 len 和 cap 都返回数组长度 (元素数量)。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组遍历：\"><a href=\"#多维数组遍历：\" class=\"headerlink\" title=\"多维数组遍历：\"></a>多维数组遍历：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k1, v1 := <span class=\"keyword\">range</span> f &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k2, v2 := <span class=\"keyword\">range</span> v1 &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;(%d,%d)=%d &quot;</span>, k1, k2, v2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>)=<span class=\"number\">1</span> (<span class=\"number\">0</span>,<span class=\"number\">1</span>)=<span class=\"number\">2</span> (<span class=\"number\">0</span>,<span class=\"number\">2</span>)=<span class=\"number\">3</span> </span><br><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)=<span class=\"number\">7</span> (<span class=\"number\">1</span>,<span class=\"number\">1</span>)=<span class=\"number\">8</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>)=<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组拷贝和传参\"><a href=\"#数组拷贝和传参\" class=\"headerlink\" title=\"数组拷贝和传参\"></a>数组拷贝和传参</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printArr</span><span class=\"params\">(arr *[5]<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        fmt.Println(i, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr1 [<span class=\"number\">5</span>]<span class=\"type\">int</span></span><br><span class=\"line\">    printArr(&amp;arr1)</span><br><span class=\"line\">    fmt.Println(arr1)</span><br><span class=\"line\">    arr2 := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">    printArr(&amp;arr2)</span><br><span class=\"line\">    fmt.Println(arr2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Go-语言中的指针\"><a href=\"#Go-语言中的指针\" class=\"headerlink\" title=\"Go 语言中的指针\"></a>Go 语言中的指针</h2><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。类型指针不能进行偏移和运算。Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p>\n<h3 id=\"指针地址和指针类型\"><a href=\"#指针地址和指针类型\" class=\"headerlink\" title=\"指针地址和指针类型\"></a>指针地址和指针类型</h3><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&amp;字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型<code>（int、float、bool、string、array、struct）</code>都有对应的指针类型，如：<code>*int、*int64、*string</code>等。</p>\n<p>取变量指针的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr := &amp;v    // v的类型为T</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v:代表被取地址的变量，类型为T</span><br><span class=\"line\">ptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    b := &amp;a</span><br><span class=\"line\">    fmt.Printf(&quot;a:%d ptr:%p\\n&quot;, a, &amp;a) // a:10 ptr:0xc00001a078</span><br><span class=\"line\">    fmt.Printf(&quot;b:%p type:%T\\n&quot;, b, b) // b:0xc00001a078 type:*int</span><br><span class=\"line\">    fmt.Println(&amp;b)                    // 0xc00000e018</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们来看一下<code>b := &amp;a</code>的图示：</p>\n<p><img src=\"https://www.topgoer.com/static/3.9/1.png\" alt=\"指针\" title=\"指针\"></p>\n<h3 id=\"指针取值\"><a href=\"#指针取值\" class=\"headerlink\" title=\"指针取值\"></a>指针取值</h3><p>在对普通变量使用&amp;操作符取地址后会获得这个变量的指针，然后可以对指针使用<code>*</code>操作，也就是指针取值，代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    //指针取值</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    b := &amp;a // 取变量a的地址，将指针保存到b中</span><br><span class=\"line\">    fmt.Printf(&quot;type of b:%T\\n&quot;, b)</span><br><span class=\"line\">    c := *b // 指针取值（根据指针去内存取值）</span><br><span class=\"line\">    fmt.Printf(&quot;type of c:%T\\n&quot;, c)</span><br><span class=\"line\">    fmt.Printf(&quot;value of c:%v\\n&quot;, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type of b:*int</span><br><span class=\"line\">type of c:int</span><br><span class=\"line\">value of c:10</span><br></pre></td></tr></table></figure>\n\n<p>总结： 取地址操作符&amp;和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>\n<p>变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：\\</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.对变量进行取地址（&amp;）操作，可以获得这个变量的指针变量。</span><br><span class=\"line\">2.指针变量的值是指针地址。</span><br><span class=\"line\">3.对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。</span><br></pre></td></tr></table></figure>\n\n<p>指针传值示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func modify1(x int) &#123;</span><br><span class=\"line\">    x = 100</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func modify2(x *int) &#123;</span><br><span class=\"line\">    *x = 100</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    modify1(a)</span><br><span class=\"line\">    fmt.Println(a) // 10</span><br><span class=\"line\">    modify2(&amp;a)</span><br><span class=\"line\">    fmt.Println(a) // 100</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h3><ul>\n<li>当一个指针被定义后没有分配到任何变量时，它的值为 nil</li>\n<li>空指针的判断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p *string</span><br><span class=\"line\">    fmt.Println(p)</span><br><span class=\"line\">    fmt.Printf(&quot;p的值是%s/n&quot;, p)</span><br><span class=\"line\">    if p != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;非空&quot;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        fmt.Println(&quot;空值&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-4-new和make\"><a href=\"#1-1-4-new和make\" class=\"headerlink\" title=\"1.1.4. new和make\"></a>1.1.4. new和make</h3><p>我们先来看一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a *int</span><br><span class=\"line\">    *a = 100</span><br><span class=\"line\">    fmt.Println(*a)</span><br><span class=\"line\"></span><br><span class=\"line\">    var b map[string]int</span><br><span class=\"line\">    b[&quot;测试&quot;] = 100</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的代码会引发panic，为什么呢？ 在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>new是一个内置的函数，它的函数签名如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func new(Type) *Type</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Type表示类型，new函数只接受一个参数，这个参数是一个类型</span><br><span class=\"line\">2.*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。</span><br></pre></td></tr></table></figure>\n\n<p>new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := new(int)</span><br><span class=\"line\">    b := new(bool)</span><br><span class=\"line\">    fmt.Printf(&quot;%T\\n&quot;, a) // *int</span><br><span class=\"line\">    fmt.Printf(&quot;%T\\n&quot;, b) // *bool</span><br><span class=\"line\">    fmt.Println(*a)       // 0</span><br><span class=\"line\">    fmt.Println(*b)       // false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本节开始的示例代码中<code>var a *int</code>只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a *int</span><br><span class=\"line\">    a = new(int)</span><br><span class=\"line\">    *a = 10</span><br><span class=\"line\">    fmt.Println(*a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>make也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func make(t Type, size ...IntegerType) Type</span><br></pre></td></tr></table></figure>\n\n<p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。这个我们在上一章中都有说明，关于channel我们会在后续的章节详细说明。</p>\n<p>本节开始的示例中<code>var b map[string]int</code>只是声明变量b是一个map类型的变量，需要像下面的示例代码一样使用make函数进行初始化操作之后，才能对其进行键值对赋值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var b map[string]int</span><br><span class=\"line\">    b = make(map[string]int, 10)</span><br><span class=\"line\">    b[&quot;测试&quot;] = 100</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new与make的区别\"><a href=\"#new与make的区别\" class=\"headerlink\" title=\"new与make的区别\"></a>new与make的区别</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.二者都是用来做内存分配的。</span><br><span class=\"line\">2.make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</span><br><span class=\"line\">3.而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针小练习\"><a href=\"#指针小练习\" class=\"headerlink\" title=\"指针小练习\"></a>指针小练习</h3><ul>\n<li>程序定义一个int变量num的地址并打印</li>\n<li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a int</span><br><span class=\"line\">    fmt.Println(&amp;a)</span><br><span class=\"line\">    var p *int</span><br><span class=\"line\">    p = &amp;a</span><br><span class=\"line\">    *p = 20</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p>\n<h2 id=\"类型别名和自定义类型\"><a href=\"#类型别名和自定义类型\" class=\"headerlink\" title=\"类型别名和自定义类型\"></a>类型别名和自定义类型</h2><h3 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h3><p>在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型，Go语言中可以使用type关键字来定义自定义类型。</p>\n<p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将MyInt定义为int类型</span><br><span class=\"line\">type MyInt int</span><br></pre></td></tr></table></figure>\n\n<p>通过Type关键字的定义，MyInt就是一种新的类型，它具有int的特性。</p>\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><p>类型别名是Go1.9版本添加的新功能。</p>\n<p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type TypeAlias = Type</span><br></pre></td></tr></table></figure>\n\n<p>我们之前见过的rune和byte就是类型别名，他们的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type byte = uint8</span><br><span class=\"line\">type rune = int32</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型定义和类型别名的区别\"><a href=\"#类型定义和类型别名的区别\" class=\"headerlink\" title=\"类型定义和类型别名的区别\"></a>类型定义和类型别名的区别</h3><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//类型定义</span><br><span class=\"line\">type NewInt int</span><br><span class=\"line\"></span><br><span class=\"line\">//类型别名</span><br><span class=\"line\">type MyInt = int</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a NewInt</span><br><span class=\"line\">    var b MyInt</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;type of a:%T\\n&quot;, a) //type of a:main.NewInt</span><br><span class=\"line\">    fmt.Printf(&quot;type of b:%T\\n&quot;, b) //type of b:int</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果显示a的类型是main.NewInt，表示main包下定义的NewInt类型。b的类型是int。MyInt类型只会在代码中存在，编译完成时并不会有MyInt类型。</p>\n<h2 id=\"结构体-1\"><a href=\"#结构体-1\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称struct。 也就是我们可以通过struct来定义自己的类型了。</p>\n<p>Go语言中通过struct来实现面向对象。</p>\n<h3 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h3><p>使用type和struct关键字来定义结构体，具体代码格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type 类型名 struct &#123;</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.类型名：标识自定义结构体的名称，在同一个包内不能重复。</span><br><span class=\"line\">2.字段名：表示结构体字段名。结构体中的字段名必须唯一。</span><br><span class=\"line\">3.字段类型：表示结构体字段的具体类型。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子，我们定义一个Person（人）结构体，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样类型的字段也可以写在一行，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person1 struct &#123;</span><br><span class=\"line\">    name, city string</span><br><span class=\"line\">    age        int8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拥有了一个person的自定义类型，它有name、city、age三个字段，分别表示姓名、城市和年龄。这样我们使用这个person结构体就能够很方便的在程序中表示和存储人信息了。</p>\n<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型</p>\n<h3 id=\"结构体实例化\"><a href=\"#结构体实例化\" class=\"headerlink\" title=\"结构体实例化\"></a>结构体实例化</h3><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>\n<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用var关键字声明结构体类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本实例化\"><a href=\"#基本实例化\" class=\"headerlink\" title=\"基本实例化\"></a>基本实例化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p1 person</span><br><span class=\"line\">    p1.name = &quot;pprof.cn&quot;</span><br><span class=\"line\">    p1.city = &quot;北京&quot;</span><br><span class=\"line\">    p1.age = 18</span><br><span class=\"line\">    fmt.Printf(&quot;p1=%v\\n&quot;, p1)  //p1=&#123;pprof.cn 北京 18&#125;</span><br><span class=\"line\">    fmt.Printf(&quot;p1=%#v\\n&quot;, p1) //p1=main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过.来访问结构体的字段（成员变量）,例如p1.name和p1.age等。</p>\n<h2 id=\"匿名结构体\"><a href=\"#匿名结构体\" class=\"headerlink\" title=\"匿名结构体\"></a>匿名结构体</h2><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user struct&#123;Name string; Age int&#125;</span><br><span class=\"line\">    user.Name = &quot;pprof.cn&quot;</span><br><span class=\"line\">    user.Age = 18</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建指针类型结构体\"><a href=\"#创建指针类型结构体\" class=\"headerlink\" title=\"创建指针类型结构体\"></a>创建指针类型结构体</h3><p>我们还可以通过使用new关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p2 = new(person)</span><br><span class=\"line\">fmt.Printf(&quot;%T\\n&quot;, p2)     //*main.person</span><br><span class=\"line\">fmt.Printf(&quot;p2=%#v\\n&quot;, p2) //p2=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从打印的结果中我们可以看出p2是一个结构体指针。</p>\n<p>需要注意的是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p2 = new(person)</span><br><span class=\"line\">p2.name = &quot;测试&quot;</span><br><span class=\"line\">p2.age = 18</span><br><span class=\"line\">p2.city = &quot;北京&quot;</span><br><span class=\"line\">fmt.Printf(&quot;p2=%#v\\n&quot;, p2) //p2=&amp;main.person&#123;name:&quot;测试&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取结构体的地址实例化\"><a href=\"#取结构体的地址实例化\" class=\"headerlink\" title=\"取结构体的地址实例化\"></a>取结构体的地址实例化</h3><p>使用&amp;对结构体进行取地址操作相当于对该结构体类型进行了一次new实例化操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := &amp;person&#123;&#125;</span><br><span class=\"line\">fmt.Printf(&quot;%T\\n&quot;, p3)     //*main.person</span><br><span class=\"line\">fmt.Printf(&quot;p3=%#v\\n&quot;, p3) //p3=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br><span class=\"line\">p3.name = &quot;博客&quot;</span><br><span class=\"line\">p3.age = 30</span><br><span class=\"line\">p3.city = &quot;成都&quot;</span><br><span class=\"line\">fmt.Printf(&quot;p3=%#v\\n&quot;, p3) //p3=&amp;main.person&#123;name:&quot;博客&quot;, city:&quot;成都&quot;, age:30&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p3.name &#x3D; “博客”其实在底层是(*p3).name &#x3D; “博客”，这是Go语言帮我们实现的语法糖。</p>\n<h3 id=\"结构体初始化\"><a href=\"#结构体初始化\" class=\"headerlink\" title=\"结构体初始化\"></a>结构体初始化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p4 person</span><br><span class=\"line\">    fmt.Printf(&quot;p4=%#v\\n&quot;, p4) //p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用键值对初始化\"><a href=\"#使用键值对初始化\" class=\"headerlink\" title=\"使用键值对初始化\"></a>使用键值对初始化</h3><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p5 := person&#123;</span><br><span class=\"line\">    name: &quot;pprof.cn&quot;,</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">    age:  18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p5=%#v\\n&quot;, p5) //p5=main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以对结构体指针进行键值对初始化，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p6 := &amp;person&#123;</span><br><span class=\"line\">    name: &quot;pprof.cn&quot;,</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">    age:  18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p6=%#v\\n&quot;, p6) //p6=&amp;main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p7 := &amp;person&#123;</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p7=%#v\\n&quot;, p7) //p7=&amp;main.person&#123;name:&quot;&quot;, city:&quot;北京&quot;, age:0&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用值的列表初始化\"><a href=\"#使用值的列表初始化\" class=\"headerlink\" title=\"使用值的列表初始化\"></a>使用值的列表初始化</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p8 := &amp;person&#123;</span><br><span class=\"line\">    &quot;pprof.cn&quot;,</span><br><span class=\"line\">    &quot;北京&quot;,</span><br><span class=\"line\">    18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p8=%#v\\n&quot;, p8) //p8=&amp;main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种格式初始化时，需要注意：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.必须初始化结构体的所有字段。</span><br><span class=\"line\">2.初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class=\"line\">3.该方式不能和键值初始化方式混用。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体内存布局\"><a href=\"#结构体内存布局\" class=\"headerlink\" title=\"结构体内存布局\"></a>结构体内存布局</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type test struct &#123;</span><br><span class=\"line\">    a int8</span><br><span class=\"line\">    b int8</span><br><span class=\"line\">    c int8</span><br><span class=\"line\">    d int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n := test&#123;</span><br><span class=\"line\">    1, 2, 3, 4,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;n.a %p\\n&quot;, &amp;n.a)</span><br><span class=\"line\">fmt.Printf(&quot;n.b %p\\n&quot;, &amp;n.b)</span><br><span class=\"line\">fmt.Printf(&quot;n.c %p\\n&quot;, &amp;n.c)</span><br><span class=\"line\">fmt.Printf(&quot;n.d %p\\n&quot;, &amp;n.d)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n.a 0xc0000a0060</span><br><span class=\"line\">n.b 0xc0000a0061</span><br><span class=\"line\">n.c 0xc0000a0062</span><br><span class=\"line\">n.d 0xc0000a0063</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    m := make(map[string]*student)</span><br><span class=\"line\">    stus := []student&#123;</span><br><span class=\"line\">        &#123;name: &quot;pprof.cn&quot;, age: 18&#125;,</span><br><span class=\"line\">        &#123;name: &quot;测试&quot;, age: 23&#125;,</span><br><span class=\"line\">        &#123;name: &quot;博客&quot;, age: 28&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for _, stu := range stus &#123;</span><br><span class=\"line\">        m[stu.name] = &amp;stu</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for k, v := range m &#123;</span><br><span class=\"line\">        fmt.Println(k, &quot;=&gt;&quot;, v.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newPerson(name, city string, age int8) *person &#123;</span><br><span class=\"line\">    return &amp;person&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        city: city,</span><br><span class=\"line\">        age:  age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用构造函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p9 := newPerson(&quot;pprof.cn&quot;, &quot;测试&quot;, 90)</span><br><span class=\"line\">fmt.Printf(&quot;%#v\\n&quot;, p9)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法和接收者\"><a href=\"#方法和接收者\" class=\"headerlink\" title=\"方法和接收者\"></a>方法和接收者</h3><p>Go语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。接收者的概念就类似于其他语言中的this或者 self。</p>\n<p>方法的定义格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名的第一个小写字母，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。</span><br><span class=\"line\">2.接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</span><br><span class=\"line\">3.方法名、参数列表、返回参数：具体格式与函数定义相同。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Person 结构体</span><br><span class=\"line\">type Person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//NewPerson 构造函数</span><br><span class=\"line\">func NewPerson(name string, age int8) *Person &#123;</span><br><span class=\"line\">    return &amp;Person&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age:  age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Dream Person做梦的方法</span><br><span class=\"line\">func (p Person) Dream() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s的梦想是学好Go语言！\\n&quot;, p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    p1.Dream()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>\n<h3 id=\"指针类型的接收者\"><a href=\"#指针类型的接收者\" class=\"headerlink\" title=\"指针类型的接收者\"></a>指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。 例如我们为Person添加一个SetAge方法，来修改实例变量的年龄。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetAge 设置p的年龄</span><br><span class=\"line\">// 使用指针接收者</span><br><span class=\"line\">func (p *Person) SetAge(newAge int8) &#123;</span><br><span class=\"line\">    p.age = newAge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用该方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">    p1.SetAge(30)</span><br><span class=\"line\">    fmt.Println(p1.age) // 30</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型的接收者\"><a href=\"#值类型的接收者\" class=\"headerlink\" title=\"值类型的接收者\"></a>值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetAge2 设置p的年龄</span><br><span class=\"line\">// 使用值接收者</span><br><span class=\"line\">func (p Person) SetAge2(newAge int8) &#123;</span><br><span class=\"line\">    p.age = newAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    p1.Dream()</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">    p1.SetAge2(30) // (*p1).SetAge2(30)</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候应该使用指针类型接收者\"><a href=\"#什么时候应该使用指针类型接收者\" class=\"headerlink\" title=\"什么时候应该使用指针类型接收者\"></a>什么时候应该使用指针类型接收者</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.需要修改接收者中的值</span><br><span class=\"line\">2.接收者是拷贝代价比较大的大对象</span><br><span class=\"line\">3.保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"任意类型添加方法\"><a href=\"#任意类型添加方法\" class=\"headerlink\" title=\"任意类型添加方法\"></a>任意类型添加方法</h3><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的int类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//MyInt 将int定义为自定义MyInt类型</span><br><span class=\"line\">type MyInt int</span><br><span class=\"line\"></span><br><span class=\"line\">//SayHello 为MyInt添加一个SayHello的方法</span><br><span class=\"line\">func (m MyInt) SayHello() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;Hello, 我是一个int。&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var m1 MyInt</span><br><span class=\"line\">    m1.SayHello() //Hello, 我是一个int。</span><br><span class=\"line\">    m1 = 100</span><br><span class=\"line\">    fmt.Printf(&quot;%#v  %T\\n&quot;, m1, m1) //100  main.MyInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意事项： 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</p>\n<h3 id=\"结构体的匿名字段\"><a href=\"#结构体的匿名字段\" class=\"headerlink\" title=\"结构体的匿名字段\"></a>结构体的匿名字段</h3><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Person 结构体Person类型</span><br><span class=\"line\">type Person struct &#123;</span><br><span class=\"line\">    string</span><br><span class=\"line\">    int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := Person&#123;</span><br><span class=\"line\">        &quot;pprof.cn&quot;,</span><br><span class=\"line\">        18,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, p1)        //main.Person&#123;string:&quot;pprof.cn&quot;, int:18&#125;</span><br><span class=\"line\">    fmt.Println(p1.string, p1.int) //pprof.cn 18</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h3 id=\"嵌套结构体\"><a href=\"#嵌套结构体\" class=\"headerlink\" title=\"嵌套结构体\"></a>嵌套结构体</h3><p>一个结构体中可以嵌套包含另一个结构体或结构体指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province string</span><br><span class=\"line\">    City     string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    Gender  string</span><br><span class=\"line\">    Address Address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    user1 := User&#123;</span><br><span class=\"line\">        Name:   &quot;pprof&quot;,</span><br><span class=\"line\">        Gender: &quot;女&quot;,</span><br><span class=\"line\">        Address: Address&#123;</span><br><span class=\"line\">            Province: &quot;黑龙江&quot;,</span><br><span class=\"line\">            City:     &quot;哈尔滨&quot;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;user1=%#v\\n&quot;, user1)//user1=main.User&#123;Name:&quot;pprof&quot;, Gender:&quot;女&quot;, Address:main.Address&#123;Province:&quot;黑龙江&quot;, City:&quot;哈尔滨&quot;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套匿名结构体\"><a href=\"#嵌套匿名结构体\" class=\"headerlink\" title=\"嵌套匿名结构体\"></a>嵌套匿名结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province string</span><br><span class=\"line\">    City     string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    Gender  string</span><br><span class=\"line\">    Address //匿名结构体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user2 User</span><br><span class=\"line\">    user2.Name = &quot;pprof&quot;</span><br><span class=\"line\">    user2.Gender = &quot;女&quot;</span><br><span class=\"line\">    user2.Address.Province = &quot;黑龙江&quot;    //通过匿名结构体.字段名访问</span><br><span class=\"line\">    user2.City = &quot;哈尔滨&quot;                //直接访问匿名结构体的字段名</span><br><span class=\"line\">    fmt.Printf(&quot;user2=%#v\\n&quot;, user2) //user2=main.User&#123;Name:&quot;pprof&quot;, Gender:&quot;女&quot;, Address:main.Address&#123;Province:&quot;黑龙江&quot;, City:&quot;哈尔滨&quot;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。</p>\n<h3 id=\"嵌套结构体的字段名冲突\"><a href=\"#嵌套结构体的字段名冲突\" class=\"headerlink\" title=\"嵌套结构体的字段名冲突\"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。这个时候为了避免歧义需要指定具体的内嵌结构体的字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province   string</span><br><span class=\"line\">    City       string</span><br><span class=\"line\">    CreateTime string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Email 邮箱结构体</span><br><span class=\"line\">type Email struct &#123;</span><br><span class=\"line\">    Account    string</span><br><span class=\"line\">    CreateTime string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name   string</span><br><span class=\"line\">    Gender string</span><br><span class=\"line\">    Address</span><br><span class=\"line\">    Email</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user3 User</span><br><span class=\"line\">    user3.Name = &quot;pprof&quot;</span><br><span class=\"line\">    user3.Gender = &quot;女&quot;</span><br><span class=\"line\">    // user3.CreateTime = &quot;2019&quot; //ambiguous selector user3.CreateTime</span><br><span class=\"line\">    user3.Address.CreateTime = &quot;2000&quot; //指定Address结构体中的CreateTime</span><br><span class=\"line\">    user3.Email.CreateTime = &quot;2000&quot;   //指定Email结构体中的CreateTime</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体的“继承”\"><a href=\"#结构体的“继承”\" class=\"headerlink\" title=\"结构体的“继承”\"></a>结构体的“继承”</h3><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Animal 动物</span><br><span class=\"line\">type Animal struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *Animal) move() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s会动！\\n&quot;, a.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Dog 狗</span><br><span class=\"line\">type Dog struct &#123;</span><br><span class=\"line\">    Feet    int8</span><br><span class=\"line\">    *Animal //通过嵌套匿名结构体实现继承</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (d *Dog) wang() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s会汪汪汪~\\n&quot;, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    d1 := &amp;Dog&#123;</span><br><span class=\"line\">        Feet: 4,</span><br><span class=\"line\">        Animal: &amp;Animal&#123; //注意嵌套的是结构体指针</span><br><span class=\"line\">            name: &quot;乐乐&quot;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d1.wang() //乐乐会汪汪汪~</span><br><span class=\"line\">    d1.move() //乐乐会动！</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体字段的可见性\"><a href=\"#结构体字段的可见性\" class=\"headerlink\" title=\"结构体字段的可见性\"></a>结构体字段的可见性</h3><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>\n<h3 id=\"结构体与JSON序列化\"><a href=\"#结构体与JSON序列化\" class=\"headerlink\" title=\"结构体与JSON序列化\"></a>结构体与JSON序列化</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键&#x2F;值对组合中的键名写在前面并用双引号””包裹，使用冒号:分隔，然后紧接着值；多个键值之间使用英文,分隔。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Student 学生</span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">    ID     int</span><br><span class=\"line\">    Gender string</span><br><span class=\"line\">    Name   string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Class 班级</span><br><span class=\"line\">type Class struct &#123;</span><br><span class=\"line\">    Title    string</span><br><span class=\"line\">    Students []*Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    c := &amp;Class&#123;</span><br><span class=\"line\">        Title:    &quot;101&quot;,</span><br><span class=\"line\">        Students: make([]*Student, 0, 200),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">        stu := &amp;Student&#123;</span><br><span class=\"line\">            Name:   fmt.Sprintf(&quot;stu%02d&quot;, i),</span><br><span class=\"line\">            Gender: &quot;男&quot;,</span><br><span class=\"line\">            ID:     i,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.Students = append(c.Students, stu)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //JSON序列化：结构体--&gt;JSON格式的字符串</span><br><span class=\"line\">    data, err := json.Marshal(c)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json marshal failed&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;json:%s\\n&quot;, data)</span><br><span class=\"line\">    //JSON反序列化：JSON格式的字符串--&gt;结构体</span><br><span class=\"line\">    str := `&#123;&quot;Title&quot;:&quot;101&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu04&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu05&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu06&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu07&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu08&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu09&quot;&#125;]&#125;`</span><br><span class=\"line\">    c1 := &amp;Class&#123;&#125;</span><br><span class=\"line\">    err = json.Unmarshal([]byte(str), c1)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json unmarshal failed!&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, c1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体标签（Tag）\"><a href=\"#结构体标签（Tag）\" class=\"headerlink\" title=\"结构体标签（Tag）\"></a>结构体标签（Tag）</h3><p>Tag是结构体的元信息，可以在运行的时候通过反射的机制读取出来。</p>\n<p>Tag在结构体字段的后方定义，由一对反引号包裹起来，具体的格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`key1:&quot;value1&quot; key2:&quot;value2&quot;`</span><br></pre></td></tr></table></figure>\n\n<p>结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 注意事项： 为结构体编写Tag时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p>\n<p>例如我们为Student结构体的每个字段定义json序列化时使用的Tag：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Student 学生</span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">    ID     int    `json:&quot;id&quot;` //通过指定tag实现json序列化该字段时的key</span><br><span class=\"line\">    Gender string //json序列化是默认使用字段名作为key</span><br><span class=\"line\">    name   string //私有不能被json包访问</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    s1 := Student&#123;</span><br><span class=\"line\">        ID:     1,</span><br><span class=\"line\">        Gender: &quot;女&quot;,</span><br><span class=\"line\">        name:   &quot;pprof&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data, err := json.Marshal(s1)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json marshal failed!&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;json str:%s\\n&quot;, data) //json str:&#123;&quot;id&quot;:1,&quot;Gender&quot;:&quot;女&quot;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小练习：\"><a href=\"#小练习：\" class=\"headerlink\" title=\"小练习：\"></a>小练习：</h3><p>猜一下下列代码运行的结果是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    id   int</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func demo(ce []student) &#123;</span><br><span class=\"line\">    //切片是引用传递，是可以改变值的</span><br><span class=\"line\">    ce[1].age = 999</span><br><span class=\"line\">    // ce = append(ce, student&#123;3, &quot;xiaowang&quot;, 56&#125;)</span><br><span class=\"line\">    // return ce</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var ce []student  //定义一个切片类型的结构体</span><br><span class=\"line\">    ce = []student&#123;</span><br><span class=\"line\">        student&#123;1, &quot;xiaoming&quot;, 22&#125;,</span><br><span class=\"line\">        student&#123;2, &quot;xiaozhang&quot;, 33&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">    demo(ce)</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除map类型的结构体\"><a href=\"#删除map类型的结构体\" class=\"headerlink\" title=\"删除map类型的结构体\"></a>删除map类型的结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    id   int</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    ce := make(map[int]student)</span><br><span class=\"line\">    ce[1] = student&#123;1, &quot;xiaolizi&quot;, 22&#125;</span><br><span class=\"line\">    ce[2] = student&#123;2, &quot;wang&quot;, 23&#125;</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">    delete(ce, 2)</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"Golang-内置类型和函数\"><a href=\"#Golang-内置类型和函数\" class=\"headerlink\" title=\"Golang 内置类型和函数\"></a>Golang 内置类型和函数</h1><h2 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h2><h3 id=\"值类型：\"><a href=\"#值类型：\" class=\"headerlink\" title=\"值类型：\"></a>值类型：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"type\">int</span>(<span class=\"number\">32</span> or <span class=\"number\">64</span>), <span class=\"type\">int8</span>, <span class=\"type\">int16</span>, <span class=\"type\">int32</span>, <span class=\"type\">int64</span></span><br><span class=\"line\"><span class=\"type\">uint</span>(<span class=\"number\">32</span> or <span class=\"number\">64</span>), <span class=\"type\">uint8</span>(<span class=\"type\">byte</span>), <span class=\"type\">uint16</span>, <span class=\"type\">uint32</span>, <span class=\"type\">uint64</span></span><br><span class=\"line\"><span class=\"type\">float32</span>, <span class=\"type\">float64</span></span><br><span class=\"line\"><span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"type\">complex64</span>, <span class=\"type\">complex128</span></span><br><span class=\"line\">array    -- 固定长度的数组</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型：-指针类型\"><a href=\"#引用类型：-指针类型\" class=\"headerlink\" title=\"引用类型：(指针类型)\"></a>引用类型：(指针类型)</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice   -- 序列数组(最常用)</span><br><span class=\"line\"><span class=\"keyword\">map</span>     -- 映射</span><br><span class=\"line\"><span class=\"keyword\">chan</span>    -- 管道</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">append</span>          -- 用来追加元素到数组、slice中,返回修改后的数组、slice</span><br><span class=\"line\"><span class=\"built_in\">close</span>           -- 主要用来关闭channel</span><br><span class=\"line\"><span class=\"built_in\">delete</span>            -- 从<span class=\"keyword\">map</span>中删除key对应的value</span><br><span class=\"line\"><span class=\"built_in\">panic</span>            -- 停止常规的goroutine  （<span class=\"built_in\">panic</span>和<span class=\"built_in\">recover</span>：用来做错误处理）</span><br><span class=\"line\"><span class=\"built_in\">recover</span>         -- 允许程序定义goroutine的<span class=\"built_in\">panic</span>动作</span><br><span class=\"line\"><span class=\"built_in\">imag</span>            -- 返回<span class=\"built_in\">complex</span>的实部   （<span class=\"built_in\">complex</span>、<span class=\"built_in\">real</span> <span class=\"built_in\">imag</span>：用于创建和操作复数）</span><br><span class=\"line\"><span class=\"built_in\">real</span>            -- 返回<span class=\"built_in\">complex</span>的虚部</span><br><span class=\"line\"><span class=\"built_in\">make</span>            -- 用来分配内存，返回Type本身(只能应用于slice, <span class=\"keyword\">map</span>, channel)</span><br><span class=\"line\"><span class=\"built_in\">new</span>                -- 用来分配内存，主要用来分配值类型，比如<span class=\"type\">int</span>、<span class=\"keyword\">struct</span>。返回指向Type的指针</span><br><span class=\"line\"><span class=\"built_in\">cap</span>                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 <span class=\"keyword\">map</span>）</span><br><span class=\"line\"><span class=\"built_in\">copy</span>            -- 用于复制和连接slice，返回复制的数目</span><br><span class=\"line\"><span class=\"built_in\">len</span>                -- 来求长度，比如<span class=\"type\">string</span>、array、slice、<span class=\"keyword\">map</span>、channel ，返回长度</span><br><span class=\"line\"><span class=\"built_in\">print</span>、<span class=\"built_in\">println</span>     -- 底层打印函数，在部署环境中建议使用 fmt 包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置接口error\"><a href=\"#内置接口error\" class=\"headerlink\" title=\"内置接口error\"></a>内置接口error</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123; <span class=\"comment\">//只要实现了Error()函数，返回值为String的都实现了err接口</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Error()    String</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-Init-函数和-main-函数\"><a href=\"#2-Init-函数和-main-函数\" class=\"headerlink\" title=\"2. Init 函数和 main 函数\"></a>2. Init 函数和 main 函数</h1><h2 id=\"init-函数\"><a href=\"#init-函数\" class=\"headerlink\" title=\"init 函数\"></a>init 函数</h2><p>go语言中<code>init</code>函数用于包<code>(package)</code>的初始化，该函数是go语言的一个重要特性。</p>\n<p>有下面的特征：</p>\n<ol>\n<li><p>init 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等</p>\n</li>\n<li><p>每个包可以拥有多个 init 函数</p>\n</li>\n<li><p>包的每个源文件也可以拥有多个 init 函数</p>\n</li>\n<li><p>同一个包中多个 init 函数的执行顺序 go 语言没有明确的定义(说明)</p>\n</li>\n<li><p>不同包的 init 函数按照包导入的依赖关系决定该初始化函数的执行顺序</p>\n</li>\n<li><p>init 函数不能被其他函数调用，而是在 main 函数执行之前，自动被调用</p>\n</li>\n</ol>\n<h2 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go语言程序的默认入口函数(主函数)：func main()</span><br><span class=\"line\">函数体用｛｝一对括号包裹。</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">    //函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"init函数和main函数的异同\"><a href=\"#init函数和main函数的异同\" class=\"headerlink\" title=\"init函数和main函数的异同\"></a>init函数和main函数的异同</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">相同点：</span><br><span class=\"line\">    两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。</span><br><span class=\"line\">不同点：</span><br><span class=\"line\">    init可以应用于任意包中，且可以重复定义多个。</span><br><span class=\"line\">    main函数只能用于main包中，且只能定义一个。</span><br></pre></td></tr></table></figure>\n\n<p>两个函数的执行顺序：</p>\n<p>对同一个go文件的<code>init()</code>调用顺序是从上到下的。</p>\n<p>对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的<code>init()</code>函数。</p>\n<p>对于不同的<code>package</code>，如果不相互依赖的话，按照main包中”先<code>import</code>的后调用”的顺序调用其包中的<code>init()</code>，如果<code>package</code>存在依赖，则先调用最早被依赖的<code>package</code>中的<code>init()</code>，最后调用<code>main</code>函数。</p>\n<p>如果 <code>init</code> 函数中使用了 <code>println()</code> 或者 <code>print()</code> 你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><p>假如你已安装了golang环境，你可以在命令行执行go命令查看相关的Go语言命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">go</span></span><br><span class=\"line\">Go is a tool for managing Go source code.</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    go command [arguments]</span><br><span class=\"line\"></span><br><span class=\"line\">The commands are:</span><br><span class=\"line\"></span><br><span class=\"line\">    build       compile packages and dependencies</span><br><span class=\"line\">    clean       remove object files</span><br><span class=\"line\">    doc         show documentation for package or symbol</span><br><span class=\"line\">    env         print Go environment information</span><br><span class=\"line\">    bug         start a bug report</span><br><span class=\"line\">    fix         run go tool fix on packages</span><br><span class=\"line\">    fmt         run gofmt on package sources</span><br><span class=\"line\">    generate    generate Go files by processing source</span><br><span class=\"line\">    get         download and install packages and dependencies</span><br><span class=\"line\">    install     compile and install packages and dependencies</span><br><span class=\"line\">    list        list packages</span><br><span class=\"line\">    run         compile and run Go program</span><br><span class=\"line\">    test        test packages</span><br><span class=\"line\">    tool        run specified go tool</span><br><span class=\"line\">    version     print Go version</span><br><span class=\"line\">    vet         run go tool vet on packages</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;go help [command]&quot; for more information about a command.</span><br><span class=\"line\"></span><br><span class=\"line\">Additional help topics:</span><br><span class=\"line\"></span><br><span class=\"line\">    c           calling between Go and C</span><br><span class=\"line\">    buildmode   description of build modes</span><br><span class=\"line\">    filetype    file types</span><br><span class=\"line\">    gopath      GOPATH environment variable</span><br><span class=\"line\">    environment environment variables</span><br><span class=\"line\">    importpath  import path syntax</span><br><span class=\"line\">    packages    description of package lists</span><br><span class=\"line\">    testflag    description of testing flags</span><br><span class=\"line\">    testfunc    description of testing functions</span><br><span class=\"line\"></span><br><span class=\"line\">Use &quot;go help [topic]&quot; for more information about that topic.</span><br></pre></td></tr></table></figure>\n\n<p>go env用于打印Go语言的环境信息。</p>\n<p>go run命令可以编译并运行命令源码文件。</p>\n<p>go get可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。</p>\n<p>go build命令用于编译我们指定的源码文件或代码包以及它们的依赖包。</p>\n<p>go install用于编译并安装指定的代码包及它们的依赖包。</p>\n<p>go clean命令会删除掉执行其它命令时产生的一些文件和目录。</p>\n<p>go doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p>\n<p>go test命令用于对Go语言编写的程序进行测试。</p>\n<p>go list命令的作用是列出指定的代码包的信息。</p>\n<p>go fix会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。</p>\n<p>go vet是一个用于检查Go语言源码中静态错误的简单工具。</p>\n<p>go tool pprof命令来交互式的访问概要文件的内容。</p>\n<h1 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h1><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"变量的来历\"><a href=\"#变量的来历\" class=\"headerlink\" title=\"变量的来历\"></a>变量的来历</h3><p>程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><p>变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>\n<p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<h3 id=\"标准声明\"><a href=\"#标准声明\" class=\"headerlink\" title=\"标准声明\"></a>标准声明</h3><p>Go语言的变量声明格式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure>\n\n<p>变量声明以关键字<code>var</code>开头，变量类型放在变量的后面，行尾无需分号。 举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isOk <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"批量声明\"><a href=\"#批量声明\" class=\"headerlink\" title=\"批量声明\"></a>批量声明</h3><p>每声明一个变量就需要写<code>var</code>关键字会比较繁琐，go语言中还支持批量变量声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">    a <span class=\"type\">string</span></span><br><span class=\"line\">    b <span class=\"type\">int</span></span><br><span class=\"line\">    c <span class=\"type\">bool</span></span><br><span class=\"line\">    d <span class=\"type\">float32</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量的初始化\"><a href=\"#变量的初始化\" class=\"headerlink\" title=\"变量的初始化\"></a>变量的初始化</h3><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p>\n<p>当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"type\">string</span> = <span class=\"string\">&quot;pprof.cn&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sex <span class=\"type\">int</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>或者一次初始化多个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name, sex = <span class=\"string\">&quot;pprof.cn&quot;</span>, <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类型推导\"><a href=\"#类型推导\" class=\"headerlink\" title=\"类型推导\"></a>类型推导</h4><p>有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;pprof.cn&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sex = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"短变量声明\"><a href=\"#短变量声明\" class=\"headerlink\" title=\"短变量声明\"></a>短变量声明</h4><p>在函数内部，可以使用更简略的 :&#x3D; 方式声明并初始化变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 全局变量m</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    n := <span class=\"number\">10</span></span><br><span class=\"line\">    m := <span class=\"number\">200</span> <span class=\"comment\">// 此处声明局部变量m</span></span><br><span class=\"line\">    fmt.Println(m, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匿名变量\"><a href=\"#匿名变量\" class=\"headerlink\" title=\"匿名变量\"></a>匿名变量</h4><p>在使用多重赋值时，如果想要忽略某个值，可以使用<code>匿名变量（anonymous variable）</code>。 匿名变量用一个下划线_表示，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> (<span class=\"type\">int</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>, <span class=\"string\">&quot;Q1mi&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    x, _ := foo()</span><br><span class=\"line\">    _, y := foo()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;x=&quot;</span>, x)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;y=&quot;</span>, y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。)</p>\n<p>注意事项：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数外的每个语句都必须以关键字开始（<span class=\"keyword\">var</span>、<span class=\"keyword\">const</span>、<span class=\"function\"><span class=\"keyword\">func</span>等）</span></span><br><span class=\"line\"></span><br><span class=\"line\">:=不能使用在函数外。</span><br><span class=\"line\"></span><br><span class=\"line\">_多用于占位，表示忽略值。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把<code>var</code>换成了<code>const</code>，常量在定义的时候必须赋值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"number\">2.7182</span></span><br></pre></td></tr></table></figure>\n\n<p>声明了<code>pi</code>和<code>e</code>这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。</p>\n<p>多个常量也可以一起声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\">    e = <span class=\"number\">2.7182</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p><code>const</code>同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    n1 = <span class=\"number\">100</span></span><br><span class=\"line\">    n2</span><br><span class=\"line\">    n3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>上面示例中，常量<code>n1、n2、n3</code>的值都是<code>100</code>。</p>\n<h3 id=\"iota\"><a href=\"#iota\" class=\"headerlink\" title=\"iota\"></a>iota</h3><p><code>iota</code>是<code>go</code>语言的常量计数器，只能在常量的表达式中使用。 <code>iota</code>在<code>const</code>关键字出现时将被重置为<code>0</code>。<code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次(<code>iota</code>可理解为<code>const</code>语句块中的行索引)。 使用<code>iota</code>能简化定义，在定义枚举时很有用。</p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2        <span class=\"comment\">//1</span></span><br><span class=\"line\">        n3        <span class=\"comment\">//2</span></span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"几个常见的iota示例\"><a href=\"#几个常见的iota示例\" class=\"headerlink\" title=\"几个常见的iota示例:\"></a>几个常见的iota示例:</h3><p>使用_跳过某些值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2        <span class=\"comment\">//1</span></span><br><span class=\"line\">        _</span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p><code>iota</code>声明中间插队</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">        n2 = <span class=\"number\">100</span>  <span class=\"comment\">//100</span></span><br><span class=\"line\">        n3 = <span class=\"literal\">iota</span> <span class=\"comment\">//2</span></span><br><span class=\"line\">        n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"keyword\">const</span> n5 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p>定义数量级 （这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将<code>1</code>的二进制表示向左移<code>10</code>位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的<code>1024</code>。同理<code>2&lt;&lt;2</code>表示将<code>2</code>的二进制表示向左移<code>2</code>位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的<code>8</code>。）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        _  = <span class=\"literal\">iota</span></span><br><span class=\"line\">        KB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        MB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        GB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        TB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">        PB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>多个<code>iota</code>定义在一行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        a, b = <span class=\"literal\">iota</span> + <span class=\"number\">1</span>, <span class=\"literal\">iota</span> + <span class=\"number\">2</span> <span class=\"comment\">//1,2</span></span><br><span class=\"line\">        c, d                      <span class=\"comment\">//2,3</span></span><br><span class=\"line\">        e, f                      <span class=\"comment\">//3,4</span></span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h1><h2 id=\"基本类型介绍\"><a href=\"#基本类型介绍\" class=\"headerlink\" title=\"基本类型介绍\"></a>基本类型介绍</h2><p>Golang 更明确的数字类型命名，支持 Unicode，支持常用数据结构。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>长度(字节)</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool</td>\n<td>1</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>byte</td>\n<td>1</td>\n<td>0</td>\n<td>uint8</td>\n</tr>\n<tr>\n<td>rune</td>\n<td>4</td>\n<td>0</td>\n<td>Unicode Code Point, int32</td>\n</tr>\n<tr>\n<td>int, uint</td>\n<td>4或8</td>\n<td>0</td>\n<td>32 或 64 位</td>\n</tr>\n<tr>\n<td>int8, uint8</td>\n<td>1</td>\n<td>0</td>\n<td>-128 ~ 127, 0 ~ 255，byte是uint8 的别名</td>\n</tr>\n<tr>\n<td>int16, uint16</td>\n<td>2</td>\n<td>0</td>\n<td>-32768 ~ 32767, 0 ~ 65535</td>\n</tr>\n<tr>\n<td>int32, uint32</td>\n<td>4</td>\n<td>0</td>\n<td>-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td>\n</tr>\n<tr>\n<td>int64, uint64</td>\n<td>8</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>float32</td>\n<td>4</td>\n<td>0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>float64</td>\n<td>8</td>\n<td>0.0</td>\n<td></td>\n</tr>\n<tr>\n<td>complex64</td>\n<td>8</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>complex128</td>\n<td>16</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>4或8</td>\n<td></td>\n<td>以存储指针的 uint32 或 uint64 整数</td>\n</tr>\n<tr>\n<td>array</td>\n<td></td>\n<td></td>\n<td>值类型</td>\n</tr>\n<tr>\n<td>struct</td>\n<td></td>\n<td></td>\n<td>值类型</td>\n</tr>\n<tr>\n<td>string</td>\n<td></td>\n<td>“”</td>\n<td>UTF-8 字符串</td>\n</tr>\n<tr>\n<td>slice</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>map</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>channel</td>\n<td></td>\n<td>nil</td>\n<td>引用类型</td>\n</tr>\n<tr>\n<td>interface</td>\n<td></td>\n<td>nil</td>\n<td>接口</td>\n</tr>\n<tr>\n<td>function</td>\n<td></td>\n<td>nil</td>\n<td>函数</td>\n</tr>\n</tbody></table>\n<p>支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b, c, d := <span class=\"number\">071</span>, <span class=\"number\">0x1F</span>, <span class=\"number\">1e9</span>, math.MinInt16</span><br></pre></td></tr></table></figure>\n\n<p>空指针值 nil，而非C&#x2F;C++ NULL。</p>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><p>整型分为以下两个大类： 按长度分为：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>对应的无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code></p>\n<p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</p>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准： <code>float32</code> 的浮点数的最大范围约为<code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。 <code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</p>\n<h3 id=\"复数\"><a href=\"#复数\" class=\"headerlink\" title=\"复数\"></a>复数</h3><p><code>complex64</code>和<code>complex128</code></p>\n<p>复数有实部和虚部，<code>complex64</code>的实部和虚部为32位，<code>complex128</code>的实部和虚部为64位。</p>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：</span><br><span class=\"line\"></span><br><span class=\"line\">布尔类型变量的默认值为<span class=\"literal\">false</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">Go 语言中不允许将整型强制转换为布尔型.</span><br><span class=\"line\"></span><br><span class=\"line\">布尔型无法参与数值运算，也无法与其他类型进行转换。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型<code>（int、bool、float32、float64 等）</code>一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(“)中的内容，可以在Go语言的源码中直接添加非<code>ASCII</code>码字符，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s2 := <span class=\"string\">&quot;你好&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串转义符\"><a href=\"#字符串转义符\" class=\"headerlink\" title=\"字符串转义符\"></a>字符串转义符</h3><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\r</td>\n<td>回车符（返回行首）</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符（直接跳到下一行的同列位置）</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>|反斜杠</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;str := \\&quot;c:\\\\pprof\\\\main.exe\\&quot;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h3><p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">第二行</span></span><br><span class=\"line\"><span class=\"string\">第三行</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">fmt.Println(s1)</span><br></pre></td></tr></table></figure>\n\n<p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>\n<h3 id=\"字符串的常用操作\"><a href=\"#字符串的常用操作\" class=\"headerlink\" title=\"字符串的常用操作\"></a>字符串的常用操作</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(str)</td>\n<td>求长度</td>\n</tr>\n<tr>\n<td>+或fmt.Sprintf</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>strings.Split</td>\n<td>分割</td>\n</tr>\n<tr>\n<td>strings.Contains</td>\n<td>判断是否包含</td>\n</tr>\n<tr>\n<td>strings.HasPrefix,strings.HasSuffix</td>\n<td>前缀&#x2F;后缀判断</td>\n</tr>\n<tr>\n<td>strings.Index(),strings.LastIndex()</td>\n<td>子串出现的位置</td>\n</tr>\n<tr>\n<td>strings.Join(a[]string, sep string)</td>\n<td>join操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"byte和rune类型\"><a href=\"#byte和rune类型\" class=\"headerlink\" title=\"byte和rune类型\"></a>byte和rune类型</h3><p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a := <span class=\"string\">&#x27;中&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b := <span class=\"string\">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Go 语言的字符有以下两种：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint8</span>类型，或者叫 <span class=\"type\">byte</span> 型，代表了ASCII码的一个字符。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">rune</span>类型，代表一个 UTF<span class=\"number\">-8</span>字符。</span><br></pre></td></tr></table></figure>\n\n<p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。 Go 使用了特殊的 <code>rune</code> 类型来处理 <code>Unicode</code>，让基于 <code>Unicode</code>的文本处理更为方便，也可以使用 <code>byte</code> 型进行默认字符串处理，性能和扩展性都有照顾</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">traversalString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"string\">&quot;pprof.cn博客&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123; <span class=\"comment\">//byte</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%v(%c) &quot;</span>, s[i], s[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> s &#123; <span class=\"comment\">//rune</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%v(%c) &quot;</span>, r, r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">112</span>(p) <span class=\"number\">112</span>(p) <span class=\"number\">114</span>(r) <span class=\"number\">111</span>(o) <span class=\"number\">102</span>(f) <span class=\"number\">46</span>(.) <span class=\"number\">99</span>(c) <span class=\"number\">110</span>(n) <span class=\"number\">229</span>(å) <span class=\"number\">141</span>() <span class=\"number\">154</span>() <span class=\"number\">229</span>(å) <span class=\"number\">174</span>(®) <span class=\"number\">162</span>(¢)</span><br><span class=\"line\"><span class=\"number\">112</span>(p) <span class=\"number\">112</span>(p) <span class=\"number\">114</span>(r) <span class=\"number\">111</span>(o) <span class=\"number\">102</span>(f) <span class=\"number\">46</span>(.) <span class=\"number\">99</span>(c) <span class=\"number\">110</span>(n) <span class=\"number\">21338</span>(博) <span class=\"number\">23458</span>(客)</span><br></pre></td></tr></table></figure>\n\n<p>因为UTF8编码下一个中文汉字由<code>3~4</code>个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>\n<p>字符串底层是一个byte数组，所以可以和[]byte类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>\n<h3 id=\"修改字符串\"><a href=\"#修改字符串\" class=\"headerlink\" title=\"修改字符串\"></a>修改字符串</h3><p>要修改字符串，需要先将其转换成<code>[]rune或[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s1 := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 强制类型转换</span></span><br><span class=\"line\">    byteS1 := []<span class=\"type\">byte</span>(s1)</span><br><span class=\"line\">    byteS1[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;H&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"type\">string</span>(byteS1))</span><br><span class=\"line\"></span><br><span class=\"line\">    s2 := <span class=\"string\">&quot;博客&quot;</span></span><br><span class=\"line\">    runeS2 := []<span class=\"type\">rune</span>(s2)</span><br><span class=\"line\">    runeS2[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;狗&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"type\">string</span>(runeS2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p>\n<p>强制类型转换的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(表达式)</span><br></pre></td></tr></table></figure>\n\n<p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p>\n<p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrtDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a, b = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"comment\">// math.Sqrt()接收的参数是float64类型，需要强制转换</span></span><br><span class=\"line\">    c = <span class=\"type\">int</span>(math.Sqrt(<span class=\"type\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">    fmt.Println(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组 Array\"></a>数组 Array</h1><p>Golang Array和以往认知的数组有很大不同。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 数组：是同一种数据类型的固定长度的序列。</span><br><span class=\"line\"><span class=\"number\">2.</span> 数组定义：<span class=\"keyword\">var</span> a [<span class=\"built_in\">len</span>]<span class=\"type\">int</span>，比如：<span class=\"keyword\">var</span> a [<span class=\"number\">5</span>]<span class=\"type\">int</span>，数组长度必须是常量，且是类型的组成部分。一旦定义，长度不能变。</span><br><span class=\"line\"><span class=\"number\">3.</span> 长度是数组类型的一部分，因此，<span class=\"keyword\">var</span> a[<span class=\"number\">5</span>] <span class=\"type\">int</span>和<span class=\"keyword\">var</span> a[<span class=\"number\">10</span>]<span class=\"type\">int</span>是不同的类型。</span><br><span class=\"line\"><span class=\"number\">4.</span> 数组可以通过下标进行访问，下标是从<span class=\"number\">0</span>开始，最后一个元素下标是：<span class=\"built_in\">len</span><span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> index, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">5.</span> 访问越界，如果下标在数组合法范围之外，则触发访问越界，会<span class=\"built_in\">panic</span></span><br><span class=\"line\"><span class=\"number\">6.</span> 数组是值类型，赋值和传参会复制整个数组，而不是指针。因此改变副本的值，不会改变本身的值。</span><br><span class=\"line\"><span class=\"number\">7.</span>支持 <span class=\"string\">&quot;==&quot;</span>、<span class=\"string\">&quot;!=&quot;</span> 操作符，因为内存总是被初始化过的。</span><br><span class=\"line\"><span class=\"number\">8.</span>指针数组 [n]*T，数组指针 *[n]T。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组初始化：\"><a href=\"#数组初始化：\" class=\"headerlink\" title=\"数组初始化：\"></a>数组初始化：</h3><h4 id=\"一维数组：\"><a href=\"#一维数组：\" class=\"headerlink\" title=\"一维数组：\"></a>一维数组：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局：</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>]<span class=\"type\">int</span> = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"type\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">4</span>: <span class=\"string\">&quot;tom&quot;</span>&#125;</span><br><span class=\"line\">局部：</span><br><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;           <span class=\"comment\">// 未初始化元素值为 0。</span></span><br><span class=\"line\">b := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;   <span class=\"comment\">// 通过初始化值确定数组长度。</span></span><br><span class=\"line\">c := [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">4</span>: <span class=\"number\">200</span>&#125; <span class=\"comment\">// 使用索引号初始化元素。</span></span><br><span class=\"line\">d := [...]<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"type\">string</span></span><br><span class=\"line\">    age  <span class=\"type\">uint8</span></span><br><span class=\"line\">&#125;&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;user1&quot;</span>, <span class=\"number\">10</span>&#125;, <span class=\"comment\">// 可省略元素类型。</span></span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;user2&quot;</span>, <span class=\"number\">20</span>&#125;, <span class=\"comment\">// 别忘了最后一行的逗号。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>]<span class=\"type\">int</span> = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = [<span class=\"number\">5</span>]<span class=\"type\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">&quot;hello world&quot;</span>, <span class=\"number\">4</span>: <span class=\"string\">&quot;tom&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;           <span class=\"comment\">// 未初始化元素值为 0。</span></span><br><span class=\"line\">    b := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;   <span class=\"comment\">// 通过初始化值确定数组长度。</span></span><br><span class=\"line\">    c := [<span class=\"number\">5</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>: <span class=\"number\">100</span>, <span class=\"number\">4</span>: <span class=\"number\">200</span>&#125; <span class=\"comment\">// 使用引号初始化元素。</span></span><br><span class=\"line\">    d := [...]<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        name <span class=\"type\">string</span></span><br><span class=\"line\">        age  <span class=\"type\">uint8</span></span><br><span class=\"line\">    &#125;&#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;user1&quot;</span>, <span class=\"number\">10</span>&#125;, <span class=\"comment\">// 可省略元素类型。</span></span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;user2&quot;</span>, <span class=\"number\">20</span>&#125;, <span class=\"comment\">// 别忘了最后一行的逗号。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(arr0, arr1, arr2, str)</span><br><span class=\"line\">    fmt.Println(a, b, c, d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span>] [   hello world tom]</span><br><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">0</span>] [<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">100</span> <span class=\"number\">0</span> <span class=\"number\">200</span>] [&#123;user1 <span class=\"number\">10</span>&#125; &#123;user2 <span class=\"number\">20</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\">局部：</span><br><span class=\"line\">a := [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">b := [...][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>&#125;&#125; <span class=\"comment\">// 第 2 纬度不能用 &quot;...&quot;。</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr0 [<span class=\"number\">5</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">    b := [...][<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>&#125;&#125; <span class=\"comment\">// 第 2 纬度不能用 &quot;...&quot;。</span></span><br><span class=\"line\">    fmt.Println(arr0, arr1)</span><br><span class=\"line\">    fmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>] [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]] [[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] [<span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]]</span><br><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span>] [<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span>]] [[<span class=\"number\">1</span> <span class=\"number\">1</span>] [<span class=\"number\">2</span> <span class=\"number\">2</span>] [<span class=\"number\">3</span> <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>值拷贝行为会造成性能问题，通常会建议使用 slice，或数组指针。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(x [2]<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;x: %p\\n&quot;</span>, &amp;x)</span><br><span class=\"line\">    x[<span class=\"number\">1</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;a: %p\\n&quot;</span>, &amp;a)</span><br><span class=\"line\"></span><br><span class=\"line\">    test(a)</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a: <span class=\"number\">0xc42007c010</span></span><br><span class=\"line\">x: <span class=\"number\">0xc42007c030</span></span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>内置函数 len 和 cap 都返回数组长度 (元素数量)。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := [<span class=\"number\">2</span>]<span class=\"type\">int</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组遍历：\"><a href=\"#多维数组遍历：\" class=\"headerlink\" title=\"多维数组遍历：\"></a>多维数组遍历：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f [<span class=\"number\">2</span>][<span class=\"number\">3</span>]<span class=\"type\">int</span> = [...][<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k1, v1 := <span class=\"keyword\">range</span> f &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k2, v2 := <span class=\"keyword\">range</span> v1 &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;(%d,%d)=%d &quot;</span>, k1, k2, v2)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>,<span class=\"number\">0</span>)=<span class=\"number\">1</span> (<span class=\"number\">0</span>,<span class=\"number\">1</span>)=<span class=\"number\">2</span> (<span class=\"number\">0</span>,<span class=\"number\">2</span>)=<span class=\"number\">3</span> </span><br><span class=\"line\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)=<span class=\"number\">7</span> (<span class=\"number\">1</span>,<span class=\"number\">1</span>)=<span class=\"number\">8</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>)=<span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组拷贝和传参\"><a href=\"#数组拷贝和传参\" class=\"headerlink\" title=\"数组拷贝和传参\"></a>数组拷贝和传参</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printArr</span><span class=\"params\">(arr *[5]<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        fmt.Println(i, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr1 [<span class=\"number\">5</span>]<span class=\"type\">int</span></span><br><span class=\"line\">    printArr(&amp;arr1)</span><br><span class=\"line\">    fmt.Println(arr1)</span><br><span class=\"line\">    arr2 := [...]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">    printArr(&amp;arr2)</span><br><span class=\"line\">    fmt.Println(arr2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Go-语言中的指针\"><a href=\"#Go-语言中的指针\" class=\"headerlink\" title=\"Go 语言中的指针\"></a>Go 语言中的指针</h2><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。类型指针不能进行偏移和运算。Go语言中的指针操作非常简单，只需要记住两个符号：<code>&amp;</code>（取地址）和<code>*</code>（根据地址取值）。</p>\n<h3 id=\"指针地址和指针类型\"><a href=\"#指针地址和指针类型\" class=\"headerlink\" title=\"指针地址和指针类型\"></a>指针地址和指针类型</h3><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&amp;字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型<code>（int、float、bool、string、array、struct）</code>都有对应的指针类型，如：<code>*int、*int64、*string</code>等。</p>\n<p>取变量指针的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr := &amp;v    // v的类型为T</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v:代表被取地址的变量，类型为T</span><br><span class=\"line\">ptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    b := &amp;a</span><br><span class=\"line\">    fmt.Printf(&quot;a:%d ptr:%p\\n&quot;, a, &amp;a) // a:10 ptr:0xc00001a078</span><br><span class=\"line\">    fmt.Printf(&quot;b:%p type:%T\\n&quot;, b, b) // b:0xc00001a078 type:*int</span><br><span class=\"line\">    fmt.Println(&amp;b)                    // 0xc00000e018</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们来看一下<code>b := &amp;a</code>的图示：</p>\n<p><img src=\"https://www.topgoer.com/static/3.9/1.png\" alt=\"指针\" title=\"指针\"></p>\n<h3 id=\"指针取值\"><a href=\"#指针取值\" class=\"headerlink\" title=\"指针取值\"></a>指针取值</h3><p>在对普通变量使用&amp;操作符取地址后会获得这个变量的指针，然后可以对指针使用<code>*</code>操作，也就是指针取值，代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    //指针取值</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    b := &amp;a // 取变量a的地址，将指针保存到b中</span><br><span class=\"line\">    fmt.Printf(&quot;type of b:%T\\n&quot;, b)</span><br><span class=\"line\">    c := *b // 指针取值（根据指针去内存取值）</span><br><span class=\"line\">    fmt.Printf(&quot;type of c:%T\\n&quot;, c)</span><br><span class=\"line\">    fmt.Printf(&quot;value of c:%v\\n&quot;, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type of b:*int</span><br><span class=\"line\">type of c:int</span><br><span class=\"line\">value of c:10</span><br></pre></td></tr></table></figure>\n\n<p>总结： 取地址操作符&amp;和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>\n<p>变量、指针地址、指针变量、取地址、取值的相互关系和特性如下：\\</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.对变量进行取地址（&amp;）操作，可以获得这个变量的指针变量。</span><br><span class=\"line\">2.指针变量的值是指针地址。</span><br><span class=\"line\">3.对指针变量进行取值（*）操作，可以获得指针变量指向的原变量的值。</span><br></pre></td></tr></table></figure>\n\n<p>指针传值示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func modify1(x int) &#123;</span><br><span class=\"line\">    x = 100</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func modify2(x *int) &#123;</span><br><span class=\"line\">    *x = 100</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := 10</span><br><span class=\"line\">    modify1(a)</span><br><span class=\"line\">    fmt.Println(a) // 10</span><br><span class=\"line\">    modify2(&amp;a)</span><br><span class=\"line\">    fmt.Println(a) // 100</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h3><ul>\n<li>当一个指针被定义后没有分配到任何变量时，它的值为 nil</li>\n<li>空指针的判断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p *string</span><br><span class=\"line\">    fmt.Println(p)</span><br><span class=\"line\">    fmt.Printf(&quot;p的值是%s/n&quot;, p)</span><br><span class=\"line\">    if p != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;非空&quot;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        fmt.Println(&quot;空值&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-4-new和make\"><a href=\"#1-1-4-new和make\" class=\"headerlink\" title=\"1.1.4. new和make\"></a>1.1.4. new和make</h3><p>我们先来看一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a *int</span><br><span class=\"line\">    *a = 100</span><br><span class=\"line\">    fmt.Println(*a)</span><br><span class=\"line\"></span><br><span class=\"line\">    var b map[string]int</span><br><span class=\"line\">    b[&quot;测试&quot;] = 100</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的代码会引发panic，为什么呢？ 在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。 Go语言中new和make是内建的两个函数，主要用来分配内存</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>new是一个内置的函数，它的函数签名如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func new(Type) *Type</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Type表示类型，new函数只接受一个参数，这个参数是一个类型</span><br><span class=\"line\">2.*Type表示类型指针，new函数返回一个指向该类型内存地址的指针。</span><br></pre></td></tr></table></figure>\n\n<p>new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    a := new(int)</span><br><span class=\"line\">    b := new(bool)</span><br><span class=\"line\">    fmt.Printf(&quot;%T\\n&quot;, a) // *int</span><br><span class=\"line\">    fmt.Printf(&quot;%T\\n&quot;, b) // *bool</span><br><span class=\"line\">    fmt.Println(*a)       // 0</span><br><span class=\"line\">    fmt.Println(*b)       // false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本节开始的示例代码中<code>var a *int</code>只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的new函数对a进行初始化之后就可以正常对其赋值了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a *int</span><br><span class=\"line\">    a = new(int)</span><br><span class=\"line\">    *a = 10</span><br><span class=\"line\">    fmt.Println(*a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>make也是用于内存分配的，区别于new，它只用于slice、map以及chan的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func make(t Type, size ...IntegerType) Type</span><br></pre></td></tr></table></figure>\n\n<p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。这个我们在上一章中都有说明，关于channel我们会在后续的章节详细说明。</p>\n<p>本节开始的示例中<code>var b map[string]int</code>只是声明变量b是一个map类型的变量，需要像下面的示例代码一样使用make函数进行初始化操作之后，才能对其进行键值对赋值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var b map[string]int</span><br><span class=\"line\">    b = make(map[string]int, 10)</span><br><span class=\"line\">    b[&quot;测试&quot;] = 100</span><br><span class=\"line\">    fmt.Println(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new与make的区别\"><a href=\"#new与make的区别\" class=\"headerlink\" title=\"new与make的区别\"></a>new与make的区别</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.二者都是用来做内存分配的。</span><br><span class=\"line\">2.make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身；</span><br><span class=\"line\">3.而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针小练习\"><a href=\"#指针小练习\" class=\"headerlink\" title=\"指针小练习\"></a>指针小练习</h3><ul>\n<li>程序定义一个int变量num的地址并打印</li>\n<li>将num的地址赋给指针ptr，并通过ptr去修改num的值</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a int</span><br><span class=\"line\">    fmt.Println(&amp;a)</span><br><span class=\"line\">    var p *int</span><br><span class=\"line\">    p = &amp;a</span><br><span class=\"line\">    *p = 20</span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p>\n<h2 id=\"类型别名和自定义类型\"><a href=\"#类型别名和自定义类型\" class=\"headerlink\" title=\"类型别名和自定义类型\"></a>类型别名和自定义类型</h2><h3 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h3><p>在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型，Go语言中可以使用type关键字来定义自定义类型。</p>\n<p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将MyInt定义为int类型</span><br><span class=\"line\">type MyInt int</span><br></pre></td></tr></table></figure>\n\n<p>通过Type关键字的定义，MyInt就是一种新的类型，它具有int的特性。</p>\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><p>类型别名是Go1.9版本添加的新功能。</p>\n<p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type TypeAlias = Type</span><br></pre></td></tr></table></figure>\n\n<p>我们之前见过的rune和byte就是类型别名，他们的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type byte = uint8</span><br><span class=\"line\">type rune = int32</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型定义和类型别名的区别\"><a href=\"#类型定义和类型别名的区别\" class=\"headerlink\" title=\"类型定义和类型别名的区别\"></a>类型定义和类型别名的区别</h3><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//类型定义</span><br><span class=\"line\">type NewInt int</span><br><span class=\"line\"></span><br><span class=\"line\">//类型别名</span><br><span class=\"line\">type MyInt = int</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var a NewInt</span><br><span class=\"line\">    var b MyInt</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;type of a:%T\\n&quot;, a) //type of a:main.NewInt</span><br><span class=\"line\">    fmt.Printf(&quot;type of b:%T\\n&quot;, b) //type of b:int</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果显示a的类型是main.NewInt，表示main包下定义的NewInt类型。b的类型是int。MyInt类型只会在代码中存在，编译完成时并不会有MyInt类型。</p>\n<h2 id=\"结构体-1\"><a href=\"#结构体-1\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称struct。 也就是我们可以通过struct来定义自己的类型了。</p>\n<p>Go语言中通过struct来实现面向对象。</p>\n<h3 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h3><p>使用type和struct关键字来定义结构体，具体代码格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type 类型名 struct &#123;</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.类型名：标识自定义结构体的名称，在同一个包内不能重复。</span><br><span class=\"line\">2.字段名：表示结构体字段名。结构体中的字段名必须唯一。</span><br><span class=\"line\">3.字段类型：表示结构体字段的具体类型。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子，我们定义一个Person（人）结构体，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样类型的字段也可以写在一行，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person1 struct &#123;</span><br><span class=\"line\">    name, city string</span><br><span class=\"line\">    age        int8</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拥有了一个person的自定义类型，它有name、city、age三个字段，分别表示姓名、城市和年龄。这样我们使用这个person结构体就能够很方便的在程序中表示和存储人信息了。</p>\n<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型</p>\n<h3 id=\"结构体实例化\"><a href=\"#结构体实例化\" class=\"headerlink\" title=\"结构体实例化\"></a>结构体实例化</h3><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>\n<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用var关键字声明结构体类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本实例化\"><a href=\"#基本实例化\" class=\"headerlink\" title=\"基本实例化\"></a>基本实例化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p1 person</span><br><span class=\"line\">    p1.name = &quot;pprof.cn&quot;</span><br><span class=\"line\">    p1.city = &quot;北京&quot;</span><br><span class=\"line\">    p1.age = 18</span><br><span class=\"line\">    fmt.Printf(&quot;p1=%v\\n&quot;, p1)  //p1=&#123;pprof.cn 北京 18&#125;</span><br><span class=\"line\">    fmt.Printf(&quot;p1=%#v\\n&quot;, p1) //p1=main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过.来访问结构体的字段（成员变量）,例如p1.name和p1.age等。</p>\n<h2 id=\"匿名结构体\"><a href=\"#匿名结构体\" class=\"headerlink\" title=\"匿名结构体\"></a>匿名结构体</h2><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user struct&#123;Name string; Age int&#125;</span><br><span class=\"line\">    user.Name = &quot;pprof.cn&quot;</span><br><span class=\"line\">    user.Age = 18</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建指针类型结构体\"><a href=\"#创建指针类型结构体\" class=\"headerlink\" title=\"创建指针类型结构体\"></a>创建指针类型结构体</h3><p>我们还可以通过使用new关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p2 = new(person)</span><br><span class=\"line\">fmt.Printf(&quot;%T\\n&quot;, p2)     //*main.person</span><br><span class=\"line\">fmt.Printf(&quot;p2=%#v\\n&quot;, p2) //p2=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从打印的结果中我们可以看出p2是一个结构体指针。</p>\n<p>需要注意的是在Go语言中支持对结构体指针直接使用.来访问结构体的成员。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p2 = new(person)</span><br><span class=\"line\">p2.name = &quot;测试&quot;</span><br><span class=\"line\">p2.age = 18</span><br><span class=\"line\">p2.city = &quot;北京&quot;</span><br><span class=\"line\">fmt.Printf(&quot;p2=%#v\\n&quot;, p2) //p2=&amp;main.person&#123;name:&quot;测试&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取结构体的地址实例化\"><a href=\"#取结构体的地址实例化\" class=\"headerlink\" title=\"取结构体的地址实例化\"></a>取结构体的地址实例化</h3><p>使用&amp;对结构体进行取地址操作相当于对该结构体类型进行了一次new实例化操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := &amp;person&#123;&#125;</span><br><span class=\"line\">fmt.Printf(&quot;%T\\n&quot;, p3)     //*main.person</span><br><span class=\"line\">fmt.Printf(&quot;p3=%#v\\n&quot;, p3) //p3=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br><span class=\"line\">p3.name = &quot;博客&quot;</span><br><span class=\"line\">p3.age = 30</span><br><span class=\"line\">p3.city = &quot;成都&quot;</span><br><span class=\"line\">fmt.Printf(&quot;p3=%#v\\n&quot;, p3) //p3=&amp;main.person&#123;name:&quot;博客&quot;, city:&quot;成都&quot;, age:30&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p3.name &#x3D; “博客”其实在底层是(*p3).name &#x3D; “博客”，这是Go语言帮我们实现的语法糖。</p>\n<h3 id=\"结构体初始化\"><a href=\"#结构体初始化\" class=\"headerlink\" title=\"结构体初始化\"></a>结构体初始化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    city string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var p4 person</span><br><span class=\"line\">    fmt.Printf(&quot;p4=%#v\\n&quot;, p4) //p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用键值对初始化\"><a href=\"#使用键值对初始化\" class=\"headerlink\" title=\"使用键值对初始化\"></a>使用键值对初始化</h3><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p5 := person&#123;</span><br><span class=\"line\">    name: &quot;pprof.cn&quot;,</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">    age:  18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p5=%#v\\n&quot;, p5) //p5=main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以对结构体指针进行键值对初始化，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p6 := &amp;person&#123;</span><br><span class=\"line\">    name: &quot;pprof.cn&quot;,</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">    age:  18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p6=%#v\\n&quot;, p6) //p6=&amp;main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p7 := &amp;person&#123;</span><br><span class=\"line\">    city: &quot;北京&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p7=%#v\\n&quot;, p7) //p7=&amp;main.person&#123;name:&quot;&quot;, city:&quot;北京&quot;, age:0&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用值的列表初始化\"><a href=\"#使用值的列表初始化\" class=\"headerlink\" title=\"使用值的列表初始化\"></a>使用值的列表初始化</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p8 := &amp;person&#123;</span><br><span class=\"line\">    &quot;pprof.cn&quot;,</span><br><span class=\"line\">    &quot;北京&quot;,</span><br><span class=\"line\">    18,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;p8=%#v\\n&quot;, p8) //p8=&amp;main.person&#123;name:&quot;pprof.cn&quot;, city:&quot;北京&quot;, age:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用这种格式初始化时，需要注意：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.必须初始化结构体的所有字段。</span><br><span class=\"line\">2.初始值的填充顺序必须与字段在结构体中的声明顺序一致。</span><br><span class=\"line\">3.该方式不能和键值初始化方式混用。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体内存布局\"><a href=\"#结构体内存布局\" class=\"headerlink\" title=\"结构体内存布局\"></a>结构体内存布局</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type test struct &#123;</span><br><span class=\"line\">    a int8</span><br><span class=\"line\">    b int8</span><br><span class=\"line\">    c int8</span><br><span class=\"line\">    d int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n := test&#123;</span><br><span class=\"line\">    1, 2, 3, 4,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(&quot;n.a %p\\n&quot;, &amp;n.a)</span><br><span class=\"line\">fmt.Printf(&quot;n.b %p\\n&quot;, &amp;n.b)</span><br><span class=\"line\">fmt.Printf(&quot;n.c %p\\n&quot;, &amp;n.c)</span><br><span class=\"line\">fmt.Printf(&quot;n.d %p\\n&quot;, &amp;n.d)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n.a 0xc0000a0060</span><br><span class=\"line\">n.b 0xc0000a0061</span><br><span class=\"line\">n.c 0xc0000a0062</span><br><span class=\"line\">n.d 0xc0000a0063</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    m := make(map[string]*student)</span><br><span class=\"line\">    stus := []student&#123;</span><br><span class=\"line\">        &#123;name: &quot;pprof.cn&quot;, age: 18&#125;,</span><br><span class=\"line\">        &#123;name: &quot;测试&quot;, age: 23&#125;,</span><br><span class=\"line\">        &#123;name: &quot;博客&quot;, age: 28&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for _, stu := range stus &#123;</span><br><span class=\"line\">        m[stu.name] = &amp;stu</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for k, v := range m &#123;</span><br><span class=\"line\">        fmt.Println(k, &quot;=&gt;&quot;, v.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newPerson(name, city string, age int8) *person &#123;</span><br><span class=\"line\">    return &amp;person&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        city: city,</span><br><span class=\"line\">        age:  age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用构造函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p9 := newPerson(&quot;pprof.cn&quot;, &quot;测试&quot;, 90)</span><br><span class=\"line\">fmt.Printf(&quot;%#v\\n&quot;, p9)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法和接收者\"><a href=\"#方法和接收者\" class=\"headerlink\" title=\"方法和接收者\"></a>方法和接收者</h3><p>Go语言中的方法（Method）是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者（Receiver）。接收者的概念就类似于其他语言中的this或者 self。</p>\n<p>方法的定义格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名的第一个小写字母，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。</span><br><span class=\"line\">2.接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</span><br><span class=\"line\">3.方法名、参数列表、返回参数：具体格式与函数定义相同。</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Person 结构体</span><br><span class=\"line\">type Person struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int8</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//NewPerson 构造函数</span><br><span class=\"line\">func NewPerson(name string, age int8) *Person &#123;</span><br><span class=\"line\">    return &amp;Person&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age:  age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Dream Person做梦的方法</span><br><span class=\"line\">func (p Person) Dream() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s的梦想是学好Go语言！\\n&quot;, p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    p1.Dream()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>\n<h3 id=\"指针类型的接收者\"><a href=\"#指针类型的接收者\" class=\"headerlink\" title=\"指针类型的接收者\"></a>指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。 例如我们为Person添加一个SetAge方法，来修改实例变量的年龄。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetAge 设置p的年龄</span><br><span class=\"line\">// 使用指针接收者</span><br><span class=\"line\">func (p *Person) SetAge(newAge int8) &#123;</span><br><span class=\"line\">    p.age = newAge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用该方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">    p1.SetAge(30)</span><br><span class=\"line\">    fmt.Println(p1.age) // 30</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型的接收者\"><a href=\"#值类型的接收者\" class=\"headerlink\" title=\"值类型的接收者\"></a>值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetAge2 设置p的年龄</span><br><span class=\"line\">// 使用值接收者</span><br><span class=\"line\">func (p Person) SetAge2(newAge int8) &#123;</span><br><span class=\"line\">    p.age = newAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := NewPerson(&quot;测试&quot;, 25)</span><br><span class=\"line\">    p1.Dream()</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">    p1.SetAge2(30) // (*p1).SetAge2(30)</span><br><span class=\"line\">    fmt.Println(p1.age) // 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候应该使用指针类型接收者\"><a href=\"#什么时候应该使用指针类型接收者\" class=\"headerlink\" title=\"什么时候应该使用指针类型接收者\"></a>什么时候应该使用指针类型接收者</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.需要修改接收者中的值</span><br><span class=\"line\">2.接收者是拷贝代价比较大的大对象</span><br><span class=\"line\">3.保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"任意类型添加方法\"><a href=\"#任意类型添加方法\" class=\"headerlink\" title=\"任意类型添加方法\"></a>任意类型添加方法</h3><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的int类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//MyInt 将int定义为自定义MyInt类型</span><br><span class=\"line\">type MyInt int</span><br><span class=\"line\"></span><br><span class=\"line\">//SayHello 为MyInt添加一个SayHello的方法</span><br><span class=\"line\">func (m MyInt) SayHello() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;Hello, 我是一个int。&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var m1 MyInt</span><br><span class=\"line\">    m1.SayHello() //Hello, 我是一个int。</span><br><span class=\"line\">    m1 = 100</span><br><span class=\"line\">    fmt.Printf(&quot;%#v  %T\\n&quot;, m1, m1) //100  main.MyInt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意事项： 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</p>\n<h3 id=\"结构体的匿名字段\"><a href=\"#结构体的匿名字段\" class=\"headerlink\" title=\"结构体的匿名字段\"></a>结构体的匿名字段</h3><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Person 结构体Person类型</span><br><span class=\"line\">type Person struct &#123;</span><br><span class=\"line\">    string</span><br><span class=\"line\">    int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    p1 := Person&#123;</span><br><span class=\"line\">        &quot;pprof.cn&quot;,</span><br><span class=\"line\">        18,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, p1)        //main.Person&#123;string:&quot;pprof.cn&quot;, int:18&#125;</span><br><span class=\"line\">    fmt.Println(p1.string, p1.int) //pprof.cn 18</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h3 id=\"嵌套结构体\"><a href=\"#嵌套结构体\" class=\"headerlink\" title=\"嵌套结构体\"></a>嵌套结构体</h3><p>一个结构体中可以嵌套包含另一个结构体或结构体指针。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province string</span><br><span class=\"line\">    City     string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    Gender  string</span><br><span class=\"line\">    Address Address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    user1 := User&#123;</span><br><span class=\"line\">        Name:   &quot;pprof&quot;,</span><br><span class=\"line\">        Gender: &quot;女&quot;,</span><br><span class=\"line\">        Address: Address&#123;</span><br><span class=\"line\">            Province: &quot;黑龙江&quot;,</span><br><span class=\"line\">            City:     &quot;哈尔滨&quot;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;user1=%#v\\n&quot;, user1)//user1=main.User&#123;Name:&quot;pprof&quot;, Gender:&quot;女&quot;, Address:main.Address&#123;Province:&quot;黑龙江&quot;, City:&quot;哈尔滨&quot;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套匿名结构体\"><a href=\"#嵌套匿名结构体\" class=\"headerlink\" title=\"嵌套匿名结构体\"></a>嵌套匿名结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province string</span><br><span class=\"line\">    City     string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    Gender  string</span><br><span class=\"line\">    Address //匿名结构体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user2 User</span><br><span class=\"line\">    user2.Name = &quot;pprof&quot;</span><br><span class=\"line\">    user2.Gender = &quot;女&quot;</span><br><span class=\"line\">    user2.Address.Province = &quot;黑龙江&quot;    //通过匿名结构体.字段名访问</span><br><span class=\"line\">    user2.City = &quot;哈尔滨&quot;                //直接访问匿名结构体的字段名</span><br><span class=\"line\">    fmt.Printf(&quot;user2=%#v\\n&quot;, user2) //user2=main.User&#123;Name:&quot;pprof&quot;, Gender:&quot;女&quot;, Address:main.Address&#123;Province:&quot;黑龙江&quot;, City:&quot;哈尔滨&quot;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问结构体成员时会先在结构体中查找该字段，找不到再去匿名结构体中查找。</p>\n<h3 id=\"嵌套结构体的字段名冲突\"><a href=\"#嵌套结构体的字段名冲突\" class=\"headerlink\" title=\"嵌套结构体的字段名冲突\"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。这个时候为了避免歧义需要指定具体的内嵌结构体的字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Address 地址结构体</span><br><span class=\"line\">type Address struct &#123;</span><br><span class=\"line\">    Province   string</span><br><span class=\"line\">    City       string</span><br><span class=\"line\">    CreateTime string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Email 邮箱结构体</span><br><span class=\"line\">type Email struct &#123;</span><br><span class=\"line\">    Account    string</span><br><span class=\"line\">    CreateTime string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//User 用户结构体</span><br><span class=\"line\">type User struct &#123;</span><br><span class=\"line\">    Name   string</span><br><span class=\"line\">    Gender string</span><br><span class=\"line\">    Address</span><br><span class=\"line\">    Email</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var user3 User</span><br><span class=\"line\">    user3.Name = &quot;pprof&quot;</span><br><span class=\"line\">    user3.Gender = &quot;女&quot;</span><br><span class=\"line\">    // user3.CreateTime = &quot;2019&quot; //ambiguous selector user3.CreateTime</span><br><span class=\"line\">    user3.Address.CreateTime = &quot;2000&quot; //指定Address结构体中的CreateTime</span><br><span class=\"line\">    user3.Email.CreateTime = &quot;2000&quot;   //指定Email结构体中的CreateTime</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体的“继承”\"><a href=\"#结构体的“继承”\" class=\"headerlink\" title=\"结构体的“继承”\"></a>结构体的“继承”</h3><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Animal 动物</span><br><span class=\"line\">type Animal struct &#123;</span><br><span class=\"line\">    name string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (a *Animal) move() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s会动！\\n&quot;, a.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Dog 狗</span><br><span class=\"line\">type Dog struct &#123;</span><br><span class=\"line\">    Feet    int8</span><br><span class=\"line\">    *Animal //通过嵌套匿名结构体实现继承</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (d *Dog) wang() &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;%s会汪汪汪~\\n&quot;, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    d1 := &amp;Dog&#123;</span><br><span class=\"line\">        Feet: 4,</span><br><span class=\"line\">        Animal: &amp;Animal&#123; //注意嵌套的是结构体指针</span><br><span class=\"line\">            name: &quot;乐乐&quot;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d1.wang() //乐乐会汪汪汪~</span><br><span class=\"line\">    d1.move() //乐乐会动！</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体字段的可见性\"><a href=\"#结构体字段的可见性\" class=\"headerlink\" title=\"结构体字段的可见性\"></a>结构体字段的可见性</h3><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>\n<h3 id=\"结构体与JSON序列化\"><a href=\"#结构体与JSON序列化\" class=\"headerlink\" title=\"结构体与JSON序列化\"></a>结构体与JSON序列化</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键&#x2F;值对组合中的键名写在前面并用双引号””包裹，使用冒号:分隔，然后紧接着值；多个键值之间使用英文,分隔。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Student 学生</span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">    ID     int</span><br><span class=\"line\">    Gender string</span><br><span class=\"line\">    Name   string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Class 班级</span><br><span class=\"line\">type Class struct &#123;</span><br><span class=\"line\">    Title    string</span><br><span class=\"line\">    Students []*Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    c := &amp;Class&#123;</span><br><span class=\"line\">        Title:    &quot;101&quot;,</span><br><span class=\"line\">        Students: make([]*Student, 0, 200),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">        stu := &amp;Student&#123;</span><br><span class=\"line\">            Name:   fmt.Sprintf(&quot;stu%02d&quot;, i),</span><br><span class=\"line\">            Gender: &quot;男&quot;,</span><br><span class=\"line\">            ID:     i,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.Students = append(c.Students, stu)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //JSON序列化：结构体--&gt;JSON格式的字符串</span><br><span class=\"line\">    data, err := json.Marshal(c)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json marshal failed&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;json:%s\\n&quot;, data)</span><br><span class=\"line\">    //JSON反序列化：JSON格式的字符串--&gt;结构体</span><br><span class=\"line\">    str := `&#123;&quot;Title&quot;:&quot;101&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu04&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu05&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu06&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu07&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu08&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu09&quot;&#125;]&#125;`</span><br><span class=\"line\">    c1 := &amp;Class&#123;&#125;</span><br><span class=\"line\">    err = json.Unmarshal([]byte(str), c1)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json unmarshal failed!&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;%#v\\n&quot;, c1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体标签（Tag）\"><a href=\"#结构体标签（Tag）\" class=\"headerlink\" title=\"结构体标签（Tag）\"></a>结构体标签（Tag）</h3><p>Tag是结构体的元信息，可以在运行的时候通过反射的机制读取出来。</p>\n<p>Tag在结构体字段的后方定义，由一对反引号包裹起来，具体的格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`key1:&quot;value1&quot; key2:&quot;value2&quot;`</span><br></pre></td></tr></table></figure>\n\n<p>结构体标签由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。键值对之间使用一个空格分隔。 注意事项： 为结构体编写Tag时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p>\n<p>例如我们为Student结构体的每个字段定义json序列化时使用的Tag：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Student 学生</span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">    ID     int    `json:&quot;id&quot;` //通过指定tag实现json序列化该字段时的key</span><br><span class=\"line\">    Gender string //json序列化是默认使用字段名作为key</span><br><span class=\"line\">    name   string //私有不能被json包访问</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    s1 := Student&#123;</span><br><span class=\"line\">        ID:     1,</span><br><span class=\"line\">        Gender: &quot;女&quot;,</span><br><span class=\"line\">        name:   &quot;pprof&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data, err := json.Marshal(s1)</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(&quot;json marshal failed!&quot;)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(&quot;json str:%s\\n&quot;, data) //json str:&#123;&quot;id&quot;:1,&quot;Gender&quot;:&quot;女&quot;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小练习：\"><a href=\"#小练习：\" class=\"headerlink\" title=\"小练习：\"></a>小练习：</h3><p>猜一下下列代码运行的结果是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    id   int</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func demo(ce []student) &#123;</span><br><span class=\"line\">    //切片是引用传递，是可以改变值的</span><br><span class=\"line\">    ce[1].age = 999</span><br><span class=\"line\">    // ce = append(ce, student&#123;3, &quot;xiaowang&quot;, 56&#125;)</span><br><span class=\"line\">    // return ce</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var ce []student  //定义一个切片类型的结构体</span><br><span class=\"line\">    ce = []student&#123;</span><br><span class=\"line\">        student&#123;1, &quot;xiaoming&quot;, 22&#125;,</span><br><span class=\"line\">        student&#123;2, &quot;xiaozhang&quot;, 33&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">    demo(ce)</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除map类型的结构体\"><a href=\"#删除map类型的结构体\" class=\"headerlink\" title=\"删除map类型的结构体\"></a>删除map类型的结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type student struct &#123;</span><br><span class=\"line\">    id   int</span><br><span class=\"line\">    name string</span><br><span class=\"line\">    age  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    ce := make(map[int]student)</span><br><span class=\"line\">    ce[1] = student&#123;1, &quot;xiaolizi&quot;, 22&#125;</span><br><span class=\"line\">    ce[2] = student&#123;2, &quot;wang&quot;, 23&#125;</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">    delete(ce, 2)</span><br><span class=\"line\">    fmt.Println(ce)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HTML","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T13:04:06.300Z","keywords":null,"description":null,"_content":"\n\n\n\n![](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg)\n<a name=\"HFtsm\"></a>\n# 元素\n \n## 根元素\n> **<!DOCTYPE html> 是一个声明，表示该文档是由 HTML5 进行编写的。**\n> **<!DOCTYPE> 声明必须是 HTML 文档的第一行，位于 < html> 标签之前**\n\n| 主根元素 | html | html 元素用于告诉告诉浏览器其自身是一个 HTML 文档 |\n| --- | --- | --- |\n| 分区根元素 | body |表明这是文档的主体部分|\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    这是文档的头部\n  </head>\n  <body>\n    这是文档的主体\n  </body>\n</html>\n```\n<a name=\"e3ce87db\"></a>\n## 元数据\n<a name=\"TWAh9\"></a>\n### head标签\n> **< head> 标签用于定义文档的头部，它是所有头部元素的容器**\n\n<a name=\"cFRIO\"></a>\n### title标签\n> **< title> 标签用于定义文档的标题。**\n\n- < title> 标签必须位于 < head>标签内部。\n- 会在浏览器的窗口或选项卡的顶部显示\n```html\n<title>显示在浏览器的标题栏上</title>\n```\n\n<a name=\"Wujh1\"></a>\n### meta标记\n> **< meta> 标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。**\n\n下面介绍meta元素的功能：\n\n1. 编码和自适应\n\n```html\n<meta charset=\"UTF-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n2. 网站描述\n\n```html\n<meta name=\"keywords\" content=\"（关键字）\">\n<meta name=\"descript\" content=\"（描述）\">\n<meta name=\"author\" content=\"（作者）\">\n<meta name=\"generator\" content=\"（制作所用的软件）\">\n<meta name=\"copyright\" content=\"（版权所有）\">\n<meta name=\"revisit-after\" content=\"7 days\" >//设置搜索引擎的抓取频率\n<meta name=\"robots\" content=\"none\">\n1、none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2、noindex : 搜索引擎不索引此网页。\n3、nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4、all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5、index : 搜索引擎索引此网页。\n6、follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n```\n\n3. 向浏览器头部(响应头)返回信息\n\n```html\n<meta http-equiv=\"refresh\" content=\"30\">//每30秒刷新一次\n<meta http-equiv=\"Pragma\"content=\"no-cache\"> //禁止从缓存中读取HTML\n//两秒刷新并且指向新页面\n<meta http-equiv=\"refresh\" content=\"2\";URL=\"http://www.haorooms.com\">[//两秒刷新并且指向新页面\n<meta http-equiv=\"expires\" content=\"（GMT时间格式）\">//设置到期时间\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=gb2312\"> \n<meta http-equiv=\"charset\" content=\"iso-8859-1\">\n```\n<a name=\"fnyhk\"></a>\n### base标签\n> **< base>为相对链接设置基本URL**\n> **< base>指定用户如何打开链接，以及表单提交后浏览器的状态**\n\n属性：\n\n1. herf\t\t为文档的相对URL指定基本URL\n```html\n<head>\n   <base  href=\"//www.w3cschool.cn/listings/\"/>\n</head>\n<body>\n   <a href=\"/javascript.html\">JavaScript</a>\n</body>\n```\n\n2. target\t\t指示浏览器如何打开网址\n| 属性值    | 描述                                          |\n| --------- | --------------------------------------------- |\n|           |                                               |\n| \\_blank    | 在新窗口打开链接                              |\n| \\_self    | 在同一窗口或框架打开链接（默认），即当前的div |\n| \\_parent   | 在父框架打开链接，即上一层框架                |\n| \\_top      | 在整个窗口打开链接                            |\n| framename | 在一指定框架打开链接，即在指定div             |\n\n<a name=\"dWD6I\"></a>\n## div和语义化布局\n在HTML5出世之前，人们实现网页布局都是利用div，而HTML5新的语义化元素也能实现网页布局，而且更凸显语义化<br />在经典的页面布局中，页面被分为 header、main、aside、footer 四个部分:![](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662092868310-ef59cd51-a19c-4865-a31c-250695024632.jpeg)\n### div\n> **\\<div> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。**\ndiv通常和css一起使用\n\n### 页眉header\n> **\\<header> 标签用于定义文档的页眉（介绍信息）**\n\n### 导航nav\n> **\\<nav> 标签用于定义页面主导航功能。**\n\n<a name=\"Lv1ms\"></a>\n### 主体main\n> **\\<main> 标签用于定义文档**[**\\<body>**](https://man.ilovefishc.com/pageHTML5/body.html)**或应用的主体部分。**\n\n<a name=\"TJFWp\"></a>\n### 节section\n> **\\<section> 标签用于定义定义文档中的节。**\n\n\n<a name=\"dDkzH\"></a>\n### 文章article\n> **\\<article> 标签用于定义一篇文章，是网页中独立的内容，与页面其它部分无关。**\n\n<a name=\"vyxWh\"></a>\n### 详情details\n> **\\<details> 标签用于定义用户可见的或者隐藏的需求的补充细节。**\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| open | open | 规定 details 是否默认可见。 |\n\n<a name=\"DBBFL\"></a>\n### 总结summary\n> **\\<summary> 标签定义 **[**\\<details>**](https://man.ilovefishc.com/pageHTML5/detail.html)** 元素的标题**\n\n```html\n<details>\n    <summary>《零基础入门学习Python》</summary>\n    <p>配有同名书籍。</p>\n    <p>配有视频教程</p>\n</details>\n\n```\n<a name=\"HaRxr\"></a>\n### 插图figure\n> **\\<figure> 标签规定独立的流内容（图像、图表、照片、代码等等）。**\n\nfigure 元素代表一段独立的内容, 经常与说明 [figcaption](https://man.ilovefishc.com/pageHTML5/figcaption.html) 元素配合使用, 并且作为一个独立的引用单元。\n> **\\<figcaption> 标签为 figure 元素定义标题。**\n\n```html\n <figure>\n  \t<img src=\"../img/logo.png\"  alt=\"鱼C-Logo\" />\n    <figcaption>鱼C工作室，让自学编程变得妙不可言｡◕‿◕｡</figcaption>\n</figure>\n```\n<a name=\"K1cYQ\"></a>\n### aside\n> **\\<aside> 标签定义侧边栏，通常是网页的说明、提示、引用、附加注释、相关链接、广告等内容。**\n\n<a name=\"Wsw5i\"></a>\n### 页脚footer\n> **\\<footer> 标签定义文档或节的页脚**\n\n\n## 文字内容\n<a name=\"QZF96\"></a>\n### 超链接a\n> **\\<a> 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。**\n\n基础语法：\n```html\n<a href=\"文件路径\" name=\"anchor名称\" title=\"提示信息\" target=\"打开方式\">超链接</a>\n```\n特殊用法：\n\n1. FTP站点访问链接\n```html\n<a herf=\"ftp://服务器IP地址或域名\">超链接文字</a>\n```\n\n2. 电子邮件超链接\n```html\n<a href=\"mailto:E-mali邮箱地址？subject=邮件主题\">\n```\n\n3. 定义书签\n```html\n<a  name=\"书签名\">书签标题</a>\n\n```\n\n4. 跳转至书签\n```html\n<a href=\"#书签名\">书签标题</a>同页跳转 \n<a href=\"URL#书签名\">书签标题</a>异页跳转\n```\n<a name=\"Ux6mJ\"></a>\n### 标题h1\n> **\\<h1> - \\<h6> 标签可定义标题。**\n\n\n```html\n<h1>一号标题</h1>\n<h2>二号标题</h2>\n<h3>三号标题</h3>\n```\n\n- align属性:  left | center | right | justfiy\n<a name=\"pZDqS\"></a>\n### 粗体b\n> **\\<b> 标签用于定义表示粗体的文本。**\n\n根据 HTML5 的规范，如果你只是想实现加粗效果，推荐使用 css 样式来实现：.bolder {font-weight: bolder;}\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用css代替加粗</title>\n    <style>\n    .bolder{\n      font-weight:bolder;\n    }\n    </style>\n</head>\n<body>\n    <p class=\"bloder\">这是粗体文本</p>\n</body>\n</html>\n```\n<a name=\"kAhDq\"></a>\n### 斜体i\n> **\\<i> 标签用于定义表示斜体的文本。**\n\n同样推荐使用 css 样式来实现：.italic{font-style: italic;}\n<a name=\"Uv1uj\"></a>\n### 空格、回车、分割线和特殊字符\n\n- 空格和特殊字符\n\n```html\n&nbsp;\t( )\n&lt;   \t(<)\n&gt; \t\t(>)\n&amp;   (&)\n&quot;  (\")\n&times; (×)\n&divide;(÷)\n&cope;  (©)版权\n&reg;   (®)注册商标\n&trade;\t(™)商标\n```\n\n- 回车和分割线\n\n```html\n<br>或者<br/>\n<hr width=\"(百分比或者像素px)\" size=\"像素px\" color=\"\" align=\"left|center|right\">\n```\n<a name=\"BKyav\"></a>\n### 段落p\n> **\\<p> 标签用于定义一个段落。**\n\n```html\n<p align=\"\"></p>\n```\n\n<a name=\"HyrXI\"></a>\n### 整体缩进blockquote\n> **\\<blockquote> 标签定义块引用。**\n\n\n```html\n<blockquote>缩进5个字符位置</blockquote>\n<blockquote><blockquote>缩进10个字符位置</blockquote></blockquote>\n```\n\n<a name=\"hJjuJ\"></a>\n### 预格式化pre\n> **\\<pre> 标签用于定义预格式化的文本。**\n\npre 元素中的文本通常会保留空格和换行符，而文本自身也会呈现为等宽字体。\n```html\n<pre>\n          春 晓\n春眠不觉晓⑴，处处闻啼鸟⑵。\n夜来风雨声⑶，花落知多少⑷。\n</pre>\n```\n\n<a name=\"Q9EmI\"></a>\n## 图片和多媒体\n<a name=\"YxCUZ\"></a>\n### 图像img\n> **<img> 标签用于向网页中嵌入一幅图像。**\n\n```html\n<img src=\"URL\" alt=\"替代文本\">\n```\n完整属性：\n\n| 属性 | 值 | 说明 | 属性 | 值 | 说明 |\n| --- | --- | --- | --- | --- | --- |\n| alt | text | <br />- 鼠标悬停在图片上时出现的文字<br />- 加载失败时会代替图片<br /> | align | top&#124;middle&#124;bottom&#124;<br/>left&#124;center&#124;right | 排列方式 |\n| src | URL | 图片的链接 | boder | pixels | 边框 |\n| name | text | 名称 | hspace | pixels | 左侧和右侧的空白 |\n| height | pixels | 高 | vspace | pixels | 顶部和底部的空白 |\n| width | pixels | 宽 | usemap | URL | 将图像定义为客户器端图像映射 |\n\n\n### map与area\n\n- 为图像设置超链接\n```html\n<a herf=\"URL\" target=\"打开方式\"><img src=\"URL\"></a>\n```\n\n- 为图像设置热区链接\n```html\n<img src=\"URL\" usemap=\"#+映射图像名称\">\n<map  name=\"映射图像名称\">\n  <area  shap=\"热区形状\" coords=\"热区坐标\" href=\"URL\">\n  <area  shap=\"热区形状\" coords=\"热区坐标\" href=\"URL\">\n  ...\n</map>\n```\n注意事项：img的usemap的属性值要\"#+映射图像名称\"\n\n| shape值 | coords值 | 说明 |\n| --- | --- | --- |\n| rect（矩形） | x1,y1,x2,y2 | 矩形的四个坐标 |\n| circle（圆形） | center-x,center-y,radius | 圆心坐标和半径 |\n| poly（多边形） | x1,y1,x2,y2,x3,y3... | 各顶点坐标 |\n\n\n### picture与source\n\n> **< picture> 标签为其内部特定的 img 元素提供多样的 [source](https://man.ilovefishc.com/pageHTML5/source.html) 元素**\n> **<source> 标签为 picture , audio 或者 video 元素指定多个媒体资源。**\n\n\n\n\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| src | url | 规定媒体文件的 URL。 |\n| srcset | url | 仅当source元素是picture元素的直接子元素时，srcset属性才有效。 |\n| [media](https://man.ilovefishc.com/pageHTML5/media.html) | media query | 规定媒体资源的类型。 |\n| sizes |  | 表示源大小的列表，用于描述源代表的图像的最终渲染宽度。 |\n| type | numeric value | 规定媒体资源的 MIME 类型。 |\n\n```html\n<picture>\n  <source media=\"(min-width:1024px)\" srcset=\"big.jpg\">\n  <source media=\"(min-width:512px)\" srcset=\"normal.jpg\">\n  <img src=\"small.jpg\" alt=\"图片\" sytle=\"width:auto\">\n</picture>\n```\n代码效果讲解：\n\n1. 当屏幕大于1024时，显示big.jpg\n2. 当屏幕大于512小于1024时，显示normal.jpg\n3. 当屏幕小于512时，显示small.jpg\n<a name=\"vYXRh\"></a>\n### 任何插件embed\n> **< embed> 标签定义嵌入的内容，比如插件。**\n\n```html\n<embed src=\"URL\" width=\"\" higth=\"\" autostart=\"true|false(是否自动播放)\" loop\n  =\"true|false(是否循环)\">\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| height | pixels | 规定嵌入内容的高度。 |\n| src | URL 规定被嵌入内容的 URL。 |  |\n| type | MIME_type | 规定嵌入内容的 MIME 类型。注：MIME = Multipurpose Internet Mail Extensions。 |\n| width | pixels | 规定嵌入内容的宽度。 |\n\n\n### 视频video\n> **< video> 标签定义视频，比如电影片段或其他视频流。**\n\n目前，< video> 元素支持三种视频格式：MP4、WebM、Ogg。\n```html\n<!--显示控件--!>\n<video width=\"640\" height=\"360\" controls>\n\t\t<source src=\"http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4\"  type=\"video/mp4\">\n</video>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| autoplay | autoplay | 如果指定该属性，则视频在就绪后将自动播放。 |\n| controls | controls | 如果指定该属性，则向用户显示控件，比如播放/暂停按钮。 |\n| width | pixels | 指定视频播放器的宽度。 |\n| height | pixels | 指定视频播放器的高度。 |\n| loop | loop | 如果指定该属性，将循环播放视频。 |\n| muted | muted | 如果指定该属性，则将视频的音频输出为静音。 |\n| poster | URL | 指定视频的封面 |\n| preload | auto、metadata、none | 指定视频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto（默认）：要求浏览器尽快加载整个视频<br />metadata：只加载视频的元数据（宽度、高度、第一帧影像和视频总长度等）<br />none：在用户点击开始播放之前不会加载视频，若不设定poster视频的黑的 |\n| src | URL | 指定要播放的视频文件的 URL 地址。 |\n\n注意事项：\n\n1. 使用video标签时controls属性或antoplay属性二选一，否则视频无法播放\n2. controls与antoplay同时使用时，chrome浏览器不会自动播放，要添加muted属性（静音）才能自动播放 \n<a name=\"hWx0q\"></a>\n### 音频audio\n> **\\<audio> 标签定义声音，比如音乐或其他音频流。**\n\n目前，\\<audio> 标签定义声音，支持的3种文件格式：MP3、Wav、Ogg\n```html\n<audio controls loop>\n\t<source src=\"http://fishc.oss-cnhangzhou.aliyuncs.com/Web/audio_tag.mp3\" >\n</audio>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| autoplay | autoplay | 如果指定该属性，则音频在就绪后马上播放。 |\n| controls | controls | 如果指定该属性，则向用户显示播放控件（比如播放/暂停按钮）。 |\n| loop | loop | 如果指定该属性，将循环播放音频。 |\n| muted | muted | 如果指定该属性，则音频输出为静音。 |\n| preload | auto、metadata、none | 指定音频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto：要求浏览器尽快加载整个音频，默认行为<br />metadata：只加载音频的元数据<br />none：在用户点击开始播放之前不会加载音频 |\n| src | URL | 指定要播放的音频文件的 URL 地址。 |\n\n<a name=\"g5RWU\"></a>\n## 内嵌内容\n<a name=\"sW8YR\"></a>\n### iframe\n> **\\<iframe> 标签会创建包含另外一个文档的内联框架（即行内框架）。**\n\n```html\n<body>\n\t\t<iframe src=\"javascript.html\" class=\"iframe\" frameborder=\"0\"></iframe>\n</body>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| height | pixels、% | 指定 iframe 的高度。 |\n| name | text | 指定 iframe 的名称。 |\n| sandbox | allow-forms、allow-pointer-lock、allow-popups、allow-same-origin、allow-scripts、allow-top-navigation | 启用一系列对 < iframe>中内容的额外限制。 |\n| seamless | seamless | 指示浏览器将 iframe 的内容显示得像主 HTML 文档的一个整体组成部分。 |\n| src | URL | 指定在 iframe 中显示的文档的 URL 地址。 |\n| srcdoc | HTML_code | 指定在 < iframe> 中显示的页面的 HTML 内容。 |\n| width | pixels、% | 指定 iframe 的宽度。 |\n\n\n#### sandbox沙盒属性\n> **限制了嵌入网页的内容和操作**\n\n| sandbox的值 | 描述 |\n| --- | --- |\n| allow-forms | 允许提交表单 |\n| allow-pointer-lock | 允许执行脚本 |\n| allow-popups | 允许同域请求 |\n| allow-same-origin | 允许iframe能主导window .top进行页面跳转 |\n| allow-scripts | 允许iframe中弹出新窗口 |\n| allow-top-navigation | 允许在iframe中锁定鼠标 |\n\n \n### object\n> **< object> 标签定义一个嵌入的对象。**\n\n```html\n<object width=\"666\" height=\"375\" data=\"video_tag.mp4\" >\n</object>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| form | form_id | 规定对象所属的一个或多个表单。 |\n| height | pixels | 规定对象的高度。 |\n| width | pixels | 规定对象的宽度。 |\n| name | name | 为对象规定名称。 |\n| type | MIME_type | 规定 data 属性中规定的数据的 MIME 类型。 |\n| usemap | mapname | 规定与对象一同使用的客户端图像映射的名称。 |\n\n \n## 脚本\n> **这一部分可以先草草了解一下，详见javascript教程**\n\n[Javascript](./Javascript.md)\n<a name=\"m34IF\"></a>\n### canvas\n> **< canvas> 标签定义图形，比如图表和其他图像。**\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| height | pixels | 设置 canvas 的高度。 |\n| width | pixels | 设置 canvas 的宽度。 |\n\n<a name=\"NuSUB\"></a>\n### script\n> **< script> 标签用于在 HTML 文档中加入脚本（例如 JavaScript）**\n\n```html\n<script>\n    document.write(\"lilming\");\n</script>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| type | media_type | 指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。 |\n| async | async | 告诉浏览器异步执行脚本。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 |\n| charset | charset | 指定外部脚本文件中使用的字符编码。<br />注意：该属性只能与 src 属性一起使用。 |\n| defer | defer | 告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 |\n| src | URL | 指定外部脚本文件的 URL。 |\n\n<a name=\"DdbGP\"></a>\n## 列表\n\n<a name=\"wCnzZ\"></a>\n### 无序列表ul\n> **< ul> 标签用于定义无序列表。**\n\ntype的属性值：\n\n- disc      实心圆\n- circle    空心圆\n- square    实心正方形\n\n```html\n<ul type=\"\">\n  <li type=\"\"></li>\n  <li type=\"\"></li>\n</ul>\n```\n无序列表更常用，可以用css设置序号样式，而有序列表的序号是固定的。\n<a name=\"QNqSJ\"></a>\n### 有序列表ol\n> **< ol> 标签用于定义有序列表。**\n\n\n```html\n<ol type=\"1|A|a|i|I\" start=\"数值（初始数字）\" >\n  <li type=\"\"></li>\n  <li type=\"\"></li>\n</ol>\n```\n\n<a name=\"kk3wt\"></a>\n### 定义列表dl\n> **< dl> 标签定义了一个包含术语定义以及描述的列表。**\n\n```html\n<dl>\n  <dt>项目一</dt>\n    <dd>描述一<dd>\n    <dd>描述二</dd>\n  <dt>项目二</dt>\n    <dd>描述一</dd>\n    <dd>描述二</dd>\n<dl>\n```\n<a name=\"fTbxI\"></a>\n## 表格\n<a name=\"Aj8si\"></a>\n### 基本结构\n\n- 宏观结构\n> **< table> 标签用于定义 HTML 表格**\n> **< thead> 标签定义表格的表头**\n> **< tbody> 标签用于组合 HTML 表格的主体内容**\n> **< tfoot> 标签定义表格的页脚（脚注或表注）**\n\n- 微观结构\n> **< tr> 标签用于定义 HTML 表格中的行。**\n> **< th> 标签用于定义表格内的表头单元格。**\n> **< td> 标签用于定义 HTML 表格中的标准单元格。**\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>姓名</th>\n      <th>班级</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>王小明</td>\n      <td>会计3班</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td colspan=\"2\">学生信息</td>\n    </tr>\n  </tfoot>\n</table>\n```\n<a name=\"SgfKs\"></a>\n### 表格样式：table属性\n| 属性             | 值                                                                                | 描述                   |\n| ---------------- | --------------------------------------------------------------------------------- | ---------------------- |\n| align            | left&#124;right&#124;center                                                       | 内容对齐               |\n| bgcolor          |                                                                                   | 背景颜色               |\n| border           | pixels                                                                            | 边框宽度               |\n| cellpadding      | pixels                                                                            | 边缘与内容之间的空白   |\n| cellspacing      | pixels                                                                            | 单元格之间的空白       |\n| frame            | above&#124;below&#124;hsides&#124;<br/>vsides&#124;lhs&#124;border&#124;void | 规定外边框哪个部分可见 |\n| rules            | none&#124all&#124rows&#124cols&#124groups                                         | 规定内边框哪个是可见的 |\n| height           | pixels                                                                            | 表格高度               |\n| width            | pixels                                                                            | 表格宽度               |\n| bordercolor      | rgb                                                                               | 边框颜色               |\n| bordercolorlight | rgb                                                                               | 设置亮边框（左上）     |\n| bordercolordark  | rgb                                                                               | 设置暗边框（右下）     |\n<a name=\"T0FdN\"></a>\n#### 表格边框属性\n| 属性 | 值 | 描述 |\n| --- | --- | --- |\n| border | pixels | 宽度 |\n| bordercolor | rgb | 边框颜色 |\n| bordercolorlight | rgb | 设置亮边框（左上） |\n| bordercolordark | rgb | 设置暗边框（右下） |\n\n<a name=\"VVJw4\"></a>\n#### 表格样式：frame和rules\n| fram属性值 | 规定外边框哪个部分可见 | rules属性值 | 规定内边框哪个是可见的 |\n| --- | --- | --- | --- |\n| above | 上 | none | 无 |\n| below | 下 | all | 所有 |\n| hsides | 上下 | rows | 行边框 |\n| vsides | 左右 | cols | 列边框 |\n| lhs | 左 | groups | 介于行列间边框 |\n| rhs | 右 |  |  |\n| border | 上下左右 |  |  |\n| void | 无 |  |  |\n\n<a name=\"DXSD6\"></a>\n### 行样式：tr属性\n| 属性 | 值 | 描述 | 属性 | 值 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| align | left&#124;right&#124;center | 水平对齐 | bordercolorlight | rgb | 设置亮边框（左上） |\n| valign | top&#124;bottom&#124;middle | 垂直对齐 | bordercolordark | rgb | 设置暗边框（右下） |\n| bgcolor |  |  | bordercolor | rgb | 边框颜色 |\n\n<a name=\"NlVbS\"></a>\n### 单元格样式：td属性\n| 属性 | 值 | 描述 | 属性 | 值 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| align | left&#124;right&#124;center | 水平对齐 | bordercolorlight |  |  |\n| valign | top&#124;bottom&#124;middle | 垂直对齐 | bordercolordark |  |  |\n| bgcolor |  | 背景颜色 | rowspan | int | 单元格跨行 |\n| background |  | 背景图案 | colspan | int | 单元格跨列 |\n| bordercolor |  | 边框颜色 | width |  |  |\n|  |  |  | heith |  |  |\n\n<a name=\"wZE5i\"></a>\n## 表单\n<a name=\"dBe2M\"></a>\n### 表单：form\n> **< form> 标签用于为用户输入创建 HTML 表单，用于向服务器传输数据**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| action | URL | 规定当提交表单时向何处发送表单数据。 |\n| method | get、post（更常用） | 规定用于发送 form-data 的 HTTP 方法。 |\n| autocomplete | on（默认）、off | 规定是否启用表单的自动填充功能。 |\n| target | \\_blank、\\_self、\\_parent、\\_top、framename | 规定在何处打开 action URL。 |\n| name | form_name | 规定表单的名称。 |\n| accept-charset | charset_list | 规定服务器可处理的表单数据字符集。 |\n| enctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 规定在发送表单数据之前如何对其进行编码：<br />- application/x-www-form-urlencoded在发送前编码所有字符（默认）（空格被编码为“+”，特殊字符被编码为ASCII十六进制字符）<br />- multipart/form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值<br />- text/plain 空格转换为 “+” 加号，但不对特殊字符编码<br /> |\n| novalidate | novalidate | 如果使用该属性，则提交表单时不进行验证。 |\n\n> get和post的区别：\n> 1. GET 和 POST 是HTTP 协议中的两种发送请求的方法，底层都是 TCP/IP，理论上get也可以将数据放在request body中，post也可以将数据放在url中，但不同的浏览器和服务器的处理不太一样\n> 2. GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包，具体表现为：\n> \n对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）\n> 而对于 POST，浏览器先发送 header，服务器响应 100（continue），浏览器再发送 data，服务器响应 200（返回数据）\n\n<a name=\"MLOxb\"></a>\n### 输入框：input\n> **< input> 标签用于搜集用户信息。**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n  名字：<input type=\"text\" name=\"name\"><br><br>\n  邮箱：<input type=\"text\" name=\"email\"><br><br>\n  <button type=\"submit\">提交</button>\n</form>\n```\ninput元素中的type与name属性是必填的，才能让服务器知道传输的数据是什么类型，该怎么称呼这一数据\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| type | button、checkbox、color、date、datetime-local、email、file、hidden、image、month、number、password、radio、range、reset、search、submit、tel、text、time、url、week | 规定 input 元素的类型 |\n| name | field_name | 指定元素的名称，用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据，只有设置了 name 属性的表单才能在提交表单时传递该值 |\n| autocomplete | on、off | 指定是否自动填充 |\n| autofocus | 无 | 指定是否将光标自动移动到指定处 |\n| value | text | 指定输入字段的初始值 |\n| disabled | 无 | 指定是否禁用该 input 元素，通常已经有value属性 |\n| readonly | 无 | 将文本框设为只读模式，防止用户编辑其内容，通常已经有value属性<br />与disabled的区别在于readonly依然会将值提交至服务器；而disabled不会 |\n| accept | mime_type | 指定提交的文件类型（多个类型之间使用英文的逗号隔开，文件类型的几种表述方式请参考 -> [传送门）](https://fishc.com.cn/thread-128222-1-1.html) |\n| alt | text | 指定图像的说明文字 |\n| checked | checked | 指定该属性的复选框，默认显示为勾选状态 |\n| form | formname | 指定其所属的一个或多个表单 id 值（在 HTML5 中，表单允许你将 input 放在文档中的任意位置，当你这么做的时候，可以通过指定该属性来确定元素所关联的表单） |\n| formaction | URL | 指定表单提交的位置（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formenctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 指定表单提交的编码方式（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formmethod | get、post | 指定表单提交的方法（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formnovalidate | formnovalidate | 指定是否重置 form 元素的 novalidate 属性，如果重置，那么当表单提交时 input 元素将不再进行任何验证（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formtarget | \\_blank、\\_self、\\_parent、\\_top、framename | 指定表单提交后在何处打开 action URL（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| height | pixels、% | 指定图像的高度（像素） |\n| list | datalist-id | 指定一个数据列表，即 datalist 元素的 id 值 |\n| max | number、date | 指定可接受的最大值，以便进行输入验证 |\n| maxlength | number | 指定用户可以在文本框输入的最大字符数 |\n| min | number、date | 指定可接受的最小值，以便进行输入验证 |\n| multiple | multiple | 指定该属性后可以上传多个文件 |\n| pattern | regexp_pattern | 指定一个用于输入验证的正则表达式 |\n| placeholder | text | 指定一个占位提示文本 |\n| required | required | 表明用户必须输入一个值，否则无法通过输入验证 |\n| size | number_of_char | 指定文本框的宽度 |\n| src | URL | 指定要显示的图像的 URL |\n| step | number | 指定上下调节数值的步长 |\n| width | pixels、% | 指定图像的宽度（像素） |\n\n<a name=\"ZocKe\"></a>\n### 按钮：button\n> **\\<button> 标签用于定义一个按钮。**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n    名字：<input type=\"text\" name=\"name\"><br><br>\n    邮箱：<input type=\"text\" name=\"email\"><br><br>\n    <button type=\"submit\">提交</button>\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| autofocus | autofocus | 指定当页面加载的时候，按钮将获得焦点。 |\n| disabled | disabled | 禁用按钮。 |\n| form | form_id | 指定按钮所关联的表单 ID。 |\n| formaction | url | 覆盖 form 元素的 action 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formenctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 覆盖 form 元素的 enctype 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formmethod | get、post | 覆盖 form 元素的 method 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formnovalidate | formnovalidate | 覆盖 form 元素的 novalidate 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formtarget | \\_blank、\\_self、\\_parent、\\_top、framename | 覆盖 form 元素的 target 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| name | button_name | 指定按钮的名称 |\n| type | button（脚本运行按钮）、reset（清空）、submit（提交数据到服务器） | 指定按钮的类型 |\n| value | text | 指定按钮的初始值<br />注释：可由脚本进行修改。 |\n\n> **若input标签的type属性的值为submit，则实现的是按钮效果，与button类似**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n    名字：<input type=\"text\" name=\"name\"><br><br>\n    邮箱：<input type=\"text\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n<a name=\"WeC2D\"></a>\n### 标签：label\n> **\\<label> 标签为 input 元素定义标注（标记）。**\n\n```html\n  <form>\n    <label for=\"male\">Male</label>\n    <input type=\"radio\" name=\"sex\" id=\"male\"><br/>\n    <label for=\"female\">Female</label>\n    <input type=\"radio\" name=\"sex\" id=\"female\">\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| for | 与所属的input的id值对应，如：<br /><label for=\"XXX\"></label><br />\\<input id =\"XXX\"/> | 指定 label 将绑定另一个表单元素的 ID 属性值 |\n| form | formid | 指定 label 所属的表单 ID |\n\n> 将input置于label元素的里面也可以实现label与input的一一对应哦\n\n<a name=\"XMQVB\"></a>\n### 表单分类：fieldset与legend元素\n> **\\<fieldset> 标签将表单内容的一部分打包，生成一组相关表单的字段。**\n> **\\<legend> 标签用于为 fieldset 元素定义说明文字。**\n\n```html\n<form>\n  \t<fieldset>\n      \t<legend>学生一</legend>\n            <label for=\"name1\">姓名：</label><input id=\"name1\" type=\"text\" />\n            <label for=\"class1\">班级：</label><input id =\"class1\" type=\"text\" />\n    </fieldset>\n    <fieldset>\n      \t<legend>学生二</legend>\n            <label for=\"name2\">姓名：</label><input id=\"name2\" type=\"text\" />\n            <label for=\"class2\">班级：</label><input id =\"class2\" type=\"text\" />\n    </fieldset>\n</form>\n```\n<a name=\"ngNSA\"></a>\n### 可选框：select、option与optgroup\n> **\\<select> 标签用于创建单选或多选菜单。**\n> **\\<option> 标签用于定义下拉列表中的一个选项。**\n> **\\<optgroup> 标签用于为下拉列表的选项进行分组。**\n\nselect与input类似，type与name也必填的；若存在对应的label元素，还要加上id属性\n```html\n<form>\n  \t<fieldset>\n      \t<legend>学生一</legend>\n            <label for=\"name1\">姓名：</label><input id=\"name1\" name=\"name\" type=\"text\" />\n            <label for=\"class1\">班级：</label>\n            <select name=\"class\" id=\"class1\">\n                <option>计算机一班</option>\n              \t<option>计算机二班</option>\n             \t \t<option>计算机三班</option>\n              \t<option>计算机四班</option>\n            </select>\n    </fieldset>\n    <fieldset>\n      \t<legend>学生二</legend>\n            <label for=\"name2\">姓名：</label><input id=\"name2\" name=\"name\" type=\"text\" />\n            <label for=\"class2\">班级：</label>\n            <select name=\"class\" id=\"class2\">\n                <option>计算机一班</option>\n              \t<option>计算机二班</option>\n             \t \t<option>计算机三班</option>\n              \t<option>计算机四班</option>\n            </select>\n    </fieldset>\n</form>\n```\n| **select属性** | **值** | **描述** |\n| --- | --- | --- |\n| autofocus | 无 | 指定在页面加载后文本区域自动获得焦点 |\n| name | name | 指定该下拉列表的名称 |\n| disabled | 无 | 指定该下拉列表被禁用 |\n| form | form_id | 指定所属表单 |\n| multiple | 无 | 指定该下拉列表支持多个选项 |\n| required | 无 | 指定文本区域是必填的 |\n| size | number | 指定下拉列表中可见选项的数目 |\n\n| **option属性** | **值** | **描述** |\n| --- | --- | --- |\n| disabled | disabled | 指定该选项被禁用 |\n| label | text | 指定该选项在列表中所显示的标签 |\n| selected | selected | 指定该选项表现为选中状态 |\n| value | text | 指定发送到服务器的值<br />如标签显示“计算机一班”；发送到服务器处理的值是\"211461\" |\n\n> 若选项多，且可分组，则可以利用\\<optgroup>属性对option元素进行分类\n\n```html\n<select>\n        <optgroup label=\"计算机学院\">\n            <option value=\"211461\">一班</option>\n            <option value=\"211462\">二班</option>\n        </optgroup>\n        <optgroup label=\"通信学院\">\n            <option value=\"211451\">一班</option>\n            <option value=\"211452\">二班</option>\n        </optgroup>\n</select>\n```\n| **optgroup属性** | **值** | **描述** |\n| --- | --- | --- |\n| disabled | disabled | 指定该选项被禁用 |\n| label | text | 指定该分组的标签 |\n\n<a name=\"r4r7j\"></a>\n### 单选框：type属性radio\n> **若要设置单选框，则设置input元素的type属性值为radio**\n\n```html\n<form>\n\t<label>\n\t\t<input type=\"radio\" name=\"sex\" value=\"male\">男\n\t</label><br/>\n\t<label>\n\t\t<input type=\"radio\" name=\"sex2\" value=\"male\">女\n\t</label>\n</form>\n```\n\n- 若要几个当中选一个，那么所有name属性都要一致\n- 若name属性不一致，则可复选\n<a name=\"plv5S\"></a>\n### 多选框：type属性checkbox\n> **若要设置多选下拉框，则可设置input元素type属性为checkbox**\n\n```html\n<form>\n    <input type=\"checkbox\" name=\"fruit\" value=\"watermelon\">西瓜<br>\n    <input type=\"checkbox\" name=\"fruit\" value=\"banana\">香蕉<br>\n    <input type=\"checkbox\" name=\"fruit\" value=\"blueberry\">蓝莓<br>\n</form>\n```\n<a name=\"UipPp\"></a>\n### 日期与时间datetime-local\n> **时间加日期的选择框，type的值选择datetime-local**\n\n> **注意哦，这里提交数据中的\":\"是按照URL编码表示为\"%3A\"**\n\n若要了解更多[URL编码](#pEGrg)，请点击链接\n```html\n<form>\n    生日 (日期和时间): <input type=\"datetime-local\" name=\"bdaytime\">\n    <input type=\"submit\" value=\"提交>\n</form>\n```\n<a name=\"OVwDU\"></a>\n### \n<a name=\"wKc7Z\"></a>\n### 搜索框：type属性search\n> **在input的type属性值设置为search实现搜索框**\n\n```html\n<form>\n    度娘: <input type=\"search\" name=\"bdSearch\">\n</form>\n```\n<a name=\"sMd95\"></a>\n### 接收多行表单\n> **\\<textarea>** **标签定义多行的文本输入控件。**\n\n```html\n<textarea rows=\"10\" cols=\"30\">\n   我是一个文本框。\n</textarea>\n```\n\n<a name=\"RZkS4\"></a>\n## 可交互元素\n\n<a name=\"E5fNf\"></a>\n### meun\n<a name=\"IdgES\"></a>\n### meunitem\n<a name=\"x2Xxi\"></a>\n# 属性\n<a name=\"PGNKb\"></a>\n## 全局属性\n<a name=\"fnegB\"></a>\n## 常用属性\n<a name=\"OCIvl\"></a>\n# 事件\n<a name=\"tRf3d\"></a>\n## 窗口事件\n<a name=\"jIumZ\"></a>\n## 表单事件\n<a name=\"A66W7\"></a>\n## 键盘事件\n<a name=\"rgnZj\"></a>\n## 鼠标事件\n<a name=\"PUNgO\"></a>\n## 多媒体事件\n<a name=\"GmwMx\"></a>\n# 编码\n<a name=\"pEGrg\"></a>\n## URL编码\n| backspace | 8% | A | 41% | b | 62% | ¬ | %AC | Ù | %D9 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| tab | 9% | B | 42% | c | 63% | ¯ | %AD | Ú | %DA |\n| linefeed | %0A | C | 43% | d | 64% | º | %B0 | Û | %DB |\n| creturn | %0D | D | 44% | e | 65% | ± | %B1 | Ü | %DC |\n| space | 20% | E | 45% | f | 66% | ª | %B2 | Ý | %DD |\n| ! | 21% | F | 46% | g | 67% | , | %B4 | Þ | %DE |\n| \" | 22% | G | 47% | h | 68% | µ | %B5 | ß | %DF |\n| # | 23% | H | 48% | i | 69% | » | %BB | à | %E0 |\n| $ | 24% | I | 49% | j | %6A | ¼ | %BC | á | %E1 |\n| % | 25% | J | %4A | k | %6B | ½ | %BD | â | %E2 |\n| & | 26% | K | %4B | l | %6C | ¿ | %BF | ã | %E3 |\n| ' | 27% | L | %4C | m | %6D | À | %C0 | ä | %E4 |\n| ( | 28% | M | %4D | n | %6E | Á | %C1 | å | %E5 |\n| ) | 29% | N | %4E | o | %6F | Â | %C2 | æ | %E6 |\n| * | %2A | O | %4F | p | 70% | Ã | %C3 | ç | %E7 |\n| + | %2B | P | 50% | q | 71% | Ä | %C4 | è | %E8 |\n| , | %2C | Q | 51% | r | 72% | Å | %C5 | é | %E9 |\n| - | %2D | R | 52% | s | 73% | Æ | %C6 | ê | %EA |\n| . | %2E | S | 53% | t | 74% | Ç | %C7 | ë | %EB |\n| / | %2F | T | 54% | u | 75% | È | %C8 | ì | %EC |\n| 0 | 30% | U | 55% | v | 76% | É | %C9 | í | %ED |\n| 1 | 31% | V | 56% | w | 77% | Ê | %CA | î | %EE |\n| 2 | 32% | W | 57% | x | 78% | Ë | %CB | ï | %EF |\n| 3 | 33% | X | 58% | y | 79% | Ì | %CC | ð | %F0 |\n| 4 | 34% | Y | 59% | z | %7A | Í | %CD | ñ | %F1 |\n| 5 | 35% | Z | %5A | { | %7B | Î | %CE | ò | %F2 |\n| 6 | 36% | ? | %3F | &#124; | %7C | Ï | %CF | ó | %F3 |\n| 7 | 37% | @ | 40% | } | %7D | Ð | %D0 | ô | %F4 |\n| 8 | 38% | \\[ | %5B | ~ | %7E | Ñ | %D1 | õ | %F5 |\n| 9 | 39% | \\\\ | %5C | ¢ | %A2 | Ò | %D2 | ö | %F6 |\n| : | %3A | ] | %5D | £ | %A3 | Ó | %D3 | ÷ | %F7 |\n| ; | %3B | ^ | %5E | ¥ | %A5 | Ô | %D4 | ø | %F8 |\n| <  | %3C | _ | %5F | &#124; | %A6 | Õ | %D5 | ù | %F9 |\n| = | %3D | ` | 60% | § | %A7 | Ö | %D6 |  |  |\n| >  | %3E | a | 61% | « | %AB | Ø | %D8 |  |  |\n\n## 语言代码\n\n## 字符集\n","source":"_posts/计算机语言知识库/HTML.md","raw":"---\ntitle: HTML\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:33:34\ntags: \n- 前端\n- 语言基础\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n\n\n![](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg)\n<a name=\"HFtsm\"></a>\n# 元素\n \n## 根元素\n> **<!DOCTYPE html> 是一个声明，表示该文档是由 HTML5 进行编写的。**\n> **<!DOCTYPE> 声明必须是 HTML 文档的第一行，位于 < html> 标签之前**\n\n| 主根元素 | html | html 元素用于告诉告诉浏览器其自身是一个 HTML 文档 |\n| --- | --- | --- |\n| 分区根元素 | body |表明这是文档的主体部分|\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    这是文档的头部\n  </head>\n  <body>\n    这是文档的主体\n  </body>\n</html>\n```\n<a name=\"e3ce87db\"></a>\n## 元数据\n<a name=\"TWAh9\"></a>\n### head标签\n> **< head> 标签用于定义文档的头部，它是所有头部元素的容器**\n\n<a name=\"cFRIO\"></a>\n### title标签\n> **< title> 标签用于定义文档的标题。**\n\n- < title> 标签必须位于 < head>标签内部。\n- 会在浏览器的窗口或选项卡的顶部显示\n```html\n<title>显示在浏览器的标题栏上</title>\n```\n\n<a name=\"Wujh1\"></a>\n### meta标记\n> **< meta> 标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。**\n\n下面介绍meta元素的功能：\n\n1. 编码和自适应\n\n```html\n<meta charset=\"UTF-8\"> \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n2. 网站描述\n\n```html\n<meta name=\"keywords\" content=\"（关键字）\">\n<meta name=\"descript\" content=\"（描述）\">\n<meta name=\"author\" content=\"（作者）\">\n<meta name=\"generator\" content=\"（制作所用的软件）\">\n<meta name=\"copyright\" content=\"（版权所有）\">\n<meta name=\"revisit-after\" content=\"7 days\" >//设置搜索引擎的抓取频率\n<meta name=\"robots\" content=\"none\">\n1、none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2、noindex : 搜索引擎不索引此网页。\n3、nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4、all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5、index : 搜索引擎索引此网页。\n6、follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n```\n\n3. 向浏览器头部(响应头)返回信息\n\n```html\n<meta http-equiv=\"refresh\" content=\"30\">//每30秒刷新一次\n<meta http-equiv=\"Pragma\"content=\"no-cache\"> //禁止从缓存中读取HTML\n//两秒刷新并且指向新页面\n<meta http-equiv=\"refresh\" content=\"2\";URL=\"http://www.haorooms.com\">[//两秒刷新并且指向新页面\n<meta http-equiv=\"expires\" content=\"（GMT时间格式）\">//设置到期时间\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=gb2312\"> \n<meta http-equiv=\"charset\" content=\"iso-8859-1\">\n```\n<a name=\"fnyhk\"></a>\n### base标签\n> **< base>为相对链接设置基本URL**\n> **< base>指定用户如何打开链接，以及表单提交后浏览器的状态**\n\n属性：\n\n1. herf\t\t为文档的相对URL指定基本URL\n```html\n<head>\n   <base  href=\"//www.w3cschool.cn/listings/\"/>\n</head>\n<body>\n   <a href=\"/javascript.html\">JavaScript</a>\n</body>\n```\n\n2. target\t\t指示浏览器如何打开网址\n| 属性值    | 描述                                          |\n| --------- | --------------------------------------------- |\n|           |                                               |\n| \\_blank    | 在新窗口打开链接                              |\n| \\_self    | 在同一窗口或框架打开链接（默认），即当前的div |\n| \\_parent   | 在父框架打开链接，即上一层框架                |\n| \\_top      | 在整个窗口打开链接                            |\n| framename | 在一指定框架打开链接，即在指定div             |\n\n<a name=\"dWD6I\"></a>\n## div和语义化布局\n在HTML5出世之前，人们实现网页布局都是利用div，而HTML5新的语义化元素也能实现网页布局，而且更凸显语义化<br />在经典的页面布局中，页面被分为 header、main、aside、footer 四个部分:![](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662092868310-ef59cd51-a19c-4865-a31c-250695024632.jpeg)\n### div\n> **\\<div> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。**\ndiv通常和css一起使用\n\n### 页眉header\n> **\\<header> 标签用于定义文档的页眉（介绍信息）**\n\n### 导航nav\n> **\\<nav> 标签用于定义页面主导航功能。**\n\n<a name=\"Lv1ms\"></a>\n### 主体main\n> **\\<main> 标签用于定义文档**[**\\<body>**](https://man.ilovefishc.com/pageHTML5/body.html)**或应用的主体部分。**\n\n<a name=\"TJFWp\"></a>\n### 节section\n> **\\<section> 标签用于定义定义文档中的节。**\n\n\n<a name=\"dDkzH\"></a>\n### 文章article\n> **\\<article> 标签用于定义一篇文章，是网页中独立的内容，与页面其它部分无关。**\n\n<a name=\"vyxWh\"></a>\n### 详情details\n> **\\<details> 标签用于定义用户可见的或者隐藏的需求的补充细节。**\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| open | open | 规定 details 是否默认可见。 |\n\n<a name=\"DBBFL\"></a>\n### 总结summary\n> **\\<summary> 标签定义 **[**\\<details>**](https://man.ilovefishc.com/pageHTML5/detail.html)** 元素的标题**\n\n```html\n<details>\n    <summary>《零基础入门学习Python》</summary>\n    <p>配有同名书籍。</p>\n    <p>配有视频教程</p>\n</details>\n\n```\n<a name=\"HaRxr\"></a>\n### 插图figure\n> **\\<figure> 标签规定独立的流内容（图像、图表、照片、代码等等）。**\n\nfigure 元素代表一段独立的内容, 经常与说明 [figcaption](https://man.ilovefishc.com/pageHTML5/figcaption.html) 元素配合使用, 并且作为一个独立的引用单元。\n> **\\<figcaption> 标签为 figure 元素定义标题。**\n\n```html\n <figure>\n  \t<img src=\"../img/logo.png\"  alt=\"鱼C-Logo\" />\n    <figcaption>鱼C工作室，让自学编程变得妙不可言｡◕‿◕｡</figcaption>\n</figure>\n```\n<a name=\"K1cYQ\"></a>\n### aside\n> **\\<aside> 标签定义侧边栏，通常是网页的说明、提示、引用、附加注释、相关链接、广告等内容。**\n\n<a name=\"Wsw5i\"></a>\n### 页脚footer\n> **\\<footer> 标签定义文档或节的页脚**\n\n\n## 文字内容\n<a name=\"QZF96\"></a>\n### 超链接a\n> **\\<a> 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。**\n\n基础语法：\n```html\n<a href=\"文件路径\" name=\"anchor名称\" title=\"提示信息\" target=\"打开方式\">超链接</a>\n```\n特殊用法：\n\n1. FTP站点访问链接\n```html\n<a herf=\"ftp://服务器IP地址或域名\">超链接文字</a>\n```\n\n2. 电子邮件超链接\n```html\n<a href=\"mailto:E-mali邮箱地址？subject=邮件主题\">\n```\n\n3. 定义书签\n```html\n<a  name=\"书签名\">书签标题</a>\n\n```\n\n4. 跳转至书签\n```html\n<a href=\"#书签名\">书签标题</a>同页跳转 \n<a href=\"URL#书签名\">书签标题</a>异页跳转\n```\n<a name=\"Ux6mJ\"></a>\n### 标题h1\n> **\\<h1> - \\<h6> 标签可定义标题。**\n\n\n```html\n<h1>一号标题</h1>\n<h2>二号标题</h2>\n<h3>三号标题</h3>\n```\n\n- align属性:  left | center | right | justfiy\n<a name=\"pZDqS\"></a>\n### 粗体b\n> **\\<b> 标签用于定义表示粗体的文本。**\n\n根据 HTML5 的规范，如果你只是想实现加粗效果，推荐使用 css 样式来实现：.bolder {font-weight: bolder;}\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用css代替加粗</title>\n    <style>\n    .bolder{\n      font-weight:bolder;\n    }\n    </style>\n</head>\n<body>\n    <p class=\"bloder\">这是粗体文本</p>\n</body>\n</html>\n```\n<a name=\"kAhDq\"></a>\n### 斜体i\n> **\\<i> 标签用于定义表示斜体的文本。**\n\n同样推荐使用 css 样式来实现：.italic{font-style: italic;}\n<a name=\"Uv1uj\"></a>\n### 空格、回车、分割线和特殊字符\n\n- 空格和特殊字符\n\n```html\n&nbsp;\t( )\n&lt;   \t(<)\n&gt; \t\t(>)\n&amp;   (&)\n&quot;  (\")\n&times; (×)\n&divide;(÷)\n&cope;  (©)版权\n&reg;   (®)注册商标\n&trade;\t(™)商标\n```\n\n- 回车和分割线\n\n```html\n<br>或者<br/>\n<hr width=\"(百分比或者像素px)\" size=\"像素px\" color=\"\" align=\"left|center|right\">\n```\n<a name=\"BKyav\"></a>\n### 段落p\n> **\\<p> 标签用于定义一个段落。**\n\n```html\n<p align=\"\"></p>\n```\n\n<a name=\"HyrXI\"></a>\n### 整体缩进blockquote\n> **\\<blockquote> 标签定义块引用。**\n\n\n```html\n<blockquote>缩进5个字符位置</blockquote>\n<blockquote><blockquote>缩进10个字符位置</blockquote></blockquote>\n```\n\n<a name=\"hJjuJ\"></a>\n### 预格式化pre\n> **\\<pre> 标签用于定义预格式化的文本。**\n\npre 元素中的文本通常会保留空格和换行符，而文本自身也会呈现为等宽字体。\n```html\n<pre>\n          春 晓\n春眠不觉晓⑴，处处闻啼鸟⑵。\n夜来风雨声⑶，花落知多少⑷。\n</pre>\n```\n\n<a name=\"Q9EmI\"></a>\n## 图片和多媒体\n<a name=\"YxCUZ\"></a>\n### 图像img\n> **<img> 标签用于向网页中嵌入一幅图像。**\n\n```html\n<img src=\"URL\" alt=\"替代文本\">\n```\n完整属性：\n\n| 属性 | 值 | 说明 | 属性 | 值 | 说明 |\n| --- | --- | --- | --- | --- | --- |\n| alt | text | <br />- 鼠标悬停在图片上时出现的文字<br />- 加载失败时会代替图片<br /> | align | top&#124;middle&#124;bottom&#124;<br/>left&#124;center&#124;right | 排列方式 |\n| src | URL | 图片的链接 | boder | pixels | 边框 |\n| name | text | 名称 | hspace | pixels | 左侧和右侧的空白 |\n| height | pixels | 高 | vspace | pixels | 顶部和底部的空白 |\n| width | pixels | 宽 | usemap | URL | 将图像定义为客户器端图像映射 |\n\n\n### map与area\n\n- 为图像设置超链接\n```html\n<a herf=\"URL\" target=\"打开方式\"><img src=\"URL\"></a>\n```\n\n- 为图像设置热区链接\n```html\n<img src=\"URL\" usemap=\"#+映射图像名称\">\n<map  name=\"映射图像名称\">\n  <area  shap=\"热区形状\" coords=\"热区坐标\" href=\"URL\">\n  <area  shap=\"热区形状\" coords=\"热区坐标\" href=\"URL\">\n  ...\n</map>\n```\n注意事项：img的usemap的属性值要\"#+映射图像名称\"\n\n| shape值 | coords值 | 说明 |\n| --- | --- | --- |\n| rect（矩形） | x1,y1,x2,y2 | 矩形的四个坐标 |\n| circle（圆形） | center-x,center-y,radius | 圆心坐标和半径 |\n| poly（多边形） | x1,y1,x2,y2,x3,y3... | 各顶点坐标 |\n\n\n### picture与source\n\n> **< picture> 标签为其内部特定的 img 元素提供多样的 [source](https://man.ilovefishc.com/pageHTML5/source.html) 元素**\n> **<source> 标签为 picture , audio 或者 video 元素指定多个媒体资源。**\n\n\n\n\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| src | url | 规定媒体文件的 URL。 |\n| srcset | url | 仅当source元素是picture元素的直接子元素时，srcset属性才有效。 |\n| [media](https://man.ilovefishc.com/pageHTML5/media.html) | media query | 规定媒体资源的类型。 |\n| sizes |  | 表示源大小的列表，用于描述源代表的图像的最终渲染宽度。 |\n| type | numeric value | 规定媒体资源的 MIME 类型。 |\n\n```html\n<picture>\n  <source media=\"(min-width:1024px)\" srcset=\"big.jpg\">\n  <source media=\"(min-width:512px)\" srcset=\"normal.jpg\">\n  <img src=\"small.jpg\" alt=\"图片\" sytle=\"width:auto\">\n</picture>\n```\n代码效果讲解：\n\n1. 当屏幕大于1024时，显示big.jpg\n2. 当屏幕大于512小于1024时，显示normal.jpg\n3. 当屏幕小于512时，显示small.jpg\n<a name=\"vYXRh\"></a>\n### 任何插件embed\n> **< embed> 标签定义嵌入的内容，比如插件。**\n\n```html\n<embed src=\"URL\" width=\"\" higth=\"\" autostart=\"true|false(是否自动播放)\" loop\n  =\"true|false(是否循环)\">\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| height | pixels | 规定嵌入内容的高度。 |\n| src | URL 规定被嵌入内容的 URL。 |  |\n| type | MIME_type | 规定嵌入内容的 MIME 类型。注：MIME = Multipurpose Internet Mail Extensions。 |\n| width | pixels | 规定嵌入内容的宽度。 |\n\n\n### 视频video\n> **< video> 标签定义视频，比如电影片段或其他视频流。**\n\n目前，< video> 元素支持三种视频格式：MP4、WebM、Ogg。\n```html\n<!--显示控件--!>\n<video width=\"640\" height=\"360\" controls>\n\t\t<source src=\"http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4\"  type=\"video/mp4\">\n</video>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| autoplay | autoplay | 如果指定该属性，则视频在就绪后将自动播放。 |\n| controls | controls | 如果指定该属性，则向用户显示控件，比如播放/暂停按钮。 |\n| width | pixels | 指定视频播放器的宽度。 |\n| height | pixels | 指定视频播放器的高度。 |\n| loop | loop | 如果指定该属性，将循环播放视频。 |\n| muted | muted | 如果指定该属性，则将视频的音频输出为静音。 |\n| poster | URL | 指定视频的封面 |\n| preload | auto、metadata、none | 指定视频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto（默认）：要求浏览器尽快加载整个视频<br />metadata：只加载视频的元数据（宽度、高度、第一帧影像和视频总长度等）<br />none：在用户点击开始播放之前不会加载视频，若不设定poster视频的黑的 |\n| src | URL | 指定要播放的视频文件的 URL 地址。 |\n\n注意事项：\n\n1. 使用video标签时controls属性或antoplay属性二选一，否则视频无法播放\n2. controls与antoplay同时使用时，chrome浏览器不会自动播放，要添加muted属性（静音）才能自动播放 \n<a name=\"hWx0q\"></a>\n### 音频audio\n> **\\<audio> 标签定义声音，比如音乐或其他音频流。**\n\n目前，\\<audio> 标签定义声音，支持的3种文件格式：MP3、Wav、Ogg\n```html\n<audio controls loop>\n\t<source src=\"http://fishc.oss-cnhangzhou.aliyuncs.com/Web/audio_tag.mp3\" >\n</audio>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| autoplay | autoplay | 如果指定该属性，则音频在就绪后马上播放。 |\n| controls | controls | 如果指定该属性，则向用户显示播放控件（比如播放/暂停按钮）。 |\n| loop | loop | 如果指定该属性，将循环播放音频。 |\n| muted | muted | 如果指定该属性，则音频输出为静音。 |\n| preload | auto、metadata、none | 指定音频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto：要求浏览器尽快加载整个音频，默认行为<br />metadata：只加载音频的元数据<br />none：在用户点击开始播放之前不会加载音频 |\n| src | URL | 指定要播放的音频文件的 URL 地址。 |\n\n<a name=\"g5RWU\"></a>\n## 内嵌内容\n<a name=\"sW8YR\"></a>\n### iframe\n> **\\<iframe> 标签会创建包含另外一个文档的内联框架（即行内框架）。**\n\n```html\n<body>\n\t\t<iframe src=\"javascript.html\" class=\"iframe\" frameborder=\"0\"></iframe>\n</body>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| height | pixels、% | 指定 iframe 的高度。 |\n| name | text | 指定 iframe 的名称。 |\n| sandbox | allow-forms、allow-pointer-lock、allow-popups、allow-same-origin、allow-scripts、allow-top-navigation | 启用一系列对 < iframe>中内容的额外限制。 |\n| seamless | seamless | 指示浏览器将 iframe 的内容显示得像主 HTML 文档的一个整体组成部分。 |\n| src | URL | 指定在 iframe 中显示的文档的 URL 地址。 |\n| srcdoc | HTML_code | 指定在 < iframe> 中显示的页面的 HTML 内容。 |\n| width | pixels、% | 指定 iframe 的宽度。 |\n\n\n#### sandbox沙盒属性\n> **限制了嵌入网页的内容和操作**\n\n| sandbox的值 | 描述 |\n| --- | --- |\n| allow-forms | 允许提交表单 |\n| allow-pointer-lock | 允许执行脚本 |\n| allow-popups | 允许同域请求 |\n| allow-same-origin | 允许iframe能主导window .top进行页面跳转 |\n| allow-scripts | 允许iframe中弹出新窗口 |\n| allow-top-navigation | 允许在iframe中锁定鼠标 |\n\n \n### object\n> **< object> 标签定义一个嵌入的对象。**\n\n```html\n<object width=\"666\" height=\"375\" data=\"video_tag.mp4\" >\n</object>\n```\n| **属性** | **值** | **说明** |\n| --- | --- | --- |\n| form | form_id | 规定对象所属的一个或多个表单。 |\n| height | pixels | 规定对象的高度。 |\n| width | pixels | 规定对象的宽度。 |\n| name | name | 为对象规定名称。 |\n| type | MIME_type | 规定 data 属性中规定的数据的 MIME 类型。 |\n| usemap | mapname | 规定与对象一同使用的客户端图像映射的名称。 |\n\n \n## 脚本\n> **这一部分可以先草草了解一下，详见javascript教程**\n\n[Javascript](./Javascript.md)\n<a name=\"m34IF\"></a>\n### canvas\n> **< canvas> 标签定义图形，比如图表和其他图像。**\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| height | pixels | 设置 canvas 的高度。 |\n| width | pixels | 设置 canvas 的宽度。 |\n\n<a name=\"NuSUB\"></a>\n### script\n> **< script> 标签用于在 HTML 文档中加入脚本（例如 JavaScript）**\n\n```html\n<script>\n    document.write(\"lilming\");\n</script>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| type | media_type | 指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。 |\n| async | async | 告诉浏览器异步执行脚本。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 |\n| charset | charset | 指定外部脚本文件中使用的字符编码。<br />注意：该属性只能与 src 属性一起使用。 |\n| defer | defer | 告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。 |\n| src | URL | 指定外部脚本文件的 URL。 |\n\n<a name=\"DdbGP\"></a>\n## 列表\n\n<a name=\"wCnzZ\"></a>\n### 无序列表ul\n> **< ul> 标签用于定义无序列表。**\n\ntype的属性值：\n\n- disc      实心圆\n- circle    空心圆\n- square    实心正方形\n\n```html\n<ul type=\"\">\n  <li type=\"\"></li>\n  <li type=\"\"></li>\n</ul>\n```\n无序列表更常用，可以用css设置序号样式，而有序列表的序号是固定的。\n<a name=\"QNqSJ\"></a>\n### 有序列表ol\n> **< ol> 标签用于定义有序列表。**\n\n\n```html\n<ol type=\"1|A|a|i|I\" start=\"数值（初始数字）\" >\n  <li type=\"\"></li>\n  <li type=\"\"></li>\n</ol>\n```\n\n<a name=\"kk3wt\"></a>\n### 定义列表dl\n> **< dl> 标签定义了一个包含术语定义以及描述的列表。**\n\n```html\n<dl>\n  <dt>项目一</dt>\n    <dd>描述一<dd>\n    <dd>描述二</dd>\n  <dt>项目二</dt>\n    <dd>描述一</dd>\n    <dd>描述二</dd>\n<dl>\n```\n<a name=\"fTbxI\"></a>\n## 表格\n<a name=\"Aj8si\"></a>\n### 基本结构\n\n- 宏观结构\n> **< table> 标签用于定义 HTML 表格**\n> **< thead> 标签定义表格的表头**\n> **< tbody> 标签用于组合 HTML 表格的主体内容**\n> **< tfoot> 标签定义表格的页脚（脚注或表注）**\n\n- 微观结构\n> **< tr> 标签用于定义 HTML 表格中的行。**\n> **< th> 标签用于定义表格内的表头单元格。**\n> **< td> 标签用于定义 HTML 表格中的标准单元格。**\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>姓名</th>\n      <th>班级</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>王小明</td>\n      <td>会计3班</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td colspan=\"2\">学生信息</td>\n    </tr>\n  </tfoot>\n</table>\n```\n<a name=\"SgfKs\"></a>\n### 表格样式：table属性\n| 属性             | 值                                                                                | 描述                   |\n| ---------------- | --------------------------------------------------------------------------------- | ---------------------- |\n| align            | left&#124;right&#124;center                                                       | 内容对齐               |\n| bgcolor          |                                                                                   | 背景颜色               |\n| border           | pixels                                                                            | 边框宽度               |\n| cellpadding      | pixels                                                                            | 边缘与内容之间的空白   |\n| cellspacing      | pixels                                                                            | 单元格之间的空白       |\n| frame            | above&#124;below&#124;hsides&#124;<br/>vsides&#124;lhs&#124;border&#124;void | 规定外边框哪个部分可见 |\n| rules            | none&#124all&#124rows&#124cols&#124groups                                         | 规定内边框哪个是可见的 |\n| height           | pixels                                                                            | 表格高度               |\n| width            | pixels                                                                            | 表格宽度               |\n| bordercolor      | rgb                                                                               | 边框颜色               |\n| bordercolorlight | rgb                                                                               | 设置亮边框（左上）     |\n| bordercolordark  | rgb                                                                               | 设置暗边框（右下）     |\n<a name=\"T0FdN\"></a>\n#### 表格边框属性\n| 属性 | 值 | 描述 |\n| --- | --- | --- |\n| border | pixels | 宽度 |\n| bordercolor | rgb | 边框颜色 |\n| bordercolorlight | rgb | 设置亮边框（左上） |\n| bordercolordark | rgb | 设置暗边框（右下） |\n\n<a name=\"VVJw4\"></a>\n#### 表格样式：frame和rules\n| fram属性值 | 规定外边框哪个部分可见 | rules属性值 | 规定内边框哪个是可见的 |\n| --- | --- | --- | --- |\n| above | 上 | none | 无 |\n| below | 下 | all | 所有 |\n| hsides | 上下 | rows | 行边框 |\n| vsides | 左右 | cols | 列边框 |\n| lhs | 左 | groups | 介于行列间边框 |\n| rhs | 右 |  |  |\n| border | 上下左右 |  |  |\n| void | 无 |  |  |\n\n<a name=\"DXSD6\"></a>\n### 行样式：tr属性\n| 属性 | 值 | 描述 | 属性 | 值 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| align | left&#124;right&#124;center | 水平对齐 | bordercolorlight | rgb | 设置亮边框（左上） |\n| valign | top&#124;bottom&#124;middle | 垂直对齐 | bordercolordark | rgb | 设置暗边框（右下） |\n| bgcolor |  |  | bordercolor | rgb | 边框颜色 |\n\n<a name=\"NlVbS\"></a>\n### 单元格样式：td属性\n| 属性 | 值 | 描述 | 属性 | 值 | 描述 |\n| --- | --- | --- | --- | --- | --- |\n| align | left&#124;right&#124;center | 水平对齐 | bordercolorlight |  |  |\n| valign | top&#124;bottom&#124;middle | 垂直对齐 | bordercolordark |  |  |\n| bgcolor |  | 背景颜色 | rowspan | int | 单元格跨行 |\n| background |  | 背景图案 | colspan | int | 单元格跨列 |\n| bordercolor |  | 边框颜色 | width |  |  |\n|  |  |  | heith |  |  |\n\n<a name=\"wZE5i\"></a>\n## 表单\n<a name=\"dBe2M\"></a>\n### 表单：form\n> **< form> 标签用于为用户输入创建 HTML 表单，用于向服务器传输数据**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| action | URL | 规定当提交表单时向何处发送表单数据。 |\n| method | get、post（更常用） | 规定用于发送 form-data 的 HTTP 方法。 |\n| autocomplete | on（默认）、off | 规定是否启用表单的自动填充功能。 |\n| target | \\_blank、\\_self、\\_parent、\\_top、framename | 规定在何处打开 action URL。 |\n| name | form_name | 规定表单的名称。 |\n| accept-charset | charset_list | 规定服务器可处理的表单数据字符集。 |\n| enctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 规定在发送表单数据之前如何对其进行编码：<br />- application/x-www-form-urlencoded在发送前编码所有字符（默认）（空格被编码为“+”，特殊字符被编码为ASCII十六进制字符）<br />- multipart/form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值<br />- text/plain 空格转换为 “+” 加号，但不对特殊字符编码<br /> |\n| novalidate | novalidate | 如果使用该属性，则提交表单时不进行验证。 |\n\n> get和post的区别：\n> 1. GET 和 POST 是HTTP 协议中的两种发送请求的方法，底层都是 TCP/IP，理论上get也可以将数据放在request body中，post也可以将数据放在url中，但不同的浏览器和服务器的处理不太一样\n> 2. GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包，具体表现为：\n> \n对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）\n> 而对于 POST，浏览器先发送 header，服务器响应 100（continue），浏览器再发送 data，服务器响应 200（返回数据）\n\n<a name=\"MLOxb\"></a>\n### 输入框：input\n> **< input> 标签用于搜集用户信息。**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n  名字：<input type=\"text\" name=\"name\"><br><br>\n  邮箱：<input type=\"text\" name=\"email\"><br><br>\n  <button type=\"submit\">提交</button>\n</form>\n```\ninput元素中的type与name属性是必填的，才能让服务器知道传输的数据是什么类型，该怎么称呼这一数据\n\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| type | button、checkbox、color、date、datetime-local、email、file、hidden、image、month、number、password、radio、range、reset、search、submit、tel、text、time、url、week | 规定 input 元素的类型 |\n| name | field_name | 指定元素的名称，用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据，只有设置了 name 属性的表单才能在提交表单时传递该值 |\n| autocomplete | on、off | 指定是否自动填充 |\n| autofocus | 无 | 指定是否将光标自动移动到指定处 |\n| value | text | 指定输入字段的初始值 |\n| disabled | 无 | 指定是否禁用该 input 元素，通常已经有value属性 |\n| readonly | 无 | 将文本框设为只读模式，防止用户编辑其内容，通常已经有value属性<br />与disabled的区别在于readonly依然会将值提交至服务器；而disabled不会 |\n| accept | mime_type | 指定提交的文件类型（多个类型之间使用英文的逗号隔开，文件类型的几种表述方式请参考 -> [传送门）](https://fishc.com.cn/thread-128222-1-1.html) |\n| alt | text | 指定图像的说明文字 |\n| checked | checked | 指定该属性的复选框，默认显示为勾选状态 |\n| form | formname | 指定其所属的一个或多个表单 id 值（在 HTML5 中，表单允许你将 input 放在文档中的任意位置，当你这么做的时候，可以通过指定该属性来确定元素所关联的表单） |\n| formaction | URL | 指定表单提交的位置（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formenctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 指定表单提交的编码方式（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formmethod | get、post | 指定表单提交的方法（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formnovalidate | formnovalidate | 指定是否重置 form 元素的 novalidate 属性，如果重置，那么当表单提交时 input 元素将不再进行任何验证（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| formtarget | \\_blank、\\_self、\\_parent、\\_top、framename | 指定表单提交后在何处打开 action URL（只能作用于具有提交性质的按钮，比如 type=\"submit\" 或 type=\"image\"） |\n| height | pixels、% | 指定图像的高度（像素） |\n| list | datalist-id | 指定一个数据列表，即 datalist 元素的 id 值 |\n| max | number、date | 指定可接受的最大值，以便进行输入验证 |\n| maxlength | number | 指定用户可以在文本框输入的最大字符数 |\n| min | number、date | 指定可接受的最小值，以便进行输入验证 |\n| multiple | multiple | 指定该属性后可以上传多个文件 |\n| pattern | regexp_pattern | 指定一个用于输入验证的正则表达式 |\n| placeholder | text | 指定一个占位提示文本 |\n| required | required | 表明用户必须输入一个值，否则无法通过输入验证 |\n| size | number_of_char | 指定文本框的宽度 |\n| src | URL | 指定要显示的图像的 URL |\n| step | number | 指定上下调节数值的步长 |\n| width | pixels、% | 指定图像的宽度（像素） |\n\n<a name=\"ZocKe\"></a>\n### 按钮：button\n> **\\<button> 标签用于定义一个按钮。**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n    名字：<input type=\"text\" name=\"name\"><br><br>\n    邮箱：<input type=\"text\" name=\"email\"><br><br>\n    <button type=\"submit\">提交</button>\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| autofocus | autofocus | 指定当页面加载的时候，按钮将获得焦点。 |\n| disabled | disabled | 禁用按钮。 |\n| form | form_id | 指定按钮所关联的表单 ID。 |\n| formaction | url | 覆盖 form 元素的 action 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formenctype | application/x-www-form-urlencoded、multipart/form-data、text/plain | 覆盖 form 元素的 enctype 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formmethod | get、post | 覆盖 form 元素的 method 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formnovalidate | formnovalidate | 覆盖 form 元素的 novalidate 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| formtarget | \\_blank、\\_self、\\_parent、\\_top、framename | 覆盖 form 元素的 target 属性<br />注释：该属性与 type=\"submit\" 配合使用。 |\n| name | button_name | 指定按钮的名称 |\n| type | button（脚本运行按钮）、reset（清空）、submit（提交数据到服务器） | 指定按钮的类型 |\n| value | text | 指定按钮的初始值<br />注释：可由脚本进行修改。 |\n\n> **若input标签的type属性的值为submit，则实现的是按钮效果，与button类似**\n\n```html\n<form action=\"demo/welcome.php\" method=\"post\">\n    名字：<input type=\"text\" name=\"name\"><br><br>\n    邮箱：<input type=\"text\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"提交\">\n</form>\n```\n<a name=\"WeC2D\"></a>\n### 标签：label\n> **\\<label> 标签为 input 元素定义标注（标记）。**\n\n```html\n  <form>\n    <label for=\"male\">Male</label>\n    <input type=\"radio\" name=\"sex\" id=\"male\"><br/>\n    <label for=\"female\">Female</label>\n    <input type=\"radio\" name=\"sex\" id=\"female\">\n</form>\n```\n| **属性** | **值** | **描述** |\n| --- | --- | --- |\n| for | 与所属的input的id值对应，如：<br /><label for=\"XXX\"></label><br />\\<input id =\"XXX\"/> | 指定 label 将绑定另一个表单元素的 ID 属性值 |\n| form | formid | 指定 label 所属的表单 ID |\n\n> 将input置于label元素的里面也可以实现label与input的一一对应哦\n\n<a name=\"XMQVB\"></a>\n### 表单分类：fieldset与legend元素\n> **\\<fieldset> 标签将表单内容的一部分打包，生成一组相关表单的字段。**\n> **\\<legend> 标签用于为 fieldset 元素定义说明文字。**\n\n```html\n<form>\n  \t<fieldset>\n      \t<legend>学生一</legend>\n            <label for=\"name1\">姓名：</label><input id=\"name1\" type=\"text\" />\n            <label for=\"class1\">班级：</label><input id =\"class1\" type=\"text\" />\n    </fieldset>\n    <fieldset>\n      \t<legend>学生二</legend>\n            <label for=\"name2\">姓名：</label><input id=\"name2\" type=\"text\" />\n            <label for=\"class2\">班级：</label><input id =\"class2\" type=\"text\" />\n    </fieldset>\n</form>\n```\n<a name=\"ngNSA\"></a>\n### 可选框：select、option与optgroup\n> **\\<select> 标签用于创建单选或多选菜单。**\n> **\\<option> 标签用于定义下拉列表中的一个选项。**\n> **\\<optgroup> 标签用于为下拉列表的选项进行分组。**\n\nselect与input类似，type与name也必填的；若存在对应的label元素，还要加上id属性\n```html\n<form>\n  \t<fieldset>\n      \t<legend>学生一</legend>\n            <label for=\"name1\">姓名：</label><input id=\"name1\" name=\"name\" type=\"text\" />\n            <label for=\"class1\">班级：</label>\n            <select name=\"class\" id=\"class1\">\n                <option>计算机一班</option>\n              \t<option>计算机二班</option>\n             \t \t<option>计算机三班</option>\n              \t<option>计算机四班</option>\n            </select>\n    </fieldset>\n    <fieldset>\n      \t<legend>学生二</legend>\n            <label for=\"name2\">姓名：</label><input id=\"name2\" name=\"name\" type=\"text\" />\n            <label for=\"class2\">班级：</label>\n            <select name=\"class\" id=\"class2\">\n                <option>计算机一班</option>\n              \t<option>计算机二班</option>\n             \t \t<option>计算机三班</option>\n              \t<option>计算机四班</option>\n            </select>\n    </fieldset>\n</form>\n```\n| **select属性** | **值** | **描述** |\n| --- | --- | --- |\n| autofocus | 无 | 指定在页面加载后文本区域自动获得焦点 |\n| name | name | 指定该下拉列表的名称 |\n| disabled | 无 | 指定该下拉列表被禁用 |\n| form | form_id | 指定所属表单 |\n| multiple | 无 | 指定该下拉列表支持多个选项 |\n| required | 无 | 指定文本区域是必填的 |\n| size | number | 指定下拉列表中可见选项的数目 |\n\n| **option属性** | **值** | **描述** |\n| --- | --- | --- |\n| disabled | disabled | 指定该选项被禁用 |\n| label | text | 指定该选项在列表中所显示的标签 |\n| selected | selected | 指定该选项表现为选中状态 |\n| value | text | 指定发送到服务器的值<br />如标签显示“计算机一班”；发送到服务器处理的值是\"211461\" |\n\n> 若选项多，且可分组，则可以利用\\<optgroup>属性对option元素进行分类\n\n```html\n<select>\n        <optgroup label=\"计算机学院\">\n            <option value=\"211461\">一班</option>\n            <option value=\"211462\">二班</option>\n        </optgroup>\n        <optgroup label=\"通信学院\">\n            <option value=\"211451\">一班</option>\n            <option value=\"211452\">二班</option>\n        </optgroup>\n</select>\n```\n| **optgroup属性** | **值** | **描述** |\n| --- | --- | --- |\n| disabled | disabled | 指定该选项被禁用 |\n| label | text | 指定该分组的标签 |\n\n<a name=\"r4r7j\"></a>\n### 单选框：type属性radio\n> **若要设置单选框，则设置input元素的type属性值为radio**\n\n```html\n<form>\n\t<label>\n\t\t<input type=\"radio\" name=\"sex\" value=\"male\">男\n\t</label><br/>\n\t<label>\n\t\t<input type=\"radio\" name=\"sex2\" value=\"male\">女\n\t</label>\n</form>\n```\n\n- 若要几个当中选一个，那么所有name属性都要一致\n- 若name属性不一致，则可复选\n<a name=\"plv5S\"></a>\n### 多选框：type属性checkbox\n> **若要设置多选下拉框，则可设置input元素type属性为checkbox**\n\n```html\n<form>\n    <input type=\"checkbox\" name=\"fruit\" value=\"watermelon\">西瓜<br>\n    <input type=\"checkbox\" name=\"fruit\" value=\"banana\">香蕉<br>\n    <input type=\"checkbox\" name=\"fruit\" value=\"blueberry\">蓝莓<br>\n</form>\n```\n<a name=\"UipPp\"></a>\n### 日期与时间datetime-local\n> **时间加日期的选择框，type的值选择datetime-local**\n\n> **注意哦，这里提交数据中的\":\"是按照URL编码表示为\"%3A\"**\n\n若要了解更多[URL编码](#pEGrg)，请点击链接\n```html\n<form>\n    生日 (日期和时间): <input type=\"datetime-local\" name=\"bdaytime\">\n    <input type=\"submit\" value=\"提交>\n</form>\n```\n<a name=\"OVwDU\"></a>\n### \n<a name=\"wKc7Z\"></a>\n### 搜索框：type属性search\n> **在input的type属性值设置为search实现搜索框**\n\n```html\n<form>\n    度娘: <input type=\"search\" name=\"bdSearch\">\n</form>\n```\n<a name=\"sMd95\"></a>\n### 接收多行表单\n> **\\<textarea>** **标签定义多行的文本输入控件。**\n\n```html\n<textarea rows=\"10\" cols=\"30\">\n   我是一个文本框。\n</textarea>\n```\n\n<a name=\"RZkS4\"></a>\n## 可交互元素\n\n<a name=\"E5fNf\"></a>\n### meun\n<a name=\"IdgES\"></a>\n### meunitem\n<a name=\"x2Xxi\"></a>\n# 属性\n<a name=\"PGNKb\"></a>\n## 全局属性\n<a name=\"fnegB\"></a>\n## 常用属性\n<a name=\"OCIvl\"></a>\n# 事件\n<a name=\"tRf3d\"></a>\n## 窗口事件\n<a name=\"jIumZ\"></a>\n## 表单事件\n<a name=\"A66W7\"></a>\n## 键盘事件\n<a name=\"rgnZj\"></a>\n## 鼠标事件\n<a name=\"PUNgO\"></a>\n## 多媒体事件\n<a name=\"GmwMx\"></a>\n# 编码\n<a name=\"pEGrg\"></a>\n## URL编码\n| backspace | 8% | A | 41% | b | 62% | ¬ | %AC | Ù | %D9 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| tab | 9% | B | 42% | c | 63% | ¯ | %AD | Ú | %DA |\n| linefeed | %0A | C | 43% | d | 64% | º | %B0 | Û | %DB |\n| creturn | %0D | D | 44% | e | 65% | ± | %B1 | Ü | %DC |\n| space | 20% | E | 45% | f | 66% | ª | %B2 | Ý | %DD |\n| ! | 21% | F | 46% | g | 67% | , | %B4 | Þ | %DE |\n| \" | 22% | G | 47% | h | 68% | µ | %B5 | ß | %DF |\n| # | 23% | H | 48% | i | 69% | » | %BB | à | %E0 |\n| $ | 24% | I | 49% | j | %6A | ¼ | %BC | á | %E1 |\n| % | 25% | J | %4A | k | %6B | ½ | %BD | â | %E2 |\n| & | 26% | K | %4B | l | %6C | ¿ | %BF | ã | %E3 |\n| ' | 27% | L | %4C | m | %6D | À | %C0 | ä | %E4 |\n| ( | 28% | M | %4D | n | %6E | Á | %C1 | å | %E5 |\n| ) | 29% | N | %4E | o | %6F | Â | %C2 | æ | %E6 |\n| * | %2A | O | %4F | p | 70% | Ã | %C3 | ç | %E7 |\n| + | %2B | P | 50% | q | 71% | Ä | %C4 | è | %E8 |\n| , | %2C | Q | 51% | r | 72% | Å | %C5 | é | %E9 |\n| - | %2D | R | 52% | s | 73% | Æ | %C6 | ê | %EA |\n| . | %2E | S | 53% | t | 74% | Ç | %C7 | ë | %EB |\n| / | %2F | T | 54% | u | 75% | È | %C8 | ì | %EC |\n| 0 | 30% | U | 55% | v | 76% | É | %C9 | í | %ED |\n| 1 | 31% | V | 56% | w | 77% | Ê | %CA | î | %EE |\n| 2 | 32% | W | 57% | x | 78% | Ë | %CB | ï | %EF |\n| 3 | 33% | X | 58% | y | 79% | Ì | %CC | ð | %F0 |\n| 4 | 34% | Y | 59% | z | %7A | Í | %CD | ñ | %F1 |\n| 5 | 35% | Z | %5A | { | %7B | Î | %CE | ò | %F2 |\n| 6 | 36% | ? | %3F | &#124; | %7C | Ï | %CF | ó | %F3 |\n| 7 | 37% | @ | 40% | } | %7D | Ð | %D0 | ô | %F4 |\n| 8 | 38% | \\[ | %5B | ~ | %7E | Ñ | %D1 | õ | %F5 |\n| 9 | 39% | \\\\ | %5C | ¢ | %A2 | Ò | %D2 | ö | %F6 |\n| : | %3A | ] | %5D | £ | %A3 | Ó | %D3 | ÷ | %F7 |\n| ; | %3B | ^ | %5E | ¥ | %A5 | Ô | %D4 | ø | %F8 |\n| <  | %3C | _ | %5F | &#124; | %A6 | Õ | %D5 | ù | %F9 |\n| = | %3D | ` | 60% | § | %A7 | Ö | %D6 |  |  |\n| >  | %3E | a | 61% | « | %AB | Ø | %D8 |  |  |\n\n## 语言代码\n\n## 字符集\n","slug":"计算机语言知识库/HTML","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x81001li4v142p19rev","content":"<p><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg\"><br><a name=\"HFtsm\"></a></p>\n<h1 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h1><h2 id=\"根元素\"><a href=\"#根元素\" class=\"headerlink\" title=\"根元素\"></a>根元素</h2><blockquote>\n<p><strong><!DOCTYPE html> 是一个声明，表示该文档是由 HTML5 进行编写的。</strong><br><strong>&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 &lt; html&gt; 标签之前</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>主根元素</th>\n<th>html</th>\n<th>html 元素用于告诉告诉浏览器其自身是一个 HTML 文档</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分区根元素</td>\n<td>body</td>\n<td>表明这是文档的主体部分</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    这是文档的头部</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    这是文档的主体</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"e3ce87db\"></a></p>\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p><a name=\"TWAh9\"></a></p>\n<h3 id=\"head标签\"><a href=\"#head标签\" class=\"headerlink\" title=\"head标签\"></a>head标签</h3><blockquote>\n<p><strong>&lt; head&gt; 标签用于定义文档的头部，它是所有头部元素的容器</strong></p>\n</blockquote>\n<p><a name=\"cFRIO\"></a></p>\n<h3 id=\"title标签\"><a href=\"#title标签\" class=\"headerlink\" title=\"title标签\"></a>title标签</h3><blockquote>\n<p><strong>&lt; title&gt; 标签用于定义文档的标题。</strong></p>\n</blockquote>\n<ul>\n<li>&lt; title&gt; 标签必须位于 &lt; head&gt;标签内部。</li>\n<li>会在浏览器的窗口或选项卡的顶部显示<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>显示在浏览器的标题栏上<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><a name=\"Wujh1\"></a></p>\n<h3 id=\"meta标记\"><a href=\"#meta标记\" class=\"headerlink\" title=\"meta标记\"></a>meta标记</h3><blockquote>\n<p><strong>&lt; meta&gt; 标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。</strong></p>\n</blockquote>\n<p>下面介绍meta元素的功能：</p>\n<ol>\n<li>编码和自适应</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>网站描述</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（关键字）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;descript&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（描述）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（作者）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;generator&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（制作所用的软件）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;copyright&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（版权所有）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;revisit-after&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;7 days&quot;</span> &gt;</span>//设置搜索引擎的抓取频率</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;robots&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span></span><br><span class=\"line\">1、none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class=\"line\">2、noindex : 搜索引擎不索引此网页。</span><br><span class=\"line\">3、nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class=\"line\">4、all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class=\"line\">5、index : 搜索引擎索引此网页。</span><br><span class=\"line\">6、follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>向浏览器头部(响应头)返回信息</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;30&quot;</span>&gt;</span>//每30秒刷新一次</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Pragma&quot;</span><span class=\"attr\">content</span>=<span class=\"string\">&quot;no-cache&quot;</span>&gt;</span> //禁止从缓存中读取HTML</span><br><span class=\"line\">//两秒刷新并且指向新页面</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;2&quot;</span>;<span class=\"attr\">URL</span>=<span class=\"string\">&quot;http://www.haorooms.com&quot;</span>&gt;</span>[//两秒刷新并且指向新页面</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;expires&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（GMT时间格式）&quot;</span>&gt;</span>//设置到期时间</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=gb2312&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;charset&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;iso-8859-1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"fnyhk\"></a></p>\n<h3 id=\"base标签\"><a href=\"#base标签\" class=\"headerlink\" title=\"base标签\"></a>base标签</h3><blockquote>\n<p><strong>&lt; base&gt;为相对链接设置基本URL</strong><br><strong>&lt; base&gt;指定用户如何打开链接，以及表单提交后浏览器的状态</strong></p>\n</blockquote>\n<p>属性：</p>\n<ol>\n<li><p>herf\t\t为文档的相对URL指定基本URL</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">base</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;//www.w3cschool.cn/listings/&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/javascript.html&quot;</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>target\t\t指示浏览器如何打开网址</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>| _blank    | 在新窗口打开链接                              |<br>| _self    | 在同一窗口或框架打开链接（默认），即当前的div |<br>| _parent   | 在父框架打开链接，即上一层框架                |<br>| _top      | 在整个窗口打开链接                            |<br>| framename | 在一指定框架打开链接，即在指定div             |</p>\n<p><a name=\"dWD6I\"></a></p>\n<h2 id=\"div和语义化布局\"><a href=\"#div和语义化布局\" class=\"headerlink\" title=\"div和语义化布局\"></a>div和语义化布局</h2><p>在HTML5出世之前，人们实现网页布局都是利用div，而HTML5新的语义化元素也能实现网页布局，而且更凸显语义化<br />在经典的页面布局中，页面被分为 header、main、aside、footer 四个部分:<img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662092868310-ef59cd51-a19c-4865-a31c-250695024632.jpeg\"></p>\n<h3 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h3><blockquote>\n<p><strong>&lt;div&gt; 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</strong><br>div通常和css一起使用</p>\n</blockquote>\n<h3 id=\"页眉header\"><a href=\"#页眉header\" class=\"headerlink\" title=\"页眉header\"></a>页眉header</h3><blockquote>\n<p><strong>&lt;header&gt; 标签用于定义文档的页眉（介绍信息）</strong></p>\n</blockquote>\n<h3 id=\"导航nav\"><a href=\"#导航nav\" class=\"headerlink\" title=\"导航nav\"></a>导航nav</h3><blockquote>\n<p><strong>&lt;nav&gt; 标签用于定义页面主导航功能。</strong></p>\n</blockquote>\n<p><a name=\"Lv1ms\"></a></p>\n<h3 id=\"主体main\"><a href=\"#主体main\" class=\"headerlink\" title=\"主体main\"></a>主体main</h3><blockquote>\n<p><strong>&lt;main&gt; 标签用于定义文档</strong><a href=\"https://man.ilovefishc.com/pageHTML5/body.html\"><strong>&lt;body&gt;</strong></a><strong>或应用的主体部分。</strong></p>\n</blockquote>\n<p><a name=\"TJFWp\"></a></p>\n<h3 id=\"节section\"><a href=\"#节section\" class=\"headerlink\" title=\"节section\"></a>节section</h3><blockquote>\n<p><strong>&lt;section&gt; 标签用于定义定义文档中的节。</strong></p>\n</blockquote>\n<p><a name=\"dDkzH\"></a></p>\n<h3 id=\"文章article\"><a href=\"#文章article\" class=\"headerlink\" title=\"文章article\"></a>文章article</h3><blockquote>\n<p><strong>&lt;article&gt; 标签用于定义一篇文章，是网页中独立的内容，与页面其它部分无关。</strong></p>\n</blockquote>\n<p><a name=\"vyxWh\"></a></p>\n<h3 id=\"详情details\"><a href=\"#详情details\" class=\"headerlink\" title=\"详情details\"></a>详情details</h3><blockquote>\n<p><strong>&lt;details&gt; 标签用于定义用户可见的或者隐藏的需求的补充细节。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open</td>\n<td>open</td>\n<td>规定 details 是否默认可见。</td>\n</tr>\n</tbody></table>\n<p><a name=\"DBBFL\"></a></p>\n<h3 id=\"总结summary\"><a href=\"#总结summary\" class=\"headerlink\" title=\"总结summary\"></a>总结summary</h3><blockquote>\n<p><strong>&lt;summary&gt; 标签定义 <strong><a href=\"https://man.ilovefishc.com/pageHTML5/detail.html\"><strong>&lt;details&gt;</strong></a></strong> 元素的标题</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">summary</span>&gt;</span>《零基础入门学习Python》<span class=\"tag\">&lt;/<span class=\"name\">summary</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>配有同名书籍。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>配有视频教程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">details</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a name=\"HaRxr\"></a></p>\n<h3 id=\"插图figure\"><a href=\"#插图figure\" class=\"headerlink\" title=\"插图figure\"></a>插图figure</h3><blockquote>\n<p><strong>&lt;figure&gt; 标签规定独立的流内容（图像、图表、照片、代码等等）。</strong></p>\n</blockquote>\n<p>figure 元素代表一段独立的内容, 经常与说明 <a href=\"https://man.ilovefishc.com/pageHTML5/figcaption.html\">figcaption</a> 元素配合使用, 并且作为一个独立的引用单元。</p>\n<blockquote>\n<p><strong>&lt;figcaption&gt; 标签为 figure 元素定义标题。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../img/logo.png&quot;</span>  <span class=\"attr\">alt</span>=<span class=\"string\">&quot;鱼C-Logo&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>鱼C工作室，让自学编程变得妙不可言｡◕‿◕｡<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"K1cYQ\"></a></p>\n<h3 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a>aside</h3><blockquote>\n<p><strong>&lt;aside&gt; 标签定义侧边栏，通常是网页的说明、提示、引用、附加注释、相关链接、广告等内容。</strong></p>\n</blockquote>\n<p><a name=\"Wsw5i\"></a></p>\n<h3 id=\"页脚footer\"><a href=\"#页脚footer\" class=\"headerlink\" title=\"页脚footer\"></a>页脚footer</h3><blockquote>\n<p><strong>&lt;footer&gt; 标签定义文档或节的页脚</strong></p>\n</blockquote>\n<h2 id=\"文字内容\"><a href=\"#文字内容\" class=\"headerlink\" title=\"文字内容\"></a>文字内容</h2><p><a name=\"QZF96\"></a></p>\n<h3 id=\"超链接a\"><a href=\"#超链接a\" class=\"headerlink\" title=\"超链接a\"></a>超链接a</h3><blockquote>\n<p><strong>&lt;a&gt; 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。</strong></p>\n</blockquote>\n<p>基础语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;文件路径&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;anchor名称&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;提示信息&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;打开方式&quot;</span>&gt;</span>超链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>特殊用法：</p>\n<ol>\n<li><p>FTP站点访问链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">&quot;ftp://服务器IP地址或域名&quot;</span>&gt;</span>超链接文字<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>电子邮件超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:E-mali邮箱地址？subject=邮件主题&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义书签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跳转至书签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>同页跳转 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL#书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>异页跳转</span><br></pre></td></tr></table></figure>\n<p><a name=\"Ux6mJ\"></a></p>\n</li>\n</ol>\n<h3 id=\"标题h1\"><a href=\"#标题h1\" class=\"headerlink\" title=\"标题h1\"></a>标题h1</h3><blockquote>\n<p><strong>&lt;h1&gt; - &lt;h6&gt; 标签可定义标题。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>一号标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>二号标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>三号标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>align属性:  left | center | right | justfiy<br><a name=\"pZDqS\"></a></li>\n</ul>\n<h3 id=\"粗体b\"><a href=\"#粗体b\" class=\"headerlink\" title=\"粗体b\"></a>粗体b</h3><blockquote>\n<p><strong>&lt;b&gt; 标签用于定义表示粗体的文本。</strong></p>\n</blockquote>\n<p>根据 HTML5 的规范，如果你只是想实现加粗效果，推荐使用 css 样式来实现：.bolder {font-weight: bolder;}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>用css代替加粗<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.bolder</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">font-weight</span>:bolder;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bloder&quot;</span>&gt;</span>这是粗体文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"kAhDq\"></a></p>\n<h3 id=\"斜体i\"><a href=\"#斜体i\" class=\"headerlink\" title=\"斜体i\"></a>斜体i</h3><blockquote>\n<p><strong>&lt;i&gt; 标签用于定义表示斜体的文本。</strong></p>\n</blockquote>\n<p>同样推荐使用 css 样式来实现：.italic{font-style: italic;}<br><a name=\"Uv1uj\"></a></p>\n<h3 id=\"空格、回车、分割线和特殊字符\"><a href=\"#空格、回车、分割线和特殊字符\" class=\"headerlink\" title=\"空格、回车、分割线和特殊字符\"></a>空格、回车、分割线和特殊字符</h3><ul>\n<li>空格和特殊字符</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;nbsp;</span>\t( )</span><br><span class=\"line\"><span class=\"symbol\">&amp;lt;</span>   \t(&lt;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;gt;</span> \t\t(&gt;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;amp;</span>   (&amp;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;quot;</span>  (&quot;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;times;</span> (×)</span><br><span class=\"line\"><span class=\"symbol\">&amp;divide;</span>(÷)</span><br><span class=\"line\"><span class=\"symbol\">&amp;cope;</span>  (©)版权</span><br><span class=\"line\"><span class=\"symbol\">&amp;reg;</span>   (®)注册商标</span><br><span class=\"line\"><span class=\"symbol\">&amp;trade;</span>\t(™)商标</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回车和分割线</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>或者<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;(百分比或者像素px)&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;像素px&quot;</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left|center|right&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"BKyav\"></a></p>\n<h3 id=\"段落p\"><a href=\"#段落p\" class=\"headerlink\" title=\"段落p\"></a>段落p</h3><blockquote>\n<p><strong>&lt;p&gt; 标签用于定义一个段落。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"HyrXI\"></a></p>\n<h3 id=\"整体缩进blockquote\"><a href=\"#整体缩进blockquote\" class=\"headerlink\" title=\"整体缩进blockquote\"></a>整体缩进blockquote</h3><blockquote>\n<p><strong>&lt;blockquote&gt; 标签定义块引用。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>缩进5个字符位置<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>缩进10个字符位置<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"hJjuJ\"></a></p>\n<h3 id=\"预格式化pre\"><a href=\"#预格式化pre\" class=\"headerlink\" title=\"预格式化pre\"></a>预格式化pre</h3><blockquote>\n<p><strong>&lt;pre&gt; 标签用于定义预格式化的文本。</strong></p>\n</blockquote>\n<p>pre 元素中的文本通常会保留空格和换行符，而文本自身也会呈现为等宽字体。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">          春 晓</span><br><span class=\"line\">春眠不觉晓⑴，处处闻啼鸟⑵。</span><br><span class=\"line\">夜来风雨声⑶，花落知多少⑷。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Q9EmI\"></a></p>\n<h2 id=\"图片和多媒体\"><a href=\"#图片和多媒体\" class=\"headerlink\" title=\"图片和多媒体\"></a>图片和多媒体</h2><p><a name=\"YxCUZ\"></a></p>\n<h3 id=\"图像img\"><a href=\"#图像img\" class=\"headerlink\" title=\"图像img\"></a>图像img</h3><blockquote>\n<p><strong><img> 标签用于向网页中嵌入一幅图像。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;替代文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完整属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alt</td>\n<td>text</td>\n<td><br />- 鼠标悬停在图片上时出现的文字<br />- 加载失败时会代替图片<br /></td>\n<td>align</td>\n<td>top&amp;#124;middle&amp;#124;bottom&amp;#124;<br/>left&amp;#124;center&amp;#124;right</td>\n<td>排列方式</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>图片的链接</td>\n<td>boder</td>\n<td>pixels</td>\n<td>边框</td>\n</tr>\n<tr>\n<td>name</td>\n<td>text</td>\n<td>名称</td>\n<td>hspace</td>\n<td>pixels</td>\n<td>左侧和右侧的空白</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>高</td>\n<td>vspace</td>\n<td>pixels</td>\n<td>顶部和底部的空白</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>宽</td>\n<td>usemap</td>\n<td>URL</td>\n<td>将图像定义为客户器端图像映射</td>\n</tr>\n</tbody></table>\n<h3 id=\"map与area\"><a href=\"#map与area\" class=\"headerlink\" title=\"map与area\"></a>map与area</h3><ul>\n<li><p>为图像设置超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;打开方式&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为图像设置热区链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">usemap</span>=<span class=\"string\">&quot;#+映射图像名称&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">map</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;映射图像名称&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">area</span>  <span class=\"attr\">shap</span>=<span class=\"string\">&quot;热区形状&quot;</span> <span class=\"attr\">coords</span>=<span class=\"string\">&quot;热区坐标&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">area</span>  <span class=\"attr\">shap</span>=<span class=\"string\">&quot;热区形状&quot;</span> <span class=\"attr\">coords</span>=<span class=\"string\">&quot;热区坐标&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：img的usemap的属性值要”#+映射图像名称”</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>shape值</th>\n<th>coords值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rect（矩形）</td>\n<td>x1,y1,x2,y2</td>\n<td>矩形的四个坐标</td>\n</tr>\n<tr>\n<td>circle（圆形）</td>\n<td>center-x,center-y,radius</td>\n<td>圆心坐标和半径</td>\n</tr>\n<tr>\n<td>poly（多边形）</td>\n<td>x1,y1,x2,y2,x3,y3…</td>\n<td>各顶点坐标</td>\n</tr>\n</tbody></table>\n<h3 id=\"picture与source\"><a href=\"#picture与source\" class=\"headerlink\" title=\"picture与source\"></a>picture与source</h3><blockquote>\n<p><strong>&lt; picture&gt; 标签为其内部特定的 img 元素提供多样的 <a href=\"https://man.ilovefishc.com/pageHTML5/source.html\">source</a> 元素</strong><br><strong><source> 标签为 picture , audio 或者 video 元素指定多个媒体资源。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>src</td>\n<td>url</td>\n<td>规定媒体文件的 URL。</td>\n</tr>\n<tr>\n<td>srcset</td>\n<td>url</td>\n<td>仅当source元素是picture元素的直接子元素时，srcset属性才有效。</td>\n</tr>\n<tr>\n<td><a href=\"https://man.ilovefishc.com/pageHTML5/media.html\">media</a></td>\n<td>media query</td>\n<td>规定媒体资源的类型。</td>\n</tr>\n<tr>\n<td>sizes</td>\n<td></td>\n<td>表示源大小的列表，用于描述源代表的图像的最终渲染宽度。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>numeric value</td>\n<td>规定媒体资源的 MIME 类型。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:1024px)&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;big.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:512px)&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;normal.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;small.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;图片&quot;</span> <span class=\"attr\">sytle</span>=<span class=\"string\">&quot;width:auto&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码效果讲解：</p>\n<ol>\n<li>当屏幕大于1024时，显示big.jpg</li>\n<li>当屏幕大于512小于1024时，显示normal.jpg</li>\n<li>当屏幕小于512时，显示small.jpg<br><a name=\"vYXRh\"></a></li>\n</ol>\n<h3 id=\"任何插件embed\"><a href=\"#任何插件embed\" class=\"headerlink\" title=\"任何插件embed\"></a>任何插件embed</h3><blockquote>\n<p><strong>&lt; embed&gt; 标签定义嵌入的内容，比如插件。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">higth</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autostart</span>=<span class=\"string\">&quot;true|false(是否自动播放)&quot;</span> <span class=\"attr\">loop</span></span></span><br><span class=\"line\"><span class=\"tag\">  =<span class=\"string\">&quot;true|false(是否循环)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels</td>\n<td>规定嵌入内容的高度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL 规定被嵌入内容的 URL。</td>\n<td></td>\n</tr>\n<tr>\n<td>type</td>\n<td>MIME_type</td>\n<td>规定嵌入内容的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>规定嵌入内容的宽度。</td>\n</tr>\n</tbody></table>\n<h3 id=\"视频video\"><a href=\"#视频video\" class=\"headerlink\" title=\"视频video\"></a>视频video</h3><blockquote>\n<p><strong>&lt; video&gt; 标签定义视频，比如电影片段或其他视频流。</strong></p>\n</blockquote>\n<p>目前，&lt; video&gt; 元素支持三种视频格式：MP4、WebM、Ogg。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--显示控件--!&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;source src=&quot;http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4&quot;  type=&quot;video/mp4&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>如果指定该属性，则视频在就绪后将自动播放。</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>如果指定该属性，则向用户显示控件，比如播放&#x2F;暂停按钮。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>指定视频播放器的宽度。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>指定视频播放器的高度。</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>如果指定该属性，将循环播放视频。</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>如果指定该属性，则将视频的音频输出为静音。</td>\n</tr>\n<tr>\n<td>poster</td>\n<td>URL</td>\n<td>指定视频的封面</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto、metadata、none</td>\n<td>指定视频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto（默认）：要求浏览器尽快加载整个视频<br />metadata：只加载视频的元数据（宽度、高度、第一帧影像和视频总长度等）<br />none：在用户点击开始播放之前不会加载视频，若不设定poster视频的黑的</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要播放的视频文件的 URL 地址。</td>\n</tr>\n</tbody></table>\n<p>注意事项：</p>\n<ol>\n<li>使用video标签时controls属性或antoplay属性二选一，否则视频无法播放</li>\n<li>controls与antoplay同时使用时，chrome浏览器不会自动播放，要添加muted属性（静音）才能自动播放<br><a name=\"hWx0q\"></a></li>\n</ol>\n<h3 id=\"音频audio\"><a href=\"#音频audio\" class=\"headerlink\" title=\"音频audio\"></a>音频audio</h3><blockquote>\n<p><strong>&lt;audio&gt; 标签定义声音，比如音乐或其他音频流。</strong></p>\n</blockquote>\n<p>目前，&lt;audio&gt; 标签定义声音，支持的3种文件格式：MP3、Wav、Ogg</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">loop</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://fishc.oss-cnhangzhou.aliyuncs.com/Web/audio_tag.mp3&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>如果指定该属性，则音频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>如果指定该属性，则向用户显示播放控件（比如播放&#x2F;暂停按钮）。</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>如果指定该属性，将循环播放音频。</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>如果指定该属性，则音频输出为静音。</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto、metadata、none</td>\n<td>指定音频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto：要求浏览器尽快加载整个音频，默认行为<br />metadata：只加载音频的元数据<br />none：在用户点击开始播放之前不会加载音频</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要播放的音频文件的 URL 地址。</td>\n</tr>\n</tbody></table>\n<p><a name=\"g5RWU\"></a></p>\n<h2 id=\"内嵌内容\"><a href=\"#内嵌内容\" class=\"headerlink\" title=\"内嵌内容\"></a>内嵌内容</h2><p><a name=\"sW8YR\"></a></p>\n<h3 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h3><blockquote>\n<p><strong>&lt;iframe&gt; 标签会创建包含另外一个文档的内联框架（即行内框架）。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;javascript.html&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iframe&quot;</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels、%</td>\n<td>指定 iframe 的高度。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>text</td>\n<td>指定 iframe 的名称。</td>\n</tr>\n<tr>\n<td>sandbox</td>\n<td>allow-forms、allow-pointer-lock、allow-popups、allow-same-origin、allow-scripts、allow-top-navigation</td>\n<td>启用一系列对 &lt; iframe&gt;中内容的额外限制。</td>\n</tr>\n<tr>\n<td>seamless</td>\n<td>seamless</td>\n<td>指示浏览器将 iframe 的内容显示得像主 HTML 文档的一个整体组成部分。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定在 iframe 中显示的文档的 URL 地址。</td>\n</tr>\n<tr>\n<td>srcdoc</td>\n<td>HTML_code</td>\n<td>指定在 &lt; iframe&gt; 中显示的页面的 HTML 内容。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels、%</td>\n<td>指定 iframe 的宽度。</td>\n</tr>\n</tbody></table>\n<h4 id=\"sandbox沙盒属性\"><a href=\"#sandbox沙盒属性\" class=\"headerlink\" title=\"sandbox沙盒属性\"></a>sandbox沙盒属性</h4><blockquote>\n<p><strong>限制了嵌入网页的内容和操作</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>sandbox的值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>allow-forms</td>\n<td>允许提交表单</td>\n</tr>\n<tr>\n<td>allow-pointer-lock</td>\n<td>允许执行脚本</td>\n</tr>\n<tr>\n<td>allow-popups</td>\n<td>允许同域请求</td>\n</tr>\n<tr>\n<td>allow-same-origin</td>\n<td>允许iframe能主导window .top进行页面跳转</td>\n</tr>\n<tr>\n<td>allow-scripts</td>\n<td>允许iframe中弹出新窗口</td>\n</tr>\n<tr>\n<td>allow-top-navigation</td>\n<td>允许在iframe中锁定鼠标</td>\n</tr>\n</tbody></table>\n<h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><blockquote>\n<p><strong>&lt; object&gt; 标签定义一个嵌入的对象。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;666&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;375&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;video_tag.mp4&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>form</td>\n<td>form_id</td>\n<td>规定对象所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>规定对象的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>规定对象的宽度。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>为对象规定名称。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>MIME_type</td>\n<td>规定 data 属性中规定的数据的 MIME 类型。</td>\n</tr>\n<tr>\n<td>usemap</td>\n<td>mapname</td>\n<td>规定与对象一同使用的客户端图像映射的名称。</td>\n</tr>\n</tbody></table>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><blockquote>\n<p><strong>这一部分可以先草草了解一下，详见javascript教程</strong></p>\n</blockquote>\n<p><a href=\"./Javascript.md\">Javascript</a><br><a name=\"m34IF\"></a></p>\n<h3 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h3><blockquote>\n<p><strong>&lt; canvas&gt; 标签定义图形，比如图表和其他图像。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置 canvas 的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置 canvas 的宽度。</td>\n</tr>\n</tbody></table>\n<p><a name=\"NuSUB\"></a></p>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><blockquote>\n<p><strong>&lt; script&gt; 标签用于在 HTML 文档中加入脚本（例如 JavaScript）</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;lilming&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>media_type</td>\n<td>指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。</td>\n</tr>\n<tr>\n<td>async</td>\n<td>async</td>\n<td>告诉浏览器异步执行脚本。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td>\n</tr>\n<tr>\n<td>charset</td>\n<td>charset</td>\n<td>指定外部脚本文件中使用的字符编码。<br />注意：该属性只能与 src 属性一起使用。</td>\n</tr>\n<tr>\n<td>defer</td>\n<td>defer</td>\n<td>告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定外部脚本文件的 URL。</td>\n</tr>\n</tbody></table>\n<p><a name=\"DdbGP\"></a></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><a name=\"wCnzZ\"></a></p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><blockquote>\n<p><strong>&lt; ul&gt; 标签用于定义无序列表。</strong></p>\n</blockquote>\n<p>type的属性值：</p>\n<ul>\n<li>disc      实心圆</li>\n<li>circle    空心圆</li>\n<li>square    实心正方形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>无序列表更常用，可以用css设置序号样式，而有序列表的序号是固定的。<br><a name=\"QNqSJ\"></a></p>\n<h3 id=\"有序列表ol\"><a href=\"#有序列表ol\" class=\"headerlink\" title=\"有序列表ol\"></a>有序列表ol</h3><blockquote>\n<p><strong>&lt; ol&gt; 标签用于定义有序列表。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;1|A|a|i|I&quot;</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;数值（初始数字）&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"kk3wt\"></a></p>\n<h3 id=\"定义列表dl\"><a href=\"#定义列表dl\" class=\"headerlink\" title=\"定义列表dl\"></a>定义列表dl</h3><blockquote>\n<p><strong>&lt; dl&gt; 标签定义了一个包含术语定义以及描述的列表。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>项目一<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述一<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述二<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>项目二<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述一<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述二<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"fTbxI\"></a></p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><a name=\"Aj8si\"></a></p>\n<h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ul>\n<li><p>宏观结构</p>\n<blockquote>\n<p><strong>&lt; table&gt; 标签用于定义 HTML 表格</strong><br><strong>&lt; thead&gt; 标签定义表格的表头</strong><br><strong>&lt; tbody&gt; 标签用于组合 HTML 表格的主体内容</strong><br><strong>&lt; tfoot&gt; 标签定义表格的页脚（脚注或表注）</strong></p>\n</blockquote>\n</li>\n<li><p>微观结构</p>\n<blockquote>\n<p><strong>&lt; tr&gt; 标签用于定义 HTML 表格中的行。</strong><br><strong>&lt; th&gt; 标签用于定义表格内的表头单元格。</strong><br><strong>&lt; td&gt; 标签用于定义 HTML 表格中的标准单元格。</strong></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>班级<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>王小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>会计3班<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>学生信息<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"SgfKs\"></a></p>\n<h3 id=\"表格样式：table属性\"><a href=\"#表格样式：table属性\" class=\"headerlink\" title=\"表格样式：table属性\"></a>表格样式：table属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>内容对齐</td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td>背景颜色</td>\n</tr>\n<tr>\n<td>border</td>\n<td>pixels</td>\n<td>边框宽度</td>\n</tr>\n<tr>\n<td>cellpadding</td>\n<td>pixels</td>\n<td>边缘与内容之间的空白</td>\n</tr>\n<tr>\n<td>cellspacing</td>\n<td>pixels</td>\n<td>单元格之间的空白</td>\n</tr>\n<tr>\n<td>frame</td>\n<td>above&amp;#124;below&amp;#124;hsides&amp;#124;<br/>vsides&amp;#124;lhs&amp;#124;border&amp;#124;void</td>\n<td>规定外边框哪个部分可见</td>\n</tr>\n<tr>\n<td>rules</td>\n<td>none&amp;#124all&amp;#124rows&amp;#124cols&amp;#124groups</td>\n<td>规定内边框哪个是可见的</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>表格高度</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>表格宽度</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n<tr>\n<td><a name=\"T0FdN\"></a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"表格边框属性\"><a href=\"#表格边框属性\" class=\"headerlink\" title=\"表格边框属性\"></a>表格边框属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border</td>\n<td>pixels</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n</tbody></table>\n<p><a name=\"VVJw4\"></a></p>\n<h4 id=\"表格样式：frame和rules\"><a href=\"#表格样式：frame和rules\" class=\"headerlink\" title=\"表格样式：frame和rules\"></a>表格样式：frame和rules</h4><table>\n<thead>\n<tr>\n<th>fram属性值</th>\n<th>规定外边框哪个部分可见</th>\n<th>rules属性值</th>\n<th>规定内边框哪个是可见的</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>above</td>\n<td>上</td>\n<td>none</td>\n<td>无</td>\n</tr>\n<tr>\n<td>below</td>\n<td>下</td>\n<td>all</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>hsides</td>\n<td>上下</td>\n<td>rows</td>\n<td>行边框</td>\n</tr>\n<tr>\n<td>vsides</td>\n<td>左右</td>\n<td>cols</td>\n<td>列边框</td>\n</tr>\n<tr>\n<td>lhs</td>\n<td>左</td>\n<td>groups</td>\n<td>介于行列间边框</td>\n</tr>\n<tr>\n<td>rhs</td>\n<td>右</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>border</td>\n<td>上下左右</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>void</td>\n<td>无</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><a name=\"DXSD6\"></a></p>\n<h3 id=\"行样式：tr属性\"><a href=\"#行样式：tr属性\" class=\"headerlink\" title=\"行样式：tr属性\"></a>行样式：tr属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>水平对齐</td>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>valign</td>\n<td>top&amp;#124;bottom&amp;#124;middle</td>\n<td>垂直对齐</td>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td></td>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n</tbody></table>\n<p><a name=\"NlVbS\"></a></p>\n<h3 id=\"单元格样式：td属性\"><a href=\"#单元格样式：td属性\" class=\"headerlink\" title=\"单元格样式：td属性\"></a>单元格样式：td属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>水平对齐</td>\n<td>bordercolorlight</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>valign</td>\n<td>top&amp;#124;bottom&amp;#124;middle</td>\n<td>垂直对齐</td>\n<td>bordercolordark</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td>背景颜色</td>\n<td>rowspan</td>\n<td>int</td>\n<td>单元格跨行</td>\n</tr>\n<tr>\n<td>background</td>\n<td></td>\n<td>背景图案</td>\n<td>colspan</td>\n<td>int</td>\n<td>单元格跨列</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td></td>\n<td>边框颜色</td>\n<td>width</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>heith</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><a name=\"wZE5i\"></a></p>\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><p><a name=\"dBe2M\"></a></p>\n<h3 id=\"表单：form\"><a href=\"#表单：form\" class=\"headerlink\" title=\"表单：form\"></a>表单：form</h3><blockquote>\n<p><strong>&lt; form&gt; 标签用于为用户输入创建 HTML 表单，用于向服务器传输数据</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>action</td>\n<td>URL</td>\n<td>规定当提交表单时向何处发送表单数据。</td>\n</tr>\n<tr>\n<td>method</td>\n<td>get、post（更常用）</td>\n<td>规定用于发送 form-data 的 HTTP 方法。</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on（默认）、off</td>\n<td>规定是否启用表单的自动填充功能。</td>\n</tr>\n<tr>\n<td>target</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>规定在何处打开 action URL。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>form_name</td>\n<td>规定表单的名称。</td>\n</tr>\n<tr>\n<td>accept-charset</td>\n<td>charset_list</td>\n<td>规定服务器可处理的表单数据字符集。</td>\n</tr>\n<tr>\n<td>enctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>规定在发送表单数据之前如何对其进行编码：<br />- application&#x2F;x-www-form-urlencoded在发送前编码所有字符（默认）（空格被编码为“+”，特殊字符被编码为ASCII十六进制字符）<br />- multipart&#x2F;form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值<br />- text&#x2F;plain 空格转换为 “+” 加号，但不对特殊字符编码<br /></td>\n</tr>\n<tr>\n<td>novalidate</td>\n<td>novalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>get和post的区别：</p>\n<ol>\n<li>GET 和 POST 是HTTP 协议中的两种发送请求的方法，底层都是 TCP&#x2F;IP，理论上get也可以将数据放在request body中，post也可以将数据放在url中，但不同的浏览器和服务器的处理不太一样</li>\n<li>GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包，具体表现为：</li>\n</ol>\n</blockquote>\n<p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）</p>\n<blockquote>\n<p>而对于 POST，浏览器先发送 header，服务器响应 100（continue），浏览器再发送 data，服务器响应 200（返回数据）</p>\n</blockquote>\n<p><a name=\"MLOxb\"></a></p>\n<h3 id=\"输入框：input\"><a href=\"#输入框：input\" class=\"headerlink\" title=\"输入框：input\"></a>输入框：input</h3><blockquote>\n<p><strong>&lt; input&gt; 标签用于搜集用户信息。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">  名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>input元素中的type与name属性是必填的，才能让服务器知道传输的数据是什么类型，该怎么称呼这一数据</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>button、checkbox、color、date、datetime-local、email、file、hidden、image、month、number、password、radio、range、reset、search、submit、tel、text、time、url、week</td>\n<td>规定 input 元素的类型</td>\n</tr>\n<tr>\n<td>name</td>\n<td>field_name</td>\n<td>指定元素的名称，用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据，只有设置了 name 属性的表单才能在提交表单时传递该值</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on、off</td>\n<td>指定是否自动填充</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>无</td>\n<td>指定是否将光标自动移动到指定处</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定输入字段的初始值</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>无</td>\n<td>指定是否禁用该 input 元素，通常已经有value属性</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>无</td>\n<td>将文本框设为只读模式，防止用户编辑其内容，通常已经有value属性<br />与disabled的区别在于readonly依然会将值提交至服务器；而disabled不会</td>\n</tr>\n<tr>\n<td>accept</td>\n<td>mime_type</td>\n<td>指定提交的文件类型（多个类型之间使用英文的逗号隔开，文件类型的几种表述方式请参考 -&gt; <a href=\"https://fishc.com.cn/thread-128222-1-1.html\">传送门）</a></td>\n</tr>\n<tr>\n<td>alt</td>\n<td>text</td>\n<td>指定图像的说明文字</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>指定该属性的复选框，默认显示为勾选状态</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formname</td>\n<td>指定其所属的一个或多个表单 id 值（在 HTML5 中，表单允许你将 input 放在文档中的任意位置，当你这么做的时候，可以通过指定该属性来确定元素所关联的表单）</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>URL</td>\n<td>指定表单提交的位置（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>指定表单提交的编码方式（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get、post</td>\n<td>指定表单提交的方法（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>指定是否重置 form 元素的 novalidate 属性，如果重置，那么当表单提交时 input 元素将不再进行任何验证（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>指定表单提交后在何处打开 action URL（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels、%</td>\n<td>指定图像的高度（像素）</td>\n</tr>\n<tr>\n<td>list</td>\n<td>datalist-id</td>\n<td>指定一个数据列表，即 datalist 元素的 id 值</td>\n</tr>\n<tr>\n<td>max</td>\n<td>number、date</td>\n<td>指定可接受的最大值，以便进行输入验证</td>\n</tr>\n<tr>\n<td>maxlength</td>\n<td>number</td>\n<td>指定用户可以在文本框输入的最大字符数</td>\n</tr>\n<tr>\n<td>min</td>\n<td>number、date</td>\n<td>指定可接受的最小值，以便进行输入验证</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>指定该属性后可以上传多个文件</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>regexp_pattern</td>\n<td>指定一个用于输入验证的正则表达式</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>text</td>\n<td>指定一个占位提示文本</td>\n</tr>\n<tr>\n<td>required</td>\n<td>required</td>\n<td>表明用户必须输入一个值，否则无法通过输入验证</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number_of_char</td>\n<td>指定文本框的宽度</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要显示的图像的 URL</td>\n</tr>\n<tr>\n<td>step</td>\n<td>number</td>\n<td>指定上下调节数值的步长</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels、%</td>\n<td>指定图像的宽度（像素）</td>\n</tr>\n</tbody></table>\n<p><a name=\"ZocKe\"></a></p>\n<h3 id=\"按钮：button\"><a href=\"#按钮：button\" class=\"headerlink\" title=\"按钮：button\"></a>按钮：button</h3><blockquote>\n<p><strong>&lt;button&gt; 标签用于定义一个按钮。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autofocus</td>\n<td>autofocus</td>\n<td>指定当页面加载的时候，按钮将获得焦点。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>禁用按钮。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>指定按钮所关联的表单 ID。</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>url</td>\n<td>覆盖 form 元素的 action 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>覆盖 form 元素的 enctype 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get、post</td>\n<td>覆盖 form 元素的 method 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>覆盖 form 元素的 novalidate 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>覆盖 form 元素的 target 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>button_name</td>\n<td>指定按钮的名称</td>\n</tr>\n<tr>\n<td>type</td>\n<td>button（脚本运行按钮）、reset（清空）、submit（提交数据到服务器）</td>\n<td>指定按钮的类型</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定按钮的初始值<br />注释：可由脚本进行修改。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>若input标签的type属性的值为submit，则实现的是按钮效果，与button类似</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"WeC2D\"></a></p>\n<h3 id=\"标签：label\"><a href=\"#标签：label\" class=\"headerlink\" title=\"标签：label\"></a>标签：label</h3><blockquote>\n<p><strong>&lt;label&gt; 标签为 input 元素定义标注（标记）。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;female&quot;</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;female&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>for</td>\n<td>与所属的input的id值对应，如：<br /><label for=\"XXX\"></label><br />&lt;input id &#x3D;”XXX”&#x2F;&gt;</td>\n<td>指定 label 将绑定另一个表单元素的 ID 属性值</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formid</td>\n<td>指定 label 所属的表单 ID</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>将input置于label元素的里面也可以实现label与input的一一对应哦</p>\n</blockquote>\n<p><a name=\"XMQVB\"></a></p>\n<h3 id=\"表单分类：fieldset与legend元素\"><a href=\"#表单分类：fieldset与legend元素\" class=\"headerlink\" title=\"表单分类：fieldset与legend元素\"></a>表单分类：fieldset与legend元素</h3><blockquote>\n<p><strong>&lt;fieldset&gt; 标签将表单内容的一部分打包，生成一组相关表单的字段。</strong><br><strong>&lt;legend&gt; 标签用于为 fieldset 元素定义说明文字。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生一<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name1&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span> =<span class=\"string\">&quot;class1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生二<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name2&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span> =<span class=\"string\">&quot;class2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ngNSA\"></a></p>\n<h3 id=\"可选框：select、option与optgroup\"><a href=\"#可选框：select、option与optgroup\" class=\"headerlink\" title=\"可选框：select、option与optgroup\"></a>可选框：select、option与optgroup</h3><blockquote>\n<p><strong>&lt;select&gt; 标签用于创建单选或多选菜单。</strong><br><strong>&lt;option&gt; 标签用于定义下拉列表中的一个选项。</strong><br><strong>&lt;optgroup&gt; 标签用于为下拉列表的选项进行分组。</strong></p>\n</blockquote>\n<p>select与input类似，type与name也必填的；若存在对应的label元素，还要加上id属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生一<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name1&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;class&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">             \t \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机三班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机四班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生二<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name2&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;class&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">             \t \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机三班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机四班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>select属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autofocus</td>\n<td>无</td>\n<td>指定在页面加载后文本区域自动获得焦点</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>指定该下拉列表的名称</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>无</td>\n<td>指定该下拉列表被禁用</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>指定所属表单</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>无</td>\n<td>指定该下拉列表支持多个选项</td>\n</tr>\n<tr>\n<td>required</td>\n<td>无</td>\n<td>指定文本区域是必填的</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>指定下拉列表中可见选项的数目</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>option属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>指定该选项被禁用</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>指定该选项在列表中所显示的标签</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>selected</td>\n<td>指定该选项表现为选中状态</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定发送到服务器的值<br />如标签显示“计算机一班”；发送到服务器处理的值是”211461”</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>若选项多，且可分组，则可以利用&lt;optgroup&gt;属性对option元素进行分类</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;计算机学院&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211461&quot;</span>&gt;</span>一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211462&quot;</span>&gt;</span>二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;通信学院&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211451&quot;</span>&gt;</span>一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211452&quot;</span>&gt;</span>二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>optgroup属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>指定该选项被禁用</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>指定该分组的标签</td>\n</tr>\n</tbody></table>\n<p><a name=\"r4r7j\"></a></p>\n<h3 id=\"单选框：type属性radio\"><a href=\"#单选框：type属性radio\" class=\"headerlink\" title=\"单选框：type属性radio\"></a>单选框：type属性radio</h3><blockquote>\n<p><strong>若要设置单选框，则设置input元素的type属性值为radio</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>女</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若要几个当中选一个，那么所有name属性都要一致</li>\n<li>若name属性不一致，则可复选<br><a name=\"plv5S\"></a></li>\n</ul>\n<h3 id=\"多选框：type属性checkbox\"><a href=\"#多选框：type属性checkbox\" class=\"headerlink\" title=\"多选框：type属性checkbox\"></a>多选框：type属性checkbox</h3><blockquote>\n<p><strong>若要设置多选下拉框，则可设置input元素type属性为checkbox</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;banana&quot;</span>&gt;</span>香蕉<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;blueberry&quot;</span>&gt;</span>蓝莓<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"UipPp\"></a></p>\n<h3 id=\"日期与时间datetime-local\"><a href=\"#日期与时间datetime-local\" class=\"headerlink\" title=\"日期与时间datetime-local\"></a>日期与时间datetime-local</h3><blockquote>\n<p><strong>时间加日期的选择框，type的值选择datetime-local</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>注意哦，这里提交数据中的”:”是按照URL编码表示为”%3A”</strong></p>\n</blockquote>\n<p>若要了解更多<a href=\"#pEGrg\">URL编码</a>，请点击链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    生日 (日期和时间): <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;datetime-local&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bdaytime&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">&lt;/form&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><a name=\"OVwDU\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><a name=\"wKc7Z\"></a></p>\n<h3 id=\"搜索框：type属性search\"><a href=\"#搜索框：type属性search\" class=\"headerlink\" title=\"搜索框：type属性search\"></a>搜索框：type属性search</h3><blockquote>\n<p><strong>在input的type属性值设置为search实现搜索框</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    度娘: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;search&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bdSearch&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"sMd95\"></a></p>\n<h3 id=\"接收多行表单\"><a href=\"#接收多行表单\" class=\"headerlink\" title=\"接收多行表单\"></a>接收多行表单</h3><blockquote>\n<p><strong>&lt;textarea&gt;</strong> <strong>标签定义多行的文本输入控件。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span>&gt;</span></span><br><span class=\"line\">   我是一个文本框。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"RZkS4\"></a></p>\n<h2 id=\"可交互元素\"><a href=\"#可交互元素\" class=\"headerlink\" title=\"可交互元素\"></a>可交互元素</h2><p><a name=\"E5fNf\"></a></p>\n<h3 id=\"meun\"><a href=\"#meun\" class=\"headerlink\" title=\"meun\"></a>meun</h3><p><a name=\"IdgES\"></a></p>\n<h3 id=\"meunitem\"><a href=\"#meunitem\" class=\"headerlink\" title=\"meunitem\"></a>meunitem</h3><p><a name=\"x2Xxi\"></a></p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><p><a name=\"PGNKb\"></a></p>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><p><a name=\"fnegB\"></a></p>\n<h2 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h2><p><a name=\"OCIvl\"></a></p>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p><a name=\"tRf3d\"></a></p>\n<h2 id=\"窗口事件\"><a href=\"#窗口事件\" class=\"headerlink\" title=\"窗口事件\"></a>窗口事件</h2><p><a name=\"jIumZ\"></a></p>\n<h2 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h2><p><a name=\"A66W7\"></a></p>\n<h2 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h2><p><a name=\"rgnZj\"></a></p>\n<h2 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h2><p><a name=\"PUNgO\"></a></p>\n<h2 id=\"多媒体事件\"><a href=\"#多媒体事件\" class=\"headerlink\" title=\"多媒体事件\"></a>多媒体事件</h2><p><a name=\"GmwMx\"></a></p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><p><a name=\"pEGrg\"></a></p>\n<h2 id=\"URL编码\"><a href=\"#URL编码\" class=\"headerlink\" title=\"URL编码\"></a>URL编码</h2><table>\n<thead>\n<tr>\n<th>backspace</th>\n<th>8%</th>\n<th>A</th>\n<th>41%</th>\n<th>b</th>\n<th>62%</th>\n<th>¬</th>\n<th>%AC</th>\n<th>Ù</th>\n<th>%D9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tab</td>\n<td>9%</td>\n<td>B</td>\n<td>42%</td>\n<td>c</td>\n<td>63%</td>\n<td>¯</td>\n<td>%AD</td>\n<td>Ú</td>\n<td>%DA</td>\n</tr>\n<tr>\n<td>linefeed</td>\n<td>%0A</td>\n<td>C</td>\n<td>43%</td>\n<td>d</td>\n<td>64%</td>\n<td>º</td>\n<td>%B0</td>\n<td>Û</td>\n<td>%DB</td>\n</tr>\n<tr>\n<td>creturn</td>\n<td>%0D</td>\n<td>D</td>\n<td>44%</td>\n<td>e</td>\n<td>65%</td>\n<td>±</td>\n<td>%B1</td>\n<td>Ü</td>\n<td>%DC</td>\n</tr>\n<tr>\n<td>space</td>\n<td>20%</td>\n<td>E</td>\n<td>45%</td>\n<td>f</td>\n<td>66%</td>\n<td>ª</td>\n<td>%B2</td>\n<td>Ý</td>\n<td>%DD</td>\n</tr>\n<tr>\n<td>!</td>\n<td>21%</td>\n<td>F</td>\n<td>46%</td>\n<td>g</td>\n<td>67%</td>\n<td>,</td>\n<td>%B4</td>\n<td>Þ</td>\n<td>%DE</td>\n</tr>\n<tr>\n<td>“</td>\n<td>22%</td>\n<td>G</td>\n<td>47%</td>\n<td>h</td>\n<td>68%</td>\n<td>µ</td>\n<td>%B5</td>\n<td>ß</td>\n<td>%DF</td>\n</tr>\n<tr>\n<td>#</td>\n<td>23%</td>\n<td>H</td>\n<td>48%</td>\n<td>i</td>\n<td>69%</td>\n<td>»</td>\n<td>%BB</td>\n<td>à</td>\n<td>%E0</td>\n</tr>\n<tr>\n<td>$</td>\n<td>24%</td>\n<td>I</td>\n<td>49%</td>\n<td>j</td>\n<td>%6A</td>\n<td>¼</td>\n<td>%BC</td>\n<td>á</td>\n<td>%E1</td>\n</tr>\n<tr>\n<td>%</td>\n<td>25%</td>\n<td>J</td>\n<td>%4A</td>\n<td>k</td>\n<td>%6B</td>\n<td>½</td>\n<td>%BD</td>\n<td>â</td>\n<td>%E2</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>26%</td>\n<td>K</td>\n<td>%4B</td>\n<td>l</td>\n<td>%6C</td>\n<td>¿</td>\n<td>%BF</td>\n<td>ã</td>\n<td>%E3</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>27%</td>\n<td>L</td>\n<td>%4C</td>\n<td>m</td>\n<td>%6D</td>\n<td>À</td>\n<td>%C0</td>\n<td>ä</td>\n<td>%E4</td>\n</tr>\n<tr>\n<td>(</td>\n<td>28%</td>\n<td>M</td>\n<td>%4D</td>\n<td>n</td>\n<td>%6E</td>\n<td>Á</td>\n<td>%C1</td>\n<td>å</td>\n<td>%E5</td>\n</tr>\n<tr>\n<td>)</td>\n<td>29%</td>\n<td>N</td>\n<td>%4E</td>\n<td>o</td>\n<td>%6F</td>\n<td>Â</td>\n<td>%C2</td>\n<td>æ</td>\n<td>%E6</td>\n</tr>\n<tr>\n<td>*</td>\n<td>%2A</td>\n<td>O</td>\n<td>%4F</td>\n<td>p</td>\n<td>70%</td>\n<td>Ã</td>\n<td>%C3</td>\n<td>ç</td>\n<td>%E7</td>\n</tr>\n<tr>\n<td>+</td>\n<td>%2B</td>\n<td>P</td>\n<td>50%</td>\n<td>q</td>\n<td>71%</td>\n<td>Ä</td>\n<td>%C4</td>\n<td>è</td>\n<td>%E8</td>\n</tr>\n<tr>\n<td>,</td>\n<td>%2C</td>\n<td>Q</td>\n<td>51%</td>\n<td>r</td>\n<td>72%</td>\n<td>Å</td>\n<td>%C5</td>\n<td>é</td>\n<td>%E9</td>\n</tr>\n<tr>\n<td>-</td>\n<td>%2D</td>\n<td>R</td>\n<td>52%</td>\n<td>s</td>\n<td>73%</td>\n<td>Æ</td>\n<td>%C6</td>\n<td>ê</td>\n<td>%EA</td>\n</tr>\n<tr>\n<td>.</td>\n<td>%2E</td>\n<td>S</td>\n<td>53%</td>\n<td>t</td>\n<td>74%</td>\n<td>Ç</td>\n<td>%C7</td>\n<td>ë</td>\n<td>%EB</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>%2F</td>\n<td>T</td>\n<td>54%</td>\n<td>u</td>\n<td>75%</td>\n<td>È</td>\n<td>%C8</td>\n<td>ì</td>\n<td>%EC</td>\n</tr>\n<tr>\n<td>0</td>\n<td>30%</td>\n<td>U</td>\n<td>55%</td>\n<td>v</td>\n<td>76%</td>\n<td>É</td>\n<td>%C9</td>\n<td>í</td>\n<td>%ED</td>\n</tr>\n<tr>\n<td>1</td>\n<td>31%</td>\n<td>V</td>\n<td>56%</td>\n<td>w</td>\n<td>77%</td>\n<td>Ê</td>\n<td>%CA</td>\n<td>î</td>\n<td>%EE</td>\n</tr>\n<tr>\n<td>2</td>\n<td>32%</td>\n<td>W</td>\n<td>57%</td>\n<td>x</td>\n<td>78%</td>\n<td>Ë</td>\n<td>%CB</td>\n<td>ï</td>\n<td>%EF</td>\n</tr>\n<tr>\n<td>3</td>\n<td>33%</td>\n<td>X</td>\n<td>58%</td>\n<td>y</td>\n<td>79%</td>\n<td>Ì</td>\n<td>%CC</td>\n<td>ð</td>\n<td>%F0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>34%</td>\n<td>Y</td>\n<td>59%</td>\n<td>z</td>\n<td>%7A</td>\n<td>Í</td>\n<td>%CD</td>\n<td>ñ</td>\n<td>%F1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>35%</td>\n<td>Z</td>\n<td>%5A</td>\n<td>{</td>\n<td>%7B</td>\n<td>Î</td>\n<td>%CE</td>\n<td>ò</td>\n<td>%F2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>36%</td>\n<td>?</td>\n<td>%3F</td>\n<td>&amp;#124;</td>\n<td>%7C</td>\n<td>Ï</td>\n<td>%CF</td>\n<td>ó</td>\n<td>%F3</td>\n</tr>\n<tr>\n<td>7</td>\n<td>37%</td>\n<td>@</td>\n<td>40%</td>\n<td>}</td>\n<td>%7D</td>\n<td>Ð</td>\n<td>%D0</td>\n<td>ô</td>\n<td>%F4</td>\n</tr>\n<tr>\n<td>8</td>\n<td>38%</td>\n<td>[</td>\n<td>%5B</td>\n<td>~</td>\n<td>%7E</td>\n<td>Ñ</td>\n<td>%D1</td>\n<td>õ</td>\n<td>%F5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>39%</td>\n<td>\\</td>\n<td>%5C</td>\n<td>¢</td>\n<td>%A2</td>\n<td>Ò</td>\n<td>%D2</td>\n<td>ö</td>\n<td>%F6</td>\n</tr>\n<tr>\n<td>:</td>\n<td>%3A</td>\n<td>]</td>\n<td>%5D</td>\n<td>£</td>\n<td>%A3</td>\n<td>Ó</td>\n<td>%D3</td>\n<td>÷</td>\n<td>%F7</td>\n</tr>\n<tr>\n<td>;</td>\n<td>%3B</td>\n<td>^</td>\n<td>%5E</td>\n<td>¥</td>\n<td>%A5</td>\n<td>Ô</td>\n<td>%D4</td>\n<td>ø</td>\n<td>%F8</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>%3C</td>\n<td>_</td>\n<td>%5F</td>\n<td>&amp;#124;</td>\n<td>%A6</td>\n<td>Õ</td>\n<td>%D5</td>\n<td>ù</td>\n<td>%F9</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td>%3D</td>\n<td>&#96;</td>\n<td>60%</td>\n<td>§</td>\n<td>%A7</td>\n<td>Ö</td>\n<td>%D6</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>%3E</td>\n<td>a</td>\n<td>61%</td>\n<td>«</td>\n<td>%AB</td>\n<td>Ø</td>\n<td>%D8</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"语言代码\"><a href=\"#语言代码\" class=\"headerlink\" title=\"语言代码\"></a>语言代码</h2><h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2>","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<p><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg\"><br><a name=\"HFtsm\"></a></p>\n<h1 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h1><h2 id=\"根元素\"><a href=\"#根元素\" class=\"headerlink\" title=\"根元素\"></a>根元素</h2><blockquote>\n<p><strong><!DOCTYPE html> 是一个声明，表示该文档是由 HTML5 进行编写的。</strong><br><strong>&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 &lt; html&gt; 标签之前</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>主根元素</th>\n<th>html</th>\n<th>html 元素用于告诉告诉浏览器其自身是一个 HTML 文档</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分区根元素</td>\n<td>body</td>\n<td>表明这是文档的主体部分</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    这是文档的头部</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    这是文档的主体</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"e3ce87db\"></a></p>\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p><a name=\"TWAh9\"></a></p>\n<h3 id=\"head标签\"><a href=\"#head标签\" class=\"headerlink\" title=\"head标签\"></a>head标签</h3><blockquote>\n<p><strong>&lt; head&gt; 标签用于定义文档的头部，它是所有头部元素的容器</strong></p>\n</blockquote>\n<p><a name=\"cFRIO\"></a></p>\n<h3 id=\"title标签\"><a href=\"#title标签\" class=\"headerlink\" title=\"title标签\"></a>title标签</h3><blockquote>\n<p><strong>&lt; title&gt; 标签用于定义文档的标题。</strong></p>\n</blockquote>\n<ul>\n<li>&lt; title&gt; 标签必须位于 &lt; head&gt;标签内部。</li>\n<li>会在浏览器的窗口或选项卡的顶部显示<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>显示在浏览器的标题栏上<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><a name=\"Wujh1\"></a></p>\n<h3 id=\"meta标记\"><a href=\"#meta标记\" class=\"headerlink\" title=\"meta标记\"></a>meta标记</h3><blockquote>\n<p><strong>&lt; meta&gt; 标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。</strong></p>\n</blockquote>\n<p>下面介绍meta元素的功能：</p>\n<ol>\n<li>编码和自适应</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>网站描述</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（关键字）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;descript&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（描述）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（作者）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;generator&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（制作所用的软件）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;copyright&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（版权所有）&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;revisit-after&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;7 days&quot;</span> &gt;</span>//设置搜索引擎的抓取频率</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;robots&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span></span><br><span class=\"line\">1、none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class=\"line\">2、noindex : 搜索引擎不索引此网页。</span><br><span class=\"line\">3、nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class=\"line\">4、all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class=\"line\">5、index : 搜索引擎索引此网页。</span><br><span class=\"line\">6、follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>向浏览器头部(响应头)返回信息</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;30&quot;</span>&gt;</span>//每30秒刷新一次</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;Pragma&quot;</span><span class=\"attr\">content</span>=<span class=\"string\">&quot;no-cache&quot;</span>&gt;</span> //禁止从缓存中读取HTML</span><br><span class=\"line\">//两秒刷新并且指向新页面</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;2&quot;</span>;<span class=\"attr\">URL</span>=<span class=\"string\">&quot;http://www.haorooms.com&quot;</span>&gt;</span>[//两秒刷新并且指向新页面</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;expires&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;（GMT时间格式）&quot;</span>&gt;</span>//设置到期时间</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-Type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=gb2312&quot;</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;charset&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;iso-8859-1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"fnyhk\"></a></p>\n<h3 id=\"base标签\"><a href=\"#base标签\" class=\"headerlink\" title=\"base标签\"></a>base标签</h3><blockquote>\n<p><strong>&lt; base&gt;为相对链接设置基本URL</strong><br><strong>&lt; base&gt;指定用户如何打开链接，以及表单提交后浏览器的状态</strong></p>\n</blockquote>\n<p>属性：</p>\n<ol>\n<li><p>herf\t\t为文档的相对URL指定基本URL</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">base</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;//www.w3cschool.cn/listings/&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/javascript.html&quot;</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>target\t\t指示浏览器如何打开网址</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>| _blank    | 在新窗口打开链接                              |<br>| _self    | 在同一窗口或框架打开链接（默认），即当前的div |<br>| _parent   | 在父框架打开链接，即上一层框架                |<br>| _top      | 在整个窗口打开链接                            |<br>| framename | 在一指定框架打开链接，即在指定div             |</p>\n<p><a name=\"dWD6I\"></a></p>\n<h2 id=\"div和语义化布局\"><a href=\"#div和语义化布局\" class=\"headerlink\" title=\"div和语义化布局\"></a>div和语义化布局</h2><p>在HTML5出世之前，人们实现网页布局都是利用div，而HTML5新的语义化元素也能实现网页布局，而且更凸显语义化<br />在经典的页面布局中，页面被分为 header、main、aside、footer 四个部分:<img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662092868310-ef59cd51-a19c-4865-a31c-250695024632.jpeg\"></p>\n<h3 id=\"div\"><a href=\"#div\" class=\"headerlink\" title=\"div\"></a>div</h3><blockquote>\n<p><strong>&lt;div&gt; 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</strong><br>div通常和css一起使用</p>\n</blockquote>\n<h3 id=\"页眉header\"><a href=\"#页眉header\" class=\"headerlink\" title=\"页眉header\"></a>页眉header</h3><blockquote>\n<p><strong>&lt;header&gt; 标签用于定义文档的页眉（介绍信息）</strong></p>\n</blockquote>\n<h3 id=\"导航nav\"><a href=\"#导航nav\" class=\"headerlink\" title=\"导航nav\"></a>导航nav</h3><blockquote>\n<p><strong>&lt;nav&gt; 标签用于定义页面主导航功能。</strong></p>\n</blockquote>\n<p><a name=\"Lv1ms\"></a></p>\n<h3 id=\"主体main\"><a href=\"#主体main\" class=\"headerlink\" title=\"主体main\"></a>主体main</h3><blockquote>\n<p><strong>&lt;main&gt; 标签用于定义文档</strong><a href=\"https://man.ilovefishc.com/pageHTML5/body.html\"><strong>&lt;body&gt;</strong></a><strong>或应用的主体部分。</strong></p>\n</blockquote>\n<p><a name=\"TJFWp\"></a></p>\n<h3 id=\"节section\"><a href=\"#节section\" class=\"headerlink\" title=\"节section\"></a>节section</h3><blockquote>\n<p><strong>&lt;section&gt; 标签用于定义定义文档中的节。</strong></p>\n</blockquote>\n<p><a name=\"dDkzH\"></a></p>\n<h3 id=\"文章article\"><a href=\"#文章article\" class=\"headerlink\" title=\"文章article\"></a>文章article</h3><blockquote>\n<p><strong>&lt;article&gt; 标签用于定义一篇文章，是网页中独立的内容，与页面其它部分无关。</strong></p>\n</blockquote>\n<p><a name=\"vyxWh\"></a></p>\n<h3 id=\"详情details\"><a href=\"#详情details\" class=\"headerlink\" title=\"详情details\"></a>详情details</h3><blockquote>\n<p><strong>&lt;details&gt; 标签用于定义用户可见的或者隐藏的需求的补充细节。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open</td>\n<td>open</td>\n<td>规定 details 是否默认可见。</td>\n</tr>\n</tbody></table>\n<p><a name=\"DBBFL\"></a></p>\n<h3 id=\"总结summary\"><a href=\"#总结summary\" class=\"headerlink\" title=\"总结summary\"></a>总结summary</h3><blockquote>\n<p><strong>&lt;summary&gt; 标签定义 <strong><a href=\"https://man.ilovefishc.com/pageHTML5/detail.html\"><strong>&lt;details&gt;</strong></a></strong> 元素的标题</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">details</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">summary</span>&gt;</span>《零基础入门学习Python》<span class=\"tag\">&lt;/<span class=\"name\">summary</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>配有同名书籍。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>配有视频教程<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">details</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a name=\"HaRxr\"></a></p>\n<h3 id=\"插图figure\"><a href=\"#插图figure\" class=\"headerlink\" title=\"插图figure\"></a>插图figure</h3><blockquote>\n<p><strong>&lt;figure&gt; 标签规定独立的流内容（图像、图表、照片、代码等等）。</strong></p>\n</blockquote>\n<p>figure 元素代表一段独立的内容, 经常与说明 <a href=\"https://man.ilovefishc.com/pageHTML5/figcaption.html\">figcaption</a> 元素配合使用, 并且作为一个独立的引用单元。</p>\n<blockquote>\n<p><strong>&lt;figcaption&gt; 标签为 figure 元素定义标题。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">figure</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../img/logo.png&quot;</span>  <span class=\"attr\">alt</span>=<span class=\"string\">&quot;鱼C-Logo&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">figcaption</span>&gt;</span>鱼C工作室，让自学编程变得妙不可言｡◕‿◕｡<span class=\"tag\">&lt;/<span class=\"name\">figcaption</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"K1cYQ\"></a></p>\n<h3 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a>aside</h3><blockquote>\n<p><strong>&lt;aside&gt; 标签定义侧边栏，通常是网页的说明、提示、引用、附加注释、相关链接、广告等内容。</strong></p>\n</blockquote>\n<p><a name=\"Wsw5i\"></a></p>\n<h3 id=\"页脚footer\"><a href=\"#页脚footer\" class=\"headerlink\" title=\"页脚footer\"></a>页脚footer</h3><blockquote>\n<p><strong>&lt;footer&gt; 标签定义文档或节的页脚</strong></p>\n</blockquote>\n<h2 id=\"文字内容\"><a href=\"#文字内容\" class=\"headerlink\" title=\"文字内容\"></a>文字内容</h2><p><a name=\"QZF96\"></a></p>\n<h3 id=\"超链接a\"><a href=\"#超链接a\" class=\"headerlink\" title=\"超链接a\"></a>超链接a</h3><blockquote>\n<p><strong>&lt;a&gt; 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。</strong></p>\n</blockquote>\n<p>基础语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;文件路径&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;anchor名称&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;提示信息&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;打开方式&quot;</span>&gt;</span>超链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>特殊用法：</p>\n<ol>\n<li><p>FTP站点访问链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">&quot;ftp://服务器IP地址或域名&quot;</span>&gt;</span>超链接文字<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>电子邮件超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:E-mali邮箱地址？subject=邮件主题&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义书签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跳转至书签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>同页跳转 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL#书签名&quot;</span>&gt;</span>书签标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>异页跳转</span><br></pre></td></tr></table></figure>\n<p><a name=\"Ux6mJ\"></a></p>\n</li>\n</ol>\n<h3 id=\"标题h1\"><a href=\"#标题h1\" class=\"headerlink\" title=\"标题h1\"></a>标题h1</h3><blockquote>\n<p><strong>&lt;h1&gt; - &lt;h6&gt; 标签可定义标题。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>一号标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>二号标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>三号标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>align属性:  left | center | right | justfiy<br><a name=\"pZDqS\"></a></li>\n</ul>\n<h3 id=\"粗体b\"><a href=\"#粗体b\" class=\"headerlink\" title=\"粗体b\"></a>粗体b</h3><blockquote>\n<p><strong>&lt;b&gt; 标签用于定义表示粗体的文本。</strong></p>\n</blockquote>\n<p>根据 HTML5 的规范，如果你只是想实现加粗效果，推荐使用 css 样式来实现：.bolder {font-weight: bolder;}</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>用css代替加粗<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.bolder</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">font-weight</span>:bolder;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bloder&quot;</span>&gt;</span>这是粗体文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"kAhDq\"></a></p>\n<h3 id=\"斜体i\"><a href=\"#斜体i\" class=\"headerlink\" title=\"斜体i\"></a>斜体i</h3><blockquote>\n<p><strong>&lt;i&gt; 标签用于定义表示斜体的文本。</strong></p>\n</blockquote>\n<p>同样推荐使用 css 样式来实现：.italic{font-style: italic;}<br><a name=\"Uv1uj\"></a></p>\n<h3 id=\"空格、回车、分割线和特殊字符\"><a href=\"#空格、回车、分割线和特殊字符\" class=\"headerlink\" title=\"空格、回车、分割线和特殊字符\"></a>空格、回车、分割线和特殊字符</h3><ul>\n<li>空格和特殊字符</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;nbsp;</span>\t( )</span><br><span class=\"line\"><span class=\"symbol\">&amp;lt;</span>   \t(&lt;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;gt;</span> \t\t(&gt;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;amp;</span>   (&amp;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;quot;</span>  (&quot;)</span><br><span class=\"line\"><span class=\"symbol\">&amp;times;</span> (×)</span><br><span class=\"line\"><span class=\"symbol\">&amp;divide;</span>(÷)</span><br><span class=\"line\"><span class=\"symbol\">&amp;cope;</span>  (©)版权</span><br><span class=\"line\"><span class=\"symbol\">&amp;reg;</span>   (®)注册商标</span><br><span class=\"line\"><span class=\"symbol\">&amp;trade;</span>\t(™)商标</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回车和分割线</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>或者<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;(百分比或者像素px)&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;像素px&quot;</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;left|center|right&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"BKyav\"></a></p>\n<h3 id=\"段落p\"><a href=\"#段落p\" class=\"headerlink\" title=\"段落p\"></a>段落p</h3><blockquote>\n<p><strong>&lt;p&gt; 标签用于定义一个段落。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"HyrXI\"></a></p>\n<h3 id=\"整体缩进blockquote\"><a href=\"#整体缩进blockquote\" class=\"headerlink\" title=\"整体缩进blockquote\"></a>整体缩进blockquote</h3><blockquote>\n<p><strong>&lt;blockquote&gt; 标签定义块引用。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>缩进5个字符位置<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>缩进10个字符位置<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"hJjuJ\"></a></p>\n<h3 id=\"预格式化pre\"><a href=\"#预格式化pre\" class=\"headerlink\" title=\"预格式化pre\"></a>预格式化pre</h3><blockquote>\n<p><strong>&lt;pre&gt; 标签用于定义预格式化的文本。</strong></p>\n</blockquote>\n<p>pre 元素中的文本通常会保留空格和换行符，而文本自身也会呈现为等宽字体。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">          春 晓</span><br><span class=\"line\">春眠不觉晓⑴，处处闻啼鸟⑵。</span><br><span class=\"line\">夜来风雨声⑶，花落知多少⑷。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Q9EmI\"></a></p>\n<h2 id=\"图片和多媒体\"><a href=\"#图片和多媒体\" class=\"headerlink\" title=\"图片和多媒体\"></a>图片和多媒体</h2><p><a name=\"YxCUZ\"></a></p>\n<h3 id=\"图像img\"><a href=\"#图像img\" class=\"headerlink\" title=\"图像img\"></a>图像img</h3><blockquote>\n<p><strong><img> 标签用于向网页中嵌入一幅图像。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;替代文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完整属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alt</td>\n<td>text</td>\n<td><br />- 鼠标悬停在图片上时出现的文字<br />- 加载失败时会代替图片<br /></td>\n<td>align</td>\n<td>top&amp;#124;middle&amp;#124;bottom&amp;#124;<br/>left&amp;#124;center&amp;#124;right</td>\n<td>排列方式</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>图片的链接</td>\n<td>boder</td>\n<td>pixels</td>\n<td>边框</td>\n</tr>\n<tr>\n<td>name</td>\n<td>text</td>\n<td>名称</td>\n<td>hspace</td>\n<td>pixels</td>\n<td>左侧和右侧的空白</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>高</td>\n<td>vspace</td>\n<td>pixels</td>\n<td>顶部和底部的空白</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>宽</td>\n<td>usemap</td>\n<td>URL</td>\n<td>将图像定义为客户器端图像映射</td>\n</tr>\n</tbody></table>\n<h3 id=\"map与area\"><a href=\"#map与area\" class=\"headerlink\" title=\"map与area\"></a>map与area</h3><ul>\n<li><p>为图像设置超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;打开方式&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为图像设置热区链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">usemap</span>=<span class=\"string\">&quot;#+映射图像名称&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">map</span>  <span class=\"attr\">name</span>=<span class=\"string\">&quot;映射图像名称&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">area</span>  <span class=\"attr\">shap</span>=<span class=\"string\">&quot;热区形状&quot;</span> <span class=\"attr\">coords</span>=<span class=\"string\">&quot;热区坐标&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">area</span>  <span class=\"attr\">shap</span>=<span class=\"string\">&quot;热区形状&quot;</span> <span class=\"attr\">coords</span>=<span class=\"string\">&quot;热区坐标&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;URL&quot;</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：img的usemap的属性值要”#+映射图像名称”</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>shape值</th>\n<th>coords值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rect（矩形）</td>\n<td>x1,y1,x2,y2</td>\n<td>矩形的四个坐标</td>\n</tr>\n<tr>\n<td>circle（圆形）</td>\n<td>center-x,center-y,radius</td>\n<td>圆心坐标和半径</td>\n</tr>\n<tr>\n<td>poly（多边形）</td>\n<td>x1,y1,x2,y2,x3,y3…</td>\n<td>各顶点坐标</td>\n</tr>\n</tbody></table>\n<h3 id=\"picture与source\"><a href=\"#picture与source\" class=\"headerlink\" title=\"picture与source\"></a>picture与source</h3><blockquote>\n<p><strong>&lt; picture&gt; 标签为其内部特定的 img 元素提供多样的 <a href=\"https://man.ilovefishc.com/pageHTML5/source.html\">source</a> 元素</strong><br><strong><source> 标签为 picture , audio 或者 video 元素指定多个媒体资源。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>src</td>\n<td>url</td>\n<td>规定媒体文件的 URL。</td>\n</tr>\n<tr>\n<td>srcset</td>\n<td>url</td>\n<td>仅当source元素是picture元素的直接子元素时，srcset属性才有效。</td>\n</tr>\n<tr>\n<td><a href=\"https://man.ilovefishc.com/pageHTML5/media.html\">media</a></td>\n<td>media query</td>\n<td>规定媒体资源的类型。</td>\n</tr>\n<tr>\n<td>sizes</td>\n<td></td>\n<td>表示源大小的列表，用于描述源代表的图像的最终渲染宽度。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>numeric value</td>\n<td>规定媒体资源的 MIME 类型。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:1024px)&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;big.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(min-width:512px)&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;normal.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;small.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;图片&quot;</span> <span class=\"attr\">sytle</span>=<span class=\"string\">&quot;width:auto&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码效果讲解：</p>\n<ol>\n<li>当屏幕大于1024时，显示big.jpg</li>\n<li>当屏幕大于512小于1024时，显示normal.jpg</li>\n<li>当屏幕小于512时，显示small.jpg<br><a name=\"vYXRh\"></a></li>\n</ol>\n<h3 id=\"任何插件embed\"><a href=\"#任何插件embed\" class=\"headerlink\" title=\"任何插件embed\"></a>任何插件embed</h3><blockquote>\n<p><strong>&lt; embed&gt; 标签定义嵌入的内容，比如插件。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">embed</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;URL&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">higth</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">autostart</span>=<span class=\"string\">&quot;true|false(是否自动播放)&quot;</span> <span class=\"attr\">loop</span></span></span><br><span class=\"line\"><span class=\"tag\">  =<span class=\"string\">&quot;true|false(是否循环)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels</td>\n<td>规定嵌入内容的高度。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL 规定被嵌入内容的 URL。</td>\n<td></td>\n</tr>\n<tr>\n<td>type</td>\n<td>MIME_type</td>\n<td>规定嵌入内容的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>规定嵌入内容的宽度。</td>\n</tr>\n</tbody></table>\n<h3 id=\"视频video\"><a href=\"#视频video\" class=\"headerlink\" title=\"视频video\"></a>视频video</h3><blockquote>\n<p><strong>&lt; video&gt; 标签定义视频，比如电影片段或其他视频流。</strong></p>\n</blockquote>\n<p>目前，&lt; video&gt; 元素支持三种视频格式：MP4、WebM、Ogg。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--显示控件--!&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;source src=&quot;http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4&quot;  type=&quot;video/mp4&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>如果指定该属性，则视频在就绪后将自动播放。</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>如果指定该属性，则向用户显示控件，比如播放&#x2F;暂停按钮。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>指定视频播放器的宽度。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>指定视频播放器的高度。</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>如果指定该属性，将循环播放视频。</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>如果指定该属性，则将视频的音频输出为静音。</td>\n</tr>\n<tr>\n<td>poster</td>\n<td>URL</td>\n<td>指定视频的封面</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto、metadata、none</td>\n<td>指定视频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto（默认）：要求浏览器尽快加载整个视频<br />metadata：只加载视频的元数据（宽度、高度、第一帧影像和视频总长度等）<br />none：在用户点击开始播放之前不会加载视频，若不设定poster视频的黑的</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要播放的视频文件的 URL 地址。</td>\n</tr>\n</tbody></table>\n<p>注意事项：</p>\n<ol>\n<li>使用video标签时controls属性或antoplay属性二选一，否则视频无法播放</li>\n<li>controls与antoplay同时使用时，chrome浏览器不会自动播放，要添加muted属性（静音）才能自动播放<br><a name=\"hWx0q\"></a></li>\n</ol>\n<h3 id=\"音频audio\"><a href=\"#音频audio\" class=\"headerlink\" title=\"音频audio\"></a>音频audio</h3><blockquote>\n<p><strong>&lt;audio&gt; 标签定义声音，比如音乐或其他音频流。</strong></p>\n</blockquote>\n<p>目前，&lt;audio&gt; 标签定义声音，支持的3种文件格式：MP3、Wav、Ogg</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span> <span class=\"attr\">loop</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://fishc.oss-cnhangzhou.aliyuncs.com/Web/audio_tag.mp3&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>autoplay</td>\n<td>如果指定该属性，则音频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>controls</td>\n<td>如果指定该属性，则向用户显示播放控件（比如播放&#x2F;暂停按钮）。</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>loop</td>\n<td>如果指定该属性，将循环播放音频。</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>muted</td>\n<td>如果指定该属性，则音频输出为静音。</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto、metadata、none</td>\n<td>指定音频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto：要求浏览器尽快加载整个音频，默认行为<br />metadata：只加载音频的元数据<br />none：在用户点击开始播放之前不会加载音频</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要播放的音频文件的 URL 地址。</td>\n</tr>\n</tbody></table>\n<p><a name=\"g5RWU\"></a></p>\n<h2 id=\"内嵌内容\"><a href=\"#内嵌内容\" class=\"headerlink\" title=\"内嵌内容\"></a>内嵌内容</h2><p><a name=\"sW8YR\"></a></p>\n<h3 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h3><blockquote>\n<p><strong>&lt;iframe&gt; 标签会创建包含另外一个文档的内联框架（即行内框架）。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;javascript.html&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;iframe&quot;</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels、%</td>\n<td>指定 iframe 的高度。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>text</td>\n<td>指定 iframe 的名称。</td>\n</tr>\n<tr>\n<td>sandbox</td>\n<td>allow-forms、allow-pointer-lock、allow-popups、allow-same-origin、allow-scripts、allow-top-navigation</td>\n<td>启用一系列对 &lt; iframe&gt;中内容的额外限制。</td>\n</tr>\n<tr>\n<td>seamless</td>\n<td>seamless</td>\n<td>指示浏览器将 iframe 的内容显示得像主 HTML 文档的一个整体组成部分。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定在 iframe 中显示的文档的 URL 地址。</td>\n</tr>\n<tr>\n<td>srcdoc</td>\n<td>HTML_code</td>\n<td>指定在 &lt; iframe&gt; 中显示的页面的 HTML 内容。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels、%</td>\n<td>指定 iframe 的宽度。</td>\n</tr>\n</tbody></table>\n<h4 id=\"sandbox沙盒属性\"><a href=\"#sandbox沙盒属性\" class=\"headerlink\" title=\"sandbox沙盒属性\"></a>sandbox沙盒属性</h4><blockquote>\n<p><strong>限制了嵌入网页的内容和操作</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>sandbox的值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>allow-forms</td>\n<td>允许提交表单</td>\n</tr>\n<tr>\n<td>allow-pointer-lock</td>\n<td>允许执行脚本</td>\n</tr>\n<tr>\n<td>allow-popups</td>\n<td>允许同域请求</td>\n</tr>\n<tr>\n<td>allow-same-origin</td>\n<td>允许iframe能主导window .top进行页面跳转</td>\n</tr>\n<tr>\n<td>allow-scripts</td>\n<td>允许iframe中弹出新窗口</td>\n</tr>\n<tr>\n<td>allow-top-navigation</td>\n<td>允许在iframe中锁定鼠标</td>\n</tr>\n</tbody></table>\n<h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><blockquote>\n<p><strong>&lt; object&gt; 标签定义一个嵌入的对象。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;666&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;375&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;video_tag.mp4&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>form</td>\n<td>form_id</td>\n<td>规定对象所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>规定对象的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>规定对象的宽度。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>为对象规定名称。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>MIME_type</td>\n<td>规定 data 属性中规定的数据的 MIME 类型。</td>\n</tr>\n<tr>\n<td>usemap</td>\n<td>mapname</td>\n<td>规定与对象一同使用的客户端图像映射的名称。</td>\n</tr>\n</tbody></table>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><blockquote>\n<p><strong>这一部分可以先草草了解一下，详见javascript教程</strong></p>\n</blockquote>\n<p><a href=\"./Javascript.md\">Javascript</a><br><a name=\"m34IF\"></a></p>\n<h3 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h3><blockquote>\n<p><strong>&lt; canvas&gt; 标签定义图形，比如图表和其他图像。</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>height</td>\n<td>pixels</td>\n<td>设置 canvas 的高度。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>设置 canvas 的宽度。</td>\n</tr>\n</tbody></table>\n<p><a name=\"NuSUB\"></a></p>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><blockquote>\n<p><strong>&lt; script&gt; 标签用于在 HTML 文档中加入脚本（例如 JavaScript）</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;lilming&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>media_type</td>\n<td>指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。</td>\n</tr>\n<tr>\n<td>async</td>\n<td>async</td>\n<td>告诉浏览器异步执行脚本。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td>\n</tr>\n<tr>\n<td>charset</td>\n<td>charset</td>\n<td>指定外部脚本文件中使用的字符编码。<br />注意：该属性只能与 src 属性一起使用。</td>\n</tr>\n<tr>\n<td>defer</td>\n<td>defer</td>\n<td>告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定外部脚本文件的 URL。</td>\n</tr>\n</tbody></table>\n<p><a name=\"DdbGP\"></a></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><a name=\"wCnzZ\"></a></p>\n<h3 id=\"无序列表ul\"><a href=\"#无序列表ul\" class=\"headerlink\" title=\"无序列表ul\"></a>无序列表ul</h3><blockquote>\n<p><strong>&lt; ul&gt; 标签用于定义无序列表。</strong></p>\n</blockquote>\n<p>type的属性值：</p>\n<ul>\n<li>disc      实心圆</li>\n<li>circle    空心圆</li>\n<li>square    实心正方形</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>无序列表更常用，可以用css设置序号样式，而有序列表的序号是固定的。<br><a name=\"QNqSJ\"></a></p>\n<h3 id=\"有序列表ol\"><a href=\"#有序列表ol\" class=\"headerlink\" title=\"有序列表ol\"></a>有序列表ol</h3><blockquote>\n<p><strong>&lt; ol&gt; 标签用于定义有序列表。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;1|A|a|i|I&quot;</span> <span class=\"attr\">start</span>=<span class=\"string\">&quot;数值（初始数字）&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"kk3wt\"></a></p>\n<h3 id=\"定义列表dl\"><a href=\"#定义列表dl\" class=\"headerlink\" title=\"定义列表dl\"></a>定义列表dl</h3><blockquote>\n<p><strong>&lt; dl&gt; 标签定义了一个包含术语定义以及描述的列表。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>项目一<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述一<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述二<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>项目二<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述一<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>描述二<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"fTbxI\"></a></p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><a name=\"Aj8si\"></a></p>\n<h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ul>\n<li><p>宏观结构</p>\n<blockquote>\n<p><strong>&lt; table&gt; 标签用于定义 HTML 表格</strong><br><strong>&lt; thead&gt; 标签定义表格的表头</strong><br><strong>&lt; tbody&gt; 标签用于组合 HTML 表格的主体内容</strong><br><strong>&lt; tfoot&gt; 标签定义表格的页脚（脚注或表注）</strong></p>\n</blockquote>\n</li>\n<li><p>微观结构</p>\n<blockquote>\n<p><strong>&lt; tr&gt; 标签用于定义 HTML 表格中的行。</strong><br><strong>&lt; th&gt; 标签用于定义表格内的表头单元格。</strong><br><strong>&lt; td&gt; 标签用于定义 HTML 表格中的标准单元格。</strong></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>班级<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>王小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>会计3班<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>学生信息<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"SgfKs\"></a></p>\n<h3 id=\"表格样式：table属性\"><a href=\"#表格样式：table属性\" class=\"headerlink\" title=\"表格样式：table属性\"></a>表格样式：table属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>内容对齐</td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td>背景颜色</td>\n</tr>\n<tr>\n<td>border</td>\n<td>pixels</td>\n<td>边框宽度</td>\n</tr>\n<tr>\n<td>cellpadding</td>\n<td>pixels</td>\n<td>边缘与内容之间的空白</td>\n</tr>\n<tr>\n<td>cellspacing</td>\n<td>pixels</td>\n<td>单元格之间的空白</td>\n</tr>\n<tr>\n<td>frame</td>\n<td>above&amp;#124;below&amp;#124;hsides&amp;#124;<br/>vsides&amp;#124;lhs&amp;#124;border&amp;#124;void</td>\n<td>规定外边框哪个部分可见</td>\n</tr>\n<tr>\n<td>rules</td>\n<td>none&amp;#124all&amp;#124rows&amp;#124cols&amp;#124groups</td>\n<td>规定内边框哪个是可见的</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels</td>\n<td>表格高度</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels</td>\n<td>表格宽度</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n<tr>\n<td><a name=\"T0FdN\"></a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"表格边框属性\"><a href=\"#表格边框属性\" class=\"headerlink\" title=\"表格边框属性\"></a>表格边框属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>border</td>\n<td>pixels</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n</tbody></table>\n<p><a name=\"VVJw4\"></a></p>\n<h4 id=\"表格样式：frame和rules\"><a href=\"#表格样式：frame和rules\" class=\"headerlink\" title=\"表格样式：frame和rules\"></a>表格样式：frame和rules</h4><table>\n<thead>\n<tr>\n<th>fram属性值</th>\n<th>规定外边框哪个部分可见</th>\n<th>rules属性值</th>\n<th>规定内边框哪个是可见的</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>above</td>\n<td>上</td>\n<td>none</td>\n<td>无</td>\n</tr>\n<tr>\n<td>below</td>\n<td>下</td>\n<td>all</td>\n<td>所有</td>\n</tr>\n<tr>\n<td>hsides</td>\n<td>上下</td>\n<td>rows</td>\n<td>行边框</td>\n</tr>\n<tr>\n<td>vsides</td>\n<td>左右</td>\n<td>cols</td>\n<td>列边框</td>\n</tr>\n<tr>\n<td>lhs</td>\n<td>左</td>\n<td>groups</td>\n<td>介于行列间边框</td>\n</tr>\n<tr>\n<td>rhs</td>\n<td>右</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>border</td>\n<td>上下左右</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>void</td>\n<td>无</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><a name=\"DXSD6\"></a></p>\n<h3 id=\"行样式：tr属性\"><a href=\"#行样式：tr属性\" class=\"headerlink\" title=\"行样式：tr属性\"></a>行样式：tr属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>水平对齐</td>\n<td>bordercolorlight</td>\n<td>rgb</td>\n<td>设置亮边框（左上）</td>\n</tr>\n<tr>\n<td>valign</td>\n<td>top&amp;#124;bottom&amp;#124;middle</td>\n<td>垂直对齐</td>\n<td>bordercolordark</td>\n<td>rgb</td>\n<td>设置暗边框（右下）</td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td></td>\n<td>bordercolor</td>\n<td>rgb</td>\n<td>边框颜色</td>\n</tr>\n</tbody></table>\n<p><a name=\"NlVbS\"></a></p>\n<h3 id=\"单元格样式：td属性\"><a href=\"#单元格样式：td属性\" class=\"headerlink\" title=\"单元格样式：td属性\"></a>单元格样式：td属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left&amp;#124;right&amp;#124;center</td>\n<td>水平对齐</td>\n<td>bordercolorlight</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>valign</td>\n<td>top&amp;#124;bottom&amp;#124;middle</td>\n<td>垂直对齐</td>\n<td>bordercolordark</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>bgcolor</td>\n<td></td>\n<td>背景颜色</td>\n<td>rowspan</td>\n<td>int</td>\n<td>单元格跨行</td>\n</tr>\n<tr>\n<td>background</td>\n<td></td>\n<td>背景图案</td>\n<td>colspan</td>\n<td>int</td>\n<td>单元格跨列</td>\n</tr>\n<tr>\n<td>bordercolor</td>\n<td></td>\n<td>边框颜色</td>\n<td>width</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>heith</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><a name=\"wZE5i\"></a></p>\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><p><a name=\"dBe2M\"></a></p>\n<h3 id=\"表单：form\"><a href=\"#表单：form\" class=\"headerlink\" title=\"表单：form\"></a>表单：form</h3><blockquote>\n<p><strong>&lt; form&gt; 标签用于为用户输入创建 HTML 表单，用于向服务器传输数据</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>action</td>\n<td>URL</td>\n<td>规定当提交表单时向何处发送表单数据。</td>\n</tr>\n<tr>\n<td>method</td>\n<td>get、post（更常用）</td>\n<td>规定用于发送 form-data 的 HTTP 方法。</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on（默认）、off</td>\n<td>规定是否启用表单的自动填充功能。</td>\n</tr>\n<tr>\n<td>target</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>规定在何处打开 action URL。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>form_name</td>\n<td>规定表单的名称。</td>\n</tr>\n<tr>\n<td>accept-charset</td>\n<td>charset_list</td>\n<td>规定服务器可处理的表单数据字符集。</td>\n</tr>\n<tr>\n<td>enctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>规定在发送表单数据之前如何对其进行编码：<br />- application&#x2F;x-www-form-urlencoded在发送前编码所有字符（默认）（空格被编码为“+”，特殊字符被编码为ASCII十六进制字符）<br />- multipart&#x2F;form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值<br />- text&#x2F;plain 空格转换为 “+” 加号，但不对特殊字符编码<br /></td>\n</tr>\n<tr>\n<td>novalidate</td>\n<td>novalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>get和post的区别：</p>\n<ol>\n<li>GET 和 POST 是HTTP 协议中的两种发送请求的方法，底层都是 TCP&#x2F;IP，理论上get也可以将数据放在request body中，post也可以将数据放在url中，但不同的浏览器和服务器的处理不太一样</li>\n<li>GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包，具体表现为：</li>\n</ol>\n</blockquote>\n<p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）</p>\n<blockquote>\n<p>而对于 POST，浏览器先发送 header，服务器响应 100（continue），浏览器再发送 data，服务器响应 200（返回数据）</p>\n</blockquote>\n<p><a name=\"MLOxb\"></a></p>\n<h3 id=\"输入框：input\"><a href=\"#输入框：input\" class=\"headerlink\" title=\"输入框：input\"></a>输入框：input</h3><blockquote>\n<p><strong>&lt; input&gt; 标签用于搜集用户信息。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">  名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>input元素中的type与name属性是必填的，才能让服务器知道传输的数据是什么类型，该怎么称呼这一数据</p>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>button、checkbox、color、date、datetime-local、email、file、hidden、image、month、number、password、radio、range、reset、search、submit、tel、text、time、url、week</td>\n<td>规定 input 元素的类型</td>\n</tr>\n<tr>\n<td>name</td>\n<td>field_name</td>\n<td>指定元素的名称，用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据，只有设置了 name 属性的表单才能在提交表单时传递该值</td>\n</tr>\n<tr>\n<td>autocomplete</td>\n<td>on、off</td>\n<td>指定是否自动填充</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>无</td>\n<td>指定是否将光标自动移动到指定处</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定输入字段的初始值</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>无</td>\n<td>指定是否禁用该 input 元素，通常已经有value属性</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>无</td>\n<td>将文本框设为只读模式，防止用户编辑其内容，通常已经有value属性<br />与disabled的区别在于readonly依然会将值提交至服务器；而disabled不会</td>\n</tr>\n<tr>\n<td>accept</td>\n<td>mime_type</td>\n<td>指定提交的文件类型（多个类型之间使用英文的逗号隔开，文件类型的几种表述方式请参考 -&gt; <a href=\"https://fishc.com.cn/thread-128222-1-1.html\">传送门）</a></td>\n</tr>\n<tr>\n<td>alt</td>\n<td>text</td>\n<td>指定图像的说明文字</td>\n</tr>\n<tr>\n<td>checked</td>\n<td>checked</td>\n<td>指定该属性的复选框，默认显示为勾选状态</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formname</td>\n<td>指定其所属的一个或多个表单 id 值（在 HTML5 中，表单允许你将 input 放在文档中的任意位置，当你这么做的时候，可以通过指定该属性来确定元素所关联的表单）</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>URL</td>\n<td>指定表单提交的位置（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>指定表单提交的编码方式（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get、post</td>\n<td>指定表单提交的方法（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>指定是否重置 form 元素的 novalidate 属性，如果重置，那么当表单提交时 input 元素将不再进行任何验证（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>指定表单提交后在何处打开 action URL（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td>\n</tr>\n<tr>\n<td>height</td>\n<td>pixels、%</td>\n<td>指定图像的高度（像素）</td>\n</tr>\n<tr>\n<td>list</td>\n<td>datalist-id</td>\n<td>指定一个数据列表，即 datalist 元素的 id 值</td>\n</tr>\n<tr>\n<td>max</td>\n<td>number、date</td>\n<td>指定可接受的最大值，以便进行输入验证</td>\n</tr>\n<tr>\n<td>maxlength</td>\n<td>number</td>\n<td>指定用户可以在文本框输入的最大字符数</td>\n</tr>\n<tr>\n<td>min</td>\n<td>number、date</td>\n<td>指定可接受的最小值，以便进行输入验证</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>multiple</td>\n<td>指定该属性后可以上传多个文件</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>regexp_pattern</td>\n<td>指定一个用于输入验证的正则表达式</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>text</td>\n<td>指定一个占位提示文本</td>\n</tr>\n<tr>\n<td>required</td>\n<td>required</td>\n<td>表明用户必须输入一个值，否则无法通过输入验证</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number_of_char</td>\n<td>指定文本框的宽度</td>\n</tr>\n<tr>\n<td>src</td>\n<td>URL</td>\n<td>指定要显示的图像的 URL</td>\n</tr>\n<tr>\n<td>step</td>\n<td>number</td>\n<td>指定上下调节数值的步长</td>\n</tr>\n<tr>\n<td>width</td>\n<td>pixels、%</td>\n<td>指定图像的宽度（像素）</td>\n</tr>\n</tbody></table>\n<p><a name=\"ZocKe\"></a></p>\n<h3 id=\"按钮：button\"><a href=\"#按钮：button\" class=\"headerlink\" title=\"按钮：button\"></a>按钮：button</h3><blockquote>\n<p><strong>&lt;button&gt; 标签用于定义一个按钮。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autofocus</td>\n<td>autofocus</td>\n<td>指定当页面加载的时候，按钮将获得焦点。</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>禁用按钮。</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>指定按钮所关联的表单 ID。</td>\n</tr>\n<tr>\n<td>formaction</td>\n<td>url</td>\n<td>覆盖 form 元素的 action 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formenctype</td>\n<td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td>\n<td>覆盖 form 元素的 enctype 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formmethod</td>\n<td>get、post</td>\n<td>覆盖 form 元素的 method 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formnovalidate</td>\n<td>formnovalidate</td>\n<td>覆盖 form 元素的 novalidate 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>formtarget</td>\n<td>_blank、_self、_parent、_top、framename</td>\n<td>覆盖 form 元素的 target 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td>\n</tr>\n<tr>\n<td>name</td>\n<td>button_name</td>\n<td>指定按钮的名称</td>\n</tr>\n<tr>\n<td>type</td>\n<td>button（脚本运行按钮）、reset（清空）、submit（提交数据到服务器）</td>\n<td>指定按钮的类型</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定按钮的初始值<br />注释：可由脚本进行修改。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>若input标签的type属性的值为submit，则实现的是按钮效果，与button类似</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;demo/welcome.php&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    名字：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"WeC2D\"></a></p>\n<h3 id=\"标签：label\"><a href=\"#标签：label\" class=\"headerlink\" title=\"标签：label\"></a>标签：label</h3><blockquote>\n<p><strong>&lt;label&gt; 标签为 input 元素定义标注（标记）。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>Male<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;female&quot;</span>&gt;</span>Female<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;female&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>for</td>\n<td>与所属的input的id值对应，如：<br /><label for=\"XXX\"></label><br />&lt;input id &#x3D;”XXX”&#x2F;&gt;</td>\n<td>指定 label 将绑定另一个表单元素的 ID 属性值</td>\n</tr>\n<tr>\n<td>form</td>\n<td>formid</td>\n<td>指定 label 所属的表单 ID</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>将input置于label元素的里面也可以实现label与input的一一对应哦</p>\n</blockquote>\n<p><a name=\"XMQVB\"></a></p>\n<h3 id=\"表单分类：fieldset与legend元素\"><a href=\"#表单分类：fieldset与legend元素\" class=\"headerlink\" title=\"表单分类：fieldset与legend元素\"></a>表单分类：fieldset与legend元素</h3><blockquote>\n<p><strong>&lt;fieldset&gt; 标签将表单内容的一部分打包，生成一组相关表单的字段。</strong><br><strong>&lt;legend&gt; 标签用于为 fieldset 元素定义说明文字。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生一<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name1&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span> =<span class=\"string\">&quot;class1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生二<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name2&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span> =<span class=\"string\">&quot;class2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"ngNSA\"></a></p>\n<h3 id=\"可选框：select、option与optgroup\"><a href=\"#可选框：select、option与optgroup\" class=\"headerlink\" title=\"可选框：select、option与optgroup\"></a>可选框：select、option与optgroup</h3><blockquote>\n<p><strong>&lt;select&gt; 标签用于创建单选或多选菜单。</strong><br><strong>&lt;option&gt; 标签用于定义下拉列表中的一个选项。</strong><br><strong>&lt;optgroup&gt; 标签用于为下拉列表的选项进行分组。</strong></p>\n</blockquote>\n<p>select与input类似，type与name也必填的；若存在对应的label元素，还要加上id属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生一<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name1&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;class&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;class1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">             \t \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机三班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机四班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\">      \t<span class=\"tag\">&lt;<span class=\"name\">legend</span>&gt;</span>学生二<span class=\"tag\">&lt;/<span class=\"name\">legend</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name2&quot;</span>&gt;</span>姓名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span>班级：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;class&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;class2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">             \t \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机三班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">              \t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>计算机四班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fieldset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>select属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autofocus</td>\n<td>无</td>\n<td>指定在页面加载后文本区域自动获得焦点</td>\n</tr>\n<tr>\n<td>name</td>\n<td>name</td>\n<td>指定该下拉列表的名称</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>无</td>\n<td>指定该下拉列表被禁用</td>\n</tr>\n<tr>\n<td>form</td>\n<td>form_id</td>\n<td>指定所属表单</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>无</td>\n<td>指定该下拉列表支持多个选项</td>\n</tr>\n<tr>\n<td>required</td>\n<td>无</td>\n<td>指定文本区域是必填的</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>指定下拉列表中可见选项的数目</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>option属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>指定该选项被禁用</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>指定该选项在列表中所显示的标签</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>selected</td>\n<td>指定该选项表现为选中状态</td>\n</tr>\n<tr>\n<td>value</td>\n<td>text</td>\n<td>指定发送到服务器的值<br />如标签显示“计算机一班”；发送到服务器处理的值是”211461”</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>若选项多，且可分组，则可以利用&lt;optgroup&gt;属性对option元素进行分类</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;计算机学院&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211461&quot;</span>&gt;</span>一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211462&quot;</span>&gt;</span>二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optgroup</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;通信学院&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211451&quot;</span>&gt;</span>一班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;211452&quot;</span>&gt;</span>二班<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">optgroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>optgroup属性</strong></th>\n<th><strong>值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>disabled</td>\n<td>disabled</td>\n<td>指定该选项被禁用</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n<td>指定该分组的标签</td>\n</tr>\n</tbody></table>\n<p><a name=\"r4r7j\"></a></p>\n<h3 id=\"单选框：type属性radio\"><a href=\"#单选框：type属性radio\" class=\"headerlink\" title=\"单选框：type属性radio\"></a>单选框：type属性radio</h3><blockquote>\n<p><strong>若要设置单选框，则设置input元素的type属性值为radio</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;male&quot;</span>&gt;</span>女</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若要几个当中选一个，那么所有name属性都要一致</li>\n<li>若name属性不一致，则可复选<br><a name=\"plv5S\"></a></li>\n</ul>\n<h3 id=\"多选框：type属性checkbox\"><a href=\"#多选框：type属性checkbox\" class=\"headerlink\" title=\"多选框：type属性checkbox\"></a>多选框：type属性checkbox</h3><blockquote>\n<p><strong>若要设置多选下拉框，则可设置input元素type属性为checkbox</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;banana&quot;</span>&gt;</span>香蕉<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fruit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;blueberry&quot;</span>&gt;</span>蓝莓<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"UipPp\"></a></p>\n<h3 id=\"日期与时间datetime-local\"><a href=\"#日期与时间datetime-local\" class=\"headerlink\" title=\"日期与时间datetime-local\"></a>日期与时间datetime-local</h3><blockquote>\n<p><strong>时间加日期的选择框，type的值选择datetime-local</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>注意哦，这里提交数据中的”:”是按照URL编码表示为”%3A”</strong></p>\n</blockquote>\n<p>若要了解更多<a href=\"#pEGrg\">URL编码</a>，请点击链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    生日 (日期和时间): <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;datetime-local&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bdaytime&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">&lt;/form&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><a name=\"OVwDU\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><a name=\"wKc7Z\"></a></p>\n<h3 id=\"搜索框：type属性search\"><a href=\"#搜索框：type属性search\" class=\"headerlink\" title=\"搜索框：type属性search\"></a>搜索框：type属性search</h3><blockquote>\n<p><strong>在input的type属性值设置为search实现搜索框</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    度娘: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;search&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bdSearch&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"sMd95\"></a></p>\n<h3 id=\"接收多行表单\"><a href=\"#接收多行表单\" class=\"headerlink\" title=\"接收多行表单\"></a>接收多行表单</h3><blockquote>\n<p><strong>&lt;textarea&gt;</strong> <strong>标签定义多行的文本输入控件。</strong></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span>&gt;</span></span><br><span class=\"line\">   我是一个文本框。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a name=\"RZkS4\"></a></p>\n<h2 id=\"可交互元素\"><a href=\"#可交互元素\" class=\"headerlink\" title=\"可交互元素\"></a>可交互元素</h2><p><a name=\"E5fNf\"></a></p>\n<h3 id=\"meun\"><a href=\"#meun\" class=\"headerlink\" title=\"meun\"></a>meun</h3><p><a name=\"IdgES\"></a></p>\n<h3 id=\"meunitem\"><a href=\"#meunitem\" class=\"headerlink\" title=\"meunitem\"></a>meunitem</h3><p><a name=\"x2Xxi\"></a></p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><p><a name=\"PGNKb\"></a></p>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><p><a name=\"fnegB\"></a></p>\n<h2 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h2><p><a name=\"OCIvl\"></a></p>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p><a name=\"tRf3d\"></a></p>\n<h2 id=\"窗口事件\"><a href=\"#窗口事件\" class=\"headerlink\" title=\"窗口事件\"></a>窗口事件</h2><p><a name=\"jIumZ\"></a></p>\n<h2 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h2><p><a name=\"A66W7\"></a></p>\n<h2 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h2><p><a name=\"rgnZj\"></a></p>\n<h2 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h2><p><a name=\"PUNgO\"></a></p>\n<h2 id=\"多媒体事件\"><a href=\"#多媒体事件\" class=\"headerlink\" title=\"多媒体事件\"></a>多媒体事件</h2><p><a name=\"GmwMx\"></a></p>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><p><a name=\"pEGrg\"></a></p>\n<h2 id=\"URL编码\"><a href=\"#URL编码\" class=\"headerlink\" title=\"URL编码\"></a>URL编码</h2><table>\n<thead>\n<tr>\n<th>backspace</th>\n<th>8%</th>\n<th>A</th>\n<th>41%</th>\n<th>b</th>\n<th>62%</th>\n<th>¬</th>\n<th>%AC</th>\n<th>Ù</th>\n<th>%D9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tab</td>\n<td>9%</td>\n<td>B</td>\n<td>42%</td>\n<td>c</td>\n<td>63%</td>\n<td>¯</td>\n<td>%AD</td>\n<td>Ú</td>\n<td>%DA</td>\n</tr>\n<tr>\n<td>linefeed</td>\n<td>%0A</td>\n<td>C</td>\n<td>43%</td>\n<td>d</td>\n<td>64%</td>\n<td>º</td>\n<td>%B0</td>\n<td>Û</td>\n<td>%DB</td>\n</tr>\n<tr>\n<td>creturn</td>\n<td>%0D</td>\n<td>D</td>\n<td>44%</td>\n<td>e</td>\n<td>65%</td>\n<td>±</td>\n<td>%B1</td>\n<td>Ü</td>\n<td>%DC</td>\n</tr>\n<tr>\n<td>space</td>\n<td>20%</td>\n<td>E</td>\n<td>45%</td>\n<td>f</td>\n<td>66%</td>\n<td>ª</td>\n<td>%B2</td>\n<td>Ý</td>\n<td>%DD</td>\n</tr>\n<tr>\n<td>!</td>\n<td>21%</td>\n<td>F</td>\n<td>46%</td>\n<td>g</td>\n<td>67%</td>\n<td>,</td>\n<td>%B4</td>\n<td>Þ</td>\n<td>%DE</td>\n</tr>\n<tr>\n<td>“</td>\n<td>22%</td>\n<td>G</td>\n<td>47%</td>\n<td>h</td>\n<td>68%</td>\n<td>µ</td>\n<td>%B5</td>\n<td>ß</td>\n<td>%DF</td>\n</tr>\n<tr>\n<td>#</td>\n<td>23%</td>\n<td>H</td>\n<td>48%</td>\n<td>i</td>\n<td>69%</td>\n<td>»</td>\n<td>%BB</td>\n<td>à</td>\n<td>%E0</td>\n</tr>\n<tr>\n<td>$</td>\n<td>24%</td>\n<td>I</td>\n<td>49%</td>\n<td>j</td>\n<td>%6A</td>\n<td>¼</td>\n<td>%BC</td>\n<td>á</td>\n<td>%E1</td>\n</tr>\n<tr>\n<td>%</td>\n<td>25%</td>\n<td>J</td>\n<td>%4A</td>\n<td>k</td>\n<td>%6B</td>\n<td>½</td>\n<td>%BD</td>\n<td>â</td>\n<td>%E2</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>26%</td>\n<td>K</td>\n<td>%4B</td>\n<td>l</td>\n<td>%6C</td>\n<td>¿</td>\n<td>%BF</td>\n<td>ã</td>\n<td>%E3</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>27%</td>\n<td>L</td>\n<td>%4C</td>\n<td>m</td>\n<td>%6D</td>\n<td>À</td>\n<td>%C0</td>\n<td>ä</td>\n<td>%E4</td>\n</tr>\n<tr>\n<td>(</td>\n<td>28%</td>\n<td>M</td>\n<td>%4D</td>\n<td>n</td>\n<td>%6E</td>\n<td>Á</td>\n<td>%C1</td>\n<td>å</td>\n<td>%E5</td>\n</tr>\n<tr>\n<td>)</td>\n<td>29%</td>\n<td>N</td>\n<td>%4E</td>\n<td>o</td>\n<td>%6F</td>\n<td>Â</td>\n<td>%C2</td>\n<td>æ</td>\n<td>%E6</td>\n</tr>\n<tr>\n<td>*</td>\n<td>%2A</td>\n<td>O</td>\n<td>%4F</td>\n<td>p</td>\n<td>70%</td>\n<td>Ã</td>\n<td>%C3</td>\n<td>ç</td>\n<td>%E7</td>\n</tr>\n<tr>\n<td>+</td>\n<td>%2B</td>\n<td>P</td>\n<td>50%</td>\n<td>q</td>\n<td>71%</td>\n<td>Ä</td>\n<td>%C4</td>\n<td>è</td>\n<td>%E8</td>\n</tr>\n<tr>\n<td>,</td>\n<td>%2C</td>\n<td>Q</td>\n<td>51%</td>\n<td>r</td>\n<td>72%</td>\n<td>Å</td>\n<td>%C5</td>\n<td>é</td>\n<td>%E9</td>\n</tr>\n<tr>\n<td>-</td>\n<td>%2D</td>\n<td>R</td>\n<td>52%</td>\n<td>s</td>\n<td>73%</td>\n<td>Æ</td>\n<td>%C6</td>\n<td>ê</td>\n<td>%EA</td>\n</tr>\n<tr>\n<td>.</td>\n<td>%2E</td>\n<td>S</td>\n<td>53%</td>\n<td>t</td>\n<td>74%</td>\n<td>Ç</td>\n<td>%C7</td>\n<td>ë</td>\n<td>%EB</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>%2F</td>\n<td>T</td>\n<td>54%</td>\n<td>u</td>\n<td>75%</td>\n<td>È</td>\n<td>%C8</td>\n<td>ì</td>\n<td>%EC</td>\n</tr>\n<tr>\n<td>0</td>\n<td>30%</td>\n<td>U</td>\n<td>55%</td>\n<td>v</td>\n<td>76%</td>\n<td>É</td>\n<td>%C9</td>\n<td>í</td>\n<td>%ED</td>\n</tr>\n<tr>\n<td>1</td>\n<td>31%</td>\n<td>V</td>\n<td>56%</td>\n<td>w</td>\n<td>77%</td>\n<td>Ê</td>\n<td>%CA</td>\n<td>î</td>\n<td>%EE</td>\n</tr>\n<tr>\n<td>2</td>\n<td>32%</td>\n<td>W</td>\n<td>57%</td>\n<td>x</td>\n<td>78%</td>\n<td>Ë</td>\n<td>%CB</td>\n<td>ï</td>\n<td>%EF</td>\n</tr>\n<tr>\n<td>3</td>\n<td>33%</td>\n<td>X</td>\n<td>58%</td>\n<td>y</td>\n<td>79%</td>\n<td>Ì</td>\n<td>%CC</td>\n<td>ð</td>\n<td>%F0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>34%</td>\n<td>Y</td>\n<td>59%</td>\n<td>z</td>\n<td>%7A</td>\n<td>Í</td>\n<td>%CD</td>\n<td>ñ</td>\n<td>%F1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>35%</td>\n<td>Z</td>\n<td>%5A</td>\n<td>{</td>\n<td>%7B</td>\n<td>Î</td>\n<td>%CE</td>\n<td>ò</td>\n<td>%F2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>36%</td>\n<td>?</td>\n<td>%3F</td>\n<td>&amp;#124;</td>\n<td>%7C</td>\n<td>Ï</td>\n<td>%CF</td>\n<td>ó</td>\n<td>%F3</td>\n</tr>\n<tr>\n<td>7</td>\n<td>37%</td>\n<td>@</td>\n<td>40%</td>\n<td>}</td>\n<td>%7D</td>\n<td>Ð</td>\n<td>%D0</td>\n<td>ô</td>\n<td>%F4</td>\n</tr>\n<tr>\n<td>8</td>\n<td>38%</td>\n<td>[</td>\n<td>%5B</td>\n<td>~</td>\n<td>%7E</td>\n<td>Ñ</td>\n<td>%D1</td>\n<td>õ</td>\n<td>%F5</td>\n</tr>\n<tr>\n<td>9</td>\n<td>39%</td>\n<td>\\</td>\n<td>%5C</td>\n<td>¢</td>\n<td>%A2</td>\n<td>Ò</td>\n<td>%D2</td>\n<td>ö</td>\n<td>%F6</td>\n</tr>\n<tr>\n<td>:</td>\n<td>%3A</td>\n<td>]</td>\n<td>%5D</td>\n<td>£</td>\n<td>%A3</td>\n<td>Ó</td>\n<td>%D3</td>\n<td>÷</td>\n<td>%F7</td>\n</tr>\n<tr>\n<td>;</td>\n<td>%3B</td>\n<td>^</td>\n<td>%5E</td>\n<td>¥</td>\n<td>%A5</td>\n<td>Ô</td>\n<td>%D4</td>\n<td>ø</td>\n<td>%F8</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>%3C</td>\n<td>_</td>\n<td>%5F</td>\n<td>&amp;#124;</td>\n<td>%A6</td>\n<td>Õ</td>\n<td>%D5</td>\n<td>ù</td>\n<td>%F9</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td>%3D</td>\n<td>&#96;</td>\n<td>60%</td>\n<td>§</td>\n<td>%A7</td>\n<td>Ö</td>\n<td>%D6</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>%3E</td>\n<td>a</td>\n<td>61%</td>\n<td>«</td>\n<td>%AB</td>\n<td>Ø</td>\n<td>%D8</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"语言代码\"><a href=\"#语言代码\" class=\"headerlink\" title=\"语言代码\"></a>语言代码</h2><h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2>"},{"title":"JAVA基础速查速记","date":"2023-07-13T01:56:00.000Z","updated":"2023-09-08T03:58:50.251Z","keywords":null,"description":null,"_content":"\n\n\n# 基本数据类型\n\n## 内置类型和包装类\n\n| 包装类    | 基本数据类型 |\n| --------- | ------------ |\n| Boolean   | boolean      |\n| Byte      | byte         |\n| Short     | short        |\n| Integer   | int          |\n| Long      | long         |\n| Character | char         |\n| Float     | float        |\n| Double    | double       |\n\n### Number 与 Math\n\n> java 将一个内置类型直接赋值给一个包装类是可以的，叫做自动装箱，反之叫拆箱。\n\n```java\nchar c = 'a';\nCharacter ch = c;\nSystem.out.println(ch);  // 输出：a\n\nCharacter ch = 'a';\nchar c = ch;\nSystem.out.println(c);  // 输出：a\n```\n\nNumber 常用的方法：\n- XXX.valueOf: 返回一个 Number 对象指定的数据类型\n- equals()：判断是非相等（类型和值都要相同才返回true）\n- compareTo()：与 number 对象相比较\n- toString()：转换成字符串\n- Integer.parseInt()：将字符串转换成 int（建议使用valueOf）\n\t- Double.parseDouble\n\t- Long.parseLong\n\nMath 的常用方法：\n- abs()：返回参数的绝对值\n- ceil()：向上取整\n- floor()：向下取整\n- round()：四舍五入（Math.floor(x+0.5)）\n- min()：返回参数的最小值\n- max()：返回参数的最大值\n- exp()：返回 e 的参数次方\n- log()：返回 log 以 e 为底的参数\n- pow(x,y)：返回 x 的 y 次方\n- sqrt()：返回参数的开方\n- random()：返回一个 0 到 1 的随机数\n### Character 类\n\n> Character 是 char 的包装类\n\n定义一个 char\\[\\]：\n```java\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n定义一个 Character：直接将 char 赋值给Character\n```java\nCharacter ch = new Character('a');\n```\n\nchar\\[\\]不能直接赋值给 Character\\[\\]，要遍历 char\\[\\]一个一个赋值\n\nCharacter、类的方法\n- isLetter()：判断是否是一个字母\n- isDigit()：判断是否是一个数字\n- isWhitespace()：判断是否是一个空白字符\n- isUpperCase()：\n- isLowerCase()：\n- toUpperCase()：\n- toLowerCase()：\n- toStrig()：\n\n### String 类\n\n格式化字符串：\n```java\nString fs = String.format(\"浮点型变量的值为 \" + \"%f, 整型变量的值为 \" + \" %d, 字符串变量的值为 \" + \" %s\", floatVar, intVar, stringVar);\n```\n\n其他方法：\n- char charAt(int)：返回指定索引下的 char\n- String copyValueOf(char\\[\\])：返回 char\\[\\]的字符串形式\n- String copyValueOf(char\\[\\], index, count):从 char\\[\\]的 index 下标开始，复制 count 个字符\n- boolean endsWith(string)：字符串是否以指定的后缀结束\n- boolean equals(string)：判断字符串是否相等\n- boolean equalsIgnoreCase(string)：判断字符串是否相等，不考虑大小写\n- int indexOf(string,int): 从下标 int 的位置开始返回指定 string 的索引值，找不到返回-1\n- String trim()：返回给定字符串去除前后空值的副本\n- char\\[\\] toCharArray()：将字符串转换成 char\\[\\]\n- boolean contains(char|string)：判断字符串是否包含指定字符或字符串\n- String valueOf(x)：返回 x 的字符串形式\n- String toLowerCase()：将字符串的字母都转换成小写\n- String subString(int Begin, int end)：截取指定索引范围的字符串\n\n### StringBuilder\n\n建立 `StringBuilder`：\n```java\n//建立一个容量为10的StringBuilder\nStringBuilder sb = new StringBuilder(10)\n```\n\nStringBuilder 方法：\n- append(String)：追加指定字符串\n- reverse()：反转字符串\n- delete(int start, int end)：删除指定索引的元素\n- insert(int index, String str)：将 str 插入到指定的位置\n- replace(int start, int end， String str)：将str替换指定索引的字符串\n- String toString()：将 StringBuilder 转换成字符串\n\n### 数组\n\n数组的方法：\n- int binarySearch(Object\\[\\] a, Object key)：在 a 数组中按二分查找查找 key，给定的数组是已排序好的\n- void fill(Object\\[\\] a, Object key)：用 key 填充 a 数组\n- void sort(Objext\\[\\])：升序排序数组\n\n\n## List\n### ArrayList\n\n- add(int index，E e)：在指定 index 索引处添加元素\n- get(int index)：返回 index 索引处的元素\n- set(int index, E e)：修改指定 index 索引处的元素\n- remove(int index)：移除 index 索引处的元素\n- bolean remove(Object o)：删除某一元素，成功返回true\n- size()：返回链表元素的个数\n- addAll(int index, List | Set)：将 List 内的所有元素插入到 index 的索引位置（默认最后）\n### LinkList\n\n除了 `ArrayList` 有的方法之外还有：\n- addFirst()：\n- addLast()：\n- removeFirst()：\n- removeLast()：\n- getFirst()：\n- getLast()：\n## Map\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\n创建 Map：\n```java\nMap<Integer, String> Sites = new HashMap<Integer, String>();\n```\n\n方法如下：\n- put(key, value)：添加元素\n- get(key)：获取元素\n- remove(key)：移除元素\n- size()：键值对个数\n\n在对 Map 对象进行排序时，可以将 key 值作为关键词。利用 `TreeMap`\n```java\n Map<String, Integer> sortedMap = new TreeMap<>(unsortedMap);\n```\n## Set\n\n## Collections\n\nCollections 类是 Java 提供的一个操作 Set、List 和 Map 等集合的工具类\n方法如下：\n- void reverse(List)：逆序List\n- void sort(List)：升序 List\n- void sort(List, Comparator)：根据指定的 Comparator 产生的序列对 List 排序\n- void swap(List, int i, int j)：指定 List 的 i 和 j 进行互换\n- void rotate(List, int distance)：当 distance 为正数时将 List 集合的后 distance 个元素整体移动到头部；当 distance 为负数时将 List 集合的前 distance 个元素整体移动到末尾","source":"_posts/计算机语言知识库/JAVA基础速查速记.md","raw":"---\ntitle: JAVA基础速查速记\ndate: 2023-07-13 09:56\nupdated: 星期一 17日 七月 2023 09:33:31\ntags: []\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n\n# 基本数据类型\n\n## 内置类型和包装类\n\n| 包装类    | 基本数据类型 |\n| --------- | ------------ |\n| Boolean   | boolean      |\n| Byte      | byte         |\n| Short     | short        |\n| Integer   | int          |\n| Long      | long         |\n| Character | char         |\n| Float     | float        |\n| Double    | double       |\n\n### Number 与 Math\n\n> java 将一个内置类型直接赋值给一个包装类是可以的，叫做自动装箱，反之叫拆箱。\n\n```java\nchar c = 'a';\nCharacter ch = c;\nSystem.out.println(ch);  // 输出：a\n\nCharacter ch = 'a';\nchar c = ch;\nSystem.out.println(c);  // 输出：a\n```\n\nNumber 常用的方法：\n- XXX.valueOf: 返回一个 Number 对象指定的数据类型\n- equals()：判断是非相等（类型和值都要相同才返回true）\n- compareTo()：与 number 对象相比较\n- toString()：转换成字符串\n- Integer.parseInt()：将字符串转换成 int（建议使用valueOf）\n\t- Double.parseDouble\n\t- Long.parseLong\n\nMath 的常用方法：\n- abs()：返回参数的绝对值\n- ceil()：向上取整\n- floor()：向下取整\n- round()：四舍五入（Math.floor(x+0.5)）\n- min()：返回参数的最小值\n- max()：返回参数的最大值\n- exp()：返回 e 的参数次方\n- log()：返回 log 以 e 为底的参数\n- pow(x,y)：返回 x 的 y 次方\n- sqrt()：返回参数的开方\n- random()：返回一个 0 到 1 的随机数\n### Character 类\n\n> Character 是 char 的包装类\n\n定义一个 char\\[\\]：\n```java\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n定义一个 Character：直接将 char 赋值给Character\n```java\nCharacter ch = new Character('a');\n```\n\nchar\\[\\]不能直接赋值给 Character\\[\\]，要遍历 char\\[\\]一个一个赋值\n\nCharacter、类的方法\n- isLetter()：判断是否是一个字母\n- isDigit()：判断是否是一个数字\n- isWhitespace()：判断是否是一个空白字符\n- isUpperCase()：\n- isLowerCase()：\n- toUpperCase()：\n- toLowerCase()：\n- toStrig()：\n\n### String 类\n\n格式化字符串：\n```java\nString fs = String.format(\"浮点型变量的值为 \" + \"%f, 整型变量的值为 \" + \" %d, 字符串变量的值为 \" + \" %s\", floatVar, intVar, stringVar);\n```\n\n其他方法：\n- char charAt(int)：返回指定索引下的 char\n- String copyValueOf(char\\[\\])：返回 char\\[\\]的字符串形式\n- String copyValueOf(char\\[\\], index, count):从 char\\[\\]的 index 下标开始，复制 count 个字符\n- boolean endsWith(string)：字符串是否以指定的后缀结束\n- boolean equals(string)：判断字符串是否相等\n- boolean equalsIgnoreCase(string)：判断字符串是否相等，不考虑大小写\n- int indexOf(string,int): 从下标 int 的位置开始返回指定 string 的索引值，找不到返回-1\n- String trim()：返回给定字符串去除前后空值的副本\n- char\\[\\] toCharArray()：将字符串转换成 char\\[\\]\n- boolean contains(char|string)：判断字符串是否包含指定字符或字符串\n- String valueOf(x)：返回 x 的字符串形式\n- String toLowerCase()：将字符串的字母都转换成小写\n- String subString(int Begin, int end)：截取指定索引范围的字符串\n\n### StringBuilder\n\n建立 `StringBuilder`：\n```java\n//建立一个容量为10的StringBuilder\nStringBuilder sb = new StringBuilder(10)\n```\n\nStringBuilder 方法：\n- append(String)：追加指定字符串\n- reverse()：反转字符串\n- delete(int start, int end)：删除指定索引的元素\n- insert(int index, String str)：将 str 插入到指定的位置\n- replace(int start, int end， String str)：将str替换指定索引的字符串\n- String toString()：将 StringBuilder 转换成字符串\n\n### 数组\n\n数组的方法：\n- int binarySearch(Object\\[\\] a, Object key)：在 a 数组中按二分查找查找 key，给定的数组是已排序好的\n- void fill(Object\\[\\] a, Object key)：用 key 填充 a 数组\n- void sort(Objext\\[\\])：升序排序数组\n\n\n## List\n### ArrayList\n\n- add(int index，E e)：在指定 index 索引处添加元素\n- get(int index)：返回 index 索引处的元素\n- set(int index, E e)：修改指定 index 索引处的元素\n- remove(int index)：移除 index 索引处的元素\n- bolean remove(Object o)：删除某一元素，成功返回true\n- size()：返回链表元素的个数\n- addAll(int index, List | Set)：将 List 内的所有元素插入到 index 的索引位置（默认最后）\n### LinkList\n\n除了 `ArrayList` 有的方法之外还有：\n- addFirst()：\n- addLast()：\n- removeFirst()：\n- removeLast()：\n- getFirst()：\n- getLast()：\n## Map\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\n创建 Map：\n```java\nMap<Integer, String> Sites = new HashMap<Integer, String>();\n```\n\n方法如下：\n- put(key, value)：添加元素\n- get(key)：获取元素\n- remove(key)：移除元素\n- size()：键值对个数\n\n在对 Map 对象进行排序时，可以将 key 值作为关键词。利用 `TreeMap`\n```java\n Map<String, Integer> sortedMap = new TreeMap<>(unsortedMap);\n```\n## Set\n\n## Collections\n\nCollections 类是 Java 提供的一个操作 Set、List 和 Map 等集合的工具类\n方法如下：\n- void reverse(List)：逆序List\n- void sort(List)：升序 List\n- void sort(List, Comparator)：根据指定的 Comparator 产生的序列对 List 排序\n- void swap(List, int i, int j)：指定 List 的 i 和 j 进行互换\n- void rotate(List, int distance)：当 distance 为正数时将 List 集合的后 distance 个元素整体移动到头部；当 distance 为负数时将 List 集合的前 distance 个元素整体移动到末尾","slug":"计算机语言知识库/JAVA基础速查速记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x82001qi4v1ef6e2lfp","content":"<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><h2 id=\"内置类型和包装类\"><a href=\"#内置类型和包装类\" class=\"headerlink\" title=\"内置类型和包装类\"></a>内置类型和包装类</h2><table>\n<thead>\n<tr>\n<th>包装类</th>\n<th>基本数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>byte</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>short</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>long</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>char</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>double</td>\n</tr>\n</tbody></table>\n<h3 id=\"Number-与-Math\"><a href=\"#Number-与-Math\" class=\"headerlink\" title=\"Number 与 Math\"></a>Number 与 Math</h3><blockquote>\n<p>java 将一个内置类型直接赋值给一个包装类是可以的，叫做自动装箱，反之叫拆箱。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> c;</span><br><span class=\"line\">System.out.println(ch);  <span class=\"comment\">// 输出：a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ch;</span><br><span class=\"line\">System.out.println(c);  <span class=\"comment\">// 输出：a</span></span><br></pre></td></tr></table></figure>\n\n<p>Number 常用的方法：</p>\n<ul>\n<li>XXX.valueOf: 返回一个 Number 对象指定的数据类型</li>\n<li>equals()：判断是非相等（类型和值都要相同才返回true）</li>\n<li>compareTo()：与 number 对象相比较</li>\n<li>toString()：转换成字符串</li>\n<li>Integer.parseInt()：将字符串转换成 int（建议使用valueOf）<ul>\n<li>Double.parseDouble</li>\n<li>Long.parseLong</li>\n</ul>\n</li>\n</ul>\n<p>Math 的常用方法：</p>\n<ul>\n<li>abs()：返回参数的绝对值</li>\n<li>ceil()：向上取整</li>\n<li>floor()：向下取整</li>\n<li>round()：四舍五入（Math.floor(x+0.5)）</li>\n<li>min()：返回参数的最小值</li>\n<li>max()：返回参数的最大值</li>\n<li>exp()：返回 e 的参数次方</li>\n<li>log()：返回 log 以 e 为底的参数</li>\n<li>pow(x,y)：返回 x 的 y 次方</li>\n<li>sqrt()：返回参数的开方</li>\n<li>random()：返回一个 0 到 1 的随机数</li>\n</ul>\n<h3 id=\"Character-类\"><a href=\"#Character-类\" class=\"headerlink\" title=\"Character 类\"></a>Character 类</h3><blockquote>\n<p>Character 是 char 的包装类</p>\n</blockquote>\n<p>定义一个 char[]：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个 Character：直接将 char 赋值给Character</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>char[]不能直接赋值给 Character[]，要遍历 char[]一个一个赋值</p>\n<p>Character、类的方法</p>\n<ul>\n<li>isLetter()：判断是否是一个字母</li>\n<li>isDigit()：判断是否是一个数字</li>\n<li>isWhitespace()：判断是否是一个空白字符</li>\n<li>isUpperCase()：</li>\n<li>isLowerCase()：</li>\n<li>toUpperCase()：</li>\n<li>toLowerCase()：</li>\n<li>toStrig()：</li>\n</ul>\n<h3 id=\"String-类\"><a href=\"#String-类\" class=\"headerlink\" title=\"String 类\"></a>String 类</h3><p>格式化字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fs</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> + <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> + <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> + <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>其他方法：</p>\n<ul>\n<li>char charAt(int)：返回指定索引下的 char</li>\n<li>String copyValueOf(char[])：返回 char[]的字符串形式</li>\n<li>String copyValueOf(char[], index, count):从 char[]的 index 下标开始，复制 count 个字符</li>\n<li>boolean endsWith(string)：字符串是否以指定的后缀结束</li>\n<li>boolean equals(string)：判断字符串是否相等</li>\n<li>boolean equalsIgnoreCase(string)：判断字符串是否相等，不考虑大小写</li>\n<li>int indexOf(string,int): 从下标 int 的位置开始返回指定 string 的索引值，找不到返回-1</li>\n<li>String trim()：返回给定字符串去除前后空值的副本</li>\n<li>char[] toCharArray()：将字符串转换成 char[]</li>\n<li>boolean contains(char|string)：判断字符串是否包含指定字符或字符串</li>\n<li>String valueOf(x)：返回 x 的字符串形式</li>\n<li>String toLowerCase()：将字符串的字母都转换成小写</li>\n<li>String subString(int Begin, int end)：截取指定索引范围的字符串</li>\n</ul>\n<h3 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h3><p>建立 <code>StringBuilder</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建立一个容量为10的StringBuilder</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>StringBuilder 方法：</p>\n<ul>\n<li>append(String)：追加指定字符串</li>\n<li>reverse()：反转字符串</li>\n<li>delete(int start, int end)：删除指定索引的元素</li>\n<li>insert(int index, String str)：将 str 插入到指定的位置</li>\n<li>replace(int start, int end， String str)：将str替换指定索引的字符串</li>\n<li>String toString()：将 StringBuilder 转换成字符串</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组的方法：</p>\n<ul>\n<li>int binarySearch(Object[] a, Object key)：在 a 数组中按二分查找查找 key，给定的数组是已排序好的</li>\n<li>void fill(Object[] a, Object key)：用 key 填充 a 数组</li>\n<li>void sort(Objext[])：升序排序数组</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>add(int index，E e)：在指定 index 索引处添加元素</li>\n<li>get(int index)：返回 index 索引处的元素</li>\n<li>set(int index, E e)：修改指定 index 索引处的元素</li>\n<li>remove(int index)：移除 index 索引处的元素</li>\n<li>bolean remove(Object o)：删除某一元素，成功返回true</li>\n<li>size()：返回链表元素的个数</li>\n<li>addAll(int index, List | Set)：将 List 内的所有元素插入到 index 的索引位置（默认最后）</li>\n</ul>\n<h3 id=\"LinkList\"><a href=\"#LinkList\" class=\"headerlink\" title=\"LinkList\"></a>LinkList</h3><p>除了 <code>ArrayList</code> 有的方法之外还有：</p>\n<ul>\n<li>addFirst()：</li>\n<li>addLast()：</li>\n<li>removeFirst()：</li>\n<li>removeLast()：</li>\n<li>getFirst()：</li>\n<li>getLast()：</li>\n</ul>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>创建 Map：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, String&gt; Sites = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>方法如下：</p>\n<ul>\n<li>put(key, value)：添加元素</li>\n<li>get(key)：获取元素</li>\n<li>remove(key)：移除元素</li>\n<li>size()：键值对个数</li>\n</ul>\n<p>在对 Map 对象进行排序时，可以将 key 值作为关键词。利用 <code>TreeMap</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; sortedMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;(unsortedMap);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><h2 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h2><p>Collections 类是 Java 提供的一个操作 Set、List 和 Map 等集合的工具类<br>方法如下：</p>\n<ul>\n<li>void reverse(List)：逆序List</li>\n<li>void sort(List)：升序 List</li>\n<li>void sort(List, Comparator)：根据指定的 Comparator 产生的序列对 List 排序</li>\n<li>void swap(List, int i, int j)：指定 List 的 i 和 j 进行互换</li>\n<li>void rotate(List, int distance)：当 distance 为正数时将 List 集合的后 distance 个元素整体移动到头部；当 distance 为负数时将 List 集合的前 distance 个元素整体移动到末尾</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><h2 id=\"内置类型和包装类\"><a href=\"#内置类型和包装类\" class=\"headerlink\" title=\"内置类型和包装类\"></a>内置类型和包装类</h2><table>\n<thead>\n<tr>\n<th>包装类</th>\n<th>基本数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>byte</td>\n</tr>\n<tr>\n<td>Short</td>\n<td>short</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>long</td>\n</tr>\n<tr>\n<td>Character</td>\n<td>char</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>double</td>\n</tr>\n</tbody></table>\n<h3 id=\"Number-与-Math\"><a href=\"#Number-与-Math\" class=\"headerlink\" title=\"Number 与 Math\"></a>Number 与 Math</h3><blockquote>\n<p>java 将一个内置类型直接赋值给一个包装类是可以的，叫做自动装箱，反之叫拆箱。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> c;</span><br><span class=\"line\">System.out.println(ch);  <span class=\"comment\">// 输出：a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ch;</span><br><span class=\"line\">System.out.println(c);  <span class=\"comment\">// 输出：a</span></span><br></pre></td></tr></table></figure>\n\n<p>Number 常用的方法：</p>\n<ul>\n<li>XXX.valueOf: 返回一个 Number 对象指定的数据类型</li>\n<li>equals()：判断是非相等（类型和值都要相同才返回true）</li>\n<li>compareTo()：与 number 对象相比较</li>\n<li>toString()：转换成字符串</li>\n<li>Integer.parseInt()：将字符串转换成 int（建议使用valueOf）<ul>\n<li>Double.parseDouble</li>\n<li>Long.parseLong</li>\n</ul>\n</li>\n</ul>\n<p>Math 的常用方法：</p>\n<ul>\n<li>abs()：返回参数的绝对值</li>\n<li>ceil()：向上取整</li>\n<li>floor()：向下取整</li>\n<li>round()：四舍五入（Math.floor(x+0.5)）</li>\n<li>min()：返回参数的最小值</li>\n<li>max()：返回参数的最大值</li>\n<li>exp()：返回 e 的参数次方</li>\n<li>log()：返回 log 以 e 为底的参数</li>\n<li>pow(x,y)：返回 x 的 y 次方</li>\n<li>sqrt()：返回参数的开方</li>\n<li>random()：返回一个 0 到 1 的随机数</li>\n</ul>\n<h3 id=\"Character-类\"><a href=\"#Character-类\" class=\"headerlink\" title=\"Character 类\"></a>Character 类</h3><blockquote>\n<p>Character 是 char 的包装类</p>\n</blockquote>\n<p>定义一个 char[]：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个 Character：直接将 char 赋值给Character</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>char[]不能直接赋值给 Character[]，要遍历 char[]一个一个赋值</p>\n<p>Character、类的方法</p>\n<ul>\n<li>isLetter()：判断是否是一个字母</li>\n<li>isDigit()：判断是否是一个数字</li>\n<li>isWhitespace()：判断是否是一个空白字符</li>\n<li>isUpperCase()：</li>\n<li>isLowerCase()：</li>\n<li>toUpperCase()：</li>\n<li>toLowerCase()：</li>\n<li>toStrig()：</li>\n</ul>\n<h3 id=\"String-类\"><a href=\"#String-类\" class=\"headerlink\" title=\"String 类\"></a>String 类</h3><p>格式化字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">fs</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> + <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> + <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> + <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>其他方法：</p>\n<ul>\n<li>char charAt(int)：返回指定索引下的 char</li>\n<li>String copyValueOf(char[])：返回 char[]的字符串形式</li>\n<li>String copyValueOf(char[], index, count):从 char[]的 index 下标开始，复制 count 个字符</li>\n<li>boolean endsWith(string)：字符串是否以指定的后缀结束</li>\n<li>boolean equals(string)：判断字符串是否相等</li>\n<li>boolean equalsIgnoreCase(string)：判断字符串是否相等，不考虑大小写</li>\n<li>int indexOf(string,int): 从下标 int 的位置开始返回指定 string 的索引值，找不到返回-1</li>\n<li>String trim()：返回给定字符串去除前后空值的副本</li>\n<li>char[] toCharArray()：将字符串转换成 char[]</li>\n<li>boolean contains(char|string)：判断字符串是否包含指定字符或字符串</li>\n<li>String valueOf(x)：返回 x 的字符串形式</li>\n<li>String toLowerCase()：将字符串的字母都转换成小写</li>\n<li>String subString(int Begin, int end)：截取指定索引范围的字符串</li>\n</ul>\n<h3 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h3><p>建立 <code>StringBuilder</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建立一个容量为10的StringBuilder</span></span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>StringBuilder 方法：</p>\n<ul>\n<li>append(String)：追加指定字符串</li>\n<li>reverse()：反转字符串</li>\n<li>delete(int start, int end)：删除指定索引的元素</li>\n<li>insert(int index, String str)：将 str 插入到指定的位置</li>\n<li>replace(int start, int end， String str)：将str替换指定索引的字符串</li>\n<li>String toString()：将 StringBuilder 转换成字符串</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组的方法：</p>\n<ul>\n<li>int binarySearch(Object[] a, Object key)：在 a 数组中按二分查找查找 key，给定的数组是已排序好的</li>\n<li>void fill(Object[] a, Object key)：用 key 填充 a 数组</li>\n<li>void sort(Objext[])：升序排序数组</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><ul>\n<li>add(int index，E e)：在指定 index 索引处添加元素</li>\n<li>get(int index)：返回 index 索引处的元素</li>\n<li>set(int index, E e)：修改指定 index 索引处的元素</li>\n<li>remove(int index)：移除 index 索引处的元素</li>\n<li>bolean remove(Object o)：删除某一元素，成功返回true</li>\n<li>size()：返回链表元素的个数</li>\n<li>addAll(int index, List | Set)：将 List 内的所有元素插入到 index 的索引位置（默认最后）</li>\n</ul>\n<h3 id=\"LinkList\"><a href=\"#LinkList\" class=\"headerlink\" title=\"LinkList\"></a>LinkList</h3><p>除了 <code>ArrayList</code> 有的方法之外还有：</p>\n<ul>\n<li>addFirst()：</li>\n<li>addLast()：</li>\n<li>removeFirst()：</li>\n<li>removeLast()：</li>\n<li>getFirst()：</li>\n<li>getLast()：</li>\n</ul>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>\n<p>创建 Map：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, String&gt; Sites = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>方法如下：</p>\n<ul>\n<li>put(key, value)：添加元素</li>\n<li>get(key)：获取元素</li>\n<li>remove(key)：移除元素</li>\n<li>size()：键值对个数</li>\n</ul>\n<p>在对 Map 对象进行排序时，可以将 key 值作为关键词。利用 <code>TreeMap</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; sortedMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;(unsortedMap);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><h2 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h2><p>Collections 类是 Java 提供的一个操作 Set、List 和 Map 等集合的工具类<br>方法如下：</p>\n<ul>\n<li>void reverse(List)：逆序List</li>\n<li>void sort(List)：升序 List</li>\n<li>void sort(List, Comparator)：根据指定的 Comparator 产生的序列对 List 排序</li>\n<li>void swap(List, int i, int j)：指定 List 的 i 和 j 进行互换</li>\n<li>void rotate(List, int distance)：当 distance 为正数时将 List 集合的后 distance 个元素整体移动到头部；当 distance 为负数时将 List 集合的前 distance 个元素整体移动到末尾</li>\n</ul>\n"},{"title":"Javascript","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T13:03:42.750Z","keywords":null,"description":null,"_content":"\n# 语法\njavascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：[javascript教程](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n\n# 数据类型深入\n\n## 数组\n> 数组是一种特殊的变量，它能够一次存放一个以上的值。\n\n```javascript\nvar cars = [\n  \"Saab\",\n  \"Volvo\",\n  \"BMW\"\n];\n```\n请不要最后一个元素之后写逗号（比如 \"BMW\",）,可能存在跨浏览器兼容性问题。\n\n### 访问数组元素\n```javascript\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\ndocument.getElementById(\"demo\").innerHTML = cars[0]; \n```\n\n### 修改数组元素\n```javascript\ncars[0] = \"Opel\";\n```\n\n## 数组方法\n<a name=\"PwXt7\"></a>\n### 数组长度length()\n<a name=\"uWCrC\"></a>\n### 转换成字符串toString()，join()\n<a name=\"dwyHR\"></a>\n### 增加和删除pop(),push(),shift(),unshift(),delete(),splice()\n<a name=\"qLYLl\"></a>\n### 拼接与剪切 concat(),slice()\n<a name=\"O3iHp\"></a>\n## 数组排序\n<a name=\"PkSPb\"></a>\n### sort()\n<a name=\"SYB1M\"></a>\n### reverse\n<a name=\"oyH3I\"></a>\n### \n<a name=\"KZ0oN\"></a>\n## lterable object(可迭代对象)\n\n<a name=\"rtAIM\"></a>\n# 对象\n<a name=\"XRB4R\"></a>\n\n","source":"_posts/计算机语言知识库/Javascript.md","raw":"---\ntitle: Javascript\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:33:23\ntags: \n- 前端\n- 语言基础\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n# 语法\njavascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：[javascript教程](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n\n# 数据类型深入\n\n## 数组\n> 数组是一种特殊的变量，它能够一次存放一个以上的值。\n\n```javascript\nvar cars = [\n  \"Saab\",\n  \"Volvo\",\n  \"BMW\"\n];\n```\n请不要最后一个元素之后写逗号（比如 \"BMW\",）,可能存在跨浏览器兼容性问题。\n\n### 访问数组元素\n```javascript\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\ndocument.getElementById(\"demo\").innerHTML = cars[0]; \n```\n\n### 修改数组元素\n```javascript\ncars[0] = \"Opel\";\n```\n\n## 数组方法\n<a name=\"PwXt7\"></a>\n### 数组长度length()\n<a name=\"uWCrC\"></a>\n### 转换成字符串toString()，join()\n<a name=\"dwyHR\"></a>\n### 增加和删除pop(),push(),shift(),unshift(),delete(),splice()\n<a name=\"qLYLl\"></a>\n### 拼接与剪切 concat(),slice()\n<a name=\"O3iHp\"></a>\n## 数组排序\n<a name=\"PkSPb\"></a>\n### sort()\n<a name=\"SYB1M\"></a>\n### reverse\n<a name=\"oyH3I\"></a>\n### \n<a name=\"KZ0oN\"></a>\n## lterable object(可迭代对象)\n\n<a name=\"rtAIM\"></a>\n# 对象\n<a name=\"XRB4R\"></a>\n\n","slug":"计算机语言知识库/Javascript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x83001ri4v1d9xb2gc9","content":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p>javascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">javascript教程</a></p>\n<h1 id=\"数据类型深入\"><a href=\"#数据类型深入\" class=\"headerlink\" title=\"数据类型深入\"></a>数据类型深入</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars = [</span><br><span class=\"line\">  <span class=\"string\">&quot;Saab&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Volvo&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;BMW&quot;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>请不要最后一个元素之后写逗号（比如 “BMW”,）,可能存在跨浏览器兼容性问题。</p>\n<h3 id=\"访问数组元素\"><a href=\"#访问数组元素\" class=\"headerlink\" title=\"访问数组元素\"></a>访问数组元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars = [<span class=\"string\">&quot;Saab&quot;</span>, <span class=\"string\">&quot;Volvo&quot;</span>, <span class=\"string\">&quot;BMW&quot;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = cars[<span class=\"number\">0</span>]; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改数组元素\"><a href=\"#修改数组元素\" class=\"headerlink\" title=\"修改数组元素\"></a>修改数组元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars[<span class=\"number\">0</span>] = <span class=\"string\">&quot;Opel&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><p><a name=\"PwXt7\"></a></p>\n<h3 id=\"数组长度length\"><a href=\"#数组长度length\" class=\"headerlink\" title=\"数组长度length()\"></a>数组长度length()</h3><p><a name=\"uWCrC\"></a></p>\n<h3 id=\"转换成字符串toString-，join\"><a href=\"#转换成字符串toString-，join\" class=\"headerlink\" title=\"转换成字符串toString()，join()\"></a>转换成字符串toString()，join()</h3><p><a name=\"dwyHR\"></a></p>\n<h3 id=\"增加和删除pop-push-shift-unshift-delete-splice\"><a href=\"#增加和删除pop-push-shift-unshift-delete-splice\" class=\"headerlink\" title=\"增加和删除pop(),push(),shift(),unshift(),delete(),splice()\"></a>增加和删除pop(),push(),shift(),unshift(),delete(),splice()</h3><p><a name=\"qLYLl\"></a></p>\n<h3 id=\"拼接与剪切-concat-slice\"><a href=\"#拼接与剪切-concat-slice\" class=\"headerlink\" title=\"拼接与剪切 concat(),slice()\"></a>拼接与剪切 concat(),slice()</h3><p><a name=\"O3iHp\"></a></p>\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><p><a name=\"PkSPb\"></a></p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p><a name=\"SYB1M\"></a></p>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h3><p><a name=\"oyH3I\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><a name=\"KZ0oN\"></a></p>\n<h2 id=\"lterable-object-可迭代对象\"><a href=\"#lterable-object-可迭代对象\" class=\"headerlink\" title=\"lterable object(可迭代对象)\"></a>lterable object(可迭代对象)</h2><p><a name=\"rtAIM\"></a></p>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p><a name=\"XRB4R\"></a></p>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p>javascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">javascript教程</a></p>\n<h1 id=\"数据类型深入\"><a href=\"#数据类型深入\" class=\"headerlink\" title=\"数据类型深入\"></a>数据类型深入</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars = [</span><br><span class=\"line\">  <span class=\"string\">&quot;Saab&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Volvo&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;BMW&quot;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>请不要最后一个元素之后写逗号（比如 “BMW”,）,可能存在跨浏览器兼容性问题。</p>\n<h3 id=\"访问数组元素\"><a href=\"#访问数组元素\" class=\"headerlink\" title=\"访问数组元素\"></a>访问数组元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cars = [<span class=\"string\">&quot;Saab&quot;</span>, <span class=\"string\">&quot;Volvo&quot;</span>, <span class=\"string\">&quot;BMW&quot;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>).<span class=\"property\">innerHTML</span> = cars[<span class=\"number\">0</span>]; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改数组元素\"><a href=\"#修改数组元素\" class=\"headerlink\" title=\"修改数组元素\"></a>修改数组元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars[<span class=\"number\">0</span>] = <span class=\"string\">&quot;Opel&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><p><a name=\"PwXt7\"></a></p>\n<h3 id=\"数组长度length\"><a href=\"#数组长度length\" class=\"headerlink\" title=\"数组长度length()\"></a>数组长度length()</h3><p><a name=\"uWCrC\"></a></p>\n<h3 id=\"转换成字符串toString-，join\"><a href=\"#转换成字符串toString-，join\" class=\"headerlink\" title=\"转换成字符串toString()，join()\"></a>转换成字符串toString()，join()</h3><p><a name=\"dwyHR\"></a></p>\n<h3 id=\"增加和删除pop-push-shift-unshift-delete-splice\"><a href=\"#增加和删除pop-push-shift-unshift-delete-splice\" class=\"headerlink\" title=\"增加和删除pop(),push(),shift(),unshift(),delete(),splice()\"></a>增加和删除pop(),push(),shift(),unshift(),delete(),splice()</h3><p><a name=\"qLYLl\"></a></p>\n<h3 id=\"拼接与剪切-concat-slice\"><a href=\"#拼接与剪切-concat-slice\" class=\"headerlink\" title=\"拼接与剪切 concat(),slice()\"></a>拼接与剪切 concat(),slice()</h3><p><a name=\"O3iHp\"></a></p>\n<h2 id=\"数组排序\"><a href=\"#数组排序\" class=\"headerlink\" title=\"数组排序\"></a>数组排序</h2><p><a name=\"PkSPb\"></a></p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><p><a name=\"SYB1M\"></a></p>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h3><p><a name=\"oyH3I\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><a name=\"KZ0oN\"></a></p>\n<h2 id=\"lterable-object-可迭代对象\"><a href=\"#lterable-object-可迭代对象\" class=\"headerlink\" title=\"lterable object(可迭代对象)\"></a>lterable object(可迭代对象)</h2><p><a name=\"rtAIM\"></a></p>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p><a name=\"XRB4R\"></a></p>\n"},{"title":"React路由踩坑","date":"2023-07-01T14:43:00.000Z","updated":"2023-09-14T08:09:07.448Z","keywords":null,"description":null,"_content":"\n\n# 错误实例\n在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法\n```jsx\nimport { Redirect } from 'react-router-dom';  \n  \n// 设置默认进入登录页面  \nconst RedirectPage: React.FC = () => {  \n  return <Redirect to=\"/passport/login\" />;  \n};\n```\n然而你把这段代码放入最新的 React 项目中会有报错\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230701224929.png)\n报错显示不存在 Redirect，这是因为在 v6 版本的 react-router-dom 中移除了 Redirect\n# 正确做法\n在 `react-router-dom` 的 v6 版本中，`Redirect` 组件已经被移除了，取而代之的是 `useNavigate` Hook 和 `navigate` 函数\n```tsx\nimport React, {useEffect} from 'react';  \nimport { useNavigate } from 'react-router-dom';  \n  \n// 设置默认进入登录页面  \nconst RedirectPage: React.FC = () => {  \n    const navigate = useNavigate();  \n    useEffect(()=>{  \n        navigate('/passport/login')  \n    },[])  \n    return <div></div>  \n};  \nexport default RedirectPage;\n```","source":"_posts/踩坑记录/React路由踩坑.md","raw":"---\ntitle: React路由踩坑\ndate: 2023-07-01 22:43\nupdated: 星期五 8日 九月 2023 11:59:50\ntags: []\ncategories: [踩坑记录]\nkeywords:\ndescription: \n---\n\n\n# 错误实例\n在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法\n```jsx\nimport { Redirect } from 'react-router-dom';  \n  \n// 设置默认进入登录页面  \nconst RedirectPage: React.FC = () => {  \n  return <Redirect to=\"/passport/login\" />;  \n};\n```\n然而你把这段代码放入最新的 React 项目中会有报错\n![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230701224929.png)\n报错显示不存在 Redirect，这是因为在 v6 版本的 react-router-dom 中移除了 Redirect\n# 正确做法\n在 `react-router-dom` 的 v6 版本中，`Redirect` 组件已经被移除了，取而代之的是 `useNavigate` Hook 和 `navigate` 函数\n```tsx\nimport React, {useEffect} from 'react';  \nimport { useNavigate } from 'react-router-dom';  \n  \n// 设置默认进入登录页面  \nconst RedirectPage: React.FC = () => {  \n    const navigate = useNavigate();  \n    useEffect(()=>{  \n        navigate('/passport/login')  \n    },[])  \n    return <div></div>  \n};  \nexport default RedirectPage;\n```","slug":"踩坑记录/React路由踩坑","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x87001ui4v1aytsausm","content":"<h1 id=\"错误实例\"><a href=\"#错误实例\" class=\"headerlink\" title=\"错误实例\"></a>错误实例</h1><p>在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Redirect</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 设置默认进入登录页面  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RedirectPage</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/passport/login&quot;</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而你把这段代码放入最新的 React 项目中会有报错<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230701224929.png\"><br>报错显示不存在 Redirect，这是因为在 v6 版本的 react-router-dom 中移除了 Redirect</p>\n<h1 id=\"正确做法\"><a href=\"#正确做法\" class=\"headerlink\" title=\"正确做法\"></a>正确做法</h1><p>在 <code>react-router-dom</code> 的 v6 版本中，<code>Redirect</code> 组件已经被移除了，取而代之的是 <code>useNavigate</code> Hook 和 <code>navigate</code> 函数</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 设置默认进入登录页面  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RedirectPage</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> navigate = <span class=\"title function_\">useNavigate</span>();  </span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;  </span><br><span class=\"line\">        <span class=\"title function_\">navigate</span>(<span class=\"string\">&#x27;/passport/login&#x27;</span>)  </span><br><span class=\"line\">    &#125;,[])  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">RedirectPage</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"错误实例\"><a href=\"#错误实例\" class=\"headerlink\" title=\"错误实例\"></a>错误实例</h1><p>在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Redirect</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 设置默认进入登录页面  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RedirectPage</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Redirect</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/passport/login&quot;</span> /&gt;</span></span>;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而你把这段代码放入最新的 React 项目中会有报错<br><img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230701224929.png\"><br>报错显示不存在 Redirect，这是因为在 v6 版本的 react-router-dom 中移除了 Redirect</p>\n<h1 id=\"正确做法\"><a href=\"#正确做法\" class=\"headerlink\" title=\"正确做法\"></a>正确做法</h1><p>在 <code>react-router-dom</code> 的 v6 版本中，<code>Redirect</code> 组件已经被移除了，取而代之的是 <code>useNavigate</code> Hook 和 <code>navigate</code> 函数</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNavigate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-router-dom&#x27;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 设置默认进入登录页面  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RedirectPage</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> navigate = <span class=\"title function_\">useNavigate</span>();  </span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;  </span><br><span class=\"line\">        <span class=\"title function_\">navigate</span>(<span class=\"string\">&#x27;/passport/login&#x27;</span>)  </span><br><span class=\"line\">    &#125;,[])  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">RedirectPage</span>;</span><br></pre></td></tr></table></figure>"},{"title":"TypeScript基础入门","date":"2023-06-20T05:19:00.000Z","updated":"2023-09-08T03:58:27.046Z","keywords":null,"description":null,"_content":"\n\n\n# 前言\n\n官方文档：[TypeScript中文网 ](https://www.tslang.cn/docs/home.html)\n\n# 基础数据类型\n\n```ts\nlet a: string = \"abc\"\nlet b: number = 123\nlet c: boolean = true\n```\n\n## 模板字符串\n使用模板字符串可以定义多行文本和内嵌表达式\n\n使用 **(\\`)符号包裹 ******，并且以 ` ${expr} ` 这种这种形式嵌入表达式\n\n```typescript\nlet name: string = 'tom';\nlet hello: string = `my name is ${name}`\n```\n\n## 数组\n`Array` 直接在类型后加上 `[]`\n\n```ts\nlet list: number[] = [1, 2, 3];\n```\n使用数组泛型，`Array<元素类型>`\n\n```ts\nlet list: Array<number> = [1, 2, 3];\n```\n\n## 元组\n`Tuple` 存储的数据类型可不相同，元素数量和类型是固定的\n\n```ts\nlet x: [stirng, number];\nx = ['hello', 10]\n```\n\n## 枚举\n`enum` 能为一组数值赋值为对应的编号\n\n```ts\n//默认按照0，1，3来编号\nenum Color {red, green, blue}\n//等同于\nenum Color {red = 0, green = 1, blue = 2}\n//也可以手动编号\nenum Color {red =  1, green = 2, blue = 4}\n```\n\n根据键名赋键值，类型可以为 number 也可以为枚举对象\n\n```ts\nenum Color {red, green, blue}\nlet x: Color = Color.red//x = 0\nlet x: number = Color.green//x = 1\n```\n\n根据键值赋键名\n\n```ts\nenum Color {red, green, blue}\nlet x: string = Color[0]//x = 'red'\n```\n\n## Any\n在变量类型位置时，可以使用 `any` 类型\n\n```ts\nlet x: any[] = [];\nx.push('Hello');\nx.push(1);\n```\n\n## Void\n`void` 通常用于没有返回值的函数\n\n```ts\nfuncation fun(): void {\n\tconsole.log(\"hello，world\")\n}\n```\n\n`void` 类型类型的变量只能赋值为 `null` 和 `undefined`\n\n```ts\nlet unusable: void = undefined;\n```\n\n## Null 和 Undefined\n\n- 在默认情况下，null 和 undefined 是**所有类型的子类**，可以将 null 和 undefined 赋值给任何类型的变量\n- 但在严格模式下，null 和 undefined 只能赋值给它们对应的类型，在这个模式下如果想传入一个 string 或 null 或 undefined 类型，可以使用联合类型 `string|null|undefined`\n\n```ts\n//严格模式下\nlet x: string|null|undefined = null \n```\n\n## never\n`never` 类型表示不存在值的类型，用于抛出异常的函数，或无限循环下去的函数\n\n```ts\nfunction error(): never {\n\tthrow new Error(\"error\")\n}\n```\n\n## Object\nObject 表示非原始类型，是除了 `number `，` string `，` boolean `，` symbol `，` null ` 或 ` undefined ` 之外的类型\n\n可以便于更好使用像 `Object.create` 这样的 API\n\n使用 `typeof` 函数返回非原始类型变量都是 `Object`\n\n```ts\ndeclare function create(o: object | null):void; \ncreate({ prop: 0 }); // OK \ncreate(null); // OK \ncreate(42); // Error \ncreate(\"string\"); // Error\ncreate(false); // Error \ncreate(undefined); // Error\n```\n\n## 类型断言\n第一种方式：使用 `<>` **(不推荐)**\n\n```ts\nlet someValue: any = \"this is a string\"; let strLength: number = (<string>someValue).length;\n```\n第二种方式：使用 `as`\n\n```ts\nlet someValue: any = \"this is a string\";\nlet strLength: number = (someValue as string).length;\n```\n\n在 tsx 中（react 项目里）由于尖括号和标签冲突，只能使用 `as` 的形式\n\n# 变量声明\n\n## var、let 和 const\n\n- 使用 `var` 声明一个变量，在其他函数内部是可以访问的，正是因为 var 存在着这样的问题，我们更推荐使用 `let`\n- let 声明的变量只能在它的语法作用域或者块作用域使用\n- `const` 的作用域与 `let` 类似，只是 `const` 在被创建后不能改变\n\n## 解构\n\n### 数组解构\n语法：`let [x, y] = array`\n\n```ts\nlet input = [1, 2]; \nlet [first, second] = input; \nconsole.log(first); // outputs 1 \nconsole.log(second); // outputs 2\n```\n\n- 作用于函数参数可直接解构成参数\n\n```ts\nlet input = [1, 2];\nfunction f([first, second]: [number, number]) { \nconsole.log(first);\nconsole.log(second); \n} \nf(input);\n```\n\n- 可以用 `...` 语法来创建剩余的变量\n\n```ts\nlet [frist, ...rest] = [1, 2, 3, 4, 5]\nconsole.log(frist)// 1\nconsole.log(rest)// [2, 3, 4, 5]\n```\n\n- 若不关心其他变量，可以空着，只用 `,` 分隔\n\n```ts\nlet [, second, , fourth] = [1, 2, 3, 4];\n```\n\n### 对象解构\n语法： `let {x, y} = class`，结构的变量名要和对象的键名对应\n\n下面的代码里的 a 和 b 没有指明类型，ts 也能正常运行，这是因为当你使用对象解构时，编译器会自动判断对象属性的类型\n\n```ts\nlet o = { a: \"foo\", b: 12, c: \"bar\" }; \nlet { a, b } = o;\n```\n\n将对象解构用于函数声明中\n\ntype 作用就是给类型起一个新名字，和接口一样，用来描述对象或函数的类型，`?` 表示该类型可选\n\n```ts\ntype C = { a: string, b?: number } \nfunction f({ a, b }: C): void {}\n\n//相当于\nfunction f({ a, b }: {a:string, b:number }): void {}\n```\n\n## 展开\n三个点 `...` 被称为扩展运算符。用于可迭代对象展开到每个元素\n\n1. 合并数组\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst mergedArray = [...arr1, ...arr2]; // 结果：[1, 2, 3, 4, 5, 6]\n```\n\n2. 复制数组\n\n```ts\nconst originalArray = [1, 2, 3];\nconst newArray = [...originalArray];\n```\n\n3. 添加元素\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2); // 结果：[1, 2, 3, 4, 5, 6]\n```\n\n4. 函数参数\n\n```ts\nfunction myFunction(a: number, b: number, c: number) {\n  console.log(a + b + c);\n}\n\nconst args = [1, 2, 3];\nmyFunction(...args); // 输出：6\n```\n\n5. 对象扩展\n\n```ts\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst mergedObject = { ...obj1, ...obj2 }; // 结果：{a: 1, b: 2, c: 3, d: 4}\n\n```\n\n# 接口\n与 `type` 类似，都能用于定义变量的类型\n\n```ts\ninterface InterfaceExample { key: string; } \n// 使用type \ntype TypeExample = { key: string; }\n```\n\n## 接口和类型的区别\n\n1. interface 与 type 能相互扩展:\n```ts\n//interface能用extends来扩展\ninterface Name { name: string; } \ninterface User extends Name { age: number; }\n//type能用 & 来交叉类型\ntype Name = { name: string; }\ntype User = Name & { age: number };\n//interface扩展type\ntype Name = { name: string; } \ninterface User extends Name { age: number; }\n// type 与 interface 交叉 \ninterface Name { name: string; }\ntype User = Name & { age: number; }\n```\n\n2. `interface` 可以定义多次，属性会被合并，而 `type` 不能被定义多次\n\n```ts\ninterface User { name: string age: number } \ninterface User { sex: string } \nlet user:User={name:'wang',age:1,sex:'man'}\n```\n\n3. `type` 能定义映射类型\n\n```ts\ninterface aType { name: string; age: number; }\n\n// 使用type定义映射类型 \ntype ReadonlyType<T> = { readonly [key in keyof T]: T[key]; }; \n\ntype newType = ReadonlyType<aType>\n/*\n\ttype newType = {\n\t\t readonly name: string;\n\t\t readonly age?: number;\n\t }\n*/\n```\n\n4. `type` 能定义条件类型\n\n```ts\ntype arrayType = number[];\n// 使用type定义条件类型 \n// infer能够自动推断传入的类型,之后会再讲到\ntype ElementType<T> = T extends Array<infer U> ? U : T;\n\ntype newType = Elementtype<arraytype>\n/*\n\ttype newType = number\n*/\n```\n\n## 可选属性\n在属性后加 `?` ,则该属性是可有可无的\n\n```typescript\ninterface IPerson {\n\tname: string;\n\tage?: number;\n}\nlet tom : Iperson = {\n\tname: 'tom',\n\t//age: 21\n}\n```\n\n## 任意属性\n语法：`[propName: type]: any` ，能允许类型添加别的属性\n\n```typescript\ninterface IPerson {\n\tname: String;\n\t[propName: string]: any\n}\nlet tom : Iperson = {\n\tname: 'tom',\n\tgender: 'male'\n}\n```\n\n## 只读属性\n被创建后不能被修改,用于对象在创建后就不能更改的属性\n\n```typescript\ninterface IPerson {\n\treadonly id: string;\n\tname: string \n}\nlet p1: IPerson = { id:001, name:wdm};\np1.id = 002; //error\n```\n\n### 只读数组类型\n`ReadonlyArray<T>` 类型与 `Array<T>` 类似，只不过都是不可变的数据\n\n```ts\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n```\n\n在最后一行代码，将 `ReadonlyArray` 赋值给一个普通的数组也是不行的，但是可以用类型重写，将 `ReadonlyArray` 强制转换为数组\n\n```ts\na = ro as number[];\n```\n\n## 可变属性\n如果要使类型的属性可变,可以使用 `[propName: string]: any`\n\n```ts\ninterface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n//即使是拼写成了 colour 也不会报错,会自动添加一个colour属性\nlet squareOptions = { colour: \"red\", width: 100 };\nlet mySquare = createSquare(squareOptions);\n```\n\n## 函数类型\n接口能描述变量类型外,还能描述函数类型\n\n```ts\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n```\n\n这能用于创建一个函数类型的变量,将一个函数赋值给一个变量\n\n```ts\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n函数里的参数名不必与接口定义的参数名相同\n\n同时也可以不指定类型, TypeScript 会推断出参数的类型，因为已经指定了变量的函数类型\n\n```ts\nlet mySearch: SearchFunc;\nmySearch = function(src, sub) {\n    let result = src.search(sub);\n    return result > -1;\n}\n```\n## 可索引类型\n用于描述哪些可以通过索引得到数据的类型,类似于数组和字典,比如 `a[10]` 或 `ageMap[\"daniel\"]`\n\n只能使用 `string` 或 `number` 来作为索引\n\n```ts\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n也可以同时使用 `string` 和 `number` 作为索引\n\n下面的代码在使用 `number` 索引时,由于 `Animal` 是父类型,也会匹配到 `Dog`,因此发生冲突\n正确的做法是 `number` 返回的类型是 `string` 返回的类型的子类型\n\n因为 `number` 实际上在 typescript 内部执行的时候会转换为 `string` ，所以这也要求 `string` 索引本身对应的类型是兼容所有的，也就是说 string 索引对应的类型必须是其他类型的父类。\n\n举一个反例，比如 `number` 索引返回的类型是 `Animal`，TS 转换成 `string` 来去查找，但是 `string` 索引返回的类型是 `Dog`，`Animal` 不是 `Dog` 类型，编译器会报错。\n\n```ts\nclass Animal {\n    name: string;\n}\nclass Dog extends Animal {\n    breed: string;\n}\n\n// 错误：'string'索引对应的类型不兼容所有\ninterface NotOkay {\n    [x: number]: Animal;\n    [x: string]: Dog;\n}\n//正确的做法:使用number索引时Dog都是Animal，字符串索引和数字索引返回的类型被视为一致\ninterface NotOkay {\n    [x: number]: Dog;\n    [x: string]: Animal;\n}\n```\n\n字符串索引能够描述 `dictionary` 形式的变量,但是要保证所有 `string` 类型的属性返回值都和字符串索引的返回类型一致\n\n因为字符串索引声明了 `obj.property` 和 `obj[\"property\"]` 两种形式都可以\n\n```ts\ninterface NumberDictionary {\n  [index: string]: number;\n  length: number;    // 可以，length是number类型\n  name: string       // 错误，`name`的类型与索引类型返回值的类型不匹配\n}\n```\n\n如何为既有索引又有普通属性的变量初始化：\n\n```ts\nconst dict: NumberDictionary = {\n  '1': 2,\n  '2': 3,\n  length: 2,\n};\n```\n\n## 类的类型\n和 java 中的接口作用一致,用于抽象一个类的数据结构(ADT)\n\n```ts\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n## 接口继承\n和类一样，接口也可以继承一个或多个接口\n\n```ts\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n## 混合类型\n使用接口的混合类型，你会得到一个对象同时也能当作函数来使用\n\n创建混合类型对象的步骤：\n1. 先通过函数表达式，将函数分配给一个变量\n2. 再使用 `Object.assign()` 方法将对象属性分配给该变量\n\n```ts\ninterface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): void;\n}\n\nfunction getCounter(): Counter {\n    // 创建一个具有指定函数签名的对象\n    const counterFunction = function (start: number): string { return ''; };\n    // 使用Object.assign将额外属性分配给counterFunction对象\n    const counter: Counter = Object.assign(counterFunction, {\n        interval: 123,\n        reset: function () { }\n    });\n\n    return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n```\n\n## 接口继承类\n当一个接口继承了类后，该接口只能被这个类或其子类所实现\n\n```ts\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void;\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { }\n}\n// Image必须是Control或其子类\nclass Image implements SelectableControl {\n    select() { }\n}\n```\n\n# 类\n\n## 继承\n\n## 属性修饰符\n\n\n|  修饰符   | 子类 | 实例 | 能否被修改 |\n|:---------:|:----:|:----:| ---------- |\n|public(默认)|  √   |  √   | √          |\n| protected |  √   |  ×   | √          |\n|  private  |  ×   |  ×   | √          |\n> `readonly`关键字用于将类成员声明为**只读**。这意味着成员的值只能在**声明或构造函数**中进行设置，不能在其他地方修改。`readonly`可以与`public`、`private`和`protected`修饰符结合使用。\n\n### public\n在TypeScript里，成员都默认为`public`。\n\n```ts\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n### protected\n`protected` 成员只能在类和子类中可以访问\n\n```ts\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name); // 错误\n```\n\n构造函数也可以被标记成 `protected`。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，\n\n```ts\nclass Person {\n    protected name: string;\n    protected constructor(theName: string) { this.name = theName; }\n}\n\n// Employee 能够继承 Person\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name);\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nlet john = new Person(\"John\"); // 错误: 'Person' 的构造函数是被保护的.\n```\n\nTypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。\n\n然而，当我们比较带有 `private` 或 `protected` 成员的类型的时候，情况就不同了。如果其中一个类型里包含一个 `private` 成员，那么只有当另外一个类型中也存在这样一个 `private` 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于 `protected` 成员也使用这个规则。\n\n下面来看一个例子，更好地说明了这一点：\n\n```ts\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nclass Rhino extends Animal {\n    constructor() { super(\"Rhino\"); }\n}\n\nclass Employee {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n```\n\n### private\n当成员被标记成`private`时，它就不能在声明它的类的外部访问\n\n```ts\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // 错误: 'name' 是私有的.\n```\n\n\n### readonly\n你可以使用 `readonly` 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。\n\n```ts\nclass Octopus {\n    readonly name: string;\n    readonly numberOfLegs: number = 8;\n    constructor (theName: string) {\n        this.name = theName;\n    }\n}\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name = \"Man with the 3-piece suit\"; // 错误! name 是只读的.\n```\n\n## 存取器\nTypeScript 支持通过 `get` 和 `set` 来截取对对象属性的操作。它能帮助你有效的控制对对象成员的读取和修改。\n\n先将属性定义为 `private`, ` get ` 用来截取对象属性的读取, ` set ` 用来截取对象属性的修改\n\n```ts\nlet passcode = \"secret passcode\";\n\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode === \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Error: Unauthorized update of employee!\");\n        }\n    }\n}\n\nlet employee = new Employee();\n//对fullName赋值时,会运行set fullName()\nemployee.fullName = \"Bob Smith\";\n//读取fullName时,会运行get fullName()\nif (employee.fullName) {\n    alert(employee.fullName);\n}\n```\n\n## 静态属性\n`static` 修饰符使得该属性只存在于该对象中,所有由该对象创建的实例都使用同一个属性值\n\n```ts\nclass Grid {\n    static origin = {x: 0, y: 0};\n    calculateDistanceFromOrigin(point: {x: number; y: number;}) {\n        let xDist = (point.x - Grid.origin.x);\n        let yDist = (point.y - Grid.origin.y);\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n    }\n    constructor (public scale: number) { }\n}\n\nlet grid1 = new Grid(1.0);  // 1x scale\nlet grid2 = new Grid(5.0);  // 5x scale\n\nconsole.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));\n```\n\n## 抽象类\n抽象类做为其它派生类的基类使用，它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节\n\n# 函数\n\n## 函数声明和函数表达式\n\n函数声明和函数表达式的区别：\n\t- 函数声明会在浏览器在执行代码时被扫描，创建一个变量来储存指向该函数的引用\n\t- 函数表达式则是将函数赋值给一个变量来储存\n\n```typescript\n//函数声明\nfunction add(x: number,y: number): number{\n\treturn x + y;\n}\n//函数表达式\nlet add = function(x: number, y: number): number{\n\treturn x + y;\n}\n//箭头函数\nlet add = (x: number, y: number ): number =>{\n\treturn x + y\n}\n```\n\n## 接口定义函数\n接口内要用 `()` 包裹函数的参数\n\n```typescript\ninterface Add{\n(x: number, y: number): number;\n}\nlet add: IAdd = function(x: number, y: number): number{\n\treturn x+y\n};\n```\n\n## 可选参数\n参数后加 `?` 表示该参数是可选的，要对没有传入可选参数的情况做一个判断，通常可选参数都有个默认值，也就是默认参数\n\n```typescript\nfunction name(firstName: string, lastName?:string){\n\tif(lastName){\n\t\treturn firstName+' '+lastName;\n\t}else{\n\t\treturn firstName;\n\t}\n}\nname('lilming');\n```\n\n## 默认参数\n可选参数和默认参数类似，可以有也可以没有。但是可选参数必须在必选参数后面；默认参数没有这个限制\n\n```typescript\nfunction name(lastName:string = 'wang' ,firstName: string ){\n\treturn firstName + ' ' + lastName;\n}\nname('daiming');\n```\n\n## 获取剩余参数\n`...` 在变量之前可以获取剩下的其他变量\n\n```typescript\nfunction push(a:any[], ...items:any[]){\n\titems.forEach((item)=>{\n\t\ta.push(item)\n\t})\n}\nlet a = [1,2,3]\npush(a,4,5,6,7)\n```\n\n## 函数重载\n利用联合类型参数，通过 `if` 判断参数类型\n\n```typescript\nfunction reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number| String): number| String| void {\n\tif(typeof x ==='number'){\n\t\treturn Number(x.tostring.split('').reverse().join(''));\n\t}else{\n\t\treturn x.split('').reverse.join('');\n\t}\n}\n```\n\n## this 和箭头函数\n箭头函数会捕获包含它们的上下文中的 `this` 值，箭头函数中的 `this` 和外层的 `this` 是一致的。而普通函数中的 `this` 指向全局对象（在浏览器中是 `window`，在 Node.js 中是 `global`）\n\n下面的例子中，一个对象的函数返回了一个函数，被返回的函数内使用了该对象的属性，则该函数要用**箭头函数**，而不是普通的函数\n\n因为在该函数被创建之后（被赋值了之后），他的 `this` 需要是对象的，而不是它自身的，这就需要使用**箭头函数**\n```ts\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n# 重载\n如果一个函数可能会有不同类型的参数传入，采用可选参数和 `if` 来处理会使代码可读性下降很多，可以采用函数重载来限定不同类型的参数\n\n例如：\n```ts\nfunction padding(all: number);\nfunction padding(topAndBottom: number, leftAndRight: number);\nfunction padding(top: number, right: number, bottom: number, left: number);\n// 上面三个是函数重载，规定只能用这三种形式的参数\n\nfunction padding(a: number, b?: number, c?: number, d?: number) {\n  if (b === undefined && c === undefined && d === undefined) {\n    b = c = d = a;\n  } else if (c === undefined && d === undefined) {\n    c = a;\n    d = b;\n  }\n  return {\n    top: a,\n    right: b,\n    bottom: c,\n    left: d\n  };\n}\n```\n\n之后在调用时，就只能使用前面三种的参数形式\n\n```ts\npadding(1); // Okay: all\npadding(1, 1); // Okay: topAndBottom, leftAndRight\npadding(1, 1, 1, 1); // Okay: top, right, bottom, left\n\npadding(1, 1, 1); // Error: Not a part of the available overloads\n```\n64 4 16 20 16 ","source":"_posts/计算机语言知识库/TypeScript基础入门.md","raw":"---\ntitle: TypeScript基础入门\ndate: 2023-06-20 13:19\nupdated: 星期一 17日 七月 2023 09:32:53\ntags: []\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n\n# 前言\n\n官方文档：[TypeScript中文网 ](https://www.tslang.cn/docs/home.html)\n\n# 基础数据类型\n\n```ts\nlet a: string = \"abc\"\nlet b: number = 123\nlet c: boolean = true\n```\n\n## 模板字符串\n使用模板字符串可以定义多行文本和内嵌表达式\n\n使用 **(\\`)符号包裹 ******，并且以 ` ${expr} ` 这种这种形式嵌入表达式\n\n```typescript\nlet name: string = 'tom';\nlet hello: string = `my name is ${name}`\n```\n\n## 数组\n`Array` 直接在类型后加上 `[]`\n\n```ts\nlet list: number[] = [1, 2, 3];\n```\n使用数组泛型，`Array<元素类型>`\n\n```ts\nlet list: Array<number> = [1, 2, 3];\n```\n\n## 元组\n`Tuple` 存储的数据类型可不相同，元素数量和类型是固定的\n\n```ts\nlet x: [stirng, number];\nx = ['hello', 10]\n```\n\n## 枚举\n`enum` 能为一组数值赋值为对应的编号\n\n```ts\n//默认按照0，1，3来编号\nenum Color {red, green, blue}\n//等同于\nenum Color {red = 0, green = 1, blue = 2}\n//也可以手动编号\nenum Color {red =  1, green = 2, blue = 4}\n```\n\n根据键名赋键值，类型可以为 number 也可以为枚举对象\n\n```ts\nenum Color {red, green, blue}\nlet x: Color = Color.red//x = 0\nlet x: number = Color.green//x = 1\n```\n\n根据键值赋键名\n\n```ts\nenum Color {red, green, blue}\nlet x: string = Color[0]//x = 'red'\n```\n\n## Any\n在变量类型位置时，可以使用 `any` 类型\n\n```ts\nlet x: any[] = [];\nx.push('Hello');\nx.push(1);\n```\n\n## Void\n`void` 通常用于没有返回值的函数\n\n```ts\nfuncation fun(): void {\n\tconsole.log(\"hello，world\")\n}\n```\n\n`void` 类型类型的变量只能赋值为 `null` 和 `undefined`\n\n```ts\nlet unusable: void = undefined;\n```\n\n## Null 和 Undefined\n\n- 在默认情况下，null 和 undefined 是**所有类型的子类**，可以将 null 和 undefined 赋值给任何类型的变量\n- 但在严格模式下，null 和 undefined 只能赋值给它们对应的类型，在这个模式下如果想传入一个 string 或 null 或 undefined 类型，可以使用联合类型 `string|null|undefined`\n\n```ts\n//严格模式下\nlet x: string|null|undefined = null \n```\n\n## never\n`never` 类型表示不存在值的类型，用于抛出异常的函数，或无限循环下去的函数\n\n```ts\nfunction error(): never {\n\tthrow new Error(\"error\")\n}\n```\n\n## Object\nObject 表示非原始类型，是除了 `number `，` string `，` boolean `，` symbol `，` null ` 或 ` undefined ` 之外的类型\n\n可以便于更好使用像 `Object.create` 这样的 API\n\n使用 `typeof` 函数返回非原始类型变量都是 `Object`\n\n```ts\ndeclare function create(o: object | null):void; \ncreate({ prop: 0 }); // OK \ncreate(null); // OK \ncreate(42); // Error \ncreate(\"string\"); // Error\ncreate(false); // Error \ncreate(undefined); // Error\n```\n\n## 类型断言\n第一种方式：使用 `<>` **(不推荐)**\n\n```ts\nlet someValue: any = \"this is a string\"; let strLength: number = (<string>someValue).length;\n```\n第二种方式：使用 `as`\n\n```ts\nlet someValue: any = \"this is a string\";\nlet strLength: number = (someValue as string).length;\n```\n\n在 tsx 中（react 项目里）由于尖括号和标签冲突，只能使用 `as` 的形式\n\n# 变量声明\n\n## var、let 和 const\n\n- 使用 `var` 声明一个变量，在其他函数内部是可以访问的，正是因为 var 存在着这样的问题，我们更推荐使用 `let`\n- let 声明的变量只能在它的语法作用域或者块作用域使用\n- `const` 的作用域与 `let` 类似，只是 `const` 在被创建后不能改变\n\n## 解构\n\n### 数组解构\n语法：`let [x, y] = array`\n\n```ts\nlet input = [1, 2]; \nlet [first, second] = input; \nconsole.log(first); // outputs 1 \nconsole.log(second); // outputs 2\n```\n\n- 作用于函数参数可直接解构成参数\n\n```ts\nlet input = [1, 2];\nfunction f([first, second]: [number, number]) { \nconsole.log(first);\nconsole.log(second); \n} \nf(input);\n```\n\n- 可以用 `...` 语法来创建剩余的变量\n\n```ts\nlet [frist, ...rest] = [1, 2, 3, 4, 5]\nconsole.log(frist)// 1\nconsole.log(rest)// [2, 3, 4, 5]\n```\n\n- 若不关心其他变量，可以空着，只用 `,` 分隔\n\n```ts\nlet [, second, , fourth] = [1, 2, 3, 4];\n```\n\n### 对象解构\n语法： `let {x, y} = class`，结构的变量名要和对象的键名对应\n\n下面的代码里的 a 和 b 没有指明类型，ts 也能正常运行，这是因为当你使用对象解构时，编译器会自动判断对象属性的类型\n\n```ts\nlet o = { a: \"foo\", b: 12, c: \"bar\" }; \nlet { a, b } = o;\n```\n\n将对象解构用于函数声明中\n\ntype 作用就是给类型起一个新名字，和接口一样，用来描述对象或函数的类型，`?` 表示该类型可选\n\n```ts\ntype C = { a: string, b?: number } \nfunction f({ a, b }: C): void {}\n\n//相当于\nfunction f({ a, b }: {a:string, b:number }): void {}\n```\n\n## 展开\n三个点 `...` 被称为扩展运算符。用于可迭代对象展开到每个元素\n\n1. 合并数组\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst mergedArray = [...arr1, ...arr2]; // 结果：[1, 2, 3, 4, 5, 6]\n```\n\n2. 复制数组\n\n```ts\nconst originalArray = [1, 2, 3];\nconst newArray = [...originalArray];\n```\n\n3. 添加元素\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2); // 结果：[1, 2, 3, 4, 5, 6]\n```\n\n4. 函数参数\n\n```ts\nfunction myFunction(a: number, b: number, c: number) {\n  console.log(a + b + c);\n}\n\nconst args = [1, 2, 3];\nmyFunction(...args); // 输出：6\n```\n\n5. 对象扩展\n\n```ts\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst mergedObject = { ...obj1, ...obj2 }; // 结果：{a: 1, b: 2, c: 3, d: 4}\n\n```\n\n# 接口\n与 `type` 类似，都能用于定义变量的类型\n\n```ts\ninterface InterfaceExample { key: string; } \n// 使用type \ntype TypeExample = { key: string; }\n```\n\n## 接口和类型的区别\n\n1. interface 与 type 能相互扩展:\n```ts\n//interface能用extends来扩展\ninterface Name { name: string; } \ninterface User extends Name { age: number; }\n//type能用 & 来交叉类型\ntype Name = { name: string; }\ntype User = Name & { age: number };\n//interface扩展type\ntype Name = { name: string; } \ninterface User extends Name { age: number; }\n// type 与 interface 交叉 \ninterface Name { name: string; }\ntype User = Name & { age: number; }\n```\n\n2. `interface` 可以定义多次，属性会被合并，而 `type` 不能被定义多次\n\n```ts\ninterface User { name: string age: number } \ninterface User { sex: string } \nlet user:User={name:'wang',age:1,sex:'man'}\n```\n\n3. `type` 能定义映射类型\n\n```ts\ninterface aType { name: string; age: number; }\n\n// 使用type定义映射类型 \ntype ReadonlyType<T> = { readonly [key in keyof T]: T[key]; }; \n\ntype newType = ReadonlyType<aType>\n/*\n\ttype newType = {\n\t\t readonly name: string;\n\t\t readonly age?: number;\n\t }\n*/\n```\n\n4. `type` 能定义条件类型\n\n```ts\ntype arrayType = number[];\n// 使用type定义条件类型 \n// infer能够自动推断传入的类型,之后会再讲到\ntype ElementType<T> = T extends Array<infer U> ? U : T;\n\ntype newType = Elementtype<arraytype>\n/*\n\ttype newType = number\n*/\n```\n\n## 可选属性\n在属性后加 `?` ,则该属性是可有可无的\n\n```typescript\ninterface IPerson {\n\tname: string;\n\tage?: number;\n}\nlet tom : Iperson = {\n\tname: 'tom',\n\t//age: 21\n}\n```\n\n## 任意属性\n语法：`[propName: type]: any` ，能允许类型添加别的属性\n\n```typescript\ninterface IPerson {\n\tname: String;\n\t[propName: string]: any\n}\nlet tom : Iperson = {\n\tname: 'tom',\n\tgender: 'male'\n}\n```\n\n## 只读属性\n被创建后不能被修改,用于对象在创建后就不能更改的属性\n\n```typescript\ninterface IPerson {\n\treadonly id: string;\n\tname: string \n}\nlet p1: IPerson = { id:001, name:wdm};\np1.id = 002; //error\n```\n\n### 只读数组类型\n`ReadonlyArray<T>` 类型与 `Array<T>` 类似，只不过都是不可变的数据\n\n```ts\nlet a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n```\n\n在最后一行代码，将 `ReadonlyArray` 赋值给一个普通的数组也是不行的，但是可以用类型重写，将 `ReadonlyArray` 强制转换为数组\n\n```ts\na = ro as number[];\n```\n\n## 可变属性\n如果要使类型的属性可变,可以使用 `[propName: string]: any`\n\n```ts\ninterface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n//即使是拼写成了 colour 也不会报错,会自动添加一个colour属性\nlet squareOptions = { colour: \"red\", width: 100 };\nlet mySquare = createSquare(squareOptions);\n```\n\n## 函数类型\n接口能描述变量类型外,还能描述函数类型\n\n```ts\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n```\n\n这能用于创建一个函数类型的变量,将一个函数赋值给一个变量\n\n```ts\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n函数里的参数名不必与接口定义的参数名相同\n\n同时也可以不指定类型, TypeScript 会推断出参数的类型，因为已经指定了变量的函数类型\n\n```ts\nlet mySearch: SearchFunc;\nmySearch = function(src, sub) {\n    let result = src.search(sub);\n    return result > -1;\n}\n```\n## 可索引类型\n用于描述哪些可以通过索引得到数据的类型,类似于数组和字典,比如 `a[10]` 或 `ageMap[\"daniel\"]`\n\n只能使用 `string` 或 `number` 来作为索引\n\n```ts\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n也可以同时使用 `string` 和 `number` 作为索引\n\n下面的代码在使用 `number` 索引时,由于 `Animal` 是父类型,也会匹配到 `Dog`,因此发生冲突\n正确的做法是 `number` 返回的类型是 `string` 返回的类型的子类型\n\n因为 `number` 实际上在 typescript 内部执行的时候会转换为 `string` ，所以这也要求 `string` 索引本身对应的类型是兼容所有的，也就是说 string 索引对应的类型必须是其他类型的父类。\n\n举一个反例，比如 `number` 索引返回的类型是 `Animal`，TS 转换成 `string` 来去查找，但是 `string` 索引返回的类型是 `Dog`，`Animal` 不是 `Dog` 类型，编译器会报错。\n\n```ts\nclass Animal {\n    name: string;\n}\nclass Dog extends Animal {\n    breed: string;\n}\n\n// 错误：'string'索引对应的类型不兼容所有\ninterface NotOkay {\n    [x: number]: Animal;\n    [x: string]: Dog;\n}\n//正确的做法:使用number索引时Dog都是Animal，字符串索引和数字索引返回的类型被视为一致\ninterface NotOkay {\n    [x: number]: Dog;\n    [x: string]: Animal;\n}\n```\n\n字符串索引能够描述 `dictionary` 形式的变量,但是要保证所有 `string` 类型的属性返回值都和字符串索引的返回类型一致\n\n因为字符串索引声明了 `obj.property` 和 `obj[\"property\"]` 两种形式都可以\n\n```ts\ninterface NumberDictionary {\n  [index: string]: number;\n  length: number;    // 可以，length是number类型\n  name: string       // 错误，`name`的类型与索引类型返回值的类型不匹配\n}\n```\n\n如何为既有索引又有普通属性的变量初始化：\n\n```ts\nconst dict: NumberDictionary = {\n  '1': 2,\n  '2': 3,\n  length: 2,\n};\n```\n\n## 类的类型\n和 java 中的接口作用一致,用于抽象一个类的数据结构(ADT)\n\n```ts\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n## 接口继承\n和类一样，接口也可以继承一个或多个接口\n\n```ts\ninterface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\n```\n\n## 混合类型\n使用接口的混合类型，你会得到一个对象同时也能当作函数来使用\n\n创建混合类型对象的步骤：\n1. 先通过函数表达式，将函数分配给一个变量\n2. 再使用 `Object.assign()` 方法将对象属性分配给该变量\n\n```ts\ninterface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): void;\n}\n\nfunction getCounter(): Counter {\n    // 创建一个具有指定函数签名的对象\n    const counterFunction = function (start: number): string { return ''; };\n    // 使用Object.assign将额外属性分配给counterFunction对象\n    const counter: Counter = Object.assign(counterFunction, {\n        interval: 123,\n        reset: function () { }\n    });\n\n    return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n```\n\n## 接口继承类\n当一个接口继承了类后，该接口只能被这个类或其子类所实现\n\n```ts\nclass Control {\n    private state: any;\n}\n\ninterface SelectableControl extends Control {\n    select(): void;\n}\n\nclass Button extends Control implements SelectableControl {\n    select() { }\n}\n// Image必须是Control或其子类\nclass Image implements SelectableControl {\n    select() { }\n}\n```\n\n# 类\n\n## 继承\n\n## 属性修饰符\n\n\n|  修饰符   | 子类 | 实例 | 能否被修改 |\n|:---------:|:----:|:----:| ---------- |\n|public(默认)|  √   |  √   | √          |\n| protected |  √   |  ×   | √          |\n|  private  |  ×   |  ×   | √          |\n> `readonly`关键字用于将类成员声明为**只读**。这意味着成员的值只能在**声明或构造函数**中进行设置，不能在其他地方修改。`readonly`可以与`public`、`private`和`protected`修饰符结合使用。\n\n### public\n在TypeScript里，成员都默认为`public`。\n\n```ts\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n### protected\n`protected` 成员只能在类和子类中可以访问\n\n```ts\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name); // 错误\n```\n\n构造函数也可以被标记成 `protected`。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，\n\n```ts\nclass Person {\n    protected name: string;\n    protected constructor(theName: string) { this.name = theName; }\n}\n\n// Employee 能够继承 Person\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name);\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nlet john = new Person(\"John\"); // 错误: 'Person' 的构造函数是被保护的.\n```\n\nTypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。\n\n然而，当我们比较带有 `private` 或 `protected` 成员的类型的时候，情况就不同了。如果其中一个类型里包含一个 `private` 成员，那么只有当另外一个类型中也存在这样一个 `private` 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于 `protected` 成员也使用这个规则。\n\n下面来看一个例子，更好地说明了这一点：\n\n```ts\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nclass Rhino extends Animal {\n    constructor() { super(\"Rhino\"); }\n}\n\nclass Employee {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nlet animal = new Animal(\"Goat\");\nlet rhino = new Rhino();\nlet employee = new Employee(\"Bob\");\n\nanimal = rhino;\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n```\n\n### private\n当成员被标记成`private`时，它就不能在声明它的类的外部访问\n\n```ts\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // 错误: 'name' 是私有的.\n```\n\n\n### readonly\n你可以使用 `readonly` 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。\n\n```ts\nclass Octopus {\n    readonly name: string;\n    readonly numberOfLegs: number = 8;\n    constructor (theName: string) {\n        this.name = theName;\n    }\n}\nlet dad = new Octopus(\"Man with the 8 strong legs\");\ndad.name = \"Man with the 3-piece suit\"; // 错误! name 是只读的.\n```\n\n## 存取器\nTypeScript 支持通过 `get` 和 `set` 来截取对对象属性的操作。它能帮助你有效的控制对对象成员的读取和修改。\n\n先将属性定义为 `private`, ` get ` 用来截取对象属性的读取, ` set ` 用来截取对象属性的修改\n\n```ts\nlet passcode = \"secret passcode\";\n\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode === \"secret passcode\") {\n            this._fullName = newName;\n        }\n        else {\n            console.log(\"Error: Unauthorized update of employee!\");\n        }\n    }\n}\n\nlet employee = new Employee();\n//对fullName赋值时,会运行set fullName()\nemployee.fullName = \"Bob Smith\";\n//读取fullName时,会运行get fullName()\nif (employee.fullName) {\n    alert(employee.fullName);\n}\n```\n\n## 静态属性\n`static` 修饰符使得该属性只存在于该对象中,所有由该对象创建的实例都使用同一个属性值\n\n```ts\nclass Grid {\n    static origin = {x: 0, y: 0};\n    calculateDistanceFromOrigin(point: {x: number; y: number;}) {\n        let xDist = (point.x - Grid.origin.x);\n        let yDist = (point.y - Grid.origin.y);\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n    }\n    constructor (public scale: number) { }\n}\n\nlet grid1 = new Grid(1.0);  // 1x scale\nlet grid2 = new Grid(5.0);  // 5x scale\n\nconsole.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));\n```\n\n## 抽象类\n抽象类做为其它派生类的基类使用，它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节\n\n# 函数\n\n## 函数声明和函数表达式\n\n函数声明和函数表达式的区别：\n\t- 函数声明会在浏览器在执行代码时被扫描，创建一个变量来储存指向该函数的引用\n\t- 函数表达式则是将函数赋值给一个变量来储存\n\n```typescript\n//函数声明\nfunction add(x: number,y: number): number{\n\treturn x + y;\n}\n//函数表达式\nlet add = function(x: number, y: number): number{\n\treturn x + y;\n}\n//箭头函数\nlet add = (x: number, y: number ): number =>{\n\treturn x + y\n}\n```\n\n## 接口定义函数\n接口内要用 `()` 包裹函数的参数\n\n```typescript\ninterface Add{\n(x: number, y: number): number;\n}\nlet add: IAdd = function(x: number, y: number): number{\n\treturn x+y\n};\n```\n\n## 可选参数\n参数后加 `?` 表示该参数是可选的，要对没有传入可选参数的情况做一个判断，通常可选参数都有个默认值，也就是默认参数\n\n```typescript\nfunction name(firstName: string, lastName?:string){\n\tif(lastName){\n\t\treturn firstName+' '+lastName;\n\t}else{\n\t\treturn firstName;\n\t}\n}\nname('lilming');\n```\n\n## 默认参数\n可选参数和默认参数类似，可以有也可以没有。但是可选参数必须在必选参数后面；默认参数没有这个限制\n\n```typescript\nfunction name(lastName:string = 'wang' ,firstName: string ){\n\treturn firstName + ' ' + lastName;\n}\nname('daiming');\n```\n\n## 获取剩余参数\n`...` 在变量之前可以获取剩下的其他变量\n\n```typescript\nfunction push(a:any[], ...items:any[]){\n\titems.forEach((item)=>{\n\t\ta.push(item)\n\t})\n}\nlet a = [1,2,3]\npush(a,4,5,6,7)\n```\n\n## 函数重载\n利用联合类型参数，通过 `if` 判断参数类型\n\n```typescript\nfunction reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number| String): number| String| void {\n\tif(typeof x ==='number'){\n\t\treturn Number(x.tostring.split('').reverse().join(''));\n\t}else{\n\t\treturn x.split('').reverse.join('');\n\t}\n}\n```\n\n## this 和箭头函数\n箭头函数会捕获包含它们的上下文中的 `this` 值，箭头函数中的 `this` 和外层的 `this` 是一致的。而普通函数中的 `this` 指向全局对象（在浏览器中是 `window`，在 Node.js 中是 `global`）\n\n下面的例子中，一个对象的函数返回了一个函数，被返回的函数内使用了该对象的属性，则该函数要用**箭头函数**，而不是普通的函数\n\n因为在该函数被创建之后（被赋值了之后），他的 `this` 需要是对象的，而不是它自身的，这就需要使用**箭头函数**\n```ts\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n# 重载\n如果一个函数可能会有不同类型的参数传入，采用可选参数和 `if` 来处理会使代码可读性下降很多，可以采用函数重载来限定不同类型的参数\n\n例如：\n```ts\nfunction padding(all: number);\nfunction padding(topAndBottom: number, leftAndRight: number);\nfunction padding(top: number, right: number, bottom: number, left: number);\n// 上面三个是函数重载，规定只能用这三种形式的参数\n\nfunction padding(a: number, b?: number, c?: number, d?: number) {\n  if (b === undefined && c === undefined && d === undefined) {\n    b = c = d = a;\n  } else if (c === undefined && d === undefined) {\n    c = a;\n    d = b;\n  }\n  return {\n    top: a,\n    right: b,\n    bottom: c,\n    left: d\n  };\n}\n```\n\n之后在调用时，就只能使用前面三种的参数形式\n\n```ts\npadding(1); // Okay: all\npadding(1, 1); // Okay: topAndBottom, leftAndRight\npadding(1, 1, 1, 1); // Okay: top, right, bottom, left\n\npadding(1, 1, 1); // Error: Not a part of the available overloads\n```\n64 4 16 20 16 ","slug":"计算机语言知识库/TypeScript基础入门","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x87001xi4v1cv9bgwtg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>官方文档：<a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文网 </a></p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">number</span> = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>使用模板字符串可以定义多行文本和内嵌表达式</p>\n<p>使用 **(`)符号包裹 ******，并且以 <code>$&#123;expr&#125;</code> 这种这种形式嵌入表达式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;tom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">hello</span>: <span class=\"built_in\">string</span> = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p><code>Array</code> 直接在类型后加上 <code>[]</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>使用数组泛型，<code>Array&lt;元素类型&gt;</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p><code>Tuple</code> 存储的数据类型可不相同，元素数量和类型是固定的</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [stirng, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p><code>enum</code> 能为一组数值赋值为对应的编号</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认按照0，1，3来编号</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red = <span class=\"number\">0</span>, green = <span class=\"number\">1</span>, blue = <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//也可以手动编号</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red =  <span class=\"number\">1</span>, green = <span class=\"number\">2</span>, blue = <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据键名赋键值，类型可以为 number 也可以为枚举对象</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span><span class=\"comment\">//x = 0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">green</span><span class=\"comment\">//x = 1</span></span><br></pre></td></tr></table></figure>\n\n<p>根据键值赋键名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">string</span> = <span class=\"title class_\">Color</span>[<span class=\"number\">0</span>]<span class=\"comment\">//x = &#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h2><p>在变量类型位置时，可以使用 <code>any</code> 类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\">x.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">x.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Void\"><a href=\"#Void\" class=\"headerlink\" title=\"Void\"></a>Void</h2><p><code>void</code> 通常用于没有返回值的函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funcation <span class=\"title function_\">fun</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello，world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>void</code> 类型类型的变量只能赋值为 <code>null</code> 和 <code>undefined</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h2><ul>\n<li>在默认情况下，null 和 undefined 是<strong>所有类型的子类</strong>，可以将 null 和 undefined 赋值给任何类型的变量</li>\n<li>但在严格模式下，null 和 undefined 只能赋值给它们对应的类型，在这个模式下如果想传入一个 string 或 null 或 undefined 类型，可以使用联合类型 <code>string|null|undefined</code></li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//严格模式下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">string</span>|<span class=\"literal\">null</span>|<span class=\"literal\">undefined</span> = <span class=\"literal\">null</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h2><p><code>never</code> 类型表示不存在值的类型，用于抛出异常的函数，或无限循环下去的函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>Object 表示非原始类型，是除了 <code>number </code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code> 或 <code>undefined</code> 之外的类型</p>\n<p>可以便于更好使用像 <code>Object.create</code> 这样的 API</p>\n<p>使用 <code>typeof</code> 函数返回非原始类型变量都是 <code>Object</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">o: <span class=\"built_in\">object</span> | <span class=\"literal\">null</span></span>):<span class=\"built_in\">void</span>; </span><br><span class=\"line\"><span class=\"title function_\">create</span>(&#123; <span class=\"attr\">prop</span>: <span class=\"number\">0</span> &#125;); <span class=\"comment\">// OK </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// OK </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"number\">42</span>); <span class=\"comment\">// Error </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"string\">&quot;string&quot;</span>); <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">false</span>); <span class=\"comment\">// Error </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>第一种方式：使用 <code>&lt;&gt;</code> <strong>(不推荐)</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>; <span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>第二种方式：使用 <code>as</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 tsx 中（react 项目里）由于尖括号和标签冲突，只能使用 <code>as</code> 的形式</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><h2 id=\"var、let-和-const\"><a href=\"#var、let-和-const\" class=\"headerlink\" title=\"var、let 和 const\"></a>var、let 和 const</h2><ul>\n<li>使用 <code>var</code> 声明一个变量，在其他函数内部是可以访问的，正是因为 var 存在着这样的问题，我们更推荐使用 <code>let</code></li>\n<li>let 声明的变量只能在它的语法作用域或者块作用域使用</li>\n<li><code>const</code> 的作用域与 <code>let</code> 类似，只是 <code>const</code> 在被创建后不能改变</li>\n</ul>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><p>语法：<code>let [x, y] = array</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; </span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">// outputs 1 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); <span class=\"comment\">// outputs 2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>作用于函数参数可直接解构成参数</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[first, second]: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) &#123; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title function_\">f</span>(input);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以用 <code>...</code> 语法来创建剩余的变量</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [frist, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(frist)<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest)<span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若不关心其他变量，可以空着，只用 <code>,</code> 分隔</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [, second, , fourth] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><p>语法： <code>let &#123;x, y&#125; = class</code>，结构的变量名要和对象的键名对应</p>\n<p>下面的代码里的 a 和 b 没有指明类型，ts 也能正常运行，这是因为当你使用对象解构时，编译器会自动判断对象属性的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;foo&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">12</span>, <span class=\"attr\">c</span>: <span class=\"string\">&quot;bar&quot;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure>\n\n<p>将对象解构用于函数声明中</p>\n<p>type 作用就是给类型起一个新名字，和接口一样，用来描述对象或函数的类型，<code>?</code> 表示该类型可选</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> C = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, b?: <span class=\"built_in\">number</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: C</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: &#123;a:<span class=\"built_in\">string</span>, b:<span class=\"built_in\">number</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>三个点 <code>...</code> 被称为扩展运算符。用于可迭代对象展开到每个元素</p>\n<ol>\n<li>合并数组</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = [...arr1, ...arr2]; <span class=\"comment\">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>复制数组</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = [...originalArray];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加元素</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2); <span class=\"comment\">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>函数参数</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span>, c: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">myFunction</span>(...args); <span class=\"comment\">// 输出：6</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>对象扩展</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedObject = &#123; ...obj1, ...obj2 &#125;; <span class=\"comment\">// 结果：&#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p>与 <code>type</code> 类似，都能用于定义变量的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceExample</span> &#123; <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"comment\">// 使用type </span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeExample</span> = &#123; <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口和类型的区别\"><a href=\"#接口和类型的区别\" class=\"headerlink\" title=\"接口和类型的区别\"></a>接口和类型的区别</h2><ol>\n<li><p>interface 与 type 能相互扩展:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//interface能用extends来扩展</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//type能用 &amp; 来交叉类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">//interface扩展type</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// type 与 interface 交叉 </span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>interface</code> 可以定义多次，属性会被合并，而 <code>type</code> 不能被定义多次</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123; <span class=\"attr\">sex</span>: <span class=\"built_in\">string</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">user</span>:<span class=\"title class_\">User</span>=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;wang&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;man&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>type</code> 能定义映射类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> aType &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用type定义映射类型 </span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReadonlyType</span>&lt;T&gt; = &#123; <span class=\"keyword\">readonly</span> [key <span class=\"keyword\">in</span> keyof T]: T[key]; &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> newType = <span class=\"title class_\">ReadonlyType</span>&lt;aType&gt;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttype newType = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t readonly name: string;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t readonly age?: number;</span></span><br><span class=\"line\"><span class=\"comment\">\t &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>type</code> 能定义条件类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> arrayType = <span class=\"built_in\">number</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 使用type定义条件类型 </span></span><br><span class=\"line\"><span class=\"comment\">// infer能够自动推断传入的类型,之后会再讲到</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ElementType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;infer U&gt; ? U : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> newType = <span class=\"title class_\">Elementtype</span>&lt;arraytype&gt;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttype newType = number</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>在属性后加 <code>?</code> ,则该属性是可有可无的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tage?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom : <span class=\"title class_\">Iperson</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">//age: 21</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h2><p>语法：<code>[propName: type]: any</code> ，能允许类型添加别的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"title class_\">String</span>;</span><br><span class=\"line\">\t[<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom : <span class=\"title class_\">Iperson</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h2><p>被创建后不能被修改,用于对象在创建后就不能更改的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">IPerson</span> = &#123; <span class=\"attr\">id</span>:<span class=\"number\">001</span>, <span class=\"attr\">name</span>:wdm&#125;;</span><br><span class=\"line\">p1.<span class=\"property\">id</span> = <span class=\"number\">002</span>; <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只读数组类型\"><a href=\"#只读数组类型\" class=\"headerlink\" title=\"只读数组类型\"></a>只读数组类型</h3><p><code>ReadonlyArray&lt;T&gt;</code> 类型与 <code>Array&lt;T&gt;</code> 类似，只不过都是不可变的数据</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n\n<p>在最后一行代码，将 <code>ReadonlyArray</code> 赋值给一个普通的数组也是不行的，但是可以用类型重写，将 <code>ReadonlyArray</code> 强制转换为数组</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可变属性\"><a href=\"#可变属性\" class=\"headerlink\" title=\"可变属性\"></a>可变属性</h2><p>如果要使类型的属性可变,可以使用 <code>[propName: string]: any</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">    color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//即使是拼写成了 colour 也不会报错,会自动添加一个colour属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> squareOptions = &#123; <span class=\"attr\">colour</span>: <span class=\"string\">&quot;red&quot;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(squareOptions);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>接口能描述变量类型外,还能描述函数类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这能用于创建一个函数类型的变量,将一个函数赋值给一个变量</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.<span class=\"title function_\">search</span>(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数里的参数名不必与接口定义的参数名相同</p>\n<p>同时也可以不指定类型, TypeScript 会推断出参数的类型，因为已经指定了变量的函数类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">src, sub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = src.<span class=\"title function_\">search</span>(sub);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可索引类型\"><a href=\"#可索引类型\" class=\"headerlink\" title=\"可索引类型\"></a>可索引类型</h2><p>用于描述哪些可以通过索引得到数据的类型,类似于数组和字典,比如 <code>a[10]</code> 或 <code>ageMap[&quot;daniel&quot;]</code></p>\n<p>只能使用 <code>string</code> 或 <code>number</code> 来作为索引</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myArray</span>: <span class=\"title class_\">StringArray</span>;</span><br><span class=\"line\">myArray = [<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Fred&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myStr</span>: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>也可以同时使用 <code>string</code> 和 <code>number</code> 作为索引</p>\n<p>下面的代码在使用 <code>number</code> 索引时,由于 <code>Animal</code> 是父类型,也会匹配到 <code>Dog</code>,因此发生冲突<br>正确的做法是 <code>number</code> 返回的类型是 <code>string</code> 返回的类型的子类型</p>\n<p>因为 <code>number</code> 实际上在 typescript 内部执行的时候会转换为 <code>string</code> ，所以这也要求 <code>string</code> 索引本身对应的类型是兼容所有的，也就是说 string 索引对应的类型必须是其他类型的父类。</p>\n<p>举一个反例，比如 <code>number</code> 索引返回的类型是 <code>Animal</code>，TS 转换成 <code>string</code> 来去查找，但是 <code>string</code> 索引返回的类型是 <code>Dog</code>，<code>Animal</code> 不是 <code>Dog</code> 类型，编译器会报错。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误：&#x27;string&#x27;索引对应的类型不兼容所有</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//正确的做法:使用number索引时Dog都是Animal，字符串索引和数字索引返回的类型被视为一致</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串索引能够描述 <code>dictionary</code> 形式的变量,但是要保证所有 <code>string</code> 类型的属性返回值都和字符串索引的返回类型一致</p>\n<p>因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&quot;property&quot;]</code> 两种形式都可以</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NumberDictionary</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;    <span class=\"comment\">// 可以，length是number类型</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>       <span class=\"comment\">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何为既有索引又有普通属性的变量初始化：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dict</span>: <span class=\"title class_\">NumberDictionary</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的类型\"><a href=\"#类的类型\" class=\"headerlink\" title=\"类的类型\"></a>类的类型</h2><p>和 java 中的接口作用一致,用于抽象一个类的数据结构(ADT)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"attr\">d</span>: <span class=\"title class_\">Date</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h2><p>和类一样，接口也可以继承一个或多个接口</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h2><p>使用接口的混合类型，你会得到一个对象同时也能当作函数来使用</p>\n<p>创建混合类型对象的步骤：</p>\n<ol>\n<li>先通过函数表达式，将函数分配给一个变量</li>\n<li>再使用 <code>Object.assign()</code> 方法将对象属性分配给该变量</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">start</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">interval</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reset</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有指定函数签名的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> counterFunction = <span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">string</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 使用Object.assign将额外属性分配给counterFunction对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">counter</span>: <span class=\"title class_\">Counter</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(counterFunction, &#123;</span><br><span class=\"line\">        <span class=\"attr\">interval</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">reset</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"title function_\">getCounter</span>();</span><br><span class=\"line\"><span class=\"title function_\">c</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">c.<span class=\"title function_\">reset</span>();</span><br><span class=\"line\">c.<span class=\"property\">interval</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h2><p>当一个接口继承了类后，该接口只能被这个类或其子类所实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Control</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SelectableControl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Control</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Control</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SelectableControl</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Image必须是Control或其子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Image</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SelectableControl</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h2 id=\"属性修饰符\"><a href=\"#属性修饰符\" class=\"headerlink\" title=\"属性修饰符\"></a>属性修饰符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">修饰符</th>\n<th align=\"center\">子类</th>\n<th align=\"center\">实例</th>\n<th>能否被修改</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public(默认)</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>readonly</code>关键字用于将类成员声明为<strong>只读</strong>。这意味着成员的值只能在<strong>声明或构造函数</strong>中进行设置，不能在其他地方修改。<code>readonly</code>可以与<code>public</code>、<code>private</code>和<code>protected</code>修饰符结合使用。</p>\n</blockquote>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>在TypeScript里，成员都默认为<code>public</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">move</span>(<span class=\"params\">distanceInMeters: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3><p><code>protected</code> 成员只能在类和子类中可以访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">department</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">department</span> = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getElevatorPitch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Howard&quot;</span>, <span class=\"string\">&quot;Sales&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(howard.<span class=\"title function_\">getElevatorPitch</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(howard.<span class=\"property\">name</span>); <span class=\"comment\">// 错误</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数也可以被标记成 <code>protected</code>。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Employee 能够继承 Person</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">department</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">department</span> = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getElevatorPitch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Howard&quot;</span>, <span class=\"string\">&quot;Sales&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;John&quot;</span>); <span class=\"comment\">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p>\n<p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员的类型的时候，情况就不同了。如果其中一个类型里包含一个 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于 <code>protected</code> 成员也使用这个规则。</p>\n<p>下面来看一个例子，更好地说明了这一点：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rhino</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;Rhino&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Goat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rhino = <span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Bob&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">animal = rhino;</span><br><span class=\"line\">animal = employee; <span class=\"comment\">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Cat&quot;</span>).<span class=\"property\">name</span>; <span class=\"comment\">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Octopus</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">numberOfLegs</span>: <span class=\"built_in\">number</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"attr\">theName</span>: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dad = <span class=\"keyword\">new</span> <span class=\"title class_\">Octopus</span>(<span class=\"string\">&quot;Man with the 8 strong legs&quot;</span>);</span><br><span class=\"line\">dad.<span class=\"property\">name</span> = <span class=\"string\">&quot;Man with the 3-piece suit&quot;</span>; <span class=\"comment\">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h2><p>TypeScript 支持通过 <code>get</code> 和 <code>set</code> 来截取对对象属性的操作。它能帮助你有效的控制对对象成员的读取和修改。</p>\n<p>先将属性定义为 <code>private</code>, <code>get</code> 用来截取对象属性的读取, <code>set</code> 用来截取对象属性的修改</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> passcode = <span class=\"string\">&quot;secret passcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">_fullName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (passcode &amp;&amp; passcode === <span class=\"string\">&quot;secret passcode&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span> = newName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\"><span class=\"comment\">//对fullName赋值时,会运行set fullName()</span></span><br><span class=\"line\">employee.<span class=\"property\">fullName</span> = <span class=\"string\">&quot;Bob Smith&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//读取fullName时,会运行get fullName()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (employee.<span class=\"property\">fullName</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(employee.<span class=\"property\">fullName</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p><code>static</code> 修饰符使得该属性只存在于该对象中,所有由该对象创建的实例都使用同一个属性值</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Grid</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> origin = &#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"title function_\">calculateDistanceFromOrigin</span>(<span class=\"params\">point: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>;&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> xDist = (point.<span class=\"property\">x</span> - <span class=\"title class_\">Grid</span>.<span class=\"property\">origin</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yDist = (point.<span class=\"property\">y</span> - <span class=\"title class_\">Grid</span>.<span class=\"property\">origin</span>.<span class=\"property\">y</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(xDist * xDist + yDist * yDist) / <span class=\"variable language_\">this</span>.<span class=\"property\">scale</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"keyword\">public</span> <span class=\"attr\">scale</span>: <span class=\"built_in\">number</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> grid1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Grid</span>(<span class=\"number\">1.0</span>);  <span class=\"comment\">// 1x scale</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> grid2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Grid</span>(<span class=\"number\">5.0</span>);  <span class=\"comment\">// 5x scale</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(grid1.<span class=\"title function_\">calculateDistanceFromOrigin</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">10</span>&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(grid2.<span class=\"title function_\">calculateDistanceFromOrigin</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">10</span>&#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数声明和函数表达式\"><a href=\"#函数声明和函数表达式\" class=\"headerlink\" title=\"函数声明和函数表达式\"></a>函数声明和函数表达式</h2><p>函数声明和函数表达式的区别：<br>    - 函数声明会在浏览器在执行代码时被扫描，创建一个变量来储存指向该函数的引用<br>    - 函数表达式则是将函数赋值给一个变量来储存</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>,y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = (<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span> ): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口定义函数\"><a href=\"#接口定义函数\" class=\"headerlink\" title=\"接口定义函数\"></a>接口定义函数</h2><p>接口内要用 <code>()</code> 包裹函数的参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Add</span>&#123;</span><br><span class=\"line\">(<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">add</span>: <span class=\"title class_\">IAdd</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>参数后加 <code>?</code> 表示该参数是可选的，要对没有传入可选参数的情况做一个判断，通常可选参数都有个默认值，也就是默认参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstName+<span class=\"string\">&#x27; &#x27;</span>+lastName;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">name</span>(<span class=\"string\">&#x27;lilming&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><p>可选参数和默认参数类似，可以有也可以没有。但是可选参数必须在必选参数后面；默认参数没有这个限制</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\">lastName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;wang&#x27;</span> ,firstName: <span class=\"built_in\">string</span> </span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">name</span>(<span class=\"string\">&#x27;daiming&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取剩余参数\"><a href=\"#获取剩余参数\" class=\"headerlink\" title=\"获取剩余参数\"></a>获取剩余参数</h2><p><code>...</code> 在变量之前可以获取剩下的其他变量</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">a:<span class=\"built_in\">any</span>[], ...items:<span class=\"built_in\">any</span>[]</span>)&#123;</span><br><span class=\"line\">\titems.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><p>利用联合类型参数，通过 <code>if</code> 判断参数类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>| <span class=\"built_in\">String</span></span>): <span class=\"built_in\">number</span>| <span class=\"title class_\">String</span>| <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x ===<span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"property\">tostring</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this-和箭头函数\"><a href=\"#this-和箭头函数\" class=\"headerlink\" title=\"this 和箭头函数\"></a>this 和箭头函数</h2><p>箭头函数会捕获包含它们的上下文中的 <code>this</code> 值，箭头函数中的 <code>this</code> 和外层的 <code>this</code> 是一致的。而普通函数中的 <code>this</code> 指向全局对象（在浏览器中是 <code>window</code>，在 Node.js 中是 <code>global</code>）</p>\n<p>下面的例子中，一个对象的函数返回了一个函数，被返回的函数内使用了该对象的属性，则该函数要用<strong>箭头函数</strong>，而不是普通的函数</p>\n<p>因为在该函数被创建之后（被赋值了之后），他的 <code>this</code> 需要是对象的，而不是它自身的，这就需要使用<strong>箭头函数</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Card</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">suit</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">card</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Deck</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">number</span>[];</span><br><span class=\"line\">    <span class=\"title function_\">createCardPicker</span>(<span class=\"attr\">this</span>: <span class=\"title class_\">Deck</span>): <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Card</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">deck</span>: <span class=\"title class_\">Deck</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"title class_\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: Deck</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">suits</span>[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.<span class=\"title function_\">createCardPicker</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = <span class=\"title function_\">cardPicker</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.<span class=\"property\">card</span> + <span class=\"string\">&quot; of &quot;</span> + pickedCard.<span class=\"property\">suit</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h1><p>如果一个函数可能会有不同类型的参数传入，采用可选参数和 <code>if</code> 来处理会使代码可读性下降很多，可以采用函数重载来限定不同类型的参数</p>\n<p>例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">all: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">topAndBottom: <span class=\"built_in\">number</span>, leftAndRight: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">top: <span class=\"built_in\">number</span>, right: <span class=\"built_in\">number</span>, bottom: <span class=\"built_in\">number</span>, left: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// 上面三个是函数重载，规定只能用这三种形式的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b?: <span class=\"built_in\">number</span>, c?: <span class=\"built_in\">number</span>, d?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b === <span class=\"literal\">undefined</span> &amp;&amp; c === <span class=\"literal\">undefined</span> &amp;&amp; d === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    b = c = d = a;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c === <span class=\"literal\">undefined</span> &amp;&amp; d === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    c = a;</span><br><span class=\"line\">    d = b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span>: a,</span><br><span class=\"line\">    <span class=\"attr\">right</span>: b,</span><br><span class=\"line\">    <span class=\"attr\">bottom</span>: c,</span><br><span class=\"line\">    <span class=\"attr\">left</span>: d</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在调用时，就只能使用前面三种的参数形式</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>); <span class=\"comment\">// Okay: all</span></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Okay: topAndBottom, leftAndRight</span></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Okay: top, right, bottom, left</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Error: Not a part of the available overloads</span></span><br></pre></td></tr></table></figure>\n<p>64 4 16 20 16 </p>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>官方文档：<a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文网 </a></p>\n<h1 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h1><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">number</span> = <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p>使用模板字符串可以定义多行文本和内嵌表达式</p>\n<p>使用 **(`)符号包裹 ******，并且以 <code>$&#123;expr&#125;</code> 这种这种形式嵌入表达式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;tom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">hello</span>: <span class=\"built_in\">string</span> = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p><code>Array</code> 直接在类型后加上 <code>[]</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>使用数组泛型，<code>Array&lt;元素类型&gt;</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><p><code>Tuple</code> 存储的数据类型可不相同，元素数量和类型是固定的</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [stirng, <span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p><code>enum</code> 能为一组数值赋值为对应的编号</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认按照0，1，3来编号</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red = <span class=\"number\">0</span>, green = <span class=\"number\">1</span>, blue = <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//也可以手动编号</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red =  <span class=\"number\">1</span>, green = <span class=\"number\">2</span>, blue = <span class=\"number\">4</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据键名赋键值，类型可以为 number 也可以为枚举对象</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">red</span><span class=\"comment\">//x = 0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">number</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">green</span><span class=\"comment\">//x = 1</span></span><br></pre></td></tr></table></figure>\n\n<p>根据键值赋键名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;red, green, blue&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">string</span> = <span class=\"title class_\">Color</span>[<span class=\"number\">0</span>]<span class=\"comment\">//x = &#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h2><p>在变量类型位置时，可以使用 <code>any</code> 类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\">x.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">x.<span class=\"title function_\">push</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Void\"><a href=\"#Void\" class=\"headerlink\" title=\"Void\"></a>Void</h2><p><code>void</code> 通常用于没有返回值的函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funcation <span class=\"title function_\">fun</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello，world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>void</code> 类型类型的变量只能赋值为 <code>null</code> 和 <code>undefined</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h2><ul>\n<li>在默认情况下，null 和 undefined 是<strong>所有类型的子类</strong>，可以将 null 和 undefined 赋值给任何类型的变量</li>\n<li>但在严格模式下，null 和 undefined 只能赋值给它们对应的类型，在这个模式下如果想传入一个 string 或 null 或 undefined 类型，可以使用联合类型 <code>string|null|undefined</code></li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//严格模式下</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"built_in\">string</span>|<span class=\"literal\">null</span>|<span class=\"literal\">undefined</span> = <span class=\"literal\">null</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h2><p><code>never</code> 类型表示不存在值的类型，用于抛出异常的函数，或无限循环下去的函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;error&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>Object 表示非原始类型，是除了 <code>number </code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code> 或 <code>undefined</code> 之外的类型</p>\n<p>可以便于更好使用像 <code>Object.create</code> 这样的 API</p>\n<p>使用 <code>typeof</code> 函数返回非原始类型变量都是 <code>Object</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">o: <span class=\"built_in\">object</span> | <span class=\"literal\">null</span></span>):<span class=\"built_in\">void</span>; </span><br><span class=\"line\"><span class=\"title function_\">create</span>(&#123; <span class=\"attr\">prop</span>: <span class=\"number\">0</span> &#125;); <span class=\"comment\">// OK </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// OK </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"number\">42</span>); <span class=\"comment\">// Error </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"string\">&quot;string&quot;</span>); <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">false</span>); <span class=\"comment\">// Error </span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>第一种方式：使用 <code>&lt;&gt;</code> <strong>(不推荐)</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>; <span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>第二种方式：使用 <code>as</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 tsx 中（react 项目里）由于尖括号和标签冲突，只能使用 <code>as</code> 的形式</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><h2 id=\"var、let-和-const\"><a href=\"#var、let-和-const\" class=\"headerlink\" title=\"var、let 和 const\"></a>var、let 和 const</h2><ul>\n<li>使用 <code>var</code> 声明一个变量，在其他函数内部是可以访问的，正是因为 var 存在着这样的问题，我们更推荐使用 <code>let</code></li>\n<li>let 声明的变量只能在它的语法作用域或者块作用域使用</li>\n<li><code>const</code> 的作用域与 <code>let</code> 类似，只是 <code>const</code> 在被创建后不能改变</li>\n</ul>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><p>语法：<code>let [x, y] = array</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; </span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">// outputs 1 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); <span class=\"comment\">// outputs 2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>作用于函数参数可直接解构成参数</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[first, second]: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) &#123; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title function_\">f</span>(input);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以用 <code>...</code> 语法来创建剩余的变量</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [frist, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(frist)<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest)<span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>若不关心其他变量，可以空着，只用 <code>,</code> 分隔</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [, second, , fourth] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><p>语法： <code>let &#123;x, y&#125; = class</code>，结构的变量名要和对象的键名对应</p>\n<p>下面的代码里的 a 和 b 没有指明类型，ts 也能正常运行，这是因为当你使用对象解构时，编译器会自动判断对象属性的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;foo&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">12</span>, <span class=\"attr\">c</span>: <span class=\"string\">&quot;bar&quot;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure>\n\n<p>将对象解构用于函数声明中</p>\n<p>type 作用就是给类型起一个新名字，和接口一样，用来描述对象或函数的类型，<code>?</code> 表示该类型可选</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> C = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>, b?: <span class=\"built_in\">number</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: C</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: &#123;a:<span class=\"built_in\">string</span>, b:<span class=\"built_in\">number</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>三个点 <code>...</code> 被称为扩展运算符。用于可迭代对象展开到每个元素</p>\n<ol>\n<li>合并数组</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedArray = [...arr1, ...arr2]; <span class=\"comment\">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>复制数组</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originalArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = [...originalArray];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加元素</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2); <span class=\"comment\">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>函数参数</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myFunction</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span>, c: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">myFunction</span>(...args); <span class=\"comment\">// 输出：6</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>对象扩展</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mergedObject = &#123; ...obj1, ...obj2 &#125;; <span class=\"comment\">// 结果：&#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p>与 <code>type</code> 类似，都能用于定义变量的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterfaceExample</span> &#123; <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"comment\">// 使用type </span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeExample</span> = &#123; <span class=\"attr\">key</span>: <span class=\"built_in\">string</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口和类型的区别\"><a href=\"#接口和类型的区别\" class=\"headerlink\" title=\"接口和类型的区别\"></a>接口和类型的区别</h2><ol>\n<li><p>interface 与 type 能相互扩展:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//interface能用extends来扩展</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//type能用 &amp; 来交叉类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">//interface扩展type</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">// type 与 interface 交叉 </span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>interface</code> 可以定义多次，属性会被合并，而 <code>type</code> 不能被定义多次</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123; <span class=\"attr\">sex</span>: <span class=\"built_in\">string</span> &#125; </span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">user</span>:<span class=\"title class_\">User</span>=&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;wang&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">1</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&#x27;man&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><code>type</code> 能定义映射类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> aType &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用type定义映射类型 </span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ReadonlyType</span>&lt;T&gt; = &#123; <span class=\"keyword\">readonly</span> [key <span class=\"keyword\">in</span> keyof T]: T[key]; &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> newType = <span class=\"title class_\">ReadonlyType</span>&lt;aType&gt;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttype newType = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t readonly name: string;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t readonly age?: number;</span></span><br><span class=\"line\"><span class=\"comment\">\t &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>type</code> 能定义条件类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> arrayType = <span class=\"built_in\">number</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 使用type定义条件类型 </span></span><br><span class=\"line\"><span class=\"comment\">// infer能够自动推断传入的类型,之后会再讲到</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ElementType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;infer U&gt; ? U : T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> newType = <span class=\"title class_\">Elementtype</span>&lt;arraytype&gt;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\ttype newType = number</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>在属性后加 <code>?</code> ,则该属性是可有可无的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tage?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom : <span class=\"title class_\">Iperson</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">//age: 21</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h2><p>语法：<code>[propName: type]: any</code> ，能允许类型添加别的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"title class_\">String</span>;</span><br><span class=\"line\">\t[<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom : <span class=\"title class_\">Iperson</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">gender</span>: <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h2><p>被创建后不能被修改,用于对象在创建后就不能更改的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">IPerson</span> = &#123; <span class=\"attr\">id</span>:<span class=\"number\">001</span>, <span class=\"attr\">name</span>:wdm&#125;;</span><br><span class=\"line\">p1.<span class=\"property\">id</span> = <span class=\"number\">002</span>; <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只读数组类型\"><a href=\"#只读数组类型\" class=\"headerlink\" title=\"只读数组类型\"></a>只读数组类型</h3><p><code>ReadonlyArray&lt;T&gt;</code> 类型与 <code>Array&lt;T&gt;</code> 类似，只不过都是不可变的数据</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n\n<p>在最后一行代码，将 <code>ReadonlyArray</code> 赋值给一个普通的数组也是不行的，但是可以用类型重写，将 <code>ReadonlyArray</code> 强制转换为数组</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可变属性\"><a href=\"#可变属性\" class=\"headerlink\" title=\"可变属性\"></a>可变属性</h2><p>如果要使类型的属性可变,可以使用 <code>[propName: string]: any</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">    color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//即使是拼写成了 colour 也不会报错,会自动添加一个colour属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> squareOptions = &#123; <span class=\"attr\">colour</span>: <span class=\"string\">&quot;red&quot;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(squareOptions);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>接口能描述变量类型外,还能描述函数类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这能用于创建一个函数类型的变量,将一个函数赋值给一个变量</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.<span class=\"title function_\">search</span>(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数里的参数名不必与接口定义的参数名相同</p>\n<p>同时也可以不指定类型, TypeScript 会推断出参数的类型，因为已经指定了变量的函数类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">src, sub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = src.<span class=\"title function_\">search</span>(sub);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可索引类型\"><a href=\"#可索引类型\" class=\"headerlink\" title=\"可索引类型\"></a>可索引类型</h2><p>用于描述哪些可以通过索引得到数据的类型,类似于数组和字典,比如 <code>a[10]</code> 或 <code>ageMap[&quot;daniel&quot;]</code></p>\n<p>只能使用 <code>string</code> 或 <code>number</code> 来作为索引</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myArray</span>: <span class=\"title class_\">StringArray</span>;</span><br><span class=\"line\">myArray = [<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Fred&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myStr</span>: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p>也可以同时使用 <code>string</code> 和 <code>number</code> 作为索引</p>\n<p>下面的代码在使用 <code>number</code> 索引时,由于 <code>Animal</code> 是父类型,也会匹配到 <code>Dog</code>,因此发生冲突<br>正确的做法是 <code>number</code> 返回的类型是 <code>string</code> 返回的类型的子类型</p>\n<p>因为 <code>number</code> 实际上在 typescript 内部执行的时候会转换为 <code>string</code> ，所以这也要求 <code>string</code> 索引本身对应的类型是兼容所有的，也就是说 string 索引对应的类型必须是其他类型的父类。</p>\n<p>举一个反例，比如 <code>number</code> 索引返回的类型是 <code>Animal</code>，TS 转换成 <code>string</code> 来去查找，但是 <code>string</code> 索引返回的类型是 <code>Dog</code>，<code>Animal</code> 不是 <code>Dog</code> 类型，编译器会报错。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误：&#x27;string&#x27;索引对应的类型不兼容所有</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//正确的做法:使用number索引时Dog都是Animal，字符串索引和数字索引返回的类型被视为一致</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">    [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串索引能够描述 <code>dictionary</code> 形式的变量,但是要保证所有 <code>string</code> 类型的属性返回值都和字符串索引的返回类型一致</p>\n<p>因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&quot;property&quot;]</code> 两种形式都可以</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NumberDictionary</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;    <span class=\"comment\">// 可以，length是number类型</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>       <span class=\"comment\">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何为既有索引又有普通属性的变量初始化：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dict</span>: <span class=\"title class_\">NumberDictionary</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的类型\"><a href=\"#类的类型\" class=\"headerlink\" title=\"类的类型\"></a>类的类型</h2><p>和 java 中的接口作用一致,用于抽象一个类的数据结构(ADT)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"attr\">d</span>: <span class=\"title class_\">Date</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h2><p>和类一样，接口也可以继承一个或多个接口</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h2><p>使用接口的混合类型，你会得到一个对象同时也能当作函数来使用</p>\n<p>创建混合类型对象的步骤：</p>\n<ol>\n<li>先通过函数表达式，将函数分配给一个变量</li>\n<li>再使用 <code>Object.assign()</code> 方法将对象属性分配给该变量</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">start</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">interval</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reset</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有指定函数签名的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> counterFunction = <span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">string</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 使用Object.assign将额外属性分配给counterFunction对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">counter</span>: <span class=\"title class_\">Counter</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(counterFunction, &#123;</span><br><span class=\"line\">        <span class=\"attr\">interval</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"attr\">reset</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"title function_\">getCounter</span>();</span><br><span class=\"line\"><span class=\"title function_\">c</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">c.<span class=\"title function_\">reset</span>();</span><br><span class=\"line\">c.<span class=\"property\">interval</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h2><p>当一个接口继承了类后，该接口只能被这个类或其子类所实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Control</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">state</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SelectableControl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Control</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Control</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SelectableControl</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Image必须是Control或其子类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Image</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SelectableControl</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">select</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h2 id=\"属性修饰符\"><a href=\"#属性修饰符\" class=\"headerlink\" title=\"属性修饰符\"></a>属性修饰符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">修饰符</th>\n<th align=\"center\">子类</th>\n<th align=\"center\">实例</th>\n<th>能否被修改</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public(默认)</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>readonly</code>关键字用于将类成员声明为<strong>只读</strong>。这意味着成员的值只能在<strong>声明或构造函数</strong>中进行设置，不能在其他地方修改。<code>readonly</code>可以与<code>public</code>、<code>private</code>和<code>protected</code>修饰符结合使用。</p>\n</blockquote>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>在TypeScript里，成员都默认为<code>public</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">move</span>(<span class=\"params\">distanceInMeters: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3><p><code>protected</code> 成员只能在类和子类中可以访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">department</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">department</span> = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getElevatorPitch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Howard&quot;</span>, <span class=\"string\">&quot;Sales&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(howard.<span class=\"title function_\">getElevatorPitch</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(howard.<span class=\"property\">name</span>); <span class=\"comment\">// 错误</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数也可以被标记成 <code>protected</code>。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Employee 能够继承 Person</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">department</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">department</span> = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getElevatorPitch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Howard&quot;</span>, <span class=\"string\">&quot;Sales&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;John&quot;</span>); <span class=\"comment\">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p>\n<p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员的类型的时候，情况就不同了。如果其中一个类型里包含一个 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于 <code>protected</code> 成员也使用这个规则。</p>\n<p>下面来看一个例子，更好地说明了这一点：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rhino</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">super</span>(<span class=\"string\">&quot;Rhino&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Goat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rhino = <span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;Bob&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">animal = rhino;</span><br><span class=\"line\">animal = employee; <span class=\"comment\">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&quot;Cat&quot;</span>).<span class=\"property\">name</span>; <span class=\"comment\">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Octopus</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">numberOfLegs</span>: <span class=\"built_in\">number</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"attr\">theName</span>: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = theName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dad = <span class=\"keyword\">new</span> <span class=\"title class_\">Octopus</span>(<span class=\"string\">&quot;Man with the 8 strong legs&quot;</span>);</span><br><span class=\"line\">dad.<span class=\"property\">name</span> = <span class=\"string\">&quot;Man with the 3-piece suit&quot;</span>; <span class=\"comment\">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h2><p>TypeScript 支持通过 <code>get</code> 和 <code>set</code> 来截取对对象属性的操作。它能帮助你有效的控制对对象成员的读取和修改。</p>\n<p>先将属性定义为 <code>private</code>, <code>get</code> 用来截取对象属性的读取, <code>set</code> 用来截取对象属性的修改</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> passcode = <span class=\"string\">&quot;secret passcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">_fullName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (passcode &amp;&amp; passcode === <span class=\"string\">&quot;secret passcode&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span> = newName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employee = <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\"><span class=\"comment\">//对fullName赋值时,会运行set fullName()</span></span><br><span class=\"line\">employee.<span class=\"property\">fullName</span> = <span class=\"string\">&quot;Bob Smith&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//读取fullName时,会运行get fullName()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (employee.<span class=\"property\">fullName</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(employee.<span class=\"property\">fullName</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p><code>static</code> 修饰符使得该属性只存在于该对象中,所有由该对象创建的实例都使用同一个属性值</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Grid</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> origin = &#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"title function_\">calculateDistanceFromOrigin</span>(<span class=\"params\">point: &#123;x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>;&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> xDist = (point.<span class=\"property\">x</span> - <span class=\"title class_\">Grid</span>.<span class=\"property\">origin</span>.<span class=\"property\">x</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yDist = (point.<span class=\"property\">y</span> - <span class=\"title class_\">Grid</span>.<span class=\"property\">origin</span>.<span class=\"property\">y</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(xDist * xDist + yDist * yDist) / <span class=\"variable language_\">this</span>.<span class=\"property\">scale</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"keyword\">public</span> <span class=\"attr\">scale</span>: <span class=\"built_in\">number</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> grid1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Grid</span>(<span class=\"number\">1.0</span>);  <span class=\"comment\">// 1x scale</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> grid2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Grid</span>(<span class=\"number\">5.0</span>);  <span class=\"comment\">// 5x scale</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(grid1.<span class=\"title function_\">calculateDistanceFromOrigin</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">10</span>&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(grid2.<span class=\"title function_\">calculateDistanceFromOrigin</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">10</span>&#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节</p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数声明和函数表达式\"><a href=\"#函数声明和函数表达式\" class=\"headerlink\" title=\"函数声明和函数表达式\"></a>函数声明和函数表达式</h2><p>函数声明和函数表达式的区别：<br>    - 函数声明会在浏览器在执行代码时被扫描，创建一个变量来储存指向该函数的引用<br>    - 函数表达式则是将函数赋值给一个变量来储存</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>,y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add = (<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span> ): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口定义函数\"><a href=\"#接口定义函数\" class=\"headerlink\" title=\"接口定义函数\"></a>接口定义函数</h2><p>接口内要用 <code>()</code> 包裹函数的参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Add</span>&#123;</span><br><span class=\"line\">(<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">add</span>: <span class=\"title class_\">IAdd</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>参数后加 <code>?</code> 表示该参数是可选的，要对没有传入可选参数的情况做一个判断，通常可选参数都有个默认值，也就是默认参数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstName+<span class=\"string\">&#x27; &#x27;</span>+lastName;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">name</span>(<span class=\"string\">&#x27;lilming&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><p>可选参数和默认参数类似，可以有也可以没有。但是可选参数必须在必选参数后面；默认参数没有这个限制</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\">lastName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;wang&#x27;</span> ,firstName: <span class=\"built_in\">string</span> </span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">name</span>(<span class=\"string\">&#x27;daiming&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取剩余参数\"><a href=\"#获取剩余参数\" class=\"headerlink\" title=\"获取剩余参数\"></a>获取剩余参数</h2><p><code>...</code> 在变量之前可以获取剩下的其他变量</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">a:<span class=\"built_in\">any</span>[], ...items:<span class=\"built_in\">any</span>[]</span>)&#123;</span><br><span class=\"line\">\titems.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\ta.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><p>利用联合类型参数，通过 <code>if</code> 判断参数类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>| <span class=\"built_in\">String</span></span>): <span class=\"built_in\">number</span>| <span class=\"title class_\">String</span>| <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x ===<span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"property\">tostring</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this-和箭头函数\"><a href=\"#this-和箭头函数\" class=\"headerlink\" title=\"this 和箭头函数\"></a>this 和箭头函数</h2><p>箭头函数会捕获包含它们的上下文中的 <code>this</code> 值，箭头函数中的 <code>this</code> 和外层的 <code>this</code> 是一致的。而普通函数中的 <code>this</code> 指向全局对象（在浏览器中是 <code>window</code>，在 Node.js 中是 <code>global</code>）</p>\n<p>下面的例子中，一个对象的函数返回了一个函数，被返回的函数内使用了该对象的属性，则该函数要用<strong>箭头函数</strong>，而不是普通的函数</p>\n<p>因为在该函数被创建之后（被赋值了之后），他的 <code>this</code> 需要是对象的，而不是它自身的，这就需要使用<strong>箭头函数</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Card</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">suit</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">card</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Deck</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">number</span>[];</span><br><span class=\"line\">    <span class=\"title function_\">createCardPicker</span>(<span class=\"attr\">this</span>: <span class=\"title class_\">Deck</span>): <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Card</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">deck</span>: <span class=\"title class_\">Deck</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"title class_\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: Deck</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">suits</span>[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.<span class=\"title function_\">createCardPicker</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = <span class=\"title function_\">cardPicker</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.<span class=\"property\">card</span> + <span class=\"string\">&quot; of &quot;</span> + pickedCard.<span class=\"property\">suit</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h1><p>如果一个函数可能会有不同类型的参数传入，采用可选参数和 <code>if</code> 来处理会使代码可读性下降很多，可以采用函数重载来限定不同类型的参数</p>\n<p>例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">all: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">topAndBottom: <span class=\"built_in\">number</span>, leftAndRight: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">top: <span class=\"built_in\">number</span>, right: <span class=\"built_in\">number</span>, bottom: <span class=\"built_in\">number</span>, left: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\"><span class=\"comment\">// 上面三个是函数重载，规定只能用这三种形式的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b?: <span class=\"built_in\">number</span>, c?: <span class=\"built_in\">number</span>, d?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b === <span class=\"literal\">undefined</span> &amp;&amp; c === <span class=\"literal\">undefined</span> &amp;&amp; d === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    b = c = d = a;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c === <span class=\"literal\">undefined</span> &amp;&amp; d === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    c = a;</span><br><span class=\"line\">    d = b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">top</span>: a,</span><br><span class=\"line\">    <span class=\"attr\">right</span>: b,</span><br><span class=\"line\">    <span class=\"attr\">bottom</span>: c,</span><br><span class=\"line\">    <span class=\"attr\">left</span>: d</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在调用时，就只能使用前面三种的参数形式</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>); <span class=\"comment\">// Okay: all</span></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Okay: topAndBottom, leftAndRight</span></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Okay: top, right, bottom, left</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">padding</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Error: Not a part of the available overloads</span></span><br></pre></td></tr></table></figure>\n<p>64 4 16 20 16 </p>\n"},{"title":"深入理解TypeScript","date":"2023-06-20T05:19:00.000Z","updated":"2023-09-08T03:59:08.943Z","keywords":null,"description":null,"_content":"\n\n\n","source":"_posts/计算机语言知识库/深入理解TypeScript.md","raw":"---\ntitle: 深入理解TypeScript\ndate: 2023-06-20 13:19\nupdated: 星期一 17日 七月 2023 09:33:46\ntags: []\ncategories: [计算机语言知识库]\nkeywords:\ndescription: \n---\n\n\n\n","slug":"计算机语言知识库/深入理解TypeScript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x88001zi4v1gac5534m","content":"","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"title":"计算机网络","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:26.279Z","keywords":null,"description":null,"_content":"\n\n# 网络基础知识\n## http协议\nWeb 使用一种名为 HTTP（超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。\n## TCP/ IP协议\n> TCP/IP 是互联网相关的各类协议族的总称\n\n通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。\n### 分层原理\n1. 应用层\n\t应用层决定了向用户提供应用服务时通信的活动。\n\t比如：\n\t\t- FTP（File Transfer Protocol，文件传输协议\n\t\t- DNS（Domain Name System，域 名系统）\n\t\t- HTTP 协议也处于该层。\n2. 表示层\n\t设置固有格式和网络标准数据格式的转换\n3. 会话层\n\t1. 通信管理，负责建立和断开通信连接\n\t2. **管理传输层以下的分层**\n4. 传输层\n\t起着可靠传输的作用。只在通信双方节点上进行处理，而无需在路由器上处理。\n\t比如：\n\t\t- TCP（Transmission Control Protocol，传输控制协议）\n\t\t- UDP（User Data Protocol，用户数据报协议）\n5. 网络层\n\t负责寻址和路由选择。\n\t目标地址可以是多个网络通过路由器连接而成的某一个地址。\n\t比如：\n\t\t- IP协议（Internet Protocol）网际协议\n6. 链路层\n\t负责物理层面上互连的、节点之间的通信传输。例如与1个以太网相连的2个节点之间的通信。\n7. 物理层\n\t负责0、1比特流（0、1序列）与电压的高低、光的闪灭之间的互换。\n### TCP/IP 通信传输流（以发送 http 请求举例）\n#### 会话层以上的处理\n> 会话层以上的部分会对何时建立连接、何时发送数据等问题进行管理，并不具有实际传输数据的功能\n1. 客户端应用层：\n\t- 为应用程序提供服务并规定应用程序中通信相关的细节。\n\t- 比如通过 DNS 获取域名对应的 IP\n\t- 并且HTTP 协议发出一个想查看某个 Web 页面的请求\n3. 客户端表示层\n\t- 决定了将数据转换为网络标准传输格式\n\t- 比如将中文转化为 UTF-8 编码格式\n\t- 在服务器端则是将这些网络标准格式的数据恢复为“该计算机特定的数据格式”\n4. 客户端会话层\n\t- 决定采用何种连接方法是会话层的主要责任\n\t- 比如建立一条连接发送所有信息；每发一次建立一条连接；同时建立多条连接同时发送多条信息\n\t- 会话层只负责决定建立连接和断开连接的时机，而传输层进行实际的建立和断开处理。\n#### 传输层以下的处理\n> 真正负责在网络上传输具体数据的是会话层以下的“无名英雄”\n1. 客户端传输层：\n\t1. TCP协议将HTTP请求报文分割，并在各个报文上打上标记序号和端口号\n\t2. 三次握手确定传输成功\n2. 客户端网络层：\n\t1. IP协议将数据包发送给对方\n\t2. ARP 协议负责获取 MAC 地址，若解析不到 MAC 地址则发给下一个中转站（路由器），让下一个路由器来搜索 MAC 地址\n3. 链路层：\n\t1. 数据链路层的作用就是在这些通过传输介质互连的设备之间进行数据处理。\n\t2. 网络层与链路层都是基于 MAC 地址将数据发送给接收端的，但是网络层负责将整个数据发送给最终目标地址，而链路层则只负责发送一个分段的数据。\n4. 物理层:\n\t1. 物理层中，将数据的0、1转换为电压和脉冲光传输给物理的传输介质，而相互直连的设备之间使用 MAC 地址实现传输。\n### IP 地址、MAC 地址和 ARP 协议\n> IP 协议的作用是把各种数据包传送给对方。\n- IP 地址指明了**节点**被分配到的地址（可变的）\n- MAC 地址是指**网卡**所属的固定地址（基本上不变）\n- ARP 在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表经常动态更新。每一台主机都设有一个 ARP 高速缓存(ARP Cache)，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表(并且每一个映射地址都设置有生存时间)\n过程：\n1. 发送端只知道接收端的IP地址，发给路由器1\n2. 路由器1使用 ARP 解析IP发现该 MAC 不在局域网中，发给下一个路由器2\n····\n3. 路由器n使用 ARP 解析IP地址发现该 MAC 地址在局域网中，发送给接收方\n### TCP协议三次握手\n> TCP 位于传输层，用于提供可靠的字节流服务\n- 字节流服务\n为了方便传输，将大 块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。\n总之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。\n- 三次握手\n\t1. 发送端首先发送一个带 SYN 标志的数据包给对方\n\t2. 接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息\n\t3. 最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。\n## DNS服务\n> DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的 协议。它提供域名到 IP 地址之间的解析服务。\n\n过程：\n1. 发送端发送域名给DNS服务器\n2. DNS服务器将域名对应到IP地址上，并将IP地址给发送端\n3. 发送端再向该IP地址发送访问请求\n## 传输方式\n###  面向有连接与面向无连接\n- 面向有连接\n面向有连接型，会在发送数据之前与服务器建立一条通信线路，必须要建立连接才能发送数据\n在通信前会建立连接，在通信后会断开连接\n- 面向无连接\n无需建立连接，发送端可以自由发送数据。接收端由于不知道什么时候会收到数据，所以要确认是否收到了数据\n因此即使接收端不存在或无法接收数据，发送端也能发送数据\n### 电路交换和分组交换\n\n## URI 和 URL\n","source":"_posts/计算机基础/计算机网络.md","raw":"---\ntitle: 计算机网络\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:34:07\ntags: []\ncategories: [计算机基础]\nkeywords:\ndescription: \n---\n\n\n# 网络基础知识\n## http协议\nWeb 使用一种名为 HTTP（超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。\n## TCP/ IP协议\n> TCP/IP 是互联网相关的各类协议族的总称\n\n通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。\n### 分层原理\n1. 应用层\n\t应用层决定了向用户提供应用服务时通信的活动。\n\t比如：\n\t\t- FTP（File Transfer Protocol，文件传输协议\n\t\t- DNS（Domain Name System，域 名系统）\n\t\t- HTTP 协议也处于该层。\n2. 表示层\n\t设置固有格式和网络标准数据格式的转换\n3. 会话层\n\t1. 通信管理，负责建立和断开通信连接\n\t2. **管理传输层以下的分层**\n4. 传输层\n\t起着可靠传输的作用。只在通信双方节点上进行处理，而无需在路由器上处理。\n\t比如：\n\t\t- TCP（Transmission Control Protocol，传输控制协议）\n\t\t- UDP（User Data Protocol，用户数据报协议）\n5. 网络层\n\t负责寻址和路由选择。\n\t目标地址可以是多个网络通过路由器连接而成的某一个地址。\n\t比如：\n\t\t- IP协议（Internet Protocol）网际协议\n6. 链路层\n\t负责物理层面上互连的、节点之间的通信传输。例如与1个以太网相连的2个节点之间的通信。\n7. 物理层\n\t负责0、1比特流（0、1序列）与电压的高低、光的闪灭之间的互换。\n### TCP/IP 通信传输流（以发送 http 请求举例）\n#### 会话层以上的处理\n> 会话层以上的部分会对何时建立连接、何时发送数据等问题进行管理，并不具有实际传输数据的功能\n1. 客户端应用层：\n\t- 为应用程序提供服务并规定应用程序中通信相关的细节。\n\t- 比如通过 DNS 获取域名对应的 IP\n\t- 并且HTTP 协议发出一个想查看某个 Web 页面的请求\n3. 客户端表示层\n\t- 决定了将数据转换为网络标准传输格式\n\t- 比如将中文转化为 UTF-8 编码格式\n\t- 在服务器端则是将这些网络标准格式的数据恢复为“该计算机特定的数据格式”\n4. 客户端会话层\n\t- 决定采用何种连接方法是会话层的主要责任\n\t- 比如建立一条连接发送所有信息；每发一次建立一条连接；同时建立多条连接同时发送多条信息\n\t- 会话层只负责决定建立连接和断开连接的时机，而传输层进行实际的建立和断开处理。\n#### 传输层以下的处理\n> 真正负责在网络上传输具体数据的是会话层以下的“无名英雄”\n1. 客户端传输层：\n\t1. TCP协议将HTTP请求报文分割，并在各个报文上打上标记序号和端口号\n\t2. 三次握手确定传输成功\n2. 客户端网络层：\n\t1. IP协议将数据包发送给对方\n\t2. ARP 协议负责获取 MAC 地址，若解析不到 MAC 地址则发给下一个中转站（路由器），让下一个路由器来搜索 MAC 地址\n3. 链路层：\n\t1. 数据链路层的作用就是在这些通过传输介质互连的设备之间进行数据处理。\n\t2. 网络层与链路层都是基于 MAC 地址将数据发送给接收端的，但是网络层负责将整个数据发送给最终目标地址，而链路层则只负责发送一个分段的数据。\n4. 物理层:\n\t1. 物理层中，将数据的0、1转换为电压和脉冲光传输给物理的传输介质，而相互直连的设备之间使用 MAC 地址实现传输。\n### IP 地址、MAC 地址和 ARP 协议\n> IP 协议的作用是把各种数据包传送给对方。\n- IP 地址指明了**节点**被分配到的地址（可变的）\n- MAC 地址是指**网卡**所属的固定地址（基本上不变）\n- ARP 在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表经常动态更新。每一台主机都设有一个 ARP 高速缓存(ARP Cache)，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表(并且每一个映射地址都设置有生存时间)\n过程：\n1. 发送端只知道接收端的IP地址，发给路由器1\n2. 路由器1使用 ARP 解析IP发现该 MAC 不在局域网中，发给下一个路由器2\n····\n3. 路由器n使用 ARP 解析IP地址发现该 MAC 地址在局域网中，发送给接收方\n### TCP协议三次握手\n> TCP 位于传输层，用于提供可靠的字节流服务\n- 字节流服务\n为了方便传输，将大 块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。\n总之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。\n- 三次握手\n\t1. 发送端首先发送一个带 SYN 标志的数据包给对方\n\t2. 接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息\n\t3. 最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。\n## DNS服务\n> DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的 协议。它提供域名到 IP 地址之间的解析服务。\n\n过程：\n1. 发送端发送域名给DNS服务器\n2. DNS服务器将域名对应到IP地址上，并将IP地址给发送端\n3. 发送端再向该IP地址发送访问请求\n## 传输方式\n###  面向有连接与面向无连接\n- 面向有连接\n面向有连接型，会在发送数据之前与服务器建立一条通信线路，必须要建立连接才能发送数据\n在通信前会建立连接，在通信后会断开连接\n- 面向无连接\n无需建立连接，发送端可以自由发送数据。接收端由于不知道什么时候会收到数据，所以要确认是否收到了数据\n因此即使接收端不存在或无法接收数据，发送端也能发送数据\n### 电路交换和分组交换\n\n## URI 和 URL\n","slug":"计算机基础/计算机网络","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x890023i4v12er0ex17","content":"<h1 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h1><h2 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h2><p>Web 使用一种名为 HTTP（超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。</p>\n<h2 id=\"TCP-x2F-IP协议\"><a href=\"#TCP-x2F-IP协议\" class=\"headerlink\" title=\"TCP&#x2F; IP协议\"></a>TCP&#x2F; IP协议</h2><blockquote>\n<p>TCP&#x2F;IP 是互联网相关的各类协议族的总称</p>\n</blockquote>\n<p>通常使用的网络（包括互联网）是在 TCP&#x2F;IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。</p>\n<h3 id=\"分层原理\"><a href=\"#分层原理\" class=\"headerlink\" title=\"分层原理\"></a>分层原理</h3><ol>\n<li>应用层<br> 应用层决定了向用户提供应用服务时通信的活动。<br> 比如：<br> - FTP（File Transfer Protocol，文件传输协议<br> - DNS（Domain Name System，域 名系统）<br> - HTTP 协议也处于该层。</li>\n<li>表示层<br> 设置固有格式和网络标准数据格式的转换</li>\n<li>会话层<ol>\n<li>通信管理，负责建立和断开通信连接</li>\n<li><strong>管理传输层以下的分层</strong></li>\n</ol>\n</li>\n<li>传输层<br> 起着可靠传输的作用。只在通信双方节点上进行处理，而无需在路由器上处理。<br> 比如：<br> - TCP（Transmission Control Protocol，传输控制协议）<br> - UDP（User Data Protocol，用户数据报协议）</li>\n<li>网络层<br> 负责寻址和路由选择。<br> 目标地址可以是多个网络通过路由器连接而成的某一个地址。<br> 比如：<br> - IP协议（Internet Protocol）网际协议</li>\n<li>链路层<br> 负责物理层面上互连的、节点之间的通信传输。例如与1个以太网相连的2个节点之间的通信。</li>\n<li>物理层<br> 负责0、1比特流（0、1序列）与电压的高低、光的闪灭之间的互换。</li>\n</ol>\n<h3 id=\"TCP-x2F-IP-通信传输流（以发送-http-请求举例）\"><a href=\"#TCP-x2F-IP-通信传输流（以发送-http-请求举例）\" class=\"headerlink\" title=\"TCP&#x2F;IP 通信传输流（以发送 http 请求举例）\"></a>TCP&#x2F;IP 通信传输流（以发送 http 请求举例）</h3><h4 id=\"会话层以上的处理\"><a href=\"#会话层以上的处理\" class=\"headerlink\" title=\"会话层以上的处理\"></a>会话层以上的处理</h4><blockquote>\n<p>会话层以上的部分会对何时建立连接、何时发送数据等问题进行管理，并不具有实际传输数据的功能</p>\n</blockquote>\n<ol>\n<li>客户端应用层：<ul>\n<li>为应用程序提供服务并规定应用程序中通信相关的细节。</li>\n<li>比如通过 DNS 获取域名对应的 IP</li>\n<li>并且HTTP 协议发出一个想查看某个 Web 页面的请求</li>\n</ul>\n</li>\n<li>客户端表示层<ul>\n<li>决定了将数据转换为网络标准传输格式</li>\n<li>比如将中文转化为 UTF-8 编码格式</li>\n<li>在服务器端则是将这些网络标准格式的数据恢复为“该计算机特定的数据格式”</li>\n</ul>\n</li>\n<li>客户端会话层<ul>\n<li>决定采用何种连接方法是会话层的主要责任</li>\n<li>比如建立一条连接发送所有信息；每发一次建立一条连接；同时建立多条连接同时发送多条信息</li>\n<li>会话层只负责决定建立连接和断开连接的时机，而传输层进行实际的建立和断开处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"传输层以下的处理\"><a href=\"#传输层以下的处理\" class=\"headerlink\" title=\"传输层以下的处理\"></a>传输层以下的处理</h4><blockquote>\n<p>真正负责在网络上传输具体数据的是会话层以下的“无名英雄”</p>\n</blockquote>\n<ol>\n<li>客户端传输层：<ol>\n<li>TCP协议将HTTP请求报文分割，并在各个报文上打上标记序号和端口号</li>\n<li>三次握手确定传输成功</li>\n</ol>\n</li>\n<li>客户端网络层：<ol>\n<li>IP协议将数据包发送给对方</li>\n<li>ARP 协议负责获取 MAC 地址，若解析不到 MAC 地址则发给下一个中转站（路由器），让下一个路由器来搜索 MAC 地址</li>\n</ol>\n</li>\n<li>链路层：<ol>\n<li>数据链路层的作用就是在这些通过传输介质互连的设备之间进行数据处理。</li>\n<li>网络层与链路层都是基于 MAC 地址将数据发送给接收端的，但是网络层负责将整个数据发送给最终目标地址，而链路层则只负责发送一个分段的数据。</li>\n</ol>\n</li>\n<li>物理层:<ol>\n<li>物理层中，将数据的0、1转换为电压和脉冲光传输给物理的传输介质，而相互直连的设备之间使用 MAC 地址实现传输。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"IP-地址、MAC-地址和-ARP-协议\"><a href=\"#IP-地址、MAC-地址和-ARP-协议\" class=\"headerlink\" title=\"IP 地址、MAC 地址和 ARP 协议\"></a>IP 地址、MAC 地址和 ARP 协议</h3><blockquote>\n<p>IP 协议的作用是把各种数据包传送给对方。</p>\n</blockquote>\n<ul>\n<li>IP 地址指明了<strong>节点</strong>被分配到的地址（可变的）</li>\n<li>MAC 地址是指<strong>网卡</strong>所属的固定地址（基本上不变）</li>\n<li>ARP 在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表经常动态更新。每一台主机都设有一个 ARP 高速缓存(ARP Cache)，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表(并且每一个映射地址都设置有生存时间)<br>过程：</li>\n</ul>\n<ol>\n<li>发送端只知道接收端的IP地址，发给路由器1</li>\n<li>路由器1使用 ARP 解析IP发现该 MAC 不在局域网中，发给下一个路由器2<br>····</li>\n<li>路由器n使用 ARP 解析IP地址发现该 MAC 地址在局域网中，发送给接收方</li>\n</ol>\n<h3 id=\"TCP协议三次握手\"><a href=\"#TCP协议三次握手\" class=\"headerlink\" title=\"TCP协议三次握手\"></a>TCP协议三次握手</h3><blockquote>\n<p>TCP 位于传输层，用于提供可靠的字节流服务</p>\n</blockquote>\n<ul>\n<li>字节流服务<br>为了方便传输，将大 块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。<br>总之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。</li>\n<li>三次握手<ol>\n<li>发送端首先发送一个带 SYN 标志的数据包给对方</li>\n<li>接收端收到后，回传一个带有 SYN&#x2F;ACK 标志的数据包以示传达确认信息</li>\n<li>最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"DNS服务\"><a href=\"#DNS服务\" class=\"headerlink\" title=\"DNS服务\"></a>DNS服务</h2><blockquote>\n<p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的 协议。它提供域名到 IP 地址之间的解析服务。</p>\n</blockquote>\n<p>过程：</p>\n<ol>\n<li>发送端发送域名给DNS服务器</li>\n<li>DNS服务器将域名对应到IP地址上，并将IP地址给发送端</li>\n<li>发送端再向该IP地址发送访问请求</li>\n</ol>\n<h2 id=\"传输方式\"><a href=\"#传输方式\" class=\"headerlink\" title=\"传输方式\"></a>传输方式</h2><h3 id=\"面向有连接与面向无连接\"><a href=\"#面向有连接与面向无连接\" class=\"headerlink\" title=\"面向有连接与面向无连接\"></a>面向有连接与面向无连接</h3><ul>\n<li>面向有连接<br>面向有连接型，会在发送数据之前与服务器建立一条通信线路，必须要建立连接才能发送数据<br>在通信前会建立连接，在通信后会断开连接</li>\n<li>面向无连接<br>无需建立连接，发送端可以自由发送数据。接收端由于不知道什么时候会收到数据，所以要确认是否收到了数据<br>因此即使接收端不存在或无法接收数据，发送端也能发送数据</li>\n</ul>\n<h3 id=\"电路交换和分组交换\"><a href=\"#电路交换和分组交换\" class=\"headerlink\" title=\"电路交换和分组交换\"></a>电路交换和分组交换</h3><h2 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h2>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"网络基础知识\"><a href=\"#网络基础知识\" class=\"headerlink\" title=\"网络基础知识\"></a>网络基础知识</h1><h2 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h2><p>Web 使用一种名为 HTTP（超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。</p>\n<h2 id=\"TCP-x2F-IP协议\"><a href=\"#TCP-x2F-IP协议\" class=\"headerlink\" title=\"TCP&#x2F; IP协议\"></a>TCP&#x2F; IP协议</h2><blockquote>\n<p>TCP&#x2F;IP 是互联网相关的各类协议族的总称</p>\n</blockquote>\n<p>通常使用的网络（包括互联网）是在 TCP&#x2F;IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。</p>\n<h3 id=\"分层原理\"><a href=\"#分层原理\" class=\"headerlink\" title=\"分层原理\"></a>分层原理</h3><ol>\n<li>应用层<br> 应用层决定了向用户提供应用服务时通信的活动。<br> 比如：<br> - FTP（File Transfer Protocol，文件传输协议<br> - DNS（Domain Name System，域 名系统）<br> - HTTP 协议也处于该层。</li>\n<li>表示层<br> 设置固有格式和网络标准数据格式的转换</li>\n<li>会话层<ol>\n<li>通信管理，负责建立和断开通信连接</li>\n<li><strong>管理传输层以下的分层</strong></li>\n</ol>\n</li>\n<li>传输层<br> 起着可靠传输的作用。只在通信双方节点上进行处理，而无需在路由器上处理。<br> 比如：<br> - TCP（Transmission Control Protocol，传输控制协议）<br> - UDP（User Data Protocol，用户数据报协议）</li>\n<li>网络层<br> 负责寻址和路由选择。<br> 目标地址可以是多个网络通过路由器连接而成的某一个地址。<br> 比如：<br> - IP协议（Internet Protocol）网际协议</li>\n<li>链路层<br> 负责物理层面上互连的、节点之间的通信传输。例如与1个以太网相连的2个节点之间的通信。</li>\n<li>物理层<br> 负责0、1比特流（0、1序列）与电压的高低、光的闪灭之间的互换。</li>\n</ol>\n<h3 id=\"TCP-x2F-IP-通信传输流（以发送-http-请求举例）\"><a href=\"#TCP-x2F-IP-通信传输流（以发送-http-请求举例）\" class=\"headerlink\" title=\"TCP&#x2F;IP 通信传输流（以发送 http 请求举例）\"></a>TCP&#x2F;IP 通信传输流（以发送 http 请求举例）</h3><h4 id=\"会话层以上的处理\"><a href=\"#会话层以上的处理\" class=\"headerlink\" title=\"会话层以上的处理\"></a>会话层以上的处理</h4><blockquote>\n<p>会话层以上的部分会对何时建立连接、何时发送数据等问题进行管理，并不具有实际传输数据的功能</p>\n</blockquote>\n<ol>\n<li>客户端应用层：<ul>\n<li>为应用程序提供服务并规定应用程序中通信相关的细节。</li>\n<li>比如通过 DNS 获取域名对应的 IP</li>\n<li>并且HTTP 协议发出一个想查看某个 Web 页面的请求</li>\n</ul>\n</li>\n<li>客户端表示层<ul>\n<li>决定了将数据转换为网络标准传输格式</li>\n<li>比如将中文转化为 UTF-8 编码格式</li>\n<li>在服务器端则是将这些网络标准格式的数据恢复为“该计算机特定的数据格式”</li>\n</ul>\n</li>\n<li>客户端会话层<ul>\n<li>决定采用何种连接方法是会话层的主要责任</li>\n<li>比如建立一条连接发送所有信息；每发一次建立一条连接；同时建立多条连接同时发送多条信息</li>\n<li>会话层只负责决定建立连接和断开连接的时机，而传输层进行实际的建立和断开处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"传输层以下的处理\"><a href=\"#传输层以下的处理\" class=\"headerlink\" title=\"传输层以下的处理\"></a>传输层以下的处理</h4><blockquote>\n<p>真正负责在网络上传输具体数据的是会话层以下的“无名英雄”</p>\n</blockquote>\n<ol>\n<li>客户端传输层：<ol>\n<li>TCP协议将HTTP请求报文分割，并在各个报文上打上标记序号和端口号</li>\n<li>三次握手确定传输成功</li>\n</ol>\n</li>\n<li>客户端网络层：<ol>\n<li>IP协议将数据包发送给对方</li>\n<li>ARP 协议负责获取 MAC 地址，若解析不到 MAC 地址则发给下一个中转站（路由器），让下一个路由器来搜索 MAC 地址</li>\n</ol>\n</li>\n<li>链路层：<ol>\n<li>数据链路层的作用就是在这些通过传输介质互连的设备之间进行数据处理。</li>\n<li>网络层与链路层都是基于 MAC 地址将数据发送给接收端的，但是网络层负责将整个数据发送给最终目标地址，而链路层则只负责发送一个分段的数据。</li>\n</ol>\n</li>\n<li>物理层:<ol>\n<li>物理层中，将数据的0、1转换为电压和脉冲光传输给物理的传输介质，而相互直连的设备之间使用 MAC 地址实现传输。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"IP-地址、MAC-地址和-ARP-协议\"><a href=\"#IP-地址、MAC-地址和-ARP-协议\" class=\"headerlink\" title=\"IP 地址、MAC 地址和 ARP 协议\"></a>IP 地址、MAC 地址和 ARP 协议</h3><blockquote>\n<p>IP 协议的作用是把各种数据包传送给对方。</p>\n</blockquote>\n<ul>\n<li>IP 地址指明了<strong>节点</strong>被分配到的地址（可变的）</li>\n<li>MAC 地址是指<strong>网卡</strong>所属的固定地址（基本上不变）</li>\n<li>ARP 在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表经常动态更新。每一台主机都设有一个 ARP 高速缓存(ARP Cache)，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表(并且每一个映射地址都设置有生存时间)<br>过程：</li>\n</ul>\n<ol>\n<li>发送端只知道接收端的IP地址，发给路由器1</li>\n<li>路由器1使用 ARP 解析IP发现该 MAC 不在局域网中，发给下一个路由器2<br>····</li>\n<li>路由器n使用 ARP 解析IP地址发现该 MAC 地址在局域网中，发送给接收方</li>\n</ol>\n<h3 id=\"TCP协议三次握手\"><a href=\"#TCP协议三次握手\" class=\"headerlink\" title=\"TCP协议三次握手\"></a>TCP协议三次握手</h3><blockquote>\n<p>TCP 位于传输层，用于提供可靠的字节流服务</p>\n</blockquote>\n<ul>\n<li>字节流服务<br>为了方便传输，将大 块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。<br>总之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。</li>\n<li>三次握手<ol>\n<li>发送端首先发送一个带 SYN 标志的数据包给对方</li>\n<li>接收端收到后，回传一个带有 SYN&#x2F;ACK 标志的数据包以示传达确认信息</li>\n<li>最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"DNS服务\"><a href=\"#DNS服务\" class=\"headerlink\" title=\"DNS服务\"></a>DNS服务</h2><blockquote>\n<p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的 协议。它提供域名到 IP 地址之间的解析服务。</p>\n</blockquote>\n<p>过程：</p>\n<ol>\n<li>发送端发送域名给DNS服务器</li>\n<li>DNS服务器将域名对应到IP地址上，并将IP地址给发送端</li>\n<li>发送端再向该IP地址发送访问请求</li>\n</ol>\n<h2 id=\"传输方式\"><a href=\"#传输方式\" class=\"headerlink\" title=\"传输方式\"></a>传输方式</h2><h3 id=\"面向有连接与面向无连接\"><a href=\"#面向有连接与面向无连接\" class=\"headerlink\" title=\"面向有连接与面向无连接\"></a>面向有连接与面向无连接</h3><ul>\n<li>面向有连接<br>面向有连接型，会在发送数据之前与服务器建立一条通信线路，必须要建立连接才能发送数据<br>在通信前会建立连接，在通信后会断开连接</li>\n<li>面向无连接<br>无需建立连接，发送端可以自由发送数据。接收端由于不知道什么时候会收到数据，所以要确认是否收到了数据<br>因此即使接收端不存在或无法接收数据，发送端也能发送数据</li>\n</ul>\n<h3 id=\"电路交换和分组交换\"><a href=\"#电路交换和分组交换\" class=\"headerlink\" title=\"电路交换和分组交换\"></a>电路交换和分组交换</h3><h2 id=\"URI-和-URL\"><a href=\"#URI-和-URL\" class=\"headerlink\" title=\"URI 和 URL\"></a>URI 和 URL</h2>"},{"title":"软件工程","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:59:19.538Z","keywords":null,"description":null,"_content":"\n\n\n# 需求\n## \n# 结构化分析\n# UML\n# 面向对象\n# 编码实现\n# 敏捷开发\n# 软件测试","source":"_posts/计算机基础/软件工程.md","raw":"---\ntitle: 软件工程\ndate: 2023-04-26 15:16\nupdated: 星期一 17日 七月 2023 09:34:04\ntags: []\ncategories: [计算机基础]\nkeywords:\ndescription: \n---\n\n\n\n# 需求\n## \n# 结构化分析\n# UML\n# 面向对象\n# 编码实现\n# 敏捷开发\n# 软件测试","slug":"计算机基础/软件工程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8a0025i4v1h6dq9ync","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"结构化分析\"><a href=\"#结构化分析\" class=\"headerlink\" title=\"结构化分析\"></a>结构化分析</h1><h1 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h1><h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h1 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h1><h1 id=\"敏捷开发\"><a href=\"#敏捷开发\" class=\"headerlink\" title=\"敏捷开发\"></a>敏捷开发</h1><h1 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h1>","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"结构化分析\"><a href=\"#结构化分析\" class=\"headerlink\" title=\"结构化分析\"></a>结构化分析</h1><h1 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h1><h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><h1 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h1><h1 id=\"敏捷开发\"><a href=\"#敏捷开发\" class=\"headerlink\" title=\"敏捷开发\"></a>敏捷开发</h1><h1 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h1>"},{"title":"Springboot后端 + 前端部署流程","date":"2023-06-20T05:19:00.000Z","updated":"2023-09-08T03:57:12.969Z","keywords":null,"description":null,"_content":"\n\n\n# 数据库\n- mysql 版本:5.7 以上\n- 不区分大小写：在\\[mysqlid\\]下加上 `lower_case_table_names=1`\n# 后端\n- 安装 jdk8\n- jar 包运行\n\t- 查看 8080 端口占用：lsof -i:8080\n\t- 杀死进程（PID）：kill -9 {PID}\n\t- nohup 不中断运行：nohup java -jar xxx.jar >> log 2>&1 &\n\t- 在 log 中查看日志\n# 前端\n- nginx 安装包下载：wget http://nginx.org/download/nginx-1.24.0.tar.gz\n- nginx 安装：tar zxvf nginx-1.24.0.tar.gz \n\t- cd nginx-1.24.0\n\t- ./configure && make && make install\n- 将打包好的文件拖到 /usr/local/nginx/html 中\n- 配置：\n```conf\n# 启动nginx压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_comp_level 9;\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6]\\.\";\n    \nserver {\n    listen       8000;\n    server_name  localhost;\n    \n    root\t\t html;\n\t\n    location / {\n         \n\t\t try_files $uri $uri/ /index.html;\n    }\n\t\n\tlocation  /jeecgboot/ {\n\t\t\n\t\tproxy_pass         http://127.0.0.1:8080/jeecg-boot/;\n\t\tproxy_redirect off;\n\t\t\n\t\tproxy_set_header  Host             $host;\n\t\tproxy_set_header  X-Real-IP        $remote_addr;\n\t\tset $my_proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;\n\t\tif ($proxy_add_x_forwarded_for ~* \"127.0.0.1\"){\n\t\t   set $my_proxy_add_x_forwarded_for $remote_addr;\n\t\t}\n\t\tproxy_set_header   X-Forwarded-For $my_proxy_add_x_forwarded_for;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n}\n```\n- 重启配置：./nginx -c /usr/local/nginx/conf/nginx.conf\n- 重新运行：sudo ./nginx -s reload","source":"_posts/项目开发/Springboot后端 + 前端部署流程.md","raw":"---\ntitle: Springboot后端 + 前端部署流程\ndate: 2023-06-20 13:19\nupdated: 星期五 8日 九月 2023 11:56:34\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n\n# 数据库\n- mysql 版本:5.7 以上\n- 不区分大小写：在\\[mysqlid\\]下加上 `lower_case_table_names=1`\n# 后端\n- 安装 jdk8\n- jar 包运行\n\t- 查看 8080 端口占用：lsof -i:8080\n\t- 杀死进程（PID）：kill -9 {PID}\n\t- nohup 不中断运行：nohup java -jar xxx.jar >> log 2>&1 &\n\t- 在 log 中查看日志\n# 前端\n- nginx 安装包下载：wget http://nginx.org/download/nginx-1.24.0.tar.gz\n- nginx 安装：tar zxvf nginx-1.24.0.tar.gz \n\t- cd nginx-1.24.0\n\t- ./configure && make && make install\n- 将打包好的文件拖到 /usr/local/nginx/html 中\n- 配置：\n```conf\n# 启动nginx压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_comp_level 9;\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6]\\.\";\n    \nserver {\n    listen       8000;\n    server_name  localhost;\n    \n    root\t\t html;\n\t\n    location / {\n         \n\t\t try_files $uri $uri/ /index.html;\n    }\n\t\n\tlocation  /jeecgboot/ {\n\t\t\n\t\tproxy_pass         http://127.0.0.1:8080/jeecg-boot/;\n\t\tproxy_redirect off;\n\t\t\n\t\tproxy_set_header  Host             $host;\n\t\tproxy_set_header  X-Real-IP        $remote_addr;\n\t\tset $my_proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;\n\t\tif ($proxy_add_x_forwarded_for ~* \"127.0.0.1\"){\n\t\t   set $my_proxy_add_x_forwarded_for $remote_addr;\n\t\t}\n\t\tproxy_set_header   X-Forwarded-For $my_proxy_add_x_forwarded_for;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n}\n```\n- 重启配置：./nginx -c /usr/local/nginx/conf/nginx.conf\n- 重新运行：sudo ./nginx -s reload","slug":"项目开发/Springboot后端 + 前端部署流程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8b0029i4v1ek7f1uta","content":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li>mysql 版本:5.7 以上</li>\n<li>不区分大小写：在[mysqlid]下加上 <code>lower_case_table_names=1</code></li>\n</ul>\n<h1 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h1><ul>\n<li>安装 jdk8</li>\n<li>jar 包运行<ul>\n<li>查看 8080 端口占用：lsof -i:8080</li>\n<li>杀死进程（PID）：kill -9 {PID}</li>\n<li>nohup 不中断运行：nohup java -jar xxx.jar &gt;&gt; log 2&gt;&amp;1 &amp;</li>\n<li>在 log 中查看日志</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><ul>\n<li>nginx 安装包下载：wget <a href=\"http://nginx.org/download/nginx-1.24.0.tar.gz\">http://nginx.org/download/nginx-1.24.0.tar.gz</a></li>\n<li>nginx 安装：tar zxvf nginx-1.24.0.tar.gz <ul>\n<li>cd nginx-1.24.0</li>\n<li>.&#x2F;configure &amp;&amp; make &amp;&amp; make install</li>\n</ul>\n</li>\n<li>将打包好的文件拖到 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 中</li>\n<li>配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动nginx压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_comp_level 9;</span><br><span class=\"line\">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8000;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    </span><br><span class=\"line\">    root\t\t html;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">\t\t try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlocation  /jeecgboot/ &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy_pass         http://127.0.0.1:8080/jeecg-boot/;</span><br><span class=\"line\">\t\tproxy_redirect off;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy_set_header  Host             $host;</span><br><span class=\"line\">\t\tproxy_set_header  X-Real-IP        $remote_addr;</span><br><span class=\"line\">\t\tset $my_proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">\t\tif ($proxy_add_x_forwarded_for ~* &quot;127.0.0.1&quot;)&#123;</span><br><span class=\"line\">\t\t   set $my_proxy_add_x_forwarded_for $remote_addr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tproxy_set_header   X-Forwarded-For $my_proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>重启配置：.&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</li>\n<li>重新运行：sudo .&#x2F;nginx -s reload</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li>mysql 版本:5.7 以上</li>\n<li>不区分大小写：在[mysqlid]下加上 <code>lower_case_table_names=1</code></li>\n</ul>\n<h1 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h1><ul>\n<li>安装 jdk8</li>\n<li>jar 包运行<ul>\n<li>查看 8080 端口占用：lsof -i:8080</li>\n<li>杀死进程（PID）：kill -9 {PID}</li>\n<li>nohup 不中断运行：nohup java -jar xxx.jar &gt;&gt; log 2&gt;&amp;1 &amp;</li>\n<li>在 log 中查看日志</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><ul>\n<li>nginx 安装包下载：wget <a href=\"http://nginx.org/download/nginx-1.24.0.tar.gz\">http://nginx.org/download/nginx-1.24.0.tar.gz</a></li>\n<li>nginx 安装：tar zxvf nginx-1.24.0.tar.gz <ul>\n<li>cd nginx-1.24.0</li>\n<li>.&#x2F;configure &amp;&amp; make &amp;&amp; make install</li>\n</ul>\n</li>\n<li>将打包好的文件拖到 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 中</li>\n<li>配置：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动nginx压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_comp_level 9;</span><br><span class=\"line\">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8000;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    </span><br><span class=\"line\">    root\t\t html;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">\t\t try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlocation  /jeecgboot/ &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy_pass         http://127.0.0.1:8080/jeecg-boot/;</span><br><span class=\"line\">\t\tproxy_redirect off;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy_set_header  Host             $host;</span><br><span class=\"line\">\t\tproxy_set_header  X-Real-IP        $remote_addr;</span><br><span class=\"line\">\t\tset $my_proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;</span><br><span class=\"line\">\t\tif ($proxy_add_x_forwarded_for ~* &quot;127.0.0.1&quot;)&#123;</span><br><span class=\"line\">\t\t   set $my_proxy_add_x_forwarded_for $remote_addr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tproxy_set_header   X-Forwarded-For $my_proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>重启配置：.&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</li>\n<li>重新运行：sudo .&#x2F;nginx -s reload</li>\n</ul>\n"},{"title":"中医药食堂管理","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:55:50.159Z","keywords":null,"description":null,"_content":"\n\n## 菜品\n- 菜品号(主键)\n- 菜单号(外键)\n- 工序号(外键)\n- 名称\n- 价格\n- 用量(一张菜单有几份这道菜)\n## 工序\n- 工序号(主键)\n- 人员号(外键)\n- 工序名\n- 工序所用时间\n- 开始时间\n- 结束时间\n- 优先级(优先级越高越前)\n## 员工基本信息表\n- 员工号(主键)\n- 姓名\n- 性别\n- 联系方式\n- 工种\n- 是否部门负责人\n- 是否排班\n> 设置员工信息表是主表，排班表是子表\n> 需要点击查看排班弹出排班列表\n## 工种管理\n- 工种ID(主键)\n- 工种类型\n## 排班表\n- 排班ID(主键)\n- 员工ID(外键)\n- 开始时间\n- 开始时间\n> jeecg中不能生成子表的前端页面，要自己写\n> 上面一栏选择时间，下面筛选排班列表\n## 考勤表\n- 考勤ID(主键)\n- 人员ID(外键)\n- 缺勤天数\n- 请假天数\n- 月份\n> 要手动填写\n## 请假管理\n- 请假ID(主键)\n- 员工ID(外键)\n- 请假开始时间\n- 请假结束时间\n- 请假理由\n- 是否通过\n## 配菜\n- 配菜号(主键)\n- 菜品号(外键)\n- 配菜名\n- 用量\n## 物料损耗\n- 损耗号(主键)\n- 工序号(外键)\n- 开始量\n- 结束量\n- 是否确认\n## 未使用物料（库存）\n- 未使用物料号(主键)\n- 员工号(外键)\n- 仓库号(外键)\n- 物料名\n- 单价\n- 单位 \n- 剩余量\n- 入库时间\n- 出库时间\n- 提醒红线\n","source":"_posts/项目开发/中医药食堂管理.md","raw":"---\ntitle: 中医药食堂管理\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:02\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n## 菜品\n- 菜品号(主键)\n- 菜单号(外键)\n- 工序号(外键)\n- 名称\n- 价格\n- 用量(一张菜单有几份这道菜)\n## 工序\n- 工序号(主键)\n- 人员号(外键)\n- 工序名\n- 工序所用时间\n- 开始时间\n- 结束时间\n- 优先级(优先级越高越前)\n## 员工基本信息表\n- 员工号(主键)\n- 姓名\n- 性别\n- 联系方式\n- 工种\n- 是否部门负责人\n- 是否排班\n> 设置员工信息表是主表，排班表是子表\n> 需要点击查看排班弹出排班列表\n## 工种管理\n- 工种ID(主键)\n- 工种类型\n## 排班表\n- 排班ID(主键)\n- 员工ID(外键)\n- 开始时间\n- 开始时间\n> jeecg中不能生成子表的前端页面，要自己写\n> 上面一栏选择时间，下面筛选排班列表\n## 考勤表\n- 考勤ID(主键)\n- 人员ID(外键)\n- 缺勤天数\n- 请假天数\n- 月份\n> 要手动填写\n## 请假管理\n- 请假ID(主键)\n- 员工ID(外键)\n- 请假开始时间\n- 请假结束时间\n- 请假理由\n- 是否通过\n## 配菜\n- 配菜号(主键)\n- 菜品号(外键)\n- 配菜名\n- 用量\n## 物料损耗\n- 损耗号(主键)\n- 工序号(外键)\n- 开始量\n- 结束量\n- 是否确认\n## 未使用物料（库存）\n- 未使用物料号(主键)\n- 员工号(外键)\n- 仓库号(外键)\n- 物料名\n- 单价\n- 单位 \n- 剩余量\n- 入库时间\n- 出库时间\n- 提醒红线\n","slug":"项目开发/中医药食堂管理","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8b002bi4v17q8ba5tj","content":"<h2 id=\"菜品\"><a href=\"#菜品\" class=\"headerlink\" title=\"菜品\"></a>菜品</h2><ul>\n<li>菜品号(主键)</li>\n<li>菜单号(外键)</li>\n<li>工序号(外键)</li>\n<li>名称</li>\n<li>价格</li>\n<li>用量(一张菜单有几份这道菜)</li>\n</ul>\n<h2 id=\"工序\"><a href=\"#工序\" class=\"headerlink\" title=\"工序\"></a>工序</h2><ul>\n<li>工序号(主键)</li>\n<li>人员号(外键)</li>\n<li>工序名</li>\n<li>工序所用时间</li>\n<li>开始时间</li>\n<li>结束时间</li>\n<li>优先级(优先级越高越前)</li>\n</ul>\n<h2 id=\"员工基本信息表\"><a href=\"#员工基本信息表\" class=\"headerlink\" title=\"员工基本信息表\"></a>员工基本信息表</h2><ul>\n<li>员工号(主键)</li>\n<li>姓名</li>\n<li>性别</li>\n<li>联系方式</li>\n<li>工种</li>\n<li>是否部门负责人</li>\n<li>是否排班<blockquote>\n<p>设置员工信息表是主表，排班表是子表<br>需要点击查看排班弹出排班列表</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"工种管理\"><a href=\"#工种管理\" class=\"headerlink\" title=\"工种管理\"></a>工种管理</h2><ul>\n<li>工种ID(主键)</li>\n<li>工种类型</li>\n</ul>\n<h2 id=\"排班表\"><a href=\"#排班表\" class=\"headerlink\" title=\"排班表\"></a>排班表</h2><ul>\n<li>排班ID(主键)</li>\n<li>员工ID(外键)</li>\n<li>开始时间</li>\n<li>开始时间<blockquote>\n<p>jeecg中不能生成子表的前端页面，要自己写<br>上面一栏选择时间，下面筛选排班列表</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"考勤表\"><a href=\"#考勤表\" class=\"headerlink\" title=\"考勤表\"></a>考勤表</h2><ul>\n<li>考勤ID(主键)</li>\n<li>人员ID(外键)</li>\n<li>缺勤天数</li>\n<li>请假天数</li>\n<li>月份<blockquote>\n<p>要手动填写</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"请假管理\"><a href=\"#请假管理\" class=\"headerlink\" title=\"请假管理\"></a>请假管理</h2><ul>\n<li>请假ID(主键)</li>\n<li>员工ID(外键)</li>\n<li>请假开始时间</li>\n<li>请假结束时间</li>\n<li>请假理由</li>\n<li>是否通过</li>\n</ul>\n<h2 id=\"配菜\"><a href=\"#配菜\" class=\"headerlink\" title=\"配菜\"></a>配菜</h2><ul>\n<li>配菜号(主键)</li>\n<li>菜品号(外键)</li>\n<li>配菜名</li>\n<li>用量</li>\n</ul>\n<h2 id=\"物料损耗\"><a href=\"#物料损耗\" class=\"headerlink\" title=\"物料损耗\"></a>物料损耗</h2><ul>\n<li>损耗号(主键)</li>\n<li>工序号(外键)</li>\n<li>开始量</li>\n<li>结束量</li>\n<li>是否确认</li>\n</ul>\n<h2 id=\"未使用物料（库存）\"><a href=\"#未使用物料（库存）\" class=\"headerlink\" title=\"未使用物料（库存）\"></a>未使用物料（库存）</h2><ul>\n<li>未使用物料号(主键)</li>\n<li>员工号(外键)</li>\n<li>仓库号(外键)</li>\n<li>物料名</li>\n<li>单价</li>\n<li>单位 </li>\n<li>剩余量</li>\n<li>入库时间</li>\n<li>出库时间</li>\n<li>提醒红线</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post_cover2.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"菜品\"><a href=\"#菜品\" class=\"headerlink\" title=\"菜品\"></a>菜品</h2><ul>\n<li>菜品号(主键)</li>\n<li>菜单号(外键)</li>\n<li>工序号(外键)</li>\n<li>名称</li>\n<li>价格</li>\n<li>用量(一张菜单有几份这道菜)</li>\n</ul>\n<h2 id=\"工序\"><a href=\"#工序\" class=\"headerlink\" title=\"工序\"></a>工序</h2><ul>\n<li>工序号(主键)</li>\n<li>人员号(外键)</li>\n<li>工序名</li>\n<li>工序所用时间</li>\n<li>开始时间</li>\n<li>结束时间</li>\n<li>优先级(优先级越高越前)</li>\n</ul>\n<h2 id=\"员工基本信息表\"><a href=\"#员工基本信息表\" class=\"headerlink\" title=\"员工基本信息表\"></a>员工基本信息表</h2><ul>\n<li>员工号(主键)</li>\n<li>姓名</li>\n<li>性别</li>\n<li>联系方式</li>\n<li>工种</li>\n<li>是否部门负责人</li>\n<li>是否排班<blockquote>\n<p>设置员工信息表是主表，排班表是子表<br>需要点击查看排班弹出排班列表</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"工种管理\"><a href=\"#工种管理\" class=\"headerlink\" title=\"工种管理\"></a>工种管理</h2><ul>\n<li>工种ID(主键)</li>\n<li>工种类型</li>\n</ul>\n<h2 id=\"排班表\"><a href=\"#排班表\" class=\"headerlink\" title=\"排班表\"></a>排班表</h2><ul>\n<li>排班ID(主键)</li>\n<li>员工ID(外键)</li>\n<li>开始时间</li>\n<li>开始时间<blockquote>\n<p>jeecg中不能生成子表的前端页面，要自己写<br>上面一栏选择时间，下面筛选排班列表</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"考勤表\"><a href=\"#考勤表\" class=\"headerlink\" title=\"考勤表\"></a>考勤表</h2><ul>\n<li>考勤ID(主键)</li>\n<li>人员ID(外键)</li>\n<li>缺勤天数</li>\n<li>请假天数</li>\n<li>月份<blockquote>\n<p>要手动填写</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"请假管理\"><a href=\"#请假管理\" class=\"headerlink\" title=\"请假管理\"></a>请假管理</h2><ul>\n<li>请假ID(主键)</li>\n<li>员工ID(外键)</li>\n<li>请假开始时间</li>\n<li>请假结束时间</li>\n<li>请假理由</li>\n<li>是否通过</li>\n</ul>\n<h2 id=\"配菜\"><a href=\"#配菜\" class=\"headerlink\" title=\"配菜\"></a>配菜</h2><ul>\n<li>配菜号(主键)</li>\n<li>菜品号(外键)</li>\n<li>配菜名</li>\n<li>用量</li>\n</ul>\n<h2 id=\"物料损耗\"><a href=\"#物料损耗\" class=\"headerlink\" title=\"物料损耗\"></a>物料损耗</h2><ul>\n<li>损耗号(主键)</li>\n<li>工序号(外键)</li>\n<li>开始量</li>\n<li>结束量</li>\n<li>是否确认</li>\n</ul>\n<h2 id=\"未使用物料（库存）\"><a href=\"#未使用物料（库存）\" class=\"headerlink\" title=\"未使用物料（库存）\"></a>未使用物料（库存）</h2><ul>\n<li>未使用物料号(主键)</li>\n<li>员工号(外键)</li>\n<li>仓库号(外键)</li>\n<li>物料名</li>\n<li>单价</li>\n<li>单位 </li>\n<li>剩余量</li>\n<li>入库时间</li>\n<li>出库时间</li>\n<li>提醒红线</li>\n</ul>\n"},{"title":"在校学生表和开课明细表的Exel导入的格式","date":"2023-06-20T05:19:00.000Z","updated":"2023-09-14T08:12:43.397Z","keywords":null,"description":null,"_content":"\n\n# 格式说明\n- 标题占两行，字段占一行\n- 标题的内容和格式没有要求，只要保证字段在第三行就行\n> 导入导出的格式保持一致，可以通过导出功能得到前三行的格式\n1. 导入在校学生明细表的字段：\n ![[af8914eae9c2130b45fd4ac61c203e1.png]]\n2. 导入开课明细表的字段：\n![[5e5de841d76197296ed23007b5c5a29.png]]\n- 关于日期字段的导入格式\n```java\n@Excel(name = \"年度\", width = 15, format = \"yyyy-MM-dd\")  \nprivate Date yearly;\n```\n导入的格式保持“yyyy-MM-dd”，否则会导入失败\n例如：2023-01-03\n# 有关外键的字段\n```java\n@Excel(name = \"专业名称\", width = 15, dictTable = \"bd_disciplines\", dicText = \"cname\", dicCode = \"id\")   \nprivate String disciplinesId;\n```\n- 注解作用：能够将名称直接对应到关联表的ID，将名称转化成ID储存进数据库\n- 参数说明：\n\t- name：导入导出的显示在表头的字段名\n\t- dictTable：外键关联的表名\n\t- dictText：导入导出时显示的字段值\n\t- dictCode：在存储到数据库里的值\n- 存在的问题：没办法很好地处理脏数据\n\t- 比如下面有两个脏数据：![[5d602013af0e7a0069e597a7f8901a7.png]]\n\t- 导入之后页面展示的效果是这样的：![[17b6330ecb967e9d62c023e98db5e11.png]]\n\t- 数据库里是这样的：\n\t![[94a8a96071b56f6612e52f23600229d.png]]\n- 操作者是不看数据库的，只看前端的页面也不知道是哪个数据有问题，所以最好是把这两个数据设置成null，这样只要字段值是空的操作者就知道是哪里有问题了再去手动操作，方便操作者修改\n> 补充说明：dept_name_upload和disciplines_name_upload是没有用到的。我和潘时煌一致认为着两个字段有点数据冗余了","source":"_posts/项目开发/在校学生表和开课明细表的Exel导入的格式.md","raw":"---\ntitle: 在校学生表和开课明细表的Exel导入的格式\ndate: 2023-06-20 13:19\nupdated: 星期三 26日 四月 2023 15:18:02\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n# 格式说明\n- 标题占两行，字段占一行\n- 标题的内容和格式没有要求，只要保证字段在第三行就行\n> 导入导出的格式保持一致，可以通过导出功能得到前三行的格式\n1. 导入在校学生明细表的字段：\n ![[af8914eae9c2130b45fd4ac61c203e1.png]]\n2. 导入开课明细表的字段：\n![[5e5de841d76197296ed23007b5c5a29.png]]\n- 关于日期字段的导入格式\n```java\n@Excel(name = \"年度\", width = 15, format = \"yyyy-MM-dd\")  \nprivate Date yearly;\n```\n导入的格式保持“yyyy-MM-dd”，否则会导入失败\n例如：2023-01-03\n# 有关外键的字段\n```java\n@Excel(name = \"专业名称\", width = 15, dictTable = \"bd_disciplines\", dicText = \"cname\", dicCode = \"id\")   \nprivate String disciplinesId;\n```\n- 注解作用：能够将名称直接对应到关联表的ID，将名称转化成ID储存进数据库\n- 参数说明：\n\t- name：导入导出的显示在表头的字段名\n\t- dictTable：外键关联的表名\n\t- dictText：导入导出时显示的字段值\n\t- dictCode：在存储到数据库里的值\n- 存在的问题：没办法很好地处理脏数据\n\t- 比如下面有两个脏数据：![[5d602013af0e7a0069e597a7f8901a7.png]]\n\t- 导入之后页面展示的效果是这样的：![[17b6330ecb967e9d62c023e98db5e11.png]]\n\t- 数据库里是这样的：\n\t![[94a8a96071b56f6612e52f23600229d.png]]\n- 操作者是不看数据库的，只看前端的页面也不知道是哪个数据有问题，所以最好是把这两个数据设置成null，这样只要字段值是空的操作者就知道是哪里有问题了再去手动操作，方便操作者修改\n> 补充说明：dept_name_upload和disciplines_name_upload是没有用到的。我和潘时煌一致认为着两个字段有点数据冗余了","slug":"项目开发/在校学生表和开课明细表的Exel导入的格式","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8c002ei4v17v70dsg8","content":"<h1 id=\"格式说明\"><a href=\"#格式说明\" class=\"headerlink\" title=\"格式说明\"></a>格式说明</h1><ul>\n<li>标题占两行，字段占一行</li>\n<li>标题的内容和格式没有要求，只要保证字段在第三行就行<blockquote>\n<p>导入导出的格式保持一致，可以通过导出功能得到前三行的格式</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>导入在校学生明细表的字段：<br> ![[af8914eae9c2130b45fd4ac61c203e1.png]]</li>\n<li>导入开课明细表的字段：<br>![[5e5de841d76197296ed23007b5c5a29.png]]</li>\n</ol>\n<ul>\n<li>关于日期字段的导入格式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Excel(name = &quot;年度&quot;, width = 15, format = &quot;yyyy-MM-dd&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> Date yearly;</span><br></pre></td></tr></table></figure>\n导入的格式保持“yyyy-MM-dd”，否则会导入失败<br>例如：2023-01-03</li>\n</ul>\n<h1 id=\"有关外键的字段\"><a href=\"#有关外键的字段\" class=\"headerlink\" title=\"有关外键的字段\"></a>有关外键的字段</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Excel(name = &quot;专业名称&quot;, width = 15, dictTable = &quot;bd_disciplines&quot;, dicText = &quot;cname&quot;, dicCode = &quot;id&quot;)</span>   </span><br><span class=\"line\"><span class=\"keyword\">private</span> String disciplinesId;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注解作用：能够将名称直接对应到关联表的ID，将名称转化成ID储存进数据库</li>\n<li>参数说明：<ul>\n<li>name：导入导出的显示在表头的字段名</li>\n<li>dictTable：外键关联的表名</li>\n<li>dictText：导入导出时显示的字段值</li>\n<li>dictCode：在存储到数据库里的值</li>\n</ul>\n</li>\n<li>存在的问题：没办法很好地处理脏数据<ul>\n<li>比如下面有两个脏数据：![[5d602013af0e7a0069e597a7f8901a7.png]]</li>\n<li>导入之后页面展示的效果是这样的：![[17b6330ecb967e9d62c023e98db5e11.png]]</li>\n<li>数据库里是这样的：<br>  ![[94a8a96071b56f6612e52f23600229d.png]]</li>\n</ul>\n</li>\n<li>操作者是不看数据库的，只看前端的页面也不知道是哪个数据有问题，所以最好是把这两个数据设置成null，这样只要字段值是空的操作者就知道是哪里有问题了再去手动操作，方便操作者修改<blockquote>\n<p>补充说明：dept_name_upload和disciplines_name_upload是没有用到的。我和潘时煌一致认为着两个字段有点数据冗余了</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"格式说明\"><a href=\"#格式说明\" class=\"headerlink\" title=\"格式说明\"></a>格式说明</h1><ul>\n<li>标题占两行，字段占一行</li>\n<li>标题的内容和格式没有要求，只要保证字段在第三行就行<blockquote>\n<p>导入导出的格式保持一致，可以通过导出功能得到前三行的格式</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>导入在校学生明细表的字段：<br> ![[af8914eae9c2130b45fd4ac61c203e1.png]]</li>\n<li>导入开课明细表的字段：<br>![[5e5de841d76197296ed23007b5c5a29.png]]</li>\n</ol>\n<ul>\n<li>关于日期字段的导入格式<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Excel(name = &quot;年度&quot;, width = 15, format = &quot;yyyy-MM-dd&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> Date yearly;</span><br></pre></td></tr></table></figure>\n导入的格式保持“yyyy-MM-dd”，否则会导入失败<br>例如：2023-01-03</li>\n</ul>\n<h1 id=\"有关外键的字段\"><a href=\"#有关外键的字段\" class=\"headerlink\" title=\"有关外键的字段\"></a>有关外键的字段</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Excel(name = &quot;专业名称&quot;, width = 15, dictTable = &quot;bd_disciplines&quot;, dicText = &quot;cname&quot;, dicCode = &quot;id&quot;)</span>   </span><br><span class=\"line\"><span class=\"keyword\">private</span> String disciplinesId;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注解作用：能够将名称直接对应到关联表的ID，将名称转化成ID储存进数据库</li>\n<li>参数说明：<ul>\n<li>name：导入导出的显示在表头的字段名</li>\n<li>dictTable：外键关联的表名</li>\n<li>dictText：导入导出时显示的字段值</li>\n<li>dictCode：在存储到数据库里的值</li>\n</ul>\n</li>\n<li>存在的问题：没办法很好地处理脏数据<ul>\n<li>比如下面有两个脏数据：![[5d602013af0e7a0069e597a7f8901a7.png]]</li>\n<li>导入之后页面展示的效果是这样的：![[17b6330ecb967e9d62c023e98db5e11.png]]</li>\n<li>数据库里是这样的：<br>  ![[94a8a96071b56f6612e52f23600229d.png]]</li>\n</ul>\n</li>\n<li>操作者是不看数据库的，只看前端的页面也不知道是哪个数据有问题，所以最好是把这两个数据设置成null，这样只要字段值是空的操作者就知道是哪里有问题了再去手动操作，方便操作者修改<blockquote>\n<p>补充说明：dept_name_upload和disciplines_name_upload是没有用到的。我和潘时煌一致认为着两个字段有点数据冗余了</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"面向制造业企业的进销存与成本管理系统","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:56:04.492Z","keywords":null,"description":null,"_content":"\n\n\n# PC端功能模块设计\n## 企业组织架构管理\n### 角色管理\n- 有财务主管、会计、出纳、系统管理员等\n- 操作：设置权限，增删改查\n### 用户管理\n- 设置角色，姓名，年龄，性别，部门，职务等信息\n- 操作：增删改查\n### 菜单管理\n- 管理员权限，设置菜单路由\n- 操作：增删改查\n### 部门管理\n- 树状结构\n- 操作：增删改查\n### 我的部门\n- 根据当前登录的用户来显示对应的部门\n- 操作：增删改查\n### 职务管理\n- 根据公司的组织架构来决定\n- 操作：增删改查\n## 员工管理\n### 工种管理\n- 企业自定义工种，比如送货员、焊接工、维修工\n### 人员基本信息\n- 性别、姓名、联系方式，工种，部门，是否部门负责人\n- 操作：增删改查，查看考勤，修改考勤\n### 人员考勤\n- 按月份显示人员列表，请假天数，缺勤天数\n- 操作：按月份查找，增删改查，\n### 请假管理\n- 请假人，请假理由，是否通过\n- 操作：增删改查\n## 采购管理\n- 一份订单有四个状态，未审批，已审批，已导出，已入库，根据这四个来决定在哪个功能模块显示。这里的导出订单和验收入库功能相当于财务机器人，即使这里的财务机器人很不成熟，也可以作为该系统的一大亮点和创新点\n### 采购价格管理\n- 采购的明细项目，如铆钉，轮子，钢筋等，规格、单位、单价、供应商\n- 操作：增删改查\n### 产品BOM\n- 指生产一件产品所需要的材料的明细单\n- 操作：增删改查\n### 生成采购订单（根据采购价格和BOM）\n- 根据要生产的产品数量和上面BOM单的信息，来确定要采购的订单，最终生成的采购订单的数量是根据BOM单内供应商的数量\n- 订单状态：所有的采购订单\n- 操作：生成采购订单，修改采购订单\n### 采购审批\n- 在生成之后的采购订单会在这里显示\n- 订单状态：未审批的订单\n- 操作：通过，删除生成的订单，修改\n### 导出采购订单\n- 根据采购订单的信息，和Exel模板来导出采购订单，Exel模板可以自定义\n- 订单状态：已审批的订单\n- 操作：取消审批会回退到采购审批，想要删除在采购审批删除；选择对应的记录来导出采购订单，并且打印全部订单。\n### 导出入库单\n- 选择采购记录，点击导出入库订单后要求填写仓库名和存放位置，之后生成入库单（excel格式，可以打印）并且一条填写完存放位置后保持填写窗口继续填写，保证效率\n- 订单状态：已导出的订单\n### 验收入库\n- 根据导出入库单模块生成的入库单来导入excel，实现入库\n- 但可能不是所有的原材料入库都是通过采购订单的方式来实现的，因此有第二种方法录入：根据发票OCR识别录入，这里只做简单的识别，发票的模板可能各式各样会影响识别结果，因此准确率不高，时间和能力有限不准备优化，能把固定的一套模板发票录入即可。注意：导入的发票是没有仓库的信息的，要自己手动录入\n- 第三种方法:可以手动录入，来应对第二种情况不准确\n- 列表显示操作记录：操作方式（人工、财务机器人），入库材料，数量，含税金额，不含税金额，存放的仓库信息等\n- 操作：增删改查，导入入库单，导入发票，手动修改\n### 供应商管理\n- 地点，联系人，联系人电话，备注等\n- 操作：增删改查 \n## 销售管理\n- 订单的两个状态：是否出库，是否送达\n### 订单管理\n- 填写订单基本信息，订单与产品之间是一对多的关系，订单是主表，产品是附表，一条订单记录包含多个商品。采购订单的数据库设计也是类似\n- 订单状态：全部\n- 操作：增删改查\n### 导出订单\n- 根据销售订单的信息，和Exel模板来导出销售订单，Exel模板可以自定义\n- 订单状态：未出库\n- 操作：选择对应的记录来导出销售订单，可以筛选已导出的订单和未生成的订单，也可以删除订单\n### 生成出库二维码\n- 根据订单附表信息打印产品出库二维码，这里对应到产品上的，导出订单但是对应到订单上的，不能混淆\n- 订单状态：未出库\n- 操作: 增删改查，打印二维码\n### 出库管理\n- PC端操作：可以手动填写出库记录\n- 小程序端操作：扫描二维码，增加一条记录，实现出库\n- 出库后，根据附表下的商品明细，来减少商品的库存\n- 订单状态： 已出库\n### 送货管理\n- 这里的功能暂且是简单的手动填写是否送到，校赛过了后再去考虑增加物联网功能并且和小程序联动，司机接收订单，显示位置，是否送达\n- 订单状态：已出库，未送达\n### 客户管理\n- 客户的基本信息\n- 操作：增删改查\n## 仓库管理\n### 库位管理\n- 仓库的基本信息，仓库名：如半成品库、原材料库、成品库等；货架号：自定义；层数：货架层数：数字，一共有几层。手动录入太麻烦，excel直接导入\n- 操作：增删改查，excel导入\n### 原材料盘点\n#### 原材料库位盘点\n- 显示仓库库位上存放的原材料\n- 以列表显示\n#### 原材料数量盘点\n- 显示原材料数量\n- 以柱状图或列表显示\n### 原材料盘亏盘盈\n- 录入月份和盘亏\\盘盈的原材料和数量，填写盘亏\\盘盈原因\n### 产品盘点\n#### 产品库位盘点\n- 显示仓库库位上存放的产品\n- 以列表显示\n#### 产品数量盘点\n- 显示产品数量\n- 以柱状图或列表显示\n### 产品盘亏盘盈\n- 录入月份和盘亏\\盘盈的产品和数量，填写盘亏\\盘盈原因\n## 生产管理\n### 生产入库\n- PC端：手动填写产品入库单\n- 小程序端：扫描入库二维码，增加一条记录，实现入库\n- 操作：增删改查\n### 产品生产流程\n- 暂且只采用一种成本计算方法，综合结转分布法不按仓库收发，产品对结转路劲是一对多的关系。一个产品对应多条结转记录，填写每条结转路径的名称、在产品完工程度\n### 人工费用管理\n- 所属的产品，生产路径，单位工时（元/小时）\n### 固定制造费用管理\n- 因为固定制造费用和变动制造费用的成本计算方式不同，所以分开\n- 固定资产名：如机器，设备，厂房\n### 变动制造费用管理\n### 成本报表\n- 所有产品的可视化报表，纵坐标产品的成本，横坐标是产品名\n- 单个产品的成本组成，分成直接材料、直接人工、制造费用的饼图\n## 本量利分析\n### 保本点分析\n### 利润预测分析\n## 经营决策\n### 生产决策\n### 定价决策\n## 预测分析\n### 销售预测分析\n### 成本预测分析\n### 资金预测分析\n## 智能报表\n### 销售收入统计\n- 根据销售订单，权责发生制来确认收入。在销售管理-送货管理确认到货了才确认一笔收入\n### 采购统计分析\n- 采购数量报表，饼图和柱状图\n### 库存统计分析\n- 这里是产品库存统计不是原材料，若产品入库后很长时间没有出库，会有显示库存积压\n- 展现的形式有图形化（饼图和柱状图）；也有列表（显示仓库库位上存放的产品，会多出来一列显示库存积压）\n### 生存销售监控大屏\n- 已经有模板了\n### 智慧物流生产大屏\n- 已经有模板了\n## 绩效评价\n### 平衡计分卡","source":"_posts/项目开发/面向制造业企业的进销存与成本管理系统.md","raw":"---\ntitle: 面向制造业企业的进销存与成本管理系统\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:02\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n\n# PC端功能模块设计\n## 企业组织架构管理\n### 角色管理\n- 有财务主管、会计、出纳、系统管理员等\n- 操作：设置权限，增删改查\n### 用户管理\n- 设置角色，姓名，年龄，性别，部门，职务等信息\n- 操作：增删改查\n### 菜单管理\n- 管理员权限，设置菜单路由\n- 操作：增删改查\n### 部门管理\n- 树状结构\n- 操作：增删改查\n### 我的部门\n- 根据当前登录的用户来显示对应的部门\n- 操作：增删改查\n### 职务管理\n- 根据公司的组织架构来决定\n- 操作：增删改查\n## 员工管理\n### 工种管理\n- 企业自定义工种，比如送货员、焊接工、维修工\n### 人员基本信息\n- 性别、姓名、联系方式，工种，部门，是否部门负责人\n- 操作：增删改查，查看考勤，修改考勤\n### 人员考勤\n- 按月份显示人员列表，请假天数，缺勤天数\n- 操作：按月份查找，增删改查，\n### 请假管理\n- 请假人，请假理由，是否通过\n- 操作：增删改查\n## 采购管理\n- 一份订单有四个状态，未审批，已审批，已导出，已入库，根据这四个来决定在哪个功能模块显示。这里的导出订单和验收入库功能相当于财务机器人，即使这里的财务机器人很不成熟，也可以作为该系统的一大亮点和创新点\n### 采购价格管理\n- 采购的明细项目，如铆钉，轮子，钢筋等，规格、单位、单价、供应商\n- 操作：增删改查\n### 产品BOM\n- 指生产一件产品所需要的材料的明细单\n- 操作：增删改查\n### 生成采购订单（根据采购价格和BOM）\n- 根据要生产的产品数量和上面BOM单的信息，来确定要采购的订单，最终生成的采购订单的数量是根据BOM单内供应商的数量\n- 订单状态：所有的采购订单\n- 操作：生成采购订单，修改采购订单\n### 采购审批\n- 在生成之后的采购订单会在这里显示\n- 订单状态：未审批的订单\n- 操作：通过，删除生成的订单，修改\n### 导出采购订单\n- 根据采购订单的信息，和Exel模板来导出采购订单，Exel模板可以自定义\n- 订单状态：已审批的订单\n- 操作：取消审批会回退到采购审批，想要删除在采购审批删除；选择对应的记录来导出采购订单，并且打印全部订单。\n### 导出入库单\n- 选择采购记录，点击导出入库订单后要求填写仓库名和存放位置，之后生成入库单（excel格式，可以打印）并且一条填写完存放位置后保持填写窗口继续填写，保证效率\n- 订单状态：已导出的订单\n### 验收入库\n- 根据导出入库单模块生成的入库单来导入excel，实现入库\n- 但可能不是所有的原材料入库都是通过采购订单的方式来实现的，因此有第二种方法录入：根据发票OCR识别录入，这里只做简单的识别，发票的模板可能各式各样会影响识别结果，因此准确率不高，时间和能力有限不准备优化，能把固定的一套模板发票录入即可。注意：导入的发票是没有仓库的信息的，要自己手动录入\n- 第三种方法:可以手动录入，来应对第二种情况不准确\n- 列表显示操作记录：操作方式（人工、财务机器人），入库材料，数量，含税金额，不含税金额，存放的仓库信息等\n- 操作：增删改查，导入入库单，导入发票，手动修改\n### 供应商管理\n- 地点，联系人，联系人电话，备注等\n- 操作：增删改查 \n## 销售管理\n- 订单的两个状态：是否出库，是否送达\n### 订单管理\n- 填写订单基本信息，订单与产品之间是一对多的关系，订单是主表，产品是附表，一条订单记录包含多个商品。采购订单的数据库设计也是类似\n- 订单状态：全部\n- 操作：增删改查\n### 导出订单\n- 根据销售订单的信息，和Exel模板来导出销售订单，Exel模板可以自定义\n- 订单状态：未出库\n- 操作：选择对应的记录来导出销售订单，可以筛选已导出的订单和未生成的订单，也可以删除订单\n### 生成出库二维码\n- 根据订单附表信息打印产品出库二维码，这里对应到产品上的，导出订单但是对应到订单上的，不能混淆\n- 订单状态：未出库\n- 操作: 增删改查，打印二维码\n### 出库管理\n- PC端操作：可以手动填写出库记录\n- 小程序端操作：扫描二维码，增加一条记录，实现出库\n- 出库后，根据附表下的商品明细，来减少商品的库存\n- 订单状态： 已出库\n### 送货管理\n- 这里的功能暂且是简单的手动填写是否送到，校赛过了后再去考虑增加物联网功能并且和小程序联动，司机接收订单，显示位置，是否送达\n- 订单状态：已出库，未送达\n### 客户管理\n- 客户的基本信息\n- 操作：增删改查\n## 仓库管理\n### 库位管理\n- 仓库的基本信息，仓库名：如半成品库、原材料库、成品库等；货架号：自定义；层数：货架层数：数字，一共有几层。手动录入太麻烦，excel直接导入\n- 操作：增删改查，excel导入\n### 原材料盘点\n#### 原材料库位盘点\n- 显示仓库库位上存放的原材料\n- 以列表显示\n#### 原材料数量盘点\n- 显示原材料数量\n- 以柱状图或列表显示\n### 原材料盘亏盘盈\n- 录入月份和盘亏\\盘盈的原材料和数量，填写盘亏\\盘盈原因\n### 产品盘点\n#### 产品库位盘点\n- 显示仓库库位上存放的产品\n- 以列表显示\n#### 产品数量盘点\n- 显示产品数量\n- 以柱状图或列表显示\n### 产品盘亏盘盈\n- 录入月份和盘亏\\盘盈的产品和数量，填写盘亏\\盘盈原因\n## 生产管理\n### 生产入库\n- PC端：手动填写产品入库单\n- 小程序端：扫描入库二维码，增加一条记录，实现入库\n- 操作：增删改查\n### 产品生产流程\n- 暂且只采用一种成本计算方法，综合结转分布法不按仓库收发，产品对结转路劲是一对多的关系。一个产品对应多条结转记录，填写每条结转路径的名称、在产品完工程度\n### 人工费用管理\n- 所属的产品，生产路径，单位工时（元/小时）\n### 固定制造费用管理\n- 因为固定制造费用和变动制造费用的成本计算方式不同，所以分开\n- 固定资产名：如机器，设备，厂房\n### 变动制造费用管理\n### 成本报表\n- 所有产品的可视化报表，纵坐标产品的成本，横坐标是产品名\n- 单个产品的成本组成，分成直接材料、直接人工、制造费用的饼图\n## 本量利分析\n### 保本点分析\n### 利润预测分析\n## 经营决策\n### 生产决策\n### 定价决策\n## 预测分析\n### 销售预测分析\n### 成本预测分析\n### 资金预测分析\n## 智能报表\n### 销售收入统计\n- 根据销售订单，权责发生制来确认收入。在销售管理-送货管理确认到货了才确认一笔收入\n### 采购统计分析\n- 采购数量报表，饼图和柱状图\n### 库存统计分析\n- 这里是产品库存统计不是原材料，若产品入库后很长时间没有出库，会有显示库存积压\n- 展现的形式有图形化（饼图和柱状图）；也有列表（显示仓库库位上存放的产品，会多出来一列显示库存积压）\n### 生存销售监控大屏\n- 已经有模板了\n### 智慧物流生产大屏\n- 已经有模板了\n## 绩效评价\n### 平衡计分卡","slug":"项目开发/面向制造业企业的进销存与成本管理系统","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8n003di4v12i161vcb","content":"<h1 id=\"PC端功能模块设计\"><a href=\"#PC端功能模块设计\" class=\"headerlink\" title=\"PC端功能模块设计\"></a>PC端功能模块设计</h1><h2 id=\"企业组织架构管理\"><a href=\"#企业组织架构管理\" class=\"headerlink\" title=\"企业组织架构管理\"></a>企业组织架构管理</h2><h3 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h3><ul>\n<li>有财务主管、会计、出纳、系统管理员等</li>\n<li>操作：设置权限，增删改查</li>\n</ul>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>设置角色，姓名，年龄，性别，部门，职务等信息</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"菜单管理\"><a href=\"#菜单管理\" class=\"headerlink\" title=\"菜单管理\"></a>菜单管理</h3><ul>\n<li>管理员权限，设置菜单路由</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"部门管理\"><a href=\"#部门管理\" class=\"headerlink\" title=\"部门管理\"></a>部门管理</h3><ul>\n<li>树状结构</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"我的部门\"><a href=\"#我的部门\" class=\"headerlink\" title=\"我的部门\"></a>我的部门</h3><ul>\n<li>根据当前登录的用户来显示对应的部门</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"职务管理\"><a href=\"#职务管理\" class=\"headerlink\" title=\"职务管理\"></a>职务管理</h3><ul>\n<li>根据公司的组织架构来决定</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"员工管理\"><a href=\"#员工管理\" class=\"headerlink\" title=\"员工管理\"></a>员工管理</h2><h3 id=\"工种管理\"><a href=\"#工种管理\" class=\"headerlink\" title=\"工种管理\"></a>工种管理</h3><ul>\n<li>企业自定义工种，比如送货员、焊接工、维修工</li>\n</ul>\n<h3 id=\"人员基本信息\"><a href=\"#人员基本信息\" class=\"headerlink\" title=\"人员基本信息\"></a>人员基本信息</h3><ul>\n<li>性别、姓名、联系方式，工种，部门，是否部门负责人</li>\n<li>操作：增删改查，查看考勤，修改考勤</li>\n</ul>\n<h3 id=\"人员考勤\"><a href=\"#人员考勤\" class=\"headerlink\" title=\"人员考勤\"></a>人员考勤</h3><ul>\n<li>按月份显示人员列表，请假天数，缺勤天数</li>\n<li>操作：按月份查找，增删改查，</li>\n</ul>\n<h3 id=\"请假管理\"><a href=\"#请假管理\" class=\"headerlink\" title=\"请假管理\"></a>请假管理</h3><ul>\n<li>请假人，请假理由，是否通过</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"采购管理\"><a href=\"#采购管理\" class=\"headerlink\" title=\"采购管理\"></a>采购管理</h2><ul>\n<li>一份订单有四个状态，未审批，已审批，已导出，已入库，根据这四个来决定在哪个功能模块显示。这里的导出订单和验收入库功能相当于财务机器人，即使这里的财务机器人很不成熟，也可以作为该系统的一大亮点和创新点</li>\n</ul>\n<h3 id=\"采购价格管理\"><a href=\"#采购价格管理\" class=\"headerlink\" title=\"采购价格管理\"></a>采购价格管理</h3><ul>\n<li>采购的明细项目，如铆钉，轮子，钢筋等，规格、单位、单价、供应商</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"产品BOM\"><a href=\"#产品BOM\" class=\"headerlink\" title=\"产品BOM\"></a>产品BOM</h3><ul>\n<li>指生产一件产品所需要的材料的明细单</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"生成采购订单（根据采购价格和BOM）\"><a href=\"#生成采购订单（根据采购价格和BOM）\" class=\"headerlink\" title=\"生成采购订单（根据采购价格和BOM）\"></a>生成采购订单（根据采购价格和BOM）</h3><ul>\n<li>根据要生产的产品数量和上面BOM单的信息，来确定要采购的订单，最终生成的采购订单的数量是根据BOM单内供应商的数量</li>\n<li>订单状态：所有的采购订单</li>\n<li>操作：生成采购订单，修改采购订单</li>\n</ul>\n<h3 id=\"采购审批\"><a href=\"#采购审批\" class=\"headerlink\" title=\"采购审批\"></a>采购审批</h3><ul>\n<li>在生成之后的采购订单会在这里显示</li>\n<li>订单状态：未审批的订单</li>\n<li>操作：通过，删除生成的订单，修改</li>\n</ul>\n<h3 id=\"导出采购订单\"><a href=\"#导出采购订单\" class=\"headerlink\" title=\"导出采购订单\"></a>导出采购订单</h3><ul>\n<li>根据采购订单的信息，和Exel模板来导出采购订单，Exel模板可以自定义</li>\n<li>订单状态：已审批的订单</li>\n<li>操作：取消审批会回退到采购审批，想要删除在采购审批删除；选择对应的记录来导出采购订单，并且打印全部订单。</li>\n</ul>\n<h3 id=\"导出入库单\"><a href=\"#导出入库单\" class=\"headerlink\" title=\"导出入库单\"></a>导出入库单</h3><ul>\n<li>选择采购记录，点击导出入库订单后要求填写仓库名和存放位置，之后生成入库单（excel格式，可以打印）并且一条填写完存放位置后保持填写窗口继续填写，保证效率</li>\n<li>订单状态：已导出的订单</li>\n</ul>\n<h3 id=\"验收入库\"><a href=\"#验收入库\" class=\"headerlink\" title=\"验收入库\"></a>验收入库</h3><ul>\n<li>根据导出入库单模块生成的入库单来导入excel，实现入库</li>\n<li>但可能不是所有的原材料入库都是通过采购订单的方式来实现的，因此有第二种方法录入：根据发票OCR识别录入，这里只做简单的识别，发票的模板可能各式各样会影响识别结果，因此准确率不高，时间和能力有限不准备优化，能把固定的一套模板发票录入即可。注意：导入的发票是没有仓库的信息的，要自己手动录入</li>\n<li>第三种方法:可以手动录入，来应对第二种情况不准确</li>\n<li>列表显示操作记录：操作方式（人工、财务机器人），入库材料，数量，含税金额，不含税金额，存放的仓库信息等</li>\n<li>操作：增删改查，导入入库单，导入发票，手动修改</li>\n</ul>\n<h3 id=\"供应商管理\"><a href=\"#供应商管理\" class=\"headerlink\" title=\"供应商管理\"></a>供应商管理</h3><ul>\n<li>地点，联系人，联系人电话，备注等</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"销售管理\"><a href=\"#销售管理\" class=\"headerlink\" title=\"销售管理\"></a>销售管理</h2><ul>\n<li>订单的两个状态：是否出库，是否送达</li>\n</ul>\n<h3 id=\"订单管理\"><a href=\"#订单管理\" class=\"headerlink\" title=\"订单管理\"></a>订单管理</h3><ul>\n<li>填写订单基本信息，订单与产品之间是一对多的关系，订单是主表，产品是附表，一条订单记录包含多个商品。采购订单的数据库设计也是类似</li>\n<li>订单状态：全部</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"导出订单\"><a href=\"#导出订单\" class=\"headerlink\" title=\"导出订单\"></a>导出订单</h3><ul>\n<li>根据销售订单的信息，和Exel模板来导出销售订单，Exel模板可以自定义</li>\n<li>订单状态：未出库</li>\n<li>操作：选择对应的记录来导出销售订单，可以筛选已导出的订单和未生成的订单，也可以删除订单</li>\n</ul>\n<h3 id=\"生成出库二维码\"><a href=\"#生成出库二维码\" class=\"headerlink\" title=\"生成出库二维码\"></a>生成出库二维码</h3><ul>\n<li>根据订单附表信息打印产品出库二维码，这里对应到产品上的，导出订单但是对应到订单上的，不能混淆</li>\n<li>订单状态：未出库</li>\n<li>操作: 增删改查，打印二维码</li>\n</ul>\n<h3 id=\"出库管理\"><a href=\"#出库管理\" class=\"headerlink\" title=\"出库管理\"></a>出库管理</h3><ul>\n<li>PC端操作：可以手动填写出库记录</li>\n<li>小程序端操作：扫描二维码，增加一条记录，实现出库</li>\n<li>出库后，根据附表下的商品明细，来减少商品的库存</li>\n<li>订单状态： 已出库</li>\n</ul>\n<h3 id=\"送货管理\"><a href=\"#送货管理\" class=\"headerlink\" title=\"送货管理\"></a>送货管理</h3><ul>\n<li>这里的功能暂且是简单的手动填写是否送到，校赛过了后再去考虑增加物联网功能并且和小程序联动，司机接收订单，显示位置，是否送达</li>\n<li>订单状态：已出库，未送达</li>\n</ul>\n<h3 id=\"客户管理\"><a href=\"#客户管理\" class=\"headerlink\" title=\"客户管理\"></a>客户管理</h3><ul>\n<li>客户的基本信息</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"仓库管理\"><a href=\"#仓库管理\" class=\"headerlink\" title=\"仓库管理\"></a>仓库管理</h2><h3 id=\"库位管理\"><a href=\"#库位管理\" class=\"headerlink\" title=\"库位管理\"></a>库位管理</h3><ul>\n<li>仓库的基本信息，仓库名：如半成品库、原材料库、成品库等；货架号：自定义；层数：货架层数：数字，一共有几层。手动录入太麻烦，excel直接导入</li>\n<li>操作：增删改查，excel导入</li>\n</ul>\n<h3 id=\"原材料盘点\"><a href=\"#原材料盘点\" class=\"headerlink\" title=\"原材料盘点\"></a>原材料盘点</h3><h4 id=\"原材料库位盘点\"><a href=\"#原材料库位盘点\" class=\"headerlink\" title=\"原材料库位盘点\"></a>原材料库位盘点</h4><ul>\n<li>显示仓库库位上存放的原材料</li>\n<li>以列表显示</li>\n</ul>\n<h4 id=\"原材料数量盘点\"><a href=\"#原材料数量盘点\" class=\"headerlink\" title=\"原材料数量盘点\"></a>原材料数量盘点</h4><ul>\n<li>显示原材料数量</li>\n<li>以柱状图或列表显示</li>\n</ul>\n<h3 id=\"原材料盘亏盘盈\"><a href=\"#原材料盘亏盘盈\" class=\"headerlink\" title=\"原材料盘亏盘盈\"></a>原材料盘亏盘盈</h3><ul>\n<li>录入月份和盘亏\\盘盈的原材料和数量，填写盘亏\\盘盈原因</li>\n</ul>\n<h3 id=\"产品盘点\"><a href=\"#产品盘点\" class=\"headerlink\" title=\"产品盘点\"></a>产品盘点</h3><h4 id=\"产品库位盘点\"><a href=\"#产品库位盘点\" class=\"headerlink\" title=\"产品库位盘点\"></a>产品库位盘点</h4><ul>\n<li>显示仓库库位上存放的产品</li>\n<li>以列表显示</li>\n</ul>\n<h4 id=\"产品数量盘点\"><a href=\"#产品数量盘点\" class=\"headerlink\" title=\"产品数量盘点\"></a>产品数量盘点</h4><ul>\n<li>显示产品数量</li>\n<li>以柱状图或列表显示</li>\n</ul>\n<h3 id=\"产品盘亏盘盈\"><a href=\"#产品盘亏盘盈\" class=\"headerlink\" title=\"产品盘亏盘盈\"></a>产品盘亏盘盈</h3><ul>\n<li>录入月份和盘亏\\盘盈的产品和数量，填写盘亏\\盘盈原因</li>\n</ul>\n<h2 id=\"生产管理\"><a href=\"#生产管理\" class=\"headerlink\" title=\"生产管理\"></a>生产管理</h2><h3 id=\"生产入库\"><a href=\"#生产入库\" class=\"headerlink\" title=\"生产入库\"></a>生产入库</h3><ul>\n<li>PC端：手动填写产品入库单</li>\n<li>小程序端：扫描入库二维码，增加一条记录，实现入库</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"产品生产流程\"><a href=\"#产品生产流程\" class=\"headerlink\" title=\"产品生产流程\"></a>产品生产流程</h3><ul>\n<li>暂且只采用一种成本计算方法，综合结转分布法不按仓库收发，产品对结转路劲是一对多的关系。一个产品对应多条结转记录，填写每条结转路径的名称、在产品完工程度</li>\n</ul>\n<h3 id=\"人工费用管理\"><a href=\"#人工费用管理\" class=\"headerlink\" title=\"人工费用管理\"></a>人工费用管理</h3><ul>\n<li>所属的产品，生产路径，单位工时（元&#x2F;小时）</li>\n</ul>\n<h3 id=\"固定制造费用管理\"><a href=\"#固定制造费用管理\" class=\"headerlink\" title=\"固定制造费用管理\"></a>固定制造费用管理</h3><ul>\n<li>因为固定制造费用和变动制造费用的成本计算方式不同，所以分开</li>\n<li>固定资产名：如机器，设备，厂房</li>\n</ul>\n<h3 id=\"变动制造费用管理\"><a href=\"#变动制造费用管理\" class=\"headerlink\" title=\"变动制造费用管理\"></a>变动制造费用管理</h3><h3 id=\"成本报表\"><a href=\"#成本报表\" class=\"headerlink\" title=\"成本报表\"></a>成本报表</h3><ul>\n<li>所有产品的可视化报表，纵坐标产品的成本，横坐标是产品名</li>\n<li>单个产品的成本组成，分成直接材料、直接人工、制造费用的饼图</li>\n</ul>\n<h2 id=\"本量利分析\"><a href=\"#本量利分析\" class=\"headerlink\" title=\"本量利分析\"></a>本量利分析</h2><h3 id=\"保本点分析\"><a href=\"#保本点分析\" class=\"headerlink\" title=\"保本点分析\"></a>保本点分析</h3><h3 id=\"利润预测分析\"><a href=\"#利润预测分析\" class=\"headerlink\" title=\"利润预测分析\"></a>利润预测分析</h3><h2 id=\"经营决策\"><a href=\"#经营决策\" class=\"headerlink\" title=\"经营决策\"></a>经营决策</h2><h3 id=\"生产决策\"><a href=\"#生产决策\" class=\"headerlink\" title=\"生产决策\"></a>生产决策</h3><h3 id=\"定价决策\"><a href=\"#定价决策\" class=\"headerlink\" title=\"定价决策\"></a>定价决策</h3><h2 id=\"预测分析\"><a href=\"#预测分析\" class=\"headerlink\" title=\"预测分析\"></a>预测分析</h2><h3 id=\"销售预测分析\"><a href=\"#销售预测分析\" class=\"headerlink\" title=\"销售预测分析\"></a>销售预测分析</h3><h3 id=\"成本预测分析\"><a href=\"#成本预测分析\" class=\"headerlink\" title=\"成本预测分析\"></a>成本预测分析</h3><h3 id=\"资金预测分析\"><a href=\"#资金预测分析\" class=\"headerlink\" title=\"资金预测分析\"></a>资金预测分析</h3><h2 id=\"智能报表\"><a href=\"#智能报表\" class=\"headerlink\" title=\"智能报表\"></a>智能报表</h2><h3 id=\"销售收入统计\"><a href=\"#销售收入统计\" class=\"headerlink\" title=\"销售收入统计\"></a>销售收入统计</h3><ul>\n<li>根据销售订单，权责发生制来确认收入。在销售管理-送货管理确认到货了才确认一笔收入</li>\n</ul>\n<h3 id=\"采购统计分析\"><a href=\"#采购统计分析\" class=\"headerlink\" title=\"采购统计分析\"></a>采购统计分析</h3><ul>\n<li>采购数量报表，饼图和柱状图</li>\n</ul>\n<h3 id=\"库存统计分析\"><a href=\"#库存统计分析\" class=\"headerlink\" title=\"库存统计分析\"></a>库存统计分析</h3><ul>\n<li>这里是产品库存统计不是原材料，若产品入库后很长时间没有出库，会有显示库存积压</li>\n<li>展现的形式有图形化（饼图和柱状图）；也有列表（显示仓库库位上存放的产品，会多出来一列显示库存积压）</li>\n</ul>\n<h3 id=\"生存销售监控大屏\"><a href=\"#生存销售监控大屏\" class=\"headerlink\" title=\"生存销售监控大屏\"></a>生存销售监控大屏</h3><ul>\n<li>已经有模板了</li>\n</ul>\n<h3 id=\"智慧物流生产大屏\"><a href=\"#智慧物流生产大屏\" class=\"headerlink\" title=\"智慧物流生产大屏\"></a>智慧物流生产大屏</h3><ul>\n<li>已经有模板了</li>\n</ul>\n<h2 id=\"绩效评价\"><a href=\"#绩效评价\" class=\"headerlink\" title=\"绩效评价\"></a>绩效评价</h2><h3 id=\"平衡计分卡\"><a href=\"#平衡计分卡\" class=\"headerlink\" title=\"平衡计分卡\"></a>平衡计分卡</h3>","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"PC端功能模块设计\"><a href=\"#PC端功能模块设计\" class=\"headerlink\" title=\"PC端功能模块设计\"></a>PC端功能模块设计</h1><h2 id=\"企业组织架构管理\"><a href=\"#企业组织架构管理\" class=\"headerlink\" title=\"企业组织架构管理\"></a>企业组织架构管理</h2><h3 id=\"角色管理\"><a href=\"#角色管理\" class=\"headerlink\" title=\"角色管理\"></a>角色管理</h3><ul>\n<li>有财务主管、会计、出纳、系统管理员等</li>\n<li>操作：设置权限，增删改查</li>\n</ul>\n<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><ul>\n<li>设置角色，姓名，年龄，性别，部门，职务等信息</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"菜单管理\"><a href=\"#菜单管理\" class=\"headerlink\" title=\"菜单管理\"></a>菜单管理</h3><ul>\n<li>管理员权限，设置菜单路由</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"部门管理\"><a href=\"#部门管理\" class=\"headerlink\" title=\"部门管理\"></a>部门管理</h3><ul>\n<li>树状结构</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"我的部门\"><a href=\"#我的部门\" class=\"headerlink\" title=\"我的部门\"></a>我的部门</h3><ul>\n<li>根据当前登录的用户来显示对应的部门</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"职务管理\"><a href=\"#职务管理\" class=\"headerlink\" title=\"职务管理\"></a>职务管理</h3><ul>\n<li>根据公司的组织架构来决定</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"员工管理\"><a href=\"#员工管理\" class=\"headerlink\" title=\"员工管理\"></a>员工管理</h2><h3 id=\"工种管理\"><a href=\"#工种管理\" class=\"headerlink\" title=\"工种管理\"></a>工种管理</h3><ul>\n<li>企业自定义工种，比如送货员、焊接工、维修工</li>\n</ul>\n<h3 id=\"人员基本信息\"><a href=\"#人员基本信息\" class=\"headerlink\" title=\"人员基本信息\"></a>人员基本信息</h3><ul>\n<li>性别、姓名、联系方式，工种，部门，是否部门负责人</li>\n<li>操作：增删改查，查看考勤，修改考勤</li>\n</ul>\n<h3 id=\"人员考勤\"><a href=\"#人员考勤\" class=\"headerlink\" title=\"人员考勤\"></a>人员考勤</h3><ul>\n<li>按月份显示人员列表，请假天数，缺勤天数</li>\n<li>操作：按月份查找，增删改查，</li>\n</ul>\n<h3 id=\"请假管理\"><a href=\"#请假管理\" class=\"headerlink\" title=\"请假管理\"></a>请假管理</h3><ul>\n<li>请假人，请假理由，是否通过</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"采购管理\"><a href=\"#采购管理\" class=\"headerlink\" title=\"采购管理\"></a>采购管理</h2><ul>\n<li>一份订单有四个状态，未审批，已审批，已导出，已入库，根据这四个来决定在哪个功能模块显示。这里的导出订单和验收入库功能相当于财务机器人，即使这里的财务机器人很不成熟，也可以作为该系统的一大亮点和创新点</li>\n</ul>\n<h3 id=\"采购价格管理\"><a href=\"#采购价格管理\" class=\"headerlink\" title=\"采购价格管理\"></a>采购价格管理</h3><ul>\n<li>采购的明细项目，如铆钉，轮子，钢筋等，规格、单位、单价、供应商</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"产品BOM\"><a href=\"#产品BOM\" class=\"headerlink\" title=\"产品BOM\"></a>产品BOM</h3><ul>\n<li>指生产一件产品所需要的材料的明细单</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"生成采购订单（根据采购价格和BOM）\"><a href=\"#生成采购订单（根据采购价格和BOM）\" class=\"headerlink\" title=\"生成采购订单（根据采购价格和BOM）\"></a>生成采购订单（根据采购价格和BOM）</h3><ul>\n<li>根据要生产的产品数量和上面BOM单的信息，来确定要采购的订单，最终生成的采购订单的数量是根据BOM单内供应商的数量</li>\n<li>订单状态：所有的采购订单</li>\n<li>操作：生成采购订单，修改采购订单</li>\n</ul>\n<h3 id=\"采购审批\"><a href=\"#采购审批\" class=\"headerlink\" title=\"采购审批\"></a>采购审批</h3><ul>\n<li>在生成之后的采购订单会在这里显示</li>\n<li>订单状态：未审批的订单</li>\n<li>操作：通过，删除生成的订单，修改</li>\n</ul>\n<h3 id=\"导出采购订单\"><a href=\"#导出采购订单\" class=\"headerlink\" title=\"导出采购订单\"></a>导出采购订单</h3><ul>\n<li>根据采购订单的信息，和Exel模板来导出采购订单，Exel模板可以自定义</li>\n<li>订单状态：已审批的订单</li>\n<li>操作：取消审批会回退到采购审批，想要删除在采购审批删除；选择对应的记录来导出采购订单，并且打印全部订单。</li>\n</ul>\n<h3 id=\"导出入库单\"><a href=\"#导出入库单\" class=\"headerlink\" title=\"导出入库单\"></a>导出入库单</h3><ul>\n<li>选择采购记录，点击导出入库订单后要求填写仓库名和存放位置，之后生成入库单（excel格式，可以打印）并且一条填写完存放位置后保持填写窗口继续填写，保证效率</li>\n<li>订单状态：已导出的订单</li>\n</ul>\n<h3 id=\"验收入库\"><a href=\"#验收入库\" class=\"headerlink\" title=\"验收入库\"></a>验收入库</h3><ul>\n<li>根据导出入库单模块生成的入库单来导入excel，实现入库</li>\n<li>但可能不是所有的原材料入库都是通过采购订单的方式来实现的，因此有第二种方法录入：根据发票OCR识别录入，这里只做简单的识别，发票的模板可能各式各样会影响识别结果，因此准确率不高，时间和能力有限不准备优化，能把固定的一套模板发票录入即可。注意：导入的发票是没有仓库的信息的，要自己手动录入</li>\n<li>第三种方法:可以手动录入，来应对第二种情况不准确</li>\n<li>列表显示操作记录：操作方式（人工、财务机器人），入库材料，数量，含税金额，不含税金额，存放的仓库信息等</li>\n<li>操作：增删改查，导入入库单，导入发票，手动修改</li>\n</ul>\n<h3 id=\"供应商管理\"><a href=\"#供应商管理\" class=\"headerlink\" title=\"供应商管理\"></a>供应商管理</h3><ul>\n<li>地点，联系人，联系人电话，备注等</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"销售管理\"><a href=\"#销售管理\" class=\"headerlink\" title=\"销售管理\"></a>销售管理</h2><ul>\n<li>订单的两个状态：是否出库，是否送达</li>\n</ul>\n<h3 id=\"订单管理\"><a href=\"#订单管理\" class=\"headerlink\" title=\"订单管理\"></a>订单管理</h3><ul>\n<li>填写订单基本信息，订单与产品之间是一对多的关系，订单是主表，产品是附表，一条订单记录包含多个商品。采购订单的数据库设计也是类似</li>\n<li>订单状态：全部</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"导出订单\"><a href=\"#导出订单\" class=\"headerlink\" title=\"导出订单\"></a>导出订单</h3><ul>\n<li>根据销售订单的信息，和Exel模板来导出销售订单，Exel模板可以自定义</li>\n<li>订单状态：未出库</li>\n<li>操作：选择对应的记录来导出销售订单，可以筛选已导出的订单和未生成的订单，也可以删除订单</li>\n</ul>\n<h3 id=\"生成出库二维码\"><a href=\"#生成出库二维码\" class=\"headerlink\" title=\"生成出库二维码\"></a>生成出库二维码</h3><ul>\n<li>根据订单附表信息打印产品出库二维码，这里对应到产品上的，导出订单但是对应到订单上的，不能混淆</li>\n<li>订单状态：未出库</li>\n<li>操作: 增删改查，打印二维码</li>\n</ul>\n<h3 id=\"出库管理\"><a href=\"#出库管理\" class=\"headerlink\" title=\"出库管理\"></a>出库管理</h3><ul>\n<li>PC端操作：可以手动填写出库记录</li>\n<li>小程序端操作：扫描二维码，增加一条记录，实现出库</li>\n<li>出库后，根据附表下的商品明细，来减少商品的库存</li>\n<li>订单状态： 已出库</li>\n</ul>\n<h3 id=\"送货管理\"><a href=\"#送货管理\" class=\"headerlink\" title=\"送货管理\"></a>送货管理</h3><ul>\n<li>这里的功能暂且是简单的手动填写是否送到，校赛过了后再去考虑增加物联网功能并且和小程序联动，司机接收订单，显示位置，是否送达</li>\n<li>订单状态：已出库，未送达</li>\n</ul>\n<h3 id=\"客户管理\"><a href=\"#客户管理\" class=\"headerlink\" title=\"客户管理\"></a>客户管理</h3><ul>\n<li>客户的基本信息</li>\n<li>操作：增删改查</li>\n</ul>\n<h2 id=\"仓库管理\"><a href=\"#仓库管理\" class=\"headerlink\" title=\"仓库管理\"></a>仓库管理</h2><h3 id=\"库位管理\"><a href=\"#库位管理\" class=\"headerlink\" title=\"库位管理\"></a>库位管理</h3><ul>\n<li>仓库的基本信息，仓库名：如半成品库、原材料库、成品库等；货架号：自定义；层数：货架层数：数字，一共有几层。手动录入太麻烦，excel直接导入</li>\n<li>操作：增删改查，excel导入</li>\n</ul>\n<h3 id=\"原材料盘点\"><a href=\"#原材料盘点\" class=\"headerlink\" title=\"原材料盘点\"></a>原材料盘点</h3><h4 id=\"原材料库位盘点\"><a href=\"#原材料库位盘点\" class=\"headerlink\" title=\"原材料库位盘点\"></a>原材料库位盘点</h4><ul>\n<li>显示仓库库位上存放的原材料</li>\n<li>以列表显示</li>\n</ul>\n<h4 id=\"原材料数量盘点\"><a href=\"#原材料数量盘点\" class=\"headerlink\" title=\"原材料数量盘点\"></a>原材料数量盘点</h4><ul>\n<li>显示原材料数量</li>\n<li>以柱状图或列表显示</li>\n</ul>\n<h3 id=\"原材料盘亏盘盈\"><a href=\"#原材料盘亏盘盈\" class=\"headerlink\" title=\"原材料盘亏盘盈\"></a>原材料盘亏盘盈</h3><ul>\n<li>录入月份和盘亏\\盘盈的原材料和数量，填写盘亏\\盘盈原因</li>\n</ul>\n<h3 id=\"产品盘点\"><a href=\"#产品盘点\" class=\"headerlink\" title=\"产品盘点\"></a>产品盘点</h3><h4 id=\"产品库位盘点\"><a href=\"#产品库位盘点\" class=\"headerlink\" title=\"产品库位盘点\"></a>产品库位盘点</h4><ul>\n<li>显示仓库库位上存放的产品</li>\n<li>以列表显示</li>\n</ul>\n<h4 id=\"产品数量盘点\"><a href=\"#产品数量盘点\" class=\"headerlink\" title=\"产品数量盘点\"></a>产品数量盘点</h4><ul>\n<li>显示产品数量</li>\n<li>以柱状图或列表显示</li>\n</ul>\n<h3 id=\"产品盘亏盘盈\"><a href=\"#产品盘亏盘盈\" class=\"headerlink\" title=\"产品盘亏盘盈\"></a>产品盘亏盘盈</h3><ul>\n<li>录入月份和盘亏\\盘盈的产品和数量，填写盘亏\\盘盈原因</li>\n</ul>\n<h2 id=\"生产管理\"><a href=\"#生产管理\" class=\"headerlink\" title=\"生产管理\"></a>生产管理</h2><h3 id=\"生产入库\"><a href=\"#生产入库\" class=\"headerlink\" title=\"生产入库\"></a>生产入库</h3><ul>\n<li>PC端：手动填写产品入库单</li>\n<li>小程序端：扫描入库二维码，增加一条记录，实现入库</li>\n<li>操作：增删改查</li>\n</ul>\n<h3 id=\"产品生产流程\"><a href=\"#产品生产流程\" class=\"headerlink\" title=\"产品生产流程\"></a>产品生产流程</h3><ul>\n<li>暂且只采用一种成本计算方法，综合结转分布法不按仓库收发，产品对结转路劲是一对多的关系。一个产品对应多条结转记录，填写每条结转路径的名称、在产品完工程度</li>\n</ul>\n<h3 id=\"人工费用管理\"><a href=\"#人工费用管理\" class=\"headerlink\" title=\"人工费用管理\"></a>人工费用管理</h3><ul>\n<li>所属的产品，生产路径，单位工时（元&#x2F;小时）</li>\n</ul>\n<h3 id=\"固定制造费用管理\"><a href=\"#固定制造费用管理\" class=\"headerlink\" title=\"固定制造费用管理\"></a>固定制造费用管理</h3><ul>\n<li>因为固定制造费用和变动制造费用的成本计算方式不同，所以分开</li>\n<li>固定资产名：如机器，设备，厂房</li>\n</ul>\n<h3 id=\"变动制造费用管理\"><a href=\"#变动制造费用管理\" class=\"headerlink\" title=\"变动制造费用管理\"></a>变动制造费用管理</h3><h3 id=\"成本报表\"><a href=\"#成本报表\" class=\"headerlink\" title=\"成本报表\"></a>成本报表</h3><ul>\n<li>所有产品的可视化报表，纵坐标产品的成本，横坐标是产品名</li>\n<li>单个产品的成本组成，分成直接材料、直接人工、制造费用的饼图</li>\n</ul>\n<h2 id=\"本量利分析\"><a href=\"#本量利分析\" class=\"headerlink\" title=\"本量利分析\"></a>本量利分析</h2><h3 id=\"保本点分析\"><a href=\"#保本点分析\" class=\"headerlink\" title=\"保本点分析\"></a>保本点分析</h3><h3 id=\"利润预测分析\"><a href=\"#利润预测分析\" class=\"headerlink\" title=\"利润预测分析\"></a>利润预测分析</h3><h2 id=\"经营决策\"><a href=\"#经营决策\" class=\"headerlink\" title=\"经营决策\"></a>经营决策</h2><h3 id=\"生产决策\"><a href=\"#生产决策\" class=\"headerlink\" title=\"生产决策\"></a>生产决策</h3><h3 id=\"定价决策\"><a href=\"#定价决策\" class=\"headerlink\" title=\"定价决策\"></a>定价决策</h3><h2 id=\"预测分析\"><a href=\"#预测分析\" class=\"headerlink\" title=\"预测分析\"></a>预测分析</h2><h3 id=\"销售预测分析\"><a href=\"#销售预测分析\" class=\"headerlink\" title=\"销售预测分析\"></a>销售预测分析</h3><h3 id=\"成本预测分析\"><a href=\"#成本预测分析\" class=\"headerlink\" title=\"成本预测分析\"></a>成本预测分析</h3><h3 id=\"资金预测分析\"><a href=\"#资金预测分析\" class=\"headerlink\" title=\"资金预测分析\"></a>资金预测分析</h3><h2 id=\"智能报表\"><a href=\"#智能报表\" class=\"headerlink\" title=\"智能报表\"></a>智能报表</h2><h3 id=\"销售收入统计\"><a href=\"#销售收入统计\" class=\"headerlink\" title=\"销售收入统计\"></a>销售收入统计</h3><ul>\n<li>根据销售订单，权责发生制来确认收入。在销售管理-送货管理确认到货了才确认一笔收入</li>\n</ul>\n<h3 id=\"采购统计分析\"><a href=\"#采购统计分析\" class=\"headerlink\" title=\"采购统计分析\"></a>采购统计分析</h3><ul>\n<li>采购数量报表，饼图和柱状图</li>\n</ul>\n<h3 id=\"库存统计分析\"><a href=\"#库存统计分析\" class=\"headerlink\" title=\"库存统计分析\"></a>库存统计分析</h3><ul>\n<li>这里是产品库存统计不是原材料，若产品入库后很长时间没有出库，会有显示库存积压</li>\n<li>展现的形式有图形化（饼图和柱状图）；也有列表（显示仓库库位上存放的产品，会多出来一列显示库存积压）</li>\n</ul>\n<h3 id=\"生存销售监控大屏\"><a href=\"#生存销售监控大屏\" class=\"headerlink\" title=\"生存销售监控大屏\"></a>生存销售监控大屏</h3><ul>\n<li>已经有模板了</li>\n</ul>\n<h3 id=\"智慧物流生产大屏\"><a href=\"#智慧物流生产大屏\" class=\"headerlink\" title=\"智慧物流生产大屏\"></a>智慧物流生产大屏</h3><ul>\n<li>已经有模板了</li>\n</ul>\n<h2 id=\"绩效评价\"><a href=\"#绩效评价\" class=\"headerlink\" title=\"绩效评价\"></a>绩效评价</h2><h3 id=\"平衡计分卡\"><a href=\"#平衡计分卡\" class=\"headerlink\" title=\"平衡计分卡\"></a>平衡计分卡</h3>"},{"title":"高校生均成本核算系统","date":"2023-08-29T15:09:00.000Z","updated":"2023-09-14T08:27:50.647Z","keywords":null,"description":null,"_content":"\n\n# 遇到的问题和自己的思考🤔\n1. 学科是在成本中心表中还是在学科专业目录表中？虽然学科专业目录表带了学科二字但我觉得应该是在成本中心表中，因为学院到学科是存在分配路径的，也涉及到了成本动因，应该也属于成本中心。那么学科专业目录树结构也就没有意义了，也要更名为专业目录表。学科是指下面的学科：\n\t![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230830220841.png)\n2. 如果第一个想法是对的话，学科专业目录中的成本中心 id 就应该有多个成本中心 id，用逗号分隔。在成本动因采集的自动取数中，动因量是依据填入的成本中心 id 自动读表计算得到的，假设是读取在校学生人数表，在校学生人数表只有专业 ID，就要先从学科专业目录表中选取对应成本中心的 id 值，然而学科也算成本中心，会计学的成本中心就是管理学和会计学院。\n3. 马克思学院、外国语学院和理学院有基础教学功能的学院要区分公共课与专业课，按照课时比例，在本学院和全校范围进行分摊。然而动因采集表只有成本中心 ID，动因量这两个关键字段，没办法区分是哪个学院开始的公共课，那么是否是通过设置多个成本动因来解决的，比如：理学院授课时长、外国语学院授课时长、理学院授课时长。其次，开课明细表缺少成本中心 id，比如概率论由理学院开课，成本中心就是是理学院，并且要有特殊的取数规则，以理学院授课时长举例：在成本动因自动取数的过程中，要选取开课明细表中开课学院是理学院的，这与其他的成本动因取数方式不同，比如学生人数就直接选取人数就好了，不需要额外筛选；我的想法是在成本动因中的计算公式中使用 sql 注入，添加一个 where 筛选条件，比如 \n```sql\nWHERE cost_center_id = 'XXX';\n```\n4. 家庭补助支出里的 `专业` 和 `学科` 字段的 ID 还是字符串？\n5. 理学院直接分配到二级学院会形成环，整个数据结构会变成图而不是树\n6. 理学院、马克思学院与外国语学院之间存在双向分配关系\n7. 除不尽的小数如何处理","source":"_posts/项目开发/高校生均成本核算系统.md","raw":"---\ntitle: 高校生均成本核算系统\ndate: 2023-08-29 23:09\nupdated: 星期五 8日 九月 2023 11:56:26\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n# 遇到的问题和自己的思考🤔\n1. 学科是在成本中心表中还是在学科专业目录表中？虽然学科专业目录表带了学科二字但我觉得应该是在成本中心表中，因为学院到学科是存在分配路径的，也涉及到了成本动因，应该也属于成本中心。那么学科专业目录树结构也就没有意义了，也要更名为专业目录表。学科是指下面的学科：\n\t![](https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230830220841.png)\n2. 如果第一个想法是对的话，学科专业目录中的成本中心 id 就应该有多个成本中心 id，用逗号分隔。在成本动因采集的自动取数中，动因量是依据填入的成本中心 id 自动读表计算得到的，假设是读取在校学生人数表，在校学生人数表只有专业 ID，就要先从学科专业目录表中选取对应成本中心的 id 值，然而学科也算成本中心，会计学的成本中心就是管理学和会计学院。\n3. 马克思学院、外国语学院和理学院有基础教学功能的学院要区分公共课与专业课，按照课时比例，在本学院和全校范围进行分摊。然而动因采集表只有成本中心 ID，动因量这两个关键字段，没办法区分是哪个学院开始的公共课，那么是否是通过设置多个成本动因来解决的，比如：理学院授课时长、外国语学院授课时长、理学院授课时长。其次，开课明细表缺少成本中心 id，比如概率论由理学院开课，成本中心就是是理学院，并且要有特殊的取数规则，以理学院授课时长举例：在成本动因自动取数的过程中，要选取开课明细表中开课学院是理学院的，这与其他的成本动因取数方式不同，比如学生人数就直接选取人数就好了，不需要额外筛选；我的想法是在成本动因中的计算公式中使用 sql 注入，添加一个 where 筛选条件，比如 \n```sql\nWHERE cost_center_id = 'XXX';\n```\n4. 家庭补助支出里的 `专业` 和 `学科` 字段的 ID 还是字符串？\n5. 理学院直接分配到二级学院会形成环，整个数据结构会变成图而不是树\n6. 理学院、马克思学院与外国语学院之间存在双向分配关系\n7. 除不尽的小数如何处理","slug":"项目开发/高校生均成本核算系统","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8o003ei4v18okd2s86","content":"<h1 id=\"遇到的问题和自己的思考🤔\"><a href=\"#遇到的问题和自己的思考🤔\" class=\"headerlink\" title=\"遇到的问题和自己的思考🤔\"></a>遇到的问题和自己的思考🤔</h1><ol>\n<li>学科是在成本中心表中还是在学科专业目录表中？虽然学科专业目录表带了学科二字但我觉得应该是在成本中心表中，因为学院到学科是存在分配路径的，也涉及到了成本动因，应该也属于成本中心。那么学科专业目录树结构也就没有意义了，也要更名为专业目录表。学科是指下面的学科：<br> <img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230830220841.png\"></li>\n<li>如果第一个想法是对的话，学科专业目录中的成本中心 id 就应该有多个成本中心 id，用逗号分隔。在成本动因采集的自动取数中，动因量是依据填入的成本中心 id 自动读表计算得到的，假设是读取在校学生人数表，在校学生人数表只有专业 ID，就要先从学科专业目录表中选取对应成本中心的 id 值，然而学科也算成本中心，会计学的成本中心就是管理学和会计学院。</li>\n<li>马克思学院、外国语学院和理学院有基础教学功能的学院要区分公共课与专业课，按照课时比例，在本学院和全校范围进行分摊。然而动因采集表只有成本中心 ID，动因量这两个关键字段，没办法区分是哪个学院开始的公共课，那么是否是通过设置多个成本动因来解决的，比如：理学院授课时长、外国语学院授课时长、理学院授课时长。其次，开课明细表缺少成本中心 id，比如概率论由理学院开课，成本中心就是是理学院，并且要有特殊的取数规则，以理学院授课时长举例：在成本动因自动取数的过程中，要选取开课明细表中开课学院是理学院的，这与其他的成本动因取数方式不同，比如学生人数就直接选取人数就好了，不需要额外筛选；我的想法是在成本动因中的计算公式中使用 sql 注入，添加一个 where 筛选条件，比如 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> cost_center_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;XXX&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>家庭补助支出里的 <code>专业</code> 和 <code>学科</code> 字段的 ID 还是字符串？</li>\n<li>理学院直接分配到二级学院会形成环，整个数据结构会变成图而不是树</li>\n<li>理学院、马克思学院与外国语学院之间存在双向分配关系</li>\n<li>除不尽的小数如何处理</li>\n</ol>\n","site":{"data":{}},"cover":"/img/post_cover3.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"遇到的问题和自己的思考🤔\"><a href=\"#遇到的问题和自己的思考🤔\" class=\"headerlink\" title=\"遇到的问题和自己的思考🤔\"></a>遇到的问题和自己的思考🤔</h1><ol>\n<li>学科是在成本中心表中还是在学科专业目录表中？虽然学科专业目录表带了学科二字但我觉得应该是在成本中心表中，因为学院到学科是存在分配路径的，也涉及到了成本动因，应该也属于成本中心。那么学科专业目录树结构也就没有意义了，也要更名为专业目录表。学科是指下面的学科：<br> <img src=\"https://lilming-obsidian.oss-cn-hangzhou.aliyuncs.com/pic/Pasted%20image%2020230830220841.png\"></li>\n<li>如果第一个想法是对的话，学科专业目录中的成本中心 id 就应该有多个成本中心 id，用逗号分隔。在成本动因采集的自动取数中，动因量是依据填入的成本中心 id 自动读表计算得到的，假设是读取在校学生人数表，在校学生人数表只有专业 ID，就要先从学科专业目录表中选取对应成本中心的 id 值，然而学科也算成本中心，会计学的成本中心就是管理学和会计学院。</li>\n<li>马克思学院、外国语学院和理学院有基础教学功能的学院要区分公共课与专业课，按照课时比例，在本学院和全校范围进行分摊。然而动因采集表只有成本中心 ID，动因量这两个关键字段，没办法区分是哪个学院开始的公共课，那么是否是通过设置多个成本动因来解决的，比如：理学院授课时长、外国语学院授课时长、理学院授课时长。其次，开课明细表缺少成本中心 id，比如概率论由理学院开课，成本中心就是是理学院，并且要有特殊的取数规则，以理学院授课时长举例：在成本动因自动取数的过程中，要选取开课明细表中开课学院是理学院的，这与其他的成本动因取数方式不同，比如学生人数就直接选取人数就好了，不需要额外筛选；我的想法是在成本动因中的计算公式中使用 sql 注入，添加一个 where 筛选条件，比如 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WHERE</span> cost_center_id <span class=\"operator\">=</span> <span class=\"string\">&#x27;XXX&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>家庭补助支出里的 <code>专业</code> 和 <code>学科</code> 字段的 ID 还是字符串？</li>\n<li>理学院直接分配到二级学院会形成环，整个数据结构会变成图而不是树</li>\n<li>理学院、马克思学院与外国语学院之间存在双向分配关系</li>\n<li>除不尽的小数如何处理</li>\n</ol>\n"},{"title":"基于uniapp的天气播报微信小程序","date":"2023-04-26T07:16:00.000Z","updated":"2023-09-08T03:56:08.389Z","keywords":null,"description":null,"_content":"\n\n\n# 项目介绍\n项目开源仓库：[https://github.com/lilming0505/lmweather](https://github.com/lilming0505/lmweather)<br />首先这是一个基于uniapp框架开发的天气查询项目，目前呢只适配移动端，且仅在微信小程序上线<br />芝士二维码：<br />![gh_be15d61fcc12_258 (1).jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665149991995-6fd36cf5-1509-410c-ae0d-eb7e73acebdf.jpeg#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u04101577&margin=%5Bobject%20Object%5D&name=gh_be15d61fcc12_258%20%281%29.jpg&originHeight=258&originWidth=258&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48147&status=error&style=none&taskId=u72cdd35e-bff1-4ec3-9845-405b323ac4e&title=)\n<a name=\"CkuKj\"></a>\n## 主要实现的功能\n\n1. 10小时的天气预报\n2. 7天内的天气预报\n3. 空气指数\n4. 天气指数\n5. 生活指数\n\n![cf0b89f15f0196d0737b244e52304c3.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1667830539652-322f279b-2cc2-4df7-af01-87668a3313e2.png#clientId=u97158bb1-5ed3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u89fbfbf3&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=done&style=none&taskId=u187a8ee7-7ecf-4400-b08f-6b76885faf4&title=)![cf0b89f15f0196d0737b244e52304c3.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152213780-b80d64fc-78ae-4ec0-9162-019b012c7cef.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.0484&crop=1&crop=0.3435&errorMessage=unknown%20error&from=drop&height=516&id=u787845e2&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=error&style=none&taskId=u74941fff-3921-42c8-b960-102fd2ad01f&title=&width=238)![fff25dd55ab1377b4f4d2ab5ecf1223.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151919111-1d3454b3-8d10-4929-90ed-c2e9af710c09.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=512&id=u29dea63b&margin=%5Bobject%20Object%5D&name=fff25dd55ab1377b4f4d2ab5ecf1223.png&originHeight=1063&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92348&status=error&style=none&taskId=u94760290-d3b4-4f16-8f85-eeeae095e87&title=&width=248)\n<a name=\"LSipv\"></a>\n## 城市切换\n![967526cda0f31c22c6655f6f549134f.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152046428-1bdb24b7-062d-43a5-a4bc-4359de67d9d7.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.1341&crop=0.9941&crop=0.9073&errorMessage=unknown%20error&from=drop&height=295&id=u5a1ac71b&margin=%5Bobject%20Object%5D&name=967526cda0f31c22c6655f6f549134f.png&originHeight=410&originWidth=338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27824&status=error&style=none&taskId=u573e9fc3-9b13-4585-91a5-92a3b00bcf2&title=&width=243)![aff222c8825a5a4c04858e80f0d02ec.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152032205-5f766dc5-3f0c-40c2-8ff1-e19f9f38a880.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=230&id=ua652657e&margin=%5Bobject%20Object%5D&name=aff222c8825a5a4c04858e80f0d02ec.png&originHeight=386&originWidth=395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22195&status=error&style=none&taskId=u87a1b6fe-3c75-4e50-b380-0db886214fe&title=&width=235)\n<a name=\"Fu5wA\"></a>\n## 暗夜模式的切换\n点击城市选择最右边的按钮就可以切换主题了\n<a name=\"ea8f5\"></a>\n## ![3380940c7ccbab8b6c0cb5d6a807132.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151994010-980a7799-bd3c-4a09-87cf-4ca94473d2c0.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=497&id=u8fb47000&margin=%5Bobject%20Object%5D&name=3380940c7ccbab8b6c0cb5d6a807132.png&originHeight=1077&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75416&status=error&style=none&taskId=ufa782583-7465-4bd5-975f-90d5fc51cce&title=&width=240)\n<a name=\"Jyx18\"></a>\n# 遇到的问题与我是如何克服的（有些没能克服555）\n<a name=\"nkPxP\"></a>\n## 微信小程序合法域名的配置\n我在这个项目中用了四个不同的天气api（因为有些api提供的数据不全或者要收费）<br />我在项目上线的最后阶段，发现有些天气数据获取不到了，还有阿里云数据库的城市列表和城市对应的id都获取失败了，代码肯定是没问题的，那肯定是配置哪里出问题了<br />解决方法：<br />在开发环境下，微信开发者工具默认不校验域名，但是在最后上线的时候要设置小程序的合法域名，像这样：<br />![abeefa9dffeb32f970f4aa77d46cc55.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665153482615-4b29047f-31bb-4eae-96ad-f85803abb614.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=274&id=u593d5ef7&margin=%5Bobject%20Object%5D&name=abeefa9dffeb32f970f4aa77d46cc55.png&originHeight=584&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16076&status=error&style=none&taskId=u6cb4cc34-da10-449c-b397-6192e2ac5cc&title=&width=443)<br />但是，等一下，阿里云数据库的域名我从哪里拿到呢，代码里没有出现服务器域名，因为是直接在uniapp里关联了之后连接的，在阿里云控制台没找到，我在网上搜索了很久也没找到解决方法。在那天的晚上，我抓耳挠腮找不到解决方案，躺在床上准备放弃的时候，我灵光一现，把微信开发者工具的不校验合法域名去掉，不就会有报错提示“XXX”不是合法的域名了吗，那我就可以拿到服务器的域名了。现在想想其实是很好解决的，但是我当时却被卡了好久。\n<a name=\"yxkL6\"></a>\n## 组件达不到自己想实现的效果\n在我使用uniapp的自定义导航栏组件的时候，我发现这个导航栏下面总是有一条白色的实线，在白天模式下不明显，在暗夜模式下就很明显，而官方文档里也没有给出去除实线的方法。<br />解决方法：<br />修改组件的代码，打开组件的路径，打开文件，我猜这个实线的宽度为1px，查找定位到了之后，就把width改成0px就可以了\n<a name=\"LgdFH\"></a>\n## 奇怪的下拉选择框（算是解决了）\nuniapp给出了下拉选择框的组件，我需要两个下拉选择框，一个选择省份，一个选择市，但是当我点击第一个选择框时，也就是我选择了省份时，既执行了第一个组件的change事件，也执行了第二个组件的change事件，而且只在第一次点击组件时生效，之后就都正常了，这就导致我第一次选择省份时数据重新加载了一遍。<br />我的解决方案：<br />加一个bool类型的数据，初始值true，第一次点击改为false，第二组件的change事件判断一下，不是第一次点击才执行<br />虽然我解决了，但是这个问题的出现真的好迷\n<a name=\"sAG0F\"></a>\n## 从数据库获取城市数据\n我不但需要两级的城市列表，作为我城市选择框的数据，还需要城市对应的id来作为api的参数，我是下载了某个天气api的城市id表，做一些数据加工，由于数据太大了，不能直接放在本地里（浪费空间），更不能直接保存在页面里（内存直接炸了）<br />解决方法：<br />我用了uniCloud的阿里云数据库，直接用uniapp提供的方法，先添加数据，等数据导入了之后再去读取。\n<a name=\"zmMbU\"></a>\n## 最后上线的效果和开发环境下的有差别（未解决）\n这是上线环境：<br />![Screenshot_20221007_220120_com.tencent.mm.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665155744445-c6f74844-3c5c-4577-b9f8-be839b649dae.jpeg#clientId=u71dd48f8-494e-4&crop=0.0045&crop=0&crop=1&crop=0.3149&errorMessage=unknown%20error&from=drop&height=782&id=uc33b4a19&margin=%5Bobject%20Object%5D&name=Screenshot_20221007_220120_com.tencent.mm.jpg&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=527451&status=error&style=none&taskId=ubddee897-693a-4f41-9722-ce45d6164dc&title=&width=352)<br />这是开发环境：<br />![[{0$U((HY$O58@UE]4~JNZN.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665155850311-0737a4b2-589e-4aea-87a6-7b5ac9ff6fdb.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=237&id=uc3b90cce&margin=%5Bobject%20Object%5D&name=%5B%7B0%24U%28%28HY%24O58%40UE%5D4~JNZN.png&originHeight=337&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21530&status=error&style=none&taskId=u6477e7b9-7859-476e-82fb-6b3642ceb5b&title=&width=353)<br />如图，小程序上线之后图表把城市名给挡住了<br />修改了z-index也无济于事，看组件的代码也看不出什么端倪，完全没有头绪\n<a name=\"Xy0CV\"></a>\n## 获取定位（未解决）\nuniapp官方提供了获取地址的接口和第三方的高德SDK<br />分别是：[https://uniapp.dcloud.net.cn/api/location/location.html](https://uniapp.dcloud.net.cn/api/location/location.html)<br />[https://ask.dcloud.net.cn/article/35070](https://ask.dcloud.net.cn/article/35070)<br />但是这两种方法都试过了，都会报错，如果不用uniapp用小程序提供的接口是可以的，因为精力有限，也就没有继续研究了\n\n","source":"_posts/项目开发/基于uniapp的天气播报微信小程序.md","raw":"---\ntitle: 基于uniapp的天气播报微信小程序\ndate: 2023-04-26 15:16\nupdated: 星期三 26日 四月 2023 15:18:02\ntags: []\ncategories: [项目开发]\nkeywords:\ndescription: \n---\n\n\n\n# 项目介绍\n项目开源仓库：[https://github.com/lilming0505/lmweather](https://github.com/lilming0505/lmweather)<br />首先这是一个基于uniapp框架开发的天气查询项目，目前呢只适配移动端，且仅在微信小程序上线<br />芝士二维码：<br />![gh_be15d61fcc12_258 (1).jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665149991995-6fd36cf5-1509-410c-ae0d-eb7e73acebdf.jpeg#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u04101577&margin=%5Bobject%20Object%5D&name=gh_be15d61fcc12_258%20%281%29.jpg&originHeight=258&originWidth=258&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48147&status=error&style=none&taskId=u72cdd35e-bff1-4ec3-9845-405b323ac4e&title=)\n<a name=\"CkuKj\"></a>\n## 主要实现的功能\n\n1. 10小时的天气预报\n2. 7天内的天气预报\n3. 空气指数\n4. 天气指数\n5. 生活指数\n\n![cf0b89f15f0196d0737b244e52304c3.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1667830539652-322f279b-2cc2-4df7-af01-87668a3313e2.png#clientId=u97158bb1-5ed3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u89fbfbf3&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=done&style=none&taskId=u187a8ee7-7ecf-4400-b08f-6b76885faf4&title=)![cf0b89f15f0196d0737b244e52304c3.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152213780-b80d64fc-78ae-4ec0-9162-019b012c7cef.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.0484&crop=1&crop=0.3435&errorMessage=unknown%20error&from=drop&height=516&id=u787845e2&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=error&style=none&taskId=u74941fff-3921-42c8-b960-102fd2ad01f&title=&width=238)![fff25dd55ab1377b4f4d2ab5ecf1223.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151919111-1d3454b3-8d10-4929-90ed-c2e9af710c09.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=512&id=u29dea63b&margin=%5Bobject%20Object%5D&name=fff25dd55ab1377b4f4d2ab5ecf1223.png&originHeight=1063&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92348&status=error&style=none&taskId=u94760290-d3b4-4f16-8f85-eeeae095e87&title=&width=248)\n<a name=\"LSipv\"></a>\n## 城市切换\n![967526cda0f31c22c6655f6f549134f.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152046428-1bdb24b7-062d-43a5-a4bc-4359de67d9d7.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.1341&crop=0.9941&crop=0.9073&errorMessage=unknown%20error&from=drop&height=295&id=u5a1ac71b&margin=%5Bobject%20Object%5D&name=967526cda0f31c22c6655f6f549134f.png&originHeight=410&originWidth=338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27824&status=error&style=none&taskId=u573e9fc3-9b13-4585-91a5-92a3b00bcf2&title=&width=243)![aff222c8825a5a4c04858e80f0d02ec.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152032205-5f766dc5-3f0c-40c2-8ff1-e19f9f38a880.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=230&id=ua652657e&margin=%5Bobject%20Object%5D&name=aff222c8825a5a4c04858e80f0d02ec.png&originHeight=386&originWidth=395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22195&status=error&style=none&taskId=u87a1b6fe-3c75-4e50-b380-0db886214fe&title=&width=235)\n<a name=\"Fu5wA\"></a>\n## 暗夜模式的切换\n点击城市选择最右边的按钮就可以切换主题了\n<a name=\"ea8f5\"></a>\n## ![3380940c7ccbab8b6c0cb5d6a807132.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151994010-980a7799-bd3c-4a09-87cf-4ca94473d2c0.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=497&id=u8fb47000&margin=%5Bobject%20Object%5D&name=3380940c7ccbab8b6c0cb5d6a807132.png&originHeight=1077&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75416&status=error&style=none&taskId=ufa782583-7465-4bd5-975f-90d5fc51cce&title=&width=240)\n<a name=\"Jyx18\"></a>\n# 遇到的问题与我是如何克服的（有些没能克服555）\n<a name=\"nkPxP\"></a>\n## 微信小程序合法域名的配置\n我在这个项目中用了四个不同的天气api（因为有些api提供的数据不全或者要收费）<br />我在项目上线的最后阶段，发现有些天气数据获取不到了，还有阿里云数据库的城市列表和城市对应的id都获取失败了，代码肯定是没问题的，那肯定是配置哪里出问题了<br />解决方法：<br />在开发环境下，微信开发者工具默认不校验域名，但是在最后上线的时候要设置小程序的合法域名，像这样：<br />![abeefa9dffeb32f970f4aa77d46cc55.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665153482615-4b29047f-31bb-4eae-96ad-f85803abb614.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=274&id=u593d5ef7&margin=%5Bobject%20Object%5D&name=abeefa9dffeb32f970f4aa77d46cc55.png&originHeight=584&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16076&status=error&style=none&taskId=u6cb4cc34-da10-449c-b397-6192e2ac5cc&title=&width=443)<br />但是，等一下，阿里云数据库的域名我从哪里拿到呢，代码里没有出现服务器域名，因为是直接在uniapp里关联了之后连接的，在阿里云控制台没找到，我在网上搜索了很久也没找到解决方法。在那天的晚上，我抓耳挠腮找不到解决方案，躺在床上准备放弃的时候，我灵光一现，把微信开发者工具的不校验合法域名去掉，不就会有报错提示“XXX”不是合法的域名了吗，那我就可以拿到服务器的域名了。现在想想其实是很好解决的，但是我当时却被卡了好久。\n<a name=\"yxkL6\"></a>\n## 组件达不到自己想实现的效果\n在我使用uniapp的自定义导航栏组件的时候，我发现这个导航栏下面总是有一条白色的实线，在白天模式下不明显，在暗夜模式下就很明显，而官方文档里也没有给出去除实线的方法。<br />解决方法：<br />修改组件的代码，打开组件的路径，打开文件，我猜这个实线的宽度为1px，查找定位到了之后，就把width改成0px就可以了\n<a name=\"LgdFH\"></a>\n## 奇怪的下拉选择框（算是解决了）\nuniapp给出了下拉选择框的组件，我需要两个下拉选择框，一个选择省份，一个选择市，但是当我点击第一个选择框时，也就是我选择了省份时，既执行了第一个组件的change事件，也执行了第二个组件的change事件，而且只在第一次点击组件时生效，之后就都正常了，这就导致我第一次选择省份时数据重新加载了一遍。<br />我的解决方案：<br />加一个bool类型的数据，初始值true，第一次点击改为false，第二组件的change事件判断一下，不是第一次点击才执行<br />虽然我解决了，但是这个问题的出现真的好迷\n<a name=\"sAG0F\"></a>\n## 从数据库获取城市数据\n我不但需要两级的城市列表，作为我城市选择框的数据，还需要城市对应的id来作为api的参数，我是下载了某个天气api的城市id表，做一些数据加工，由于数据太大了，不能直接放在本地里（浪费空间），更不能直接保存在页面里（内存直接炸了）<br />解决方法：<br />我用了uniCloud的阿里云数据库，直接用uniapp提供的方法，先添加数据，等数据导入了之后再去读取。\n<a name=\"zmMbU\"></a>\n## 最后上线的效果和开发环境下的有差别（未解决）\n这是上线环境：<br />![Screenshot_20221007_220120_com.tencent.mm.jpg](https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665155744445-c6f74844-3c5c-4577-b9f8-be839b649dae.jpeg#clientId=u71dd48f8-494e-4&crop=0.0045&crop=0&crop=1&crop=0.3149&errorMessage=unknown%20error&from=drop&height=782&id=uc33b4a19&margin=%5Bobject%20Object%5D&name=Screenshot_20221007_220120_com.tencent.mm.jpg&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=527451&status=error&style=none&taskId=ubddee897-693a-4f41-9722-ce45d6164dc&title=&width=352)<br />这是开发环境：<br />![[{0$U((HY$O58@UE]4~JNZN.png](https://cdn.nlark.com/yuque/0/2022/png/28499732/1665155850311-0737a4b2-589e-4aea-87a6-7b5ac9ff6fdb.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=237&id=uc3b90cce&margin=%5Bobject%20Object%5D&name=%5B%7B0%24U%28%28HY%24O58%40UE%5D4~JNZN.png&originHeight=337&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21530&status=error&style=none&taskId=u6477e7b9-7859-476e-82fb-6b3642ceb5b&title=&width=353)<br />如图，小程序上线之后图表把城市名给挡住了<br />修改了z-index也无济于事，看组件的代码也看不出什么端倪，完全没有头绪\n<a name=\"Xy0CV\"></a>\n## 获取定位（未解决）\nuniapp官方提供了获取地址的接口和第三方的高德SDK<br />分别是：[https://uniapp.dcloud.net.cn/api/location/location.html](https://uniapp.dcloud.net.cn/api/location/location.html)<br />[https://ask.dcloud.net.cn/article/35070](https://ask.dcloud.net.cn/article/35070)<br />但是这两种方法都试过了，都会报错，如果不用uniapp用小程序提供的接口是可以的，因为精力有限，也就没有继续研究了\n\n","slug":"项目开发/基于uniapp的天气播报微信小程序","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmle0x8o003fi4v13w8d76sr","content":"<h1 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h1><p>项目开源仓库：<a href=\"https://github.com/lilming0505/lmweather\">https://github.com/lilming0505/lmweather</a><br />首先这是一个基于uniapp框架开发的天气查询项目，目前呢只适配移动端，且仅在微信小程序上线<br />芝士二维码：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665149991995-6fd36cf5-1509-410c-ae0d-eb7e73acebdf.jpeg#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u04101577&margin=%5Bobject%20Object%5D&name=gh_be15d61fcc12_258%20%281%29.jpg&originHeight=258&originWidth=258&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48147&status=error&style=none&taskId=u72cdd35e-bff1-4ec3-9845-405b323ac4e&title=\" alt=\"gh_be15d61fcc12_258 (1).jpg\"><br><a name=\"CkuKj\"></a></p>\n<h2 id=\"主要实现的功能\"><a href=\"#主要实现的功能\" class=\"headerlink\" title=\"主要实现的功能\"></a>主要实现的功能</h2><ol>\n<li>10小时的天气预报</li>\n<li>7天内的天气预报</li>\n<li>空气指数</li>\n<li>天气指数</li>\n<li>生活指数</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1667830539652-322f279b-2cc2-4df7-af01-87668a3313e2.png#clientId=u97158bb1-5ed3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u89fbfbf3&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=done&style=none&taskId=u187a8ee7-7ecf-4400-b08f-6b76885faf4&title=\" alt=\"cf0b89f15f0196d0737b244e52304c3.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152213780-b80d64fc-78ae-4ec0-9162-019b012c7cef.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.0484&crop=1&crop=0.3435&errorMessage=unknown%20error&from=drop&height=516&id=u787845e2&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=error&style=none&taskId=u74941fff-3921-42c8-b960-102fd2ad01f&title=&width=238\" alt=\"cf0b89f15f0196d0737b244e52304c3.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151919111-1d3454b3-8d10-4929-90ed-c2e9af710c09.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=512&id=u29dea63b&margin=%5Bobject%20Object%5D&name=fff25dd55ab1377b4f4d2ab5ecf1223.png&originHeight=1063&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92348&status=error&style=none&taskId=u94760290-d3b4-4f16-8f85-eeeae095e87&title=&width=248\" alt=\"fff25dd55ab1377b4f4d2ab5ecf1223.png\"><br><a name=\"LSipv\"></a></p>\n<h2 id=\"城市切换\"><a href=\"#城市切换\" class=\"headerlink\" title=\"城市切换\"></a>城市切换</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152046428-1bdb24b7-062d-43a5-a4bc-4359de67d9d7.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.1341&crop=0.9941&crop=0.9073&errorMessage=unknown%20error&from=drop&height=295&id=u5a1ac71b&margin=%5Bobject%20Object%5D&name=967526cda0f31c22c6655f6f549134f.png&originHeight=410&originWidth=338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27824&status=error&style=none&taskId=u573e9fc3-9b13-4585-91a5-92a3b00bcf2&title=&width=243\" alt=\"967526cda0f31c22c6655f6f549134f.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152032205-5f766dc5-3f0c-40c2-8ff1-e19f9f38a880.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=230&id=ua652657e&margin=%5Bobject%20Object%5D&name=aff222c8825a5a4c04858e80f0d02ec.png&originHeight=386&originWidth=395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22195&status=error&style=none&taskId=u87a1b6fe-3c75-4e50-b380-0db886214fe&title=&width=235\" alt=\"aff222c8825a5a4c04858e80f0d02ec.png\"><br><a name=\"Fu5wA\"></a></p>\n<h2 id=\"暗夜模式的切换\"><a href=\"#暗夜模式的切换\" class=\"headerlink\" title=\"暗夜模式的切换\"></a>暗夜模式的切换</h2><p>点击城市选择最右边的按钮就可以切换主题了<br><a name=\"ea8f5\"></a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151994010-980a7799-bd3c-4a09-87cf-4ca94473d2c0.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=497&id=u8fb47000&margin=%5Bobject%20Object%5D&name=3380940c7ccbab8b6c0cb5d6a807132.png&originHeight=1077&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75416&status=error&style=none&taskId=ufa782583-7465-4bd5-975f-90d5fc51cce&title=&width=240\" alt=\"3380940c7ccbab8b6c0cb5d6a807132.png\"></h2><p><a name=\"Jyx18\"></a></p>\n<h1 id=\"遇到的问题与我是如何克服的（有些没能克服555）\"><a href=\"#遇到的问题与我是如何克服的（有些没能克服555）\" class=\"headerlink\" title=\"遇到的问题与我是如何克服的（有些没能克服555）\"></a>遇到的问题与我是如何克服的（有些没能克服555）</h1><p><a name=\"nkPxP\"></a></p>\n<h2 id=\"微信小程序合法域名的配置\"><a href=\"#微信小程序合法域名的配置\" class=\"headerlink\" title=\"微信小程序合法域名的配置\"></a>微信小程序合法域名的配置</h2><p>我在这个项目中用了四个不同的天气api（因为有些api提供的数据不全或者要收费）<br />我在项目上线的最后阶段，发现有些天气数据获取不到了，还有阿里云数据库的城市列表和城市对应的id都获取失败了，代码肯定是没问题的，那肯定是配置哪里出问题了<br />解决方法：<br />在开发环境下，微信开发者工具默认不校验域名，但是在最后上线的时候要设置小程序的合法域名，像这样：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665153482615-4b29047f-31bb-4eae-96ad-f85803abb614.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=274&id=u593d5ef7&margin=%5Bobject%20Object%5D&name=abeefa9dffeb32f970f4aa77d46cc55.png&originHeight=584&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16076&status=error&style=none&taskId=u6cb4cc34-da10-449c-b397-6192e2ac5cc&title=&width=443\" alt=\"abeefa9dffeb32f970f4aa77d46cc55.png\"><br />但是，等一下，阿里云数据库的域名我从哪里拿到呢，代码里没有出现服务器域名，因为是直接在uniapp里关联了之后连接的，在阿里云控制台没找到，我在网上搜索了很久也没找到解决方法。在那天的晚上，我抓耳挠腮找不到解决方案，躺在床上准备放弃的时候，我灵光一现，把微信开发者工具的不校验合法域名去掉，不就会有报错提示“XXX”不是合法的域名了吗，那我就可以拿到服务器的域名了。现在想想其实是很好解决的，但是我当时却被卡了好久。<br><a name=\"yxkL6\"></a></p>\n<h2 id=\"组件达不到自己想实现的效果\"><a href=\"#组件达不到自己想实现的效果\" class=\"headerlink\" title=\"组件达不到自己想实现的效果\"></a>组件达不到自己想实现的效果</h2><p>在我使用uniapp的自定义导航栏组件的时候，我发现这个导航栏下面总是有一条白色的实线，在白天模式下不明显，在暗夜模式下就很明显，而官方文档里也没有给出去除实线的方法。<br />解决方法：<br />修改组件的代码，打开组件的路径，打开文件，我猜这个实线的宽度为1px，查找定位到了之后，就把width改成0px就可以了<br><a name=\"LgdFH\"></a></p>\n<h2 id=\"奇怪的下拉选择框（算是解决了）\"><a href=\"#奇怪的下拉选择框（算是解决了）\" class=\"headerlink\" title=\"奇怪的下拉选择框（算是解决了）\"></a>奇怪的下拉选择框（算是解决了）</h2><p>uniapp给出了下拉选择框的组件，我需要两个下拉选择框，一个选择省份，一个选择市，但是当我点击第一个选择框时，也就是我选择了省份时，既执行了第一个组件的change事件，也执行了第二个组件的change事件，而且只在第一次点击组件时生效，之后就都正常了，这就导致我第一次选择省份时数据重新加载了一遍。<br />我的解决方案：<br />加一个bool类型的数据，初始值true，第一次点击改为false，第二组件的change事件判断一下，不是第一次点击才执行<br />虽然我解决了，但是这个问题的出现真的好迷<br><a name=\"sAG0F\"></a></p>\n<h2 id=\"从数据库获取城市数据\"><a href=\"#从数据库获取城市数据\" class=\"headerlink\" title=\"从数据库获取城市数据\"></a>从数据库获取城市数据</h2><p>我不但需要两级的城市列表，作为我城市选择框的数据，还需要城市对应的id来作为api的参数，我是下载了某个天气api的城市id表，做一些数据加工，由于数据太大了，不能直接放在本地里（浪费空间），更不能直接保存在页面里（内存直接炸了）<br />解决方法：<br />我用了uniCloud的阿里云数据库，直接用uniapp提供的方法，先添加数据，等数据导入了之后再去读取。<br><a name=\"zmMbU\"></a></p>\n<h2 id=\"最后上线的效果和开发环境下的有差别（未解决）\"><a href=\"#最后上线的效果和开发环境下的有差别（未解决）\" class=\"headerlink\" title=\"最后上线的效果和开发环境下的有差别（未解决）\"></a>最后上线的效果和开发环境下的有差别（未解决）</h2><p>这是上线环境：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665155744445-c6f74844-3c5c-4577-b9f8-be839b649dae.jpeg#clientId=u71dd48f8-494e-4&crop=0.0045&crop=0&crop=1&crop=0.3149&errorMessage=unknown%20error&from=drop&height=782&id=uc33b4a19&margin=%5Bobject%20Object%5D&name=Screenshot_20221007_220120_com.tencent.mm.jpg&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=527451&status=error&style=none&taskId=ubddee897-693a-4f41-9722-ce45d6164dc&title=&width=352\" alt=\"Screenshot_20221007_220120_com.tencent.mm.jpg\"><br />这是开发环境：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665155850311-0737a4b2-589e-4aea-87a6-7b5ac9ff6fdb.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=237&id=uc3b90cce&margin=%5Bobject%20Object%5D&name=%5B%7B0%24U%28%28HY%24O58%40UE%5D4~JNZN.png&originHeight=337&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21530&status=error&style=none&taskId=u6477e7b9-7859-476e-82fb-6b3642ceb5b&title=&width=353\" alt=\"[{0$U((HY$O58@UE]4~JNZN.png\"><br />如图，小程序上线之后图表把城市名给挡住了<br />修改了z-index也无济于事，看组件的代码也看不出什么端倪，完全没有头绪<br><a name=\"Xy0CV\"></a></p>\n<h2 id=\"获取定位（未解决）\"><a href=\"#获取定位（未解决）\" class=\"headerlink\" title=\"获取定位（未解决）\"></a>获取定位（未解决）</h2><p>uniapp官方提供了获取地址的接口和第三方的高德SDK<br />分别是：<a href=\"https://uniapp.dcloud.net.cn/api/location/location.html\">https://uniapp.dcloud.net.cn/api/location/location.html</a><br /><a href=\"https://ask.dcloud.net.cn/article/35070\">https://ask.dcloud.net.cn/article/35070</a><br />但是这两种方法都试过了，都会报错，如果不用uniapp用小程序提供的接口是可以的，因为精力有限，也就没有继续研究了</p>\n","site":{"data":{}},"cover":"/img/post_cover1.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h1><p>项目开源仓库：<a href=\"https://github.com/lilming0505/lmweather\">https://github.com/lilming0505/lmweather</a><br />首先这是一个基于uniapp框架开发的天气查询项目，目前呢只适配移动端，且仅在微信小程序上线<br />芝士二维码：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665149991995-6fd36cf5-1509-410c-ae0d-eb7e73acebdf.jpeg#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&id=u04101577&margin=%5Bobject%20Object%5D&name=gh_be15d61fcc12_258%20%281%29.jpg&originHeight=258&originWidth=258&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48147&status=error&style=none&taskId=u72cdd35e-bff1-4ec3-9845-405b323ac4e&title=\" alt=\"gh_be15d61fcc12_258 (1).jpg\"><br><a name=\"CkuKj\"></a></p>\n<h2 id=\"主要实现的功能\"><a href=\"#主要实现的功能\" class=\"headerlink\" title=\"主要实现的功能\"></a>主要实现的功能</h2><ol>\n<li>10小时的天气预报</li>\n<li>7天内的天气预报</li>\n<li>空气指数</li>\n<li>天气指数</li>\n<li>生活指数</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1667830539652-322f279b-2cc2-4df7-af01-87668a3313e2.png#clientId=u97158bb1-5ed3-4&crop=0&crop=0&crop=1&crop=1&from=drop&id=u89fbfbf3&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=done&style=none&taskId=u187a8ee7-7ecf-4400-b08f-6b76885faf4&title=\" alt=\"cf0b89f15f0196d0737b244e52304c3.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152213780-b80d64fc-78ae-4ec0-9162-019b012c7cef.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.0484&crop=1&crop=0.3435&errorMessage=unknown%20error&from=drop&height=516&id=u787845e2&margin=%5Bobject%20Object%5D&name=cf0b89f15f0196d0737b244e52304c3.png&originHeight=1074&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76271&status=error&style=none&taskId=u74941fff-3921-42c8-b960-102fd2ad01f&title=&width=238\" alt=\"cf0b89f15f0196d0737b244e52304c3.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151919111-1d3454b3-8d10-4929-90ed-c2e9af710c09.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=512&id=u29dea63b&margin=%5Bobject%20Object%5D&name=fff25dd55ab1377b4f4d2ab5ecf1223.png&originHeight=1063&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92348&status=error&style=none&taskId=u94760290-d3b4-4f16-8f85-eeeae095e87&title=&width=248\" alt=\"fff25dd55ab1377b4f4d2ab5ecf1223.png\"><br><a name=\"LSipv\"></a></p>\n<h2 id=\"城市切换\"><a href=\"#城市切换\" class=\"headerlink\" title=\"城市切换\"></a>城市切换</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152046428-1bdb24b7-062d-43a5-a4bc-4359de67d9d7.png#clientId=u71dd48f8-494e-4&crop=0&crop=0.1341&crop=0.9941&crop=0.9073&errorMessage=unknown%20error&from=drop&height=295&id=u5a1ac71b&margin=%5Bobject%20Object%5D&name=967526cda0f31c22c6655f6f549134f.png&originHeight=410&originWidth=338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27824&status=error&style=none&taskId=u573e9fc3-9b13-4585-91a5-92a3b00bcf2&title=&width=243\" alt=\"967526cda0f31c22c6655f6f549134f.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665152032205-5f766dc5-3f0c-40c2-8ff1-e19f9f38a880.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=230&id=ua652657e&margin=%5Bobject%20Object%5D&name=aff222c8825a5a4c04858e80f0d02ec.png&originHeight=386&originWidth=395&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22195&status=error&style=none&taskId=u87a1b6fe-3c75-4e50-b380-0db886214fe&title=&width=235\" alt=\"aff222c8825a5a4c04858e80f0d02ec.png\"><br><a name=\"Fu5wA\"></a></p>\n<h2 id=\"暗夜模式的切换\"><a href=\"#暗夜模式的切换\" class=\"headerlink\" title=\"暗夜模式的切换\"></a>暗夜模式的切换</h2><p>点击城市选择最右边的按钮就可以切换主题了<br><a name=\"ea8f5\"></a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665151994010-980a7799-bd3c-4a09-87cf-4ca94473d2c0.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=497&id=u8fb47000&margin=%5Bobject%20Object%5D&name=3380940c7ccbab8b6c0cb5d6a807132.png&originHeight=1077&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75416&status=error&style=none&taskId=ufa782583-7465-4bd5-975f-90d5fc51cce&title=&width=240\" alt=\"3380940c7ccbab8b6c0cb5d6a807132.png\"></h2><p><a name=\"Jyx18\"></a></p>\n<h1 id=\"遇到的问题与我是如何克服的（有些没能克服555）\"><a href=\"#遇到的问题与我是如何克服的（有些没能克服555）\" class=\"headerlink\" title=\"遇到的问题与我是如何克服的（有些没能克服555）\"></a>遇到的问题与我是如何克服的（有些没能克服555）</h1><p><a name=\"nkPxP\"></a></p>\n<h2 id=\"微信小程序合法域名的配置\"><a href=\"#微信小程序合法域名的配置\" class=\"headerlink\" title=\"微信小程序合法域名的配置\"></a>微信小程序合法域名的配置</h2><p>我在这个项目中用了四个不同的天气api（因为有些api提供的数据不全或者要收费）<br />我在项目上线的最后阶段，发现有些天气数据获取不到了，还有阿里云数据库的城市列表和城市对应的id都获取失败了，代码肯定是没问题的，那肯定是配置哪里出问题了<br />解决方法：<br />在开发环境下，微信开发者工具默认不校验域名，但是在最后上线的时候要设置小程序的合法域名，像这样：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665153482615-4b29047f-31bb-4eae-96ad-f85803abb614.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=274&id=u593d5ef7&margin=%5Bobject%20Object%5D&name=abeefa9dffeb32f970f4aa77d46cc55.png&originHeight=584&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16076&status=error&style=none&taskId=u6cb4cc34-da10-449c-b397-6192e2ac5cc&title=&width=443\" alt=\"abeefa9dffeb32f970f4aa77d46cc55.png\"><br />但是，等一下，阿里云数据库的域名我从哪里拿到呢，代码里没有出现服务器域名，因为是直接在uniapp里关联了之后连接的，在阿里云控制台没找到，我在网上搜索了很久也没找到解决方法。在那天的晚上，我抓耳挠腮找不到解决方案，躺在床上准备放弃的时候，我灵光一现，把微信开发者工具的不校验合法域名去掉，不就会有报错提示“XXX”不是合法的域名了吗，那我就可以拿到服务器的域名了。现在想想其实是很好解决的，但是我当时却被卡了好久。<br><a name=\"yxkL6\"></a></p>\n<h2 id=\"组件达不到自己想实现的效果\"><a href=\"#组件达不到自己想实现的效果\" class=\"headerlink\" title=\"组件达不到自己想实现的效果\"></a>组件达不到自己想实现的效果</h2><p>在我使用uniapp的自定义导航栏组件的时候，我发现这个导航栏下面总是有一条白色的实线，在白天模式下不明显，在暗夜模式下就很明显，而官方文档里也没有给出去除实线的方法。<br />解决方法：<br />修改组件的代码，打开组件的路径，打开文件，我猜这个实线的宽度为1px，查找定位到了之后，就把width改成0px就可以了<br><a name=\"LgdFH\"></a></p>\n<h2 id=\"奇怪的下拉选择框（算是解决了）\"><a href=\"#奇怪的下拉选择框（算是解决了）\" class=\"headerlink\" title=\"奇怪的下拉选择框（算是解决了）\"></a>奇怪的下拉选择框（算是解决了）</h2><p>uniapp给出了下拉选择框的组件，我需要两个下拉选择框，一个选择省份，一个选择市，但是当我点击第一个选择框时，也就是我选择了省份时，既执行了第一个组件的change事件，也执行了第二个组件的change事件，而且只在第一次点击组件时生效，之后就都正常了，这就导致我第一次选择省份时数据重新加载了一遍。<br />我的解决方案：<br />加一个bool类型的数据，初始值true，第一次点击改为false，第二组件的change事件判断一下，不是第一次点击才执行<br />虽然我解决了，但是这个问题的出现真的好迷<br><a name=\"sAG0F\"></a></p>\n<h2 id=\"从数据库获取城市数据\"><a href=\"#从数据库获取城市数据\" class=\"headerlink\" title=\"从数据库获取城市数据\"></a>从数据库获取城市数据</h2><p>我不但需要两级的城市列表，作为我城市选择框的数据，还需要城市对应的id来作为api的参数，我是下载了某个天气api的城市id表，做一些数据加工，由于数据太大了，不能直接放在本地里（浪费空间），更不能直接保存在页面里（内存直接炸了）<br />解决方法：<br />我用了uniCloud的阿里云数据库，直接用uniapp提供的方法，先添加数据，等数据导入了之后再去读取。<br><a name=\"zmMbU\"></a></p>\n<h2 id=\"最后上线的效果和开发环境下的有差别（未解决）\"><a href=\"#最后上线的效果和开发环境下的有差别（未解决）\" class=\"headerlink\" title=\"最后上线的效果和开发环境下的有差别（未解决）\"></a>最后上线的效果和开发环境下的有差别（未解决）</h2><p>这是上线环境：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1665155744445-c6f74844-3c5c-4577-b9f8-be839b649dae.jpeg#clientId=u71dd48f8-494e-4&crop=0.0045&crop=0&crop=1&crop=0.3149&errorMessage=unknown%20error&from=drop&height=782&id=uc33b4a19&margin=%5Bobject%20Object%5D&name=Screenshot_20221007_220120_com.tencent.mm.jpg&originHeight=2400&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=527451&status=error&style=none&taskId=ubddee897-693a-4f41-9722-ce45d6164dc&title=&width=352\" alt=\"Screenshot_20221007_220120_com.tencent.mm.jpg\"><br />这是开发环境：<br /><img src=\"https://cdn.nlark.com/yuque/0/2022/png/28499732/1665155850311-0737a4b2-589e-4aea-87a6-7b5ac9ff6fdb.png#clientId=u71dd48f8-494e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=drop&height=237&id=uc3b90cce&margin=%5Bobject%20Object%5D&name=%5B%7B0%24U%28%28HY%24O58%40UE%5D4~JNZN.png&originHeight=337&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21530&status=error&style=none&taskId=u6477e7b9-7859-476e-82fb-6b3642ceb5b&title=&width=353\" alt=\"[{0$U((HY$O58@UE]4~JNZN.png\"><br />如图，小程序上线之后图表把城市名给挡住了<br />修改了z-index也无济于事，看组件的代码也看不出什么端倪，完全没有头绪<br><a name=\"Xy0CV\"></a></p>\n<h2 id=\"获取定位（未解决）\"><a href=\"#获取定位（未解决）\" class=\"headerlink\" title=\"获取定位（未解决）\"></a>获取定位（未解决）</h2><p>uniapp官方提供了获取地址的接口和第三方的高德SDK<br />分别是：<a href=\"https://uniapp.dcloud.net.cn/api/location/location.html\">https://uniapp.dcloud.net.cn/api/location/location.html</a><br /><a href=\"https://ask.dcloud.net.cn/article/35070\">https://ask.dcloud.net.cn/article/35070</a><br />但是这两种方法都试过了，都会报错，如果不用uniapp用小程序提供的接口是可以的，因为精力有限，也就没有继续研究了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clmle0x7g0009i4v1d2zshwvv","category_id":"clmle0x7e0007i4v1d5kr7wb0","_id":"clmle0x7m000ei4v16kqs5n5l"},{"post_id":"clmle0x7c0005i4v1c047dvst","category_id":"clmle0x7e0007i4v1d5kr7wb0","_id":"clmle0x7n000hi4v14bxacd2h"},{"post_id":"clmle0x7h000ai4v1dllv8vep","category_id":"clmle0x7e0007i4v1d5kr7wb0","_id":"clmle0x7o000ji4v16r4y63i9"},{"post_id":"clmle0x7d0006i4v17jir9hck","category_id":"clmle0x7e0007i4v1d5kr7wb0","_id":"clmle0x7q000ni4v1fho934dj"},{"post_id":"clmle0x7f0008i4v16igm321z","category_id":"clmle0x7e0007i4v1d5kr7wb0","_id":"clmle0x7q000pi4v16b5wg5t2"},{"post_id":"clmle0x7k000ci4v15b4c56pn","category_id":"clmle0x7o000ki4v179qq0wnm","_id":"clmle0x7s000vi4v1fw6ceb6p"},{"post_id":"clmle0x7l000di4v1c5j9b5g2","category_id":"clmle0x7o000ki4v179qq0wnm","_id":"clmle0x7u0011i4v1bh8ng2de"},{"post_id":"clmle0x7m000gi4v11vcpcurd","category_id":"clmle0x7o000ki4v179qq0wnm","_id":"clmle0x7w0017i4v1aolz5nvt"},{"post_id":"clmle0x7n000ii4v16p79cur7","category_id":"clmle0x7o000ki4v179qq0wnm","_id":"clmle0x7x001bi4v10y4d5217"},{"post_id":"clmle0x7p000mi4v18acj3jtl","category_id":"clmle0x7w0016i4v1dyesbf3r","_id":"clmle0x7z001hi4v1ci404z4p"},{"post_id":"clmle0x7q000oi4v12euhey4k","category_id":"clmle0x7w0016i4v1dyesbf3r","_id":"clmle0x82001ni4v18g4v7nem"},{"post_id":"clmle0x7r000ri4v160539rj9","category_id":"clmle0x7z001gi4v17zufbsop","_id":"clmle0x87001ti4v18w3dduek"},{"post_id":"clmle0x7s000ti4v11oivf54r","category_id":"clmle0x82001pi4v1124mbxdx","_id":"clmle0x890020i4v10b1q37i6"},{"post_id":"clmle0x7s000wi4v19foc4dia","category_id":"clmle0x87001vi4v16ob0e7oj","_id":"clmle0x8a0028i4v140rw9oje"},{"post_id":"clmle0x7u000yi4v1fpuab4ya","category_id":"clmle0x82001pi4v1124mbxdx","_id":"clmle0x8c002di4v1hb7t2ijs"},{"post_id":"clmle0x7v0012i4v1a8dj6opa","category_id":"clmle0x87001vi4v16ob0e7oj","_id":"clmle0x8d002gi4v1fs1kebgy"},{"post_id":"clmle0x7w0015i4v1djxu562c","category_id":"clmle0x87001vi4v16ob0e7oj","_id":"clmle0x8d002hi4v183vs5awn"},{"post_id":"clmle0x7w0018i4v12492c9dg","category_id":"clmle0x8c002fi4v1hyhqbpu3","_id":"clmle0x8d002ji4v1a065hlmo"},{"post_id":"clmle0x7x001ai4v14zbd1iwm","category_id":"clmle0x8d002ii4v11xepbo2o","_id":"clmle0x8e002mi4v12sz9ckhw"},{"post_id":"clmle0x7y001di4v19l8wetkz","category_id":"clmle0x8d002ii4v11xepbo2o","_id":"clmle0x8e002ni4v17xvn5od0"},{"post_id":"clmle0x7y001ei4v11ncxc2lc","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8e002qi4v1h5kjg4ir"},{"post_id":"clmle0x7z001ji4v18uid9aak","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8e002si4v17mhh6nw8"},{"post_id":"clmle0x81001li4v142p19rev","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8f002ui4v1fmaz5zci"},{"post_id":"clmle0x82001qi4v1ef6e2lfp","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8f002wi4v10w767vh9"},{"post_id":"clmle0x83001ri4v1d9xb2gc9","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8g002xi4v183mv60fy"},{"post_id":"clmle0x87001ui4v1aytsausm","category_id":"clmle0x8f002vi4v18jfd3nsc","_id":"clmle0x8g0030i4v1fy3r3lfh"},{"post_id":"clmle0x87001xi4v1cv9bgwtg","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8h0032i4v150tf7d5s"},{"post_id":"clmle0x88001zi4v1gac5534m","category_id":"clmle0x8d002li4v11gjf1uvi","_id":"clmle0x8h0034i4v1e87y93ol"},{"post_id":"clmle0x890023i4v12er0ex17","category_id":"clmle0x8d002ii4v11xepbo2o","_id":"clmle0x8i0036i4v18w4jeo3w"},{"post_id":"clmle0x8a0025i4v1h6dq9ync","category_id":"clmle0x8d002ii4v11xepbo2o","_id":"clmle0x8j0037i4v11ax326yg"},{"post_id":"clmle0x8b0029i4v1ek7f1uta","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8k003ai4v172gj2xfx"},{"post_id":"clmle0x8b002bi4v17q8ba5tj","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8k003bi4v13sv5ghdb"},{"post_id":"clmle0x8c002ei4v17v70dsg8","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8k003ci4v1344s9ooh"},{"post_id":"clmle0x8n003di4v12i161vcb","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8p003gi4v19843amtd"},{"post_id":"clmle0x8o003ei4v18okd2s86","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8p003hi4v17zykf1lc"},{"post_id":"clmle0x8o003fi4v13w8d76sr","category_id":"clmle0x8h0035i4v1gqi9f871","_id":"clmle0x8p003ii4v1aicf4al4"}],"PostTag":[{"post_id":"clmle0x7m000gi4v11vcpcurd","tag_id":"clmle0x7p000li4v18gw3d123","_id":"clmle0x7u000zi4v18oxk3ntr"},{"post_id":"clmle0x7m000gi4v11vcpcurd","tag_id":"clmle0x7r000si4v11r98arlu","_id":"clmle0x7v0013i4v1g83h3y98"},{"post_id":"clmle0x7q000oi4v12euhey4k","tag_id":"clmle0x7t000xi4v11sl2hobz","_id":"clmle0x7z001ii4v1ar9tahed"},{"post_id":"clmle0x7q000oi4v12euhey4k","tag_id":"clmle0x7v0014i4v15rlu7yp7","_id":"clmle0x81001ki4v16idz9k39"},{"post_id":"clmle0x7q000oi4v12euhey4k","tag_id":"clmle0x7x0019i4v13lzn3l39","_id":"clmle0x82001oi4v14dr9ham6"},{"post_id":"clmle0x7v0012i4v1a8dj6opa","tag_id":"clmle0x7z001fi4v1cwzv0yow","_id":"clmle0x87001wi4v182519uxa"},{"post_id":"clmle0x7v0012i4v1a8dj6opa","tag_id":"clmle0x81001mi4v1a0wz8sri","_id":"clmle0x88001yi4v10jot7p36"},{"post_id":"clmle0x83001ri4v1d9xb2gc9","tag_id":"clmle0x7p000li4v18gw3d123","_id":"clmle0x890021i4v173h04rhk"},{"post_id":"clmle0x83001ri4v1d9xb2gc9","tag_id":"clmle0x81001mi4v1a0wz8sri","_id":"clmle0x890024i4v137ywds2h"},{"post_id":"clmle0x81001li4v142p19rev","tag_id":"clmle0x7p000li4v18gw3d123","_id":"clmle0x8a0026i4v13eludnf6"},{"post_id":"clmle0x81001li4v142p19rev","tag_id":"clmle0x81001mi4v1a0wz8sri","_id":"clmle0x8b002ai4v101su7hcl"}],"Tag":[{"name":"前端","_id":"clmle0x7p000li4v18gw3d123"},{"name":"常用技巧","_id":"clmle0x7r000si4v11r98arlu"},{"name":"java","_id":"clmle0x7t000xi4v11sl2hobz"},{"name":"云日志","_id":"clmle0x7v0014i4v15rlu7yp7"},{"name":"大数据","_id":"clmle0x7x0019i4v13lzn3l39"},{"name":"后端","_id":"clmle0x7z001fi4v1cwzv0yow"},{"name":"语言基础","_id":"clmle0x81001mi4v1a0wz8sri"}]}}