<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lilming的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-17T01:34:58.225Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>lilming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python爬虫----Requests库</title>
    <link href="http://example.com/2023/07/17/Python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB----Requests%E5%BA%93/"/>
    <id>http://example.com/2023/07/17/Python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB----Requests%E5%BA%93/</id>
    <published>2023-07-17T01:34:56.000Z</published>
    <updated>2023-07-17T01:34:58.225Z</updated>
    
    <content type="html"><![CDATA[<p><a name="6b474650"></a></p><h1 id="requests库的基本使用"><a href="#requests库的基本使用" class="headerlink" title="requests库的基本使用"></a>requests库的基本使用</h1><p><a name="c85ab9d3"></a></p><h2 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h2><p><a name="44a3f242"></a></p><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><ul><li>r.status_code HTTP请求的返回状态，200表示连接成功，404表示失败</li><li>r.text HTTP响应内容的字符串形式，即，url对应的页面内容</li><li>r.encoding 从HTTPheader中猜测的响应内容编码方式</li><li>r.apparent_encoding 从内容中分析出的响应内容编码方式（备选编码方式）</li><li>r.content HTTP响应内容的二进制形式</li></ul><p><a name="e449cf10"></a></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>requests.ConnectionError 网络连接错误异常，如DNS查询失败、拒绝连接等</li><li>requests.HTTPError HTTP错误异常</li><li>requests.URLRequired URL缺失异常</li><li>requests.TooManyRedirects 超过最大重定向次数，产生重定向异常</li><li>requests.ConnectTimeout 连接远程服务器超时异常</li><li>requests.Timeout 请求URL超时，产生超时异常</li></ul><p><a name="r.status_code"></a></p><h3 id="r-status-code"><a href="#r-status-code" class="headerlink" title="r.status_code"></a>r.status_code</h3><p>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要<br />增加额外的if语句，该语句便于利用try‐except进行异常处理</p><p><a name="162ddc62"></a></p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">requests.request()  #支持以下的所有方法，如第一个参数设置为&quot;Get&quot;</span><br><span class="line">requests.get()      #获取HTML网页的所有信息</span><br><span class="line">requests.head()     #获取HTML网页的头部信息</span><br><span class="line">requests.post()     #提交post请求，发送资源</span><br><span class="line">requests.put()      #提交put请求，会替换掉原有的资源</span><br><span class="line">requests.patch()    #提交局部修改请求</span><br><span class="line">requests.delete()   #提交删除请求</span><br></pre></td></tr></table></figure><ul><li>下面以requests.request()为例，介绍所有参数的使用</li><li>requests.request(method,url,**kwargs)</li></ul><p><a name="5f06bad4"></a></p><h3 id="method参数"><a href="#method参数" class="headerlink" title="method参数"></a>method参数</h3><p>对应请求方法有七种，和requests库的其他方法功能一致<br />除了上面的六中之外还有OPTIONS请求方法</p><p><a name="2b0eac5b"></a></p><h3 id="url参数"><a href="#url参数" class="headerlink" title="url参数"></a>url参数</h3><p>网站url地址</p><p><a name="bb92f887"></a></p><h3 id="kwargs（表示可选）"><a href="#kwargs（表示可选）" class="headerlink" title="kwargs（表示可选）"></a><strong>kwargs（</strong>表示可选）</h3><ul><li>params将键值对增加到url</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span><br><span class="line">r = requests.request(&#x27;GET&#x27;, &#x27;http://python123.io/ws&#x27;, params=kv)</span><br><span class="line">print(r.url)</span><br><span class="line">#http://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><ul><li>data将字典、字节序列或文件对象作为request的对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class="line">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=kv)</span><br><span class="line">body = &quot;主体内容&quot;</span><br><span class="line">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,data=body)</span><br></pre></td></tr></table></figure><ul><li>json将JSON格式的数据作为requests的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span><br><span class="line">r = request.request(&quot;POST&quot;,&quot;http://pythton123.io/ws&quot;,json=kv)</span><br></pre></td></tr></table></figure><ul><li>headers定制HTTP头部中的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hd = &#123;&#x27;user‐agent&#x27;: &#x27;Chrome/10&#x27;&#125;</span><br><span class="line">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, headers=hd)</span><br></pre></td></tr></table></figure><ul><li>cookies</li><li>files字典类型，传输文件，值要用open()函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs = &#123;&#x27;file&#x27;: open(&#x27;data.xls&#x27;, &#x27;rb&#x27;)&#125;</span><br><span class="line">r = requests.request(&#x27;POST&#x27;, &#x27;http://python123.io/ws&#x27;, files=fs)</span><br></pre></td></tr></table></figure><ul><li>auth</li><li>timeout超时设置(秒为单位)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, timeout=10)</span><br></pre></td></tr></table></figure><ul><li>proxies字典类型设定代理服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pxs = &#123; &#x27;http&#x27;: &#x27;http://user:pass@10.10.10.1:1234&#x27;</span><br><span class="line">&#x27;https&#x27;: &#x27;https://10.10.10.1:4321&#x27; &#125;</span><br><span class="line">r = requests.request(&#x27;GET&#x27;, &#x27;http://www.baidu.com&#x27;, proxies=pxs)</span><br></pre></td></tr></table></figure><ul><li>allow_redirects :True&#x2F;False，默认为True，重定向开关</li><li>stream:True&#x2F;False，默认为True，获取内容立即下载开关</li><li>verify:True&#x2F;False，默认为True，认证SSL证书开关</li><li>cert:本地SSL证书路径</li></ul><p><a name="d2424c30"></a></p><h2 id="爬虫的通用框架"><a href="#爬虫的通用框架" class="headerlink" title="爬虫的通用框架"></a>爬虫的通用框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">def getHtmlText(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url,timeout=30)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding()</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;产生异常&quot;</span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    url = &quot;http://www.baidu.com&quot;</span><br><span class="line">    print(getHtmlText(url))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;6b474650&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;requests库的基本使用&quot;&gt;&lt;a href=&quot;#requests库的基本使用&quot; class=&quot;headerlink&quot; title=&quot;requests库的基本使用&quot;&gt;&lt;/a&gt;requests库的基本使</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python爬虫----BeautifulSoup库</title>
    <link href="http://example.com/2023/07/17/Python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB----BeautifulSoup%E5%BA%93/"/>
    <id>http://example.com/2023/07/17/Python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB----BeautifulSoup%E5%BA%93/</id>
    <published>2023-07-17T01:34:53.000Z</published>
    <updated>2023-07-17T01:34:54.448Z</updated>
    
    <content type="html"><![CDATA[<p><a name="c024c16d"></a></p><h1 id="导入beautifulsoup"><a href="#导入beautifulsoup" class="headerlink" title="导入beautifulsoup"></a>导入beautifulsoup</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br></pre></td></tr></table></figure><p><a name="063d6819"></a></p><h1 id="beautifulsoup方法"><a href="#beautifulsoup方法" class="headerlink" title="beautifulsoup方法"></a>beautifulsoup方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(&quot;&lt;p&gt;date&lt;/p&gt;&quot;,&quot;html.parser&quot;)</span><br><span class="line">soup = BeautifulSoup(open(&quot;D://demo.html&quot;),&quot;html.parser&quot;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数是利用requests库得到的网页全代码，可以是字符串也可以是HTML文件</li><li>第二个参数是选择解析这段HTML代码的解释器</li><li>最后会得到一个能代表HTML标签树的一个实例</li><li>也可以理解为标签的集合</li></ul><p><a name="38ed9afc"></a></p><h1 id="beautifulsoup库的基本元素"><a href="#beautifulsoup库的基本元素" class="headerlink" title="beautifulsoup库的基本元素"></a>beautifulsoup库的基本元素</h1><p><a name="def47dff"></a></p><h2 id="所有的bs4库的解析器"><a href="#所有的bs4库的解析器" class="headerlink" title="所有的bs4库的解析器"></a>所有的bs4库的解析器</h2><ul><li>lxml的HTML解析器<br />条件：pip install lmxl<br />使用方法：BeautifulSoup(mk,”lmxl”)</li><li>lmxl的XML解析器<br />条件：pip install lxml<br />使用方法：BeautifulSoup(mk,”xml”)</li><li>html5lib的解析器<br />条件：pip install html5lib<br />使用条件：BeautifulSoup(mk,”html5lib”)</li></ul><p><a name="61a7d4f4"></a></p><h2 id="标签的有关元素"><a href="#标签的有关元素" class="headerlink" title="标签的有关元素"></a>标签的有关元素</h2><ul><li><p>Tag标签，最基本的信息组织元素，用&lt;&gt;和&lt;&#x2F;&gt;表明开头和结尾</p></li><li><p>Name标签的名称，如…的名称就是head</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.a.name #a</span><br><span class="line">soup.a.parent.name #div</span><br></pre></td></tr></table></figure><ul><li>Attributes标签的属性，字典类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.a.attrs </span><br><span class="line"># &#123;&#x27;class&#x27;: [&#x27;navbar-brand&#x27;], &#x27;href&#x27;: &#x27;http://www.daidaitiantian.top/&#x27;&#125;</span><br></pre></td></tr></table></figure><ul><li>NavigableString&lt;&gt;…&lt;&#x2F;&gt;中间的字符串</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.a.string</span><br><span class="line">#呆呆和甜甜</span><br></pre></td></tr></table></figure><ul><li>Comment注释类型</li></ul><p><a name="a4a23c11"></a></p><h1 id="遍历HTML的方法"><a href="#遍历HTML的方法" class="headerlink" title="遍历HTML的方法"></a>遍历HTML的方法</h1><p><a name="533ecbae"></a></p><h2 id="标签数的遍历方式"><a href="#标签数的遍历方式" class="headerlink" title="标签数的遍历方式"></a>标签数的遍历方式</h2><p><img src="http://note.youdao.com/yws/res/648/WEBRESOURCE8a9147bbf0b0ce3a208671adaf22bbbd#crop=0&crop=0&crop=1&crop=1&id=Wiso8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><p><a name="dbfbb788"></a></p><h2 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h2><ul><li>contents子节点的列表，将所有子节点存入列表</li><li>children子节点的迭代类型，与contents类似用于遍历子节点</li><li>descendants子孙节点的迭代类型，用于循环遍历</li></ul><p><a name="ede05cbe"></a></p><h2 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h2><ul><li>parent节点的父标签</li><li>parents节点先辈标签的迭代类型，用于遍历</li></ul><p><a name="b57148a0"></a></p><h2 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h2><ul><li>next_sibling下一个平行节点的标签</li><li>previous_sibling上一平行节点的标签</li><li>next_sblings后续所有平行节点的迭代类型</li><li>previous_sblinga前面所有平行节点的迭代类型<br />不是同一父节点下的标签不是平行关系<br />有可能返回的是NavigableString属性，后面会介绍排除的方法</li></ul><p><a name="ff1aba7d"></a></p><h1 id="HTML格式输出和编码"><a href="#HTML格式输出和编码" class="headerlink" title="HTML格式输出和编码"></a>HTML格式输出和编码</h1><ul><li>prettify()能够格式化输出Html内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup = beautifulsoup(&quot;&lt;p&gt;呆呆和甜甜&lt;/p&gt;&quot;，&quot;html.parser&quot;)</span><br><span class="line">print(soup.p.prettify)</span><br><span class="line"># &lt;p&gt;</span><br><span class="line">#   呆呆和甜甜</span><br><span class="line"># &lt;/p&gt;</span><br></pre></td></tr></table></figure><p><a name="f359139e"></a></p><h1 id="lt-gt-find-all"><a href="#lt-gt-find-all" class="headerlink" title="&lt;&gt;.find_all()"></a>&lt;&gt;.find_all()</h1><ul><li>返回的是一个列表</li></ul><p><a name="3d0a2df9"></a></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><a name="9ee23a89"></a></p><h3 id="name需要检索的标签名字符串"><a href="#name需要检索的标签名字符串" class="headerlink" title="name需要检索的标签名字符串"></a>name需要检索的标签名字符串</h3><ul><li>如果是True则打印所有标签</li><li>要打印多个标签可使用列表</li></ul><p><a name="19e3b452"></a></p><h3 id="attrs标签属性检索字符串"><a href="#attrs标签属性检索字符串" class="headerlink" title="attrs标签属性检索字符串"></a>attrs标签属性检索字符串</h3><ul><li>也可以对一个特定的属性值进行检索<br />要加下划线，如：class_</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(id_ = &quot;link&quot;)</span><br><span class="line"># 搜索出属性包含id= link的标签</span><br></pre></td></tr></table></figure><p><a name="ad73f43f"></a></p><h3 id="recursive-是否对子孙全部检索，默认是True"><a href="#recursive-是否对子孙全部检索，默认是True" class="headerlink" title="recursive 是否对子孙全部检索，默认是True"></a>recursive 是否对子孙全部检索，默认是True</h3><p><a name="e3c2dd0a"></a></p><h3 id="srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索"><a href="#srting对-lt-gt-…-lt-x2F-gt-中间的内容进行检索" class="headerlink" title="srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索"></a>srting对&lt;&gt;…&lt;&#x2F;&gt;中间的内容进行检索</h3><p><a name="d8771b35"></a></p><h2 id="find——all的简写形式"><a href="#find——all的简写形式" class="headerlink" title="find——all的简写形式"></a>find——all的简写形式</h2><ul><li>() &#x3D;&#x3D;.find_all()</li><li>soup() &#x3D;&#x3D; soup.find_all()</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;c024c16d&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;导入beautifulsoup&quot;&gt;&lt;a href=&quot;#导入beautifulsoup&quot; class=&quot;headerlink&quot; title=&quot;导入beautifulsoup&quot;&gt;&lt;/a&gt;导入beautifu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2023-07-17T01:34:05.000Z</published>
    <updated>2023-07-17T01:34:07.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><p>Web 使用一种名为 HTTP（超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。</p><h2 id="TCP-x2F-IP协议"><a href="#TCP-x2F-IP协议" class="headerlink" title="TCP&#x2F; IP协议"></a>TCP&#x2F; IP协议</h2><blockquote><p>TCP&#x2F;IP 是互联网相关的各类协议族的总称</p></blockquote><p>通常使用的网络（包括互联网）是在 TCP&#x2F;IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。</p><h3 id="分层原理"><a href="#分层原理" class="headerlink" title="分层原理"></a>分层原理</h3><ol><li>应用层<br> 应用层决定了向用户提供应用服务时通信的活动。<br> 比如：<br> - FTP（File Transfer Protocol，文件传输协议<br> - DNS（Domain Name System，域 名系统）<br> - HTTP 协议也处于该层。</li><li>表示层<br> 设置固有格式和网络标准数据格式的转换</li><li>会话层<ol><li>通信管理，负责建立和断开通信连接</li><li><strong>管理传输层以下的分层</strong></li></ol></li><li>传输层<br> 起着可靠传输的作用。只在通信双方节点上进行处理，而无需在路由器上处理。<br> 比如：<br> - TCP（Transmission Control Protocol，传输控制协议）<br> - UDP（User Data Protocol，用户数据报协议）</li><li>网络层<br> 负责寻址和路由选择。<br> 目标地址可以是多个网络通过路由器连接而成的某一个地址。<br> 比如：<br> - IP协议（Internet Protocol）网际协议</li><li>链路层<br> 负责物理层面上互连的、节点之间的通信传输。例如与1个以太网相连的2个节点之间的通信。</li><li>物理层<br> 负责0、1比特流（0、1序列）与电压的高低、光的闪灭之间的互换。</li></ol><h3 id="TCP-x2F-IP-通信传输流（以发送-http-请求举例）"><a href="#TCP-x2F-IP-通信传输流（以发送-http-请求举例）" class="headerlink" title="TCP&#x2F;IP 通信传输流（以发送 http 请求举例）"></a>TCP&#x2F;IP 通信传输流（以发送 http 请求举例）</h3><h4 id="会话层以上的处理"><a href="#会话层以上的处理" class="headerlink" title="会话层以上的处理"></a>会话层以上的处理</h4><blockquote><p>会话层以上的部分会对何时建立连接、何时发送数据等问题进行管理，并不具有实际传输数据的功能</p></blockquote><ol><li>客户端应用层：<ul><li>为应用程序提供服务并规定应用程序中通信相关的细节。</li><li>比如通过 DNS 获取域名对应的 IP</li><li>并且HTTP 协议发出一个想查看某个 Web 页面的请求</li></ul></li><li>客户端表示层<ul><li>决定了将数据转换为网络标准传输格式</li><li>比如将中文转化为 UTF-8 编码格式</li><li>在服务器端则是将这些网络标准格式的数据恢复为“该计算机特定的数据格式”</li></ul></li><li>客户端会话层<ul><li>决定采用何种连接方法是会话层的主要责任</li><li>比如建立一条连接发送所有信息；每发一次建立一条连接；同时建立多条连接同时发送多条信息</li><li>会话层只负责决定建立连接和断开连接的时机，而传输层进行实际的建立和断开处理。</li></ul></li></ol><h4 id="传输层以下的处理"><a href="#传输层以下的处理" class="headerlink" title="传输层以下的处理"></a>传输层以下的处理</h4><blockquote><p>真正负责在网络上传输具体数据的是会话层以下的“无名英雄”</p></blockquote><ol><li>客户端传输层：<ol><li>TCP协议将HTTP请求报文分割，并在各个报文上打上标记序号和端口号</li><li>三次握手确定传输成功</li></ol></li><li>客户端网络层：<ol><li>IP协议将数据包发送给对方</li><li>ARP 协议负责获取 MAC 地址，若解析不到 MAC 地址则发给下一个中转站（路由器），让下一个路由器来搜索 MAC 地址</li></ol></li><li>链路层：<ol><li>数据链路层的作用就是在这些通过传输介质互连的设备之间进行数据处理。</li><li>网络层与链路层都是基于 MAC 地址将数据发送给接收端的，但是网络层负责将整个数据发送给最终目标地址，而链路层则只负责发送一个分段的数据。</li></ol></li><li>物理层:<ol><li>物理层中，将数据的0、1转换为电压和脉冲光传输给物理的传输介质，而相互直连的设备之间使用 MAC 地址实现传输。</li></ol></li></ol><h3 id="IP-地址、MAC-地址和-ARP-协议"><a href="#IP-地址、MAC-地址和-ARP-协议" class="headerlink" title="IP 地址、MAC 地址和 ARP 协议"></a>IP 地址、MAC 地址和 ARP 协议</h3><blockquote><p>IP 协议的作用是把各种数据包传送给对方。</p></blockquote><ul><li>IP 地址指明了<strong>节点</strong>被分配到的地址（可变的）</li><li>MAC 地址是指<strong>网卡</strong>所属的固定地址（基本上不变）</li><li>ARP 在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表经常动态更新。每一台主机都设有一个 ARP 高速缓存(ARP Cache)，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表(并且每一个映射地址都设置有生存时间)<br>过程：</li></ul><ol><li>发送端只知道接收端的IP地址，发给路由器1</li><li>路由器1使用 ARP 解析IP发现该 MAC 不在局域网中，发给下一个路由器2<br>····</li><li>路由器n使用 ARP 解析IP地址发现该 MAC 地址在局域网中，发送给接收方</li></ol><h3 id="TCP协议三次握手"><a href="#TCP协议三次握手" class="headerlink" title="TCP协议三次握手"></a>TCP协议三次握手</h3><blockquote><p>TCP 位于传输层，用于提供可靠的字节流服务</p></blockquote><ul><li>字节流服务<br>为了方便传输，将大 块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。<br>总之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。</li><li>三次握手<ol><li>发送端首先发送一个带 SYN 标志的数据包给对方</li><li>接收端收到后，回传一个带有 SYN&#x2F;ACK 标志的数据包以示传达确认信息</li><li>最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。</li></ol></li></ul><h2 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h2><blockquote><p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的 协议。它提供域名到 IP 地址之间的解析服务。</p></blockquote><p>过程：</p><ol><li>发送端发送域名给DNS服务器</li><li>DNS服务器将域名对应到IP地址上，并将IP地址给发送端</li><li>发送端再向该IP地址发送访问请求</li></ol><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><h3 id="面向有连接与面向无连接"><a href="#面向有连接与面向无连接" class="headerlink" title="面向有连接与面向无连接"></a>面向有连接与面向无连接</h3><ul><li>面向有连接<br>面向有连接型，会在发送数据之前与服务器建立一条通信线路，必须要建立连接才能发送数据<br>在通信前会建立连接，在通信后会断开连接</li><li>面向无连接<br>无需建立连接，发送端可以自由发送数据。接收端由于不知道什么时候会收到数据，所以要确认是否收到了数据<br>因此即使接收端不存在或无法接收数据，发送端也能发送数据</li></ul><h3 id="电路交换和分组交换"><a href="#电路交换和分组交换" class="headerlink" title="电路交换和分组交换"></a>电路交换和分组交换</h3><h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络基础知识&quot;&gt;&lt;a href=&quot;#网络基础知识&quot; class=&quot;headerlink&quot; title=&quot;网络基础知识&quot;&gt;&lt;/a&gt;网络基础知识&lt;/h1&gt;&lt;h2 id=&quot;http协议&quot;&gt;&lt;a href=&quot;#http协议&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2023-07-17T01:34:02.000Z</published>
    <updated>2023-07-17T01:34:04.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="结构化分析"><a href="#结构化分析" class="headerlink" title="结构化分析"></a>结构化分析</h1><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h1 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h1><h1 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h1><h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;结构化分析&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/git%E5%91%BD%E4%BB%A4/</id>
    <published>2023-07-17T01:33:59.000Z</published>
    <updated>2023-07-17T01:43:16.759Z</updated>
    
    <content type="html"><![CDATA[<p><a name="eASn7"></a></p><h1 id="拉取与建立仓库"><a href="#拉取与建立仓库" class="headerlink" title="拉取与建立仓库"></a>拉取与建立仓库</h1><h2 id="用户签名"><a href="#用户签名" class="headerlink" title="用户签名"></a>用户签名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config          --global user.name 用户名</span><br><span class="line">git config          --global user.email 邮箱</span><br><span class="line">cat ~/.gitconfig</span><br></pre></td></tr></table></figure><p><a name="UrEas"></a></p><h2 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure><p><a name="Uacb3"></a></p><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init                    -- 初始化本地仓库</span><br><span class="line">git status               --查询本地库状态</span><br></pre></td></tr></table></figure><blockquote><p>会建立并转到master分支下<br><a name="dGPp5"></a></p></blockquote><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .                    -- 将改动提交至暂存区</span><br><span class="line">git commit -m &quot;日志信息&quot;             -- 提交所有改动过的文件</span><br><span class="line">git push origin master</span><br><span class="line">git reflog                   --   查看历史记录</span><br></pre></td></tr></table></figure><p><a name="aSnWT"></a></p><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD                     -- 撤销所有未提交文件的修改内容</span><br><span class="line">git checkout HEAD 文件名                    --撤销所有未提交文件的修改内容</span><br><span class="line">git revert &lt;commit&gt;                      -- 撤销提交</span><br></pre></td></tr></table></figure><p><a name="tDAWL"></a></p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="添加远程分支"><a href="#添加远程分支" class="headerlink" title="添加远程分支"></a>添加远程分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://XXX</span><br></pre></td></tr></table></figure><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a                   --查看本地分支和远程分支</span><br></pre></td></tr></table></figure><h2 id="查看远程分支-URL"><a href="#查看远程分支-URL" class="headerlink" title="查看远程分支 URL"></a>查看远程分支 URL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="更新远程分支-URL"><a href="#更新远程分支-URL" class="headerlink" title="更新远程分支 URL"></a>更新远程分支 URL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/user/new-repo.git</span><br></pre></td></tr></table></figure><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名                 -- 创建分支</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名                  -- 切换分支</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><blockquote><p>首先要切换到master分支下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge 分支名                  --合并分支</span><br></pre></td></tr></table></figure><h2 id="上传到-main-分支"><a href="#上传到-main-分支" class="headerlink" title="上传到 main 分支"></a>上传到 main 分支</h2><p>需要合并到 main 分支</p><ol><li>git fetch origin</li><li>git checkout main</li><li>git merge master –allow-unrelated-histories（合并分支解决冲突）</li></ol><ul><li>有可能两个文件有冲突，要人为决定</li><li>此处有<a href="https://blog.csdn.net/qq_35077107/article/details/108025911">解决方案</a></li></ul><h1 id="添加安全权限"><a href="#添加安全权限" class="headerlink" title="添加安全权限"></a>添加安全权限</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --add safe.directory &quot;*&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;eASn7&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;拉取与建立仓库&quot;&gt;&lt;a href=&quot;#拉取与建立仓库&quot; class=&quot;headerlink&quot; title=&quot;拉取与建立仓库&quot;&gt;&lt;/a&gt;拉取与建立仓库&lt;/h1&gt;&lt;h2 id=&quot;用户签名&quot;&gt;&lt;a href=&quot;#用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UML</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/UML/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/UML/</id>
    <published>2023-07-17T01:33:56.000Z</published>
    <updated>2023-07-17T01:33:57.686Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>深入理解TypeScript</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3TypeScript/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3TypeScript/</id>
    <published>2023-07-17T01:33:45.000Z</published>
    <updated>2023-07-17T01:33:46.764Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/CSS/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/CSS/</id>
    <published>2023-07-17T01:33:43.000Z</published>
    <updated>2023-07-17T01:33:44.144Z</updated>
    
    <content type="html"><![CDATA[<p><a name="qvVOh"></a></p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><blockquote><p>CSS是对HTML标签的属性设置方式，其特点有便于维护、增强表现力、使得网页风格统一<br>表现方式：</p><ul><li>写在HTML文件里：一是写在某个元素的属性部分，作为style属性的值；另一种是写在style标记内，style标记又在head标记里面</li><li>写在单独的CSS文件内，文件后缀为.css。这种方法更推荐，使得表现与内容分离</li></ul></blockquote><p><a name="F2UyX"></a></p><h2 id="CSS基本语法"><a href="#CSS基本语法" class="headerlink" title="CSS基本语法"></a>CSS基本语法</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;qvVOh&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;&lt;/a&gt;CSS基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CSS是对HTML标签的属性设置方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go语言基础入门</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-17T01:33:36.000Z</published>
    <updated>2023-07-17T01:33:37.477Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/HTML/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/HTML/</id>
    <published>2023-07-17T01:33:33.000Z</published>
    <updated>2023-07-17T01:33:34.456Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg"><br><a name="HFtsm"></a></p><h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><h2 id="根元素"><a href="#根元素" class="headerlink" title="根元素"></a>根元素</h2><blockquote><p><strong><!DOCTYPE html> 是一个声明，表示该文档是由 HTML5 进行编写的。</strong><br><strong>&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 &lt; html&gt; 标签之前</strong></p></blockquote><table><thead><tr><th>主根元素</th><th>html</th><th>html 元素用于告诉告诉浏览器其自身是一个 HTML 文档</th></tr></thead><tbody><tr><td>分区根元素</td><td>body</td><td>表明这是文档的主体部分</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    这是文档的头部</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是文档的主体</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="e3ce87db"></a></p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p><a name="TWAh9"></a></p><h3 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h3><blockquote><p><strong>&lt; head&gt; 标签用于定义文档的头部，它是所有头部元素的容器</strong></p></blockquote><p><a name="cFRIO"></a></p><h3 id="title标签"><a href="#title标签" class="headerlink" title="title标签"></a>title标签</h3><blockquote><p><strong>&lt; title&gt; 标签用于定义文档的标题。</strong></p></blockquote><ul><li>&lt; title&gt; 标签必须位于 &lt; head&gt;标签内部。</li><li>会在浏览器的窗口或选项卡的顶部显示<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>显示在浏览器的标题栏上<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a name="Wujh1"></a></p><h3 id="meta标记"><a href="#meta标记" class="headerlink" title="meta标记"></a>meta标记</h3><blockquote><p><strong>&lt; meta&gt; 标签用于描述页面内容，关键词，作者，最新修订时间以及其它元信息。</strong></p></blockquote><p>下面介绍meta元素的功能：</p><ol><li>编码和自适应</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>网站描述</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（关键字）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;descript&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（描述）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（作者）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（制作所用的软件）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（版权所有）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revisit-after&quot;</span> <span class="attr">content</span>=<span class="string">&quot;7 days&quot;</span> &gt;</span>//设置搜索引擎的抓取频率</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">1、none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class="line">2、noindex : 搜索引擎不索引此网页。</span><br><span class="line">3、nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class="line">4、all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class="line">5、index : 搜索引擎索引此网页。</span><br><span class="line">6、follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</span><br></pre></td></tr></table></figure><ol start="3"><li>向浏览器头部(响应头)返回信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;30&quot;</span>&gt;</span>//每30秒刷新一次</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Pragma&quot;</span><span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> //禁止从缓存中读取HTML</span><br><span class="line">//两秒刷新并且指向新页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2&quot;</span>;<span class="attr">URL</span>=<span class="string">&quot;http://www.haorooms.com&quot;</span>&gt;</span>[//两秒刷新并且指向新页面</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;（GMT时间格式）&quot;</span>&gt;</span>//设置到期时间</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=gb2312&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;charset&quot;</span> <span class="attr">content</span>=<span class="string">&quot;iso-8859-1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="fnyhk"></a></p><h3 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h3><blockquote><p><strong>&lt; base&gt;为相对链接设置基本URL</strong><br><strong>&lt; base&gt;指定用户如何打开链接，以及表单提交后浏览器的状态</strong></p></blockquote><p>属性：</p><ol><li><p>herf为文档的相对URL指定基本URL</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">base</span>  <span class="attr">href</span>=<span class="string">&quot;//www.w3cschool.cn/listings/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/javascript.html&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>target指示浏览器如何打开网址</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ol><p>| _blank    | 在新窗口打开链接                              |<br>| _self    | 在同一窗口或框架打开链接（默认），即当前的div |<br>| _parent   | 在父框架打开链接，即上一层框架                |<br>| _top      | 在整个窗口打开链接                            |<br>| framename | 在一指定框架打开链接，即在指定div             |</p><p><a name="dWD6I"></a></p><h2 id="div和语义化布局"><a href="#div和语义化布局" class="headerlink" title="div和语义化布局"></a>div和语义化布局</h2><p>在HTML5出世之前，人们实现网页布局都是利用div，而HTML5新的语义化元素也能实现网页布局，而且更凸显语义化<br />在经典的页面布局中，页面被分为 header、main、aside、footer 四个部分:<img src="https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662092868310-ef59cd51-a19c-4865-a31c-250695024632.jpeg"></p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><blockquote><p><strong>&lt;div&gt; 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</strong><br>div通常和css一起使用</p></blockquote><h3 id="页眉header"><a href="#页眉header" class="headerlink" title="页眉header"></a>页眉header</h3><blockquote><p><strong>&lt;header&gt; 标签用于定义文档的页眉（介绍信息）</strong></p></blockquote><h3 id="导航nav"><a href="#导航nav" class="headerlink" title="导航nav"></a>导航nav</h3><blockquote><p><strong>&lt;nav&gt; 标签用于定义页面主导航功能。</strong></p></blockquote><p><a name="Lv1ms"></a></p><h3 id="主体main"><a href="#主体main" class="headerlink" title="主体main"></a>主体main</h3><blockquote><p><strong>&lt;main&gt; 标签用于定义文档</strong><a href="https://man.ilovefishc.com/pageHTML5/body.html"><strong>&lt;body&gt;</strong></a><strong>或应用的主体部分。</strong></p></blockquote><p><a name="TJFWp"></a></p><h3 id="节section"><a href="#节section" class="headerlink" title="节section"></a>节section</h3><blockquote><p><strong>&lt;section&gt; 标签用于定义定义文档中的节。</strong></p></blockquote><p><a name="dDkzH"></a></p><h3 id="文章article"><a href="#文章article" class="headerlink" title="文章article"></a>文章article</h3><blockquote><p><strong>&lt;article&gt; 标签用于定义一篇文章，是网页中独立的内容，与页面其它部分无关。</strong></p></blockquote><p><a name="vyxWh"></a></p><h3 id="详情details"><a href="#详情details" class="headerlink" title="详情details"></a>详情details</h3><blockquote><p><strong>&lt;details&gt; 标签用于定义用户可见的或者隐藏的需求的补充细节。</strong></p></blockquote><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>open</td><td>open</td><td>规定 details 是否默认可见。</td></tr></tbody></table><p><a name="DBBFL"></a></p><h3 id="总结summary"><a href="#总结summary" class="headerlink" title="总结summary"></a>总结summary</h3><blockquote><p><strong>&lt;summary&gt; 标签定义 <strong><a href="https://man.ilovefishc.com/pageHTML5/detail.html"><strong>&lt;details&gt;</strong></a></strong> 元素的标题</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>《零基础入门学习Python》<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>配有同名书籍。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>配有视频教程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="HaRxr"></a></p><h3 id="插图figure"><a href="#插图figure" class="headerlink" title="插图figure"></a>插图figure</h3><blockquote><p><strong>&lt;figure&gt; 标签规定独立的流内容（图像、图表、照片、代码等等）。</strong></p></blockquote><p>figure 元素代表一段独立的内容, 经常与说明 <a href="https://man.ilovefishc.com/pageHTML5/figcaption.html">figcaption</a> 元素配合使用, 并且作为一个独立的引用单元。</p><blockquote><p><strong>&lt;figcaption&gt; 标签为 figure 元素定义标题。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/logo.png&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;鱼C-Logo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>鱼C工作室，让自学编程变得妙不可言｡◕‿◕｡<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="K1cYQ"></a></p><h3 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h3><blockquote><p><strong>&lt;aside&gt; 标签定义侧边栏，通常是网页的说明、提示、引用、附加注释、相关链接、广告等内容。</strong></p></blockquote><p><a name="Wsw5i"></a></p><h3 id="页脚footer"><a href="#页脚footer" class="headerlink" title="页脚footer"></a>页脚footer</h3><blockquote><p><strong>&lt;footer&gt; 标签定义文档或节的页脚</strong></p></blockquote><h2 id="文字内容"><a href="#文字内容" class="headerlink" title="文字内容"></a>文字内容</h2><p><a name="QZF96"></a></p><h3 id="超链接a"><a href="#超链接a" class="headerlink" title="超链接a"></a>超链接a</h3><blockquote><p><strong>&lt;a&gt; 标签用于定义超链接，超链接可以让用户从一个网页跳转到另一个网页。</strong></p></blockquote><p>基础语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;文件路径&quot;</span> <span class="attr">name</span>=<span class="string">&quot;anchor名称&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示信息&quot;</span> <span class="attr">target</span>=<span class="string">&quot;打开方式&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特殊用法：</p><ol><li><p>FTP站点访问链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;ftp://服务器IP地址或域名&quot;</span>&gt;</span>超链接文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>电子邮件超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:E-mali邮箱地址？subject=邮件主题&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义书签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">name</span>=<span class="string">&quot;书签名&quot;</span>&gt;</span>书签标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>跳转至书签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#书签名&quot;</span>&gt;</span>书签标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span>同页跳转 </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;URL#书签名&quot;</span>&gt;</span>书签标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span>异页跳转</span><br></pre></td></tr></table></figure><p><a name="Ux6mJ"></a></p></li></ol><h3 id="标题h1"><a href="#标题h1" class="headerlink" title="标题h1"></a>标题h1</h3><blockquote><p><strong>&lt;h1&gt; - &lt;h6&gt; 标签可定义标题。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>align属性:  left | center | right | justfiy<br><a name="pZDqS"></a></li></ul><h3 id="粗体b"><a href="#粗体b" class="headerlink" title="粗体b"></a>粗体b</h3><blockquote><p><strong>&lt;b&gt; 标签用于定义表示粗体的文本。</strong></p></blockquote><p>根据 HTML5 的规范，如果你只是想实现加粗效果，推荐使用 css 样式来实现：.bolder {font-weight: bolder;}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用css代替加粗<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bolder</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>:bolder;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bloder&quot;</span>&gt;</span>这是粗体文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="kAhDq"></a></p><h3 id="斜体i"><a href="#斜体i" class="headerlink" title="斜体i"></a>斜体i</h3><blockquote><p><strong>&lt;i&gt; 标签用于定义表示斜体的文本。</strong></p></blockquote><p>同样推荐使用 css 样式来实现：.italic{font-style: italic;}<br><a name="Uv1uj"></a></p><h3 id="空格、回车、分割线和特殊字符"><a href="#空格、回车、分割线和特殊字符" class="headerlink" title="空格、回车、分割线和特殊字符"></a>空格、回车、分割线和特殊字符</h3><ul><li>空格和特殊字符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>( )</span><br><span class="line"><span class="symbol">&amp;lt;</span>   (&lt;)</span><br><span class="line"><span class="symbol">&amp;gt;</span> (&gt;)</span><br><span class="line"><span class="symbol">&amp;amp;</span>   (&amp;)</span><br><span class="line"><span class="symbol">&amp;quot;</span>  (&quot;)</span><br><span class="line"><span class="symbol">&amp;times;</span> (×)</span><br><span class="line"><span class="symbol">&amp;divide;</span>(÷)</span><br><span class="line"><span class="symbol">&amp;cope;</span>  (©)版权</span><br><span class="line"><span class="symbol">&amp;reg;</span>   (®)注册商标</span><br><span class="line"><span class="symbol">&amp;trade;</span>(™)商标</span><br></pre></td></tr></table></figure><ul><li>回车和分割线</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>或者<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;(百分比或者像素px)&quot;</span> <span class="attr">size</span>=<span class="string">&quot;像素px&quot;</span> <span class="attr">color</span>=<span class="string">&quot;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left|center|right&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="BKyav"></a></p><h3 id="段落p"><a href="#段落p" class="headerlink" title="段落p"></a>段落p</h3><blockquote><p><strong>&lt;p&gt; 标签用于定义一个段落。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="HyrXI"></a></p><h3 id="整体缩进blockquote"><a href="#整体缩进blockquote" class="headerlink" title="整体缩进blockquote"></a>整体缩进blockquote</h3><blockquote><p><strong>&lt;blockquote&gt; 标签定义块引用。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>缩进5个字符位置<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>缩进10个字符位置<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="hJjuJ"></a></p><h3 id="预格式化pre"><a href="#预格式化pre" class="headerlink" title="预格式化pre"></a>预格式化pre</h3><blockquote><p><strong>&lt;pre&gt; 标签用于定义预格式化的文本。</strong></p></blockquote><p>pre 元素中的文本通常会保留空格和换行符，而文本自身也会呈现为等宽字体。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">          春 晓</span><br><span class="line">春眠不觉晓⑴，处处闻啼鸟⑵。</span><br><span class="line">夜来风雨声⑶，花落知多少⑷。</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="Q9EmI"></a></p><h2 id="图片和多媒体"><a href="#图片和多媒体" class="headerlink" title="图片和多媒体"></a>图片和多媒体</h2><p><a name="YxCUZ"></a></p><h3 id="图像img"><a href="#图像img" class="headerlink" title="图像img"></a>图像img</h3><blockquote><p><strong><img> 标签用于向网页中嵌入一幅图像。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替代文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整属性：</p><table><thead><tr><th>属性</th><th>值</th><th>说明</th><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>alt</td><td>text</td><td><br />- 鼠标悬停在图片上时出现的文字<br />- 加载失败时会代替图片<br /></td><td>align</td><td>top&amp;#124;middle&amp;#124;bottom&amp;#124;<br/>left&amp;#124;center&amp;#124;right</td><td>排列方式</td></tr><tr><td>src</td><td>URL</td><td>图片的链接</td><td>boder</td><td>pixels</td><td>边框</td></tr><tr><td>name</td><td>text</td><td>名称</td><td>hspace</td><td>pixels</td><td>左侧和右侧的空白</td></tr><tr><td>height</td><td>pixels</td><td>高</td><td>vspace</td><td>pixels</td><td>顶部和底部的空白</td></tr><tr><td>width</td><td>pixels</td><td>宽</td><td>usemap</td><td>URL</td><td>将图像定义为客户器端图像映射</td></tr></tbody></table><h3 id="map与area"><a href="#map与area" class="headerlink" title="map与area"></a>map与area</h3><ul><li><p>为图像设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">target</span>=<span class="string">&quot;打开方式&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为图像设置热区链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#+映射图像名称&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>  <span class="attr">name</span>=<span class="string">&quot;映射图像名称&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span>  <span class="attr">shap</span>=<span class="string">&quot;热区形状&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;热区坐标&quot;</span> <span class="attr">href</span>=<span class="string">&quot;URL&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span>  <span class="attr">shap</span>=<span class="string">&quot;热区形状&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;热区坐标&quot;</span> <span class="attr">href</span>=<span class="string">&quot;URL&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：img的usemap的属性值要”#+映射图像名称”</p></li></ul><table><thead><tr><th>shape值</th><th>coords值</th><th>说明</th></tr></thead><tbody><tr><td>rect（矩形）</td><td>x1,y1,x2,y2</td><td>矩形的四个坐标</td></tr><tr><td>circle（圆形）</td><td>center-x,center-y,radius</td><td>圆心坐标和半径</td></tr><tr><td>poly（多边形）</td><td>x1,y1,x2,y2,x3,y3…</td><td>各顶点坐标</td></tr></tbody></table><h3 id="picture与source"><a href="#picture与source" class="headerlink" title="picture与source"></a>picture与source</h3><blockquote><p><strong>&lt; picture&gt; 标签为其内部特定的 img 元素提供多样的 <a href="https://man.ilovefishc.com/pageHTML5/source.html">source</a> 元素</strong><br><strong><source> 标签为 picture , audio 或者 video 元素指定多个媒体资源。</strong></p></blockquote><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>src</td><td>url</td><td>规定媒体文件的 URL。</td></tr><tr><td>srcset</td><td>url</td><td>仅当source元素是picture元素的直接子元素时，srcset属性才有效。</td></tr><tr><td><a href="https://man.ilovefishc.com/pageHTML5/media.html">media</a></td><td>media query</td><td>规定媒体资源的类型。</td></tr><tr><td>sizes</td><td></td><td>表示源大小的列表，用于描述源代表的图像的最终渲染宽度。</td></tr><tr><td>type</td><td>numeric value</td><td>规定媒体资源的 MIME 类型。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:1024px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;big.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:512px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;normal.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;small.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">sytle</span>=<span class="string">&quot;width:auto&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码效果讲解：</p><ol><li>当屏幕大于1024时，显示big.jpg</li><li>当屏幕大于512小于1024时，显示normal.jpg</li><li>当屏幕小于512时，显示small.jpg<br><a name="vYXRh"></a></li></ol><h3 id="任何插件embed"><a href="#任何插件embed" class="headerlink" title="任何插件embed"></a>任何插件embed</h3><blockquote><p><strong>&lt; embed&gt; 标签定义嵌入的内容，比如插件。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">higth</span>=<span class="string">&quot;&quot;</span> <span class="attr">autostart</span>=<span class="string">&quot;true|false(是否自动播放)&quot;</span> <span class="attr">loop</span></span></span><br><span class="line"><span class="tag">  =<span class="string">&quot;true|false(是否循环)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>height</td><td>pixels</td><td>规定嵌入内容的高度。</td></tr><tr><td>src</td><td>URL 规定被嵌入内容的 URL。</td><td></td></tr><tr><td>type</td><td>MIME_type</td><td>规定嵌入内容的 MIME 类型。注：MIME &#x3D; Multipurpose Internet Mail Extensions。</td></tr><tr><td>width</td><td>pixels</td><td>规定嵌入内容的宽度。</td></tr></tbody></table><h3 id="视频video"><a href="#视频video" class="headerlink" title="视频video"></a>视频video</h3><blockquote><p><strong>&lt; video&gt; 标签定义视频，比如电影片段或其他视频流。</strong></p></blockquote><p>目前，&lt; video&gt; 元素支持三种视频格式：MP4、WebM、Ogg。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示控件--!&gt;</span></span><br><span class="line"><span class="comment">&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;</span></span><br><span class="line"><span class="comment">&lt;source src=&quot;http://fishc.oss-cn-hangzhou.aliyuncs.com/Web/video_tag.mp4&quot;  type=&quot;video/mp4&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果指定该属性，则视频在就绪后将自动播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果指定该属性，则向用户显示控件，比如播放&#x2F;暂停按钮。</td></tr><tr><td>width</td><td>pixels</td><td>指定视频播放器的宽度。</td></tr><tr><td>height</td><td>pixels</td><td>指定视频播放器的高度。</td></tr><tr><td>loop</td><td>loop</td><td>如果指定该属性，将循环播放视频。</td></tr><tr><td>muted</td><td>muted</td><td>如果指定该属性，则将视频的音频输出为静音。</td></tr><tr><td>poster</td><td>URL</td><td>指定视频的封面</td></tr><tr><td>preload</td><td>auto、metadata、none</td><td>指定视频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto（默认）：要求浏览器尽快加载整个视频<br />metadata：只加载视频的元数据（宽度、高度、第一帧影像和视频总长度等）<br />none：在用户点击开始播放之前不会加载视频，若不设定poster视频的黑的</td></tr><tr><td>src</td><td>URL</td><td>指定要播放的视频文件的 URL 地址。</td></tr></tbody></table><p>注意事项：</p><ol><li>使用video标签时controls属性或antoplay属性二选一，否则视频无法播放</li><li>controls与antoplay同时使用时，chrome浏览器不会自动播放，要添加muted属性（静音）才能自动播放<br><a name="hWx0q"></a></li></ol><h3 id="音频audio"><a href="#音频audio" class="headerlink" title="音频audio"></a>音频audio</h3><blockquote><p><strong>&lt;audio&gt; 标签定义声音，比如音乐或其他音频流。</strong></p></blockquote><p>目前，&lt;audio&gt; 标签定义声音，支持的3种文件格式：MP3、Wav、Ogg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;http://fishc.oss-cnhangzhou.aliyuncs.com/Web/audio_tag.mp3&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果指定该属性，则音频在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果指定该属性，则向用户显示播放控件（比如播放&#x2F;暂停按钮）。</td></tr><tr><td>loop</td><td>loop</td><td>如果指定该属性，将循环播放音频。</td></tr><tr><td>muted</td><td>muted</td><td>如果指定该属性，则音频输出为静音。</td></tr><tr><td>preload</td><td>auto、metadata、none</td><td>指定音频在页面加载时，是否进行预加载。注意：如果同时指定了 autoplay 属性，则忽略该属性。<br />auto：要求浏览器尽快加载整个音频，默认行为<br />metadata：只加载音频的元数据<br />none：在用户点击开始播放之前不会加载音频</td></tr><tr><td>src</td><td>URL</td><td>指定要播放的音频文件的 URL 地址。</td></tr></tbody></table><p><a name="g5RWU"></a></p><h2 id="内嵌内容"><a href="#内嵌内容" class="headerlink" title="内嵌内容"></a>内嵌内容</h2><p><a name="sW8YR"></a></p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><blockquote><p><strong>&lt;iframe&gt; 标签会创建包含另外一个文档的内联框架（即行内框架）。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>height</td><td>pixels、%</td><td>指定 iframe 的高度。</td></tr><tr><td>name</td><td>text</td><td>指定 iframe 的名称。</td></tr><tr><td>sandbox</td><td>allow-forms、allow-pointer-lock、allow-popups、allow-same-origin、allow-scripts、allow-top-navigation</td><td>启用一系列对 &lt; iframe&gt;中内容的额外限制。</td></tr><tr><td>seamless</td><td>seamless</td><td>指示浏览器将 iframe 的内容显示得像主 HTML 文档的一个整体组成部分。</td></tr><tr><td>src</td><td>URL</td><td>指定在 iframe 中显示的文档的 URL 地址。</td></tr><tr><td>srcdoc</td><td>HTML_code</td><td>指定在 &lt; iframe&gt; 中显示的页面的 HTML 内容。</td></tr><tr><td>width</td><td>pixels、%</td><td>指定 iframe 的宽度。</td></tr></tbody></table><h4 id="sandbox沙盒属性"><a href="#sandbox沙盒属性" class="headerlink" title="sandbox沙盒属性"></a>sandbox沙盒属性</h4><blockquote><p><strong>限制了嵌入网页的内容和操作</strong></p></blockquote><table><thead><tr><th>sandbox的值</th><th>描述</th></tr></thead><tbody><tr><td>allow-forms</td><td>允许提交表单</td></tr><tr><td>allow-pointer-lock</td><td>允许执行脚本</td></tr><tr><td>allow-popups</td><td>允许同域请求</td></tr><tr><td>allow-same-origin</td><td>允许iframe能主导window .top进行页面跳转</td></tr><tr><td>allow-scripts</td><td>允许iframe中弹出新窗口</td></tr><tr><td>allow-top-navigation</td><td>允许在iframe中锁定鼠标</td></tr></tbody></table><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><blockquote><p><strong>&lt; object&gt; 标签定义一个嵌入的对象。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">&quot;666&quot;</span> <span class="attr">height</span>=<span class="string">&quot;375&quot;</span> <span class="attr">data</span>=<span class="string">&quot;video_tag.mp4&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>form</td><td>form_id</td><td>规定对象所属的一个或多个表单。</td></tr><tr><td>height</td><td>pixels</td><td>规定对象的高度。</td></tr><tr><td>width</td><td>pixels</td><td>规定对象的宽度。</td></tr><tr><td>name</td><td>name</td><td>为对象规定名称。</td></tr><tr><td>type</td><td>MIME_type</td><td>规定 data 属性中规定的数据的 MIME 类型。</td></tr><tr><td>usemap</td><td>mapname</td><td>规定与对象一同使用的客户端图像映射的名称。</td></tr></tbody></table><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><blockquote><p><strong>这一部分可以先草草了解一下，详见javascript教程</strong></p></blockquote><p><a href="./Javascript.md">Javascript</a><br><a name="m34IF"></a></p><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><blockquote><p><strong>&lt; canvas&gt; 标签定义图形，比如图表和其他图像。</strong></p></blockquote><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>height</td><td>pixels</td><td>设置 canvas 的高度。</td></tr><tr><td>width</td><td>pixels</td><td>设置 canvas 的宽度。</td></tr></tbody></table><p><a name="NuSUB"></a></p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><blockquote><p><strong>&lt; script&gt; 标签用于在 HTML 文档中加入脚本（例如 JavaScript）</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;lilming&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>type</td><td>media_type</td><td>指定所定义或引用的脚本类型（如果使用 JavaScript 脚本，这个属性可以忽略）。</td></tr><tr><td>async</td><td>async</td><td>告诉浏览器异步执行脚本。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td></tr><tr><td>charset</td><td>charset</td><td>指定外部脚本文件中使用的字符编码。<br />注意：该属性只能与 src 属性一起使用。</td></tr><tr><td>defer</td><td>defer</td><td>告诉浏览器延迟执行脚本（直到页面载入并解析完毕后再执行脚本）。<br />注意：该属性只能用于引用外部脚本文件，对内嵌脚本不起作用。</td></tr><tr><td>src</td><td>URL</td><td>指定外部脚本文件的 URL。</td></tr></tbody></table><p><a name="DdbGP"></a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><a name="wCnzZ"></a></p><h3 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h3><blockquote><p><strong>&lt; ul&gt; 标签用于定义无序列表。</strong></p></blockquote><p>type的属性值：</p><ul><li>disc      实心圆</li><li>circle    空心圆</li><li>square    实心正方形</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无序列表更常用，可以用css设置序号样式，而有序列表的序号是固定的。<br><a name="QNqSJ"></a></p><h3 id="有序列表ol"><a href="#有序列表ol" class="headerlink" title="有序列表ol"></a>有序列表ol</h3><blockquote><p><strong>&lt; ol&gt; 标签用于定义有序列表。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1|A|a|i|I&quot;</span> <span class="attr">start</span>=<span class="string">&quot;数值（初始数字）&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="kk3wt"></a></p><h3 id="定义列表dl"><a href="#定义列表dl" class="headerlink" title="定义列表dl"></a>定义列表dl</h3><blockquote><p><strong>&lt; dl&gt; 标签定义了一个包含术语定义以及描述的列表。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目一<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述一<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目二<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述一<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述二<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="fTbxI"></a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><a name="Aj8si"></a></p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li><p>宏观结构</p><blockquote><p><strong>&lt; table&gt; 标签用于定义 HTML 表格</strong><br><strong>&lt; thead&gt; 标签定义表格的表头</strong><br><strong>&lt; tbody&gt; 标签用于组合 HTML 表格的主体内容</strong><br><strong>&lt; tfoot&gt; 标签定义表格的页脚（脚注或表注）</strong></p></blockquote></li><li><p>微观结构</p><blockquote><p><strong>&lt; tr&gt; 标签用于定义 HTML 表格中的行。</strong><br><strong>&lt; th&gt; 标签用于定义表格内的表头单元格。</strong><br><strong>&lt; td&gt; 标签用于定义 HTML 表格中的标准单元格。</strong></p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>王小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>会计3班<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="SgfKs"></a></p><h3 id="表格样式：table属性"><a href="#表格样式：table属性" class="headerlink" title="表格样式：table属性"></a>表格样式：table属性</h3><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left&amp;#124;right&amp;#124;center</td><td>内容对齐</td></tr><tr><td>bgcolor</td><td></td><td>背景颜色</td></tr><tr><td>border</td><td>pixels</td><td>边框宽度</td></tr><tr><td>cellpadding</td><td>pixels</td><td>边缘与内容之间的空白</td></tr><tr><td>cellspacing</td><td>pixels</td><td>单元格之间的空白</td></tr><tr><td>frame</td><td>above&amp;#124;below&amp;#124;hsides&amp;#124;<br/>vsides&amp;#124;lhs&amp;#124;border&amp;#124;void</td><td>规定外边框哪个部分可见</td></tr><tr><td>rules</td><td>none&amp;#124all&amp;#124rows&amp;#124cols&amp;#124groups</td><td>规定内边框哪个是可见的</td></tr><tr><td>height</td><td>pixels</td><td>表格高度</td></tr><tr><td>width</td><td>pixels</td><td>表格宽度</td></tr><tr><td>bordercolor</td><td>rgb</td><td>边框颜色</td></tr><tr><td>bordercolorlight</td><td>rgb</td><td>设置亮边框（左上）</td></tr><tr><td>bordercolordark</td><td>rgb</td><td>设置暗边框（右下）</td></tr><tr><td><a name="T0FdN"></a></td><td></td><td></td></tr></tbody></table><h4 id="表格边框属性"><a href="#表格边框属性" class="headerlink" title="表格边框属性"></a>表格边框属性</h4><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>border</td><td>pixels</td><td>宽度</td></tr><tr><td>bordercolor</td><td>rgb</td><td>边框颜色</td></tr><tr><td>bordercolorlight</td><td>rgb</td><td>设置亮边框（左上）</td></tr><tr><td>bordercolordark</td><td>rgb</td><td>设置暗边框（右下）</td></tr></tbody></table><p><a name="VVJw4"></a></p><h4 id="表格样式：frame和rules"><a href="#表格样式：frame和rules" class="headerlink" title="表格样式：frame和rules"></a>表格样式：frame和rules</h4><table><thead><tr><th>fram属性值</th><th>规定外边框哪个部分可见</th><th>rules属性值</th><th>规定内边框哪个是可见的</th></tr></thead><tbody><tr><td>above</td><td>上</td><td>none</td><td>无</td></tr><tr><td>below</td><td>下</td><td>all</td><td>所有</td></tr><tr><td>hsides</td><td>上下</td><td>rows</td><td>行边框</td></tr><tr><td>vsides</td><td>左右</td><td>cols</td><td>列边框</td></tr><tr><td>lhs</td><td>左</td><td>groups</td><td>介于行列间边框</td></tr><tr><td>rhs</td><td>右</td><td></td><td></td></tr><tr><td>border</td><td>上下左右</td><td></td><td></td></tr><tr><td>void</td><td>无</td><td></td><td></td></tr></tbody></table><p><a name="DXSD6"></a></p><h3 id="行样式：tr属性"><a href="#行样式：tr属性" class="headerlink" title="行样式：tr属性"></a>行样式：tr属性</h3><table><thead><tr><th>属性</th><th>值</th><th>描述</th><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left&amp;#124;right&amp;#124;center</td><td>水平对齐</td><td>bordercolorlight</td><td>rgb</td><td>设置亮边框（左上）</td></tr><tr><td>valign</td><td>top&amp;#124;bottom&amp;#124;middle</td><td>垂直对齐</td><td>bordercolordark</td><td>rgb</td><td>设置暗边框（右下）</td></tr><tr><td>bgcolor</td><td></td><td></td><td>bordercolor</td><td>rgb</td><td>边框颜色</td></tr></tbody></table><p><a name="NlVbS"></a></p><h3 id="单元格样式：td属性"><a href="#单元格样式：td属性" class="headerlink" title="单元格样式：td属性"></a>单元格样式：td属性</h3><table><thead><tr><th>属性</th><th>值</th><th>描述</th><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left&amp;#124;right&amp;#124;center</td><td>水平对齐</td><td>bordercolorlight</td><td></td><td></td></tr><tr><td>valign</td><td>top&amp;#124;bottom&amp;#124;middle</td><td>垂直对齐</td><td>bordercolordark</td><td></td><td></td></tr><tr><td>bgcolor</td><td></td><td>背景颜色</td><td>rowspan</td><td>int</td><td>单元格跨行</td></tr><tr><td>background</td><td></td><td>背景图案</td><td>colspan</td><td>int</td><td>单元格跨列</td></tr><tr><td>bordercolor</td><td></td><td>边框颜色</td><td>width</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>heith</td><td></td><td></td></tr></tbody></table><p><a name="wZE5i"></a></p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p><a name="dBe2M"></a></p><h3 id="表单：form"><a href="#表单：form" class="headerlink" title="表单：form"></a>表单：form</h3><blockquote><p><strong>&lt; form&gt; 标签用于为用户输入创建 HTML 表单，用于向服务器传输数据</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo/welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>action</td><td>URL</td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td>method</td><td>get、post（更常用）</td><td>规定用于发送 form-data 的 HTTP 方法。</td></tr><tr><td>autocomplete</td><td>on（默认）、off</td><td>规定是否启用表单的自动填充功能。</td></tr><tr><td>target</td><td>_blank、_self、_parent、_top、framename</td><td>规定在何处打开 action URL。</td></tr><tr><td>name</td><td>form_name</td><td>规定表单的名称。</td></tr><tr><td>accept-charset</td><td>charset_list</td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td>enctype</td><td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td><td>规定在发送表单数据之前如何对其进行编码：<br />- application&#x2F;x-www-form-urlencoded在发送前编码所有字符（默认）（空格被编码为“+”，特殊字符被编码为ASCII十六进制字符）<br />- multipart&#x2F;form-data 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值<br />- text&#x2F;plain 空格转换为 “+” 加号，但不对特殊字符编码<br /></td></tr><tr><td>novalidate</td><td>novalidate</td><td>如果使用该属性，则提交表单时不进行验证。</td></tr></tbody></table><blockquote><p>get和post的区别：</p><ol><li>GET 和 POST 是HTTP 协议中的两种发送请求的方法，底层都是 TCP&#x2F;IP，理论上get也可以将数据放在request body中，post也可以将数据放在url中，但不同的浏览器和服务器的处理不太一样</li><li>GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包，具体表现为：</li></ol></blockquote><p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）</p><blockquote><p>而对于 POST，浏览器先发送 header，服务器响应 100（continue），浏览器再发送 data，服务器响应 200（返回数据）</p></blockquote><p><a name="MLOxb"></a></p><h3 id="输入框：input"><a href="#输入框：input" class="headerlink" title="输入框：input"></a>输入框：input</h3><blockquote><p><strong>&lt; input&gt; 标签用于搜集用户信息。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo/welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>input元素中的type与name属性是必填的，才能让服务器知道传输的数据是什么类型，该怎么称呼这一数据</p><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>type</td><td>button、checkbox、color、date、datetime-local、email、file、hidden、image、month、number、password、radio、range、reset、search、submit、tel、text、time、url、week</td><td>规定 input 元素的类型</td></tr><tr><td>name</td><td>field_name</td><td>指定元素的名称，用于在 JavaScript 中引用元素，或者在表单提交后引用表单数据，只有设置了 name 属性的表单才能在提交表单时传递该值</td></tr><tr><td>autocomplete</td><td>on、off</td><td>指定是否自动填充</td></tr><tr><td>autofocus</td><td>无</td><td>指定是否将光标自动移动到指定处</td></tr><tr><td>value</td><td>text</td><td>指定输入字段的初始值</td></tr><tr><td>disabled</td><td>无</td><td>指定是否禁用该 input 元素，通常已经有value属性</td></tr><tr><td>readonly</td><td>无</td><td>将文本框设为只读模式，防止用户编辑其内容，通常已经有value属性<br />与disabled的区别在于readonly依然会将值提交至服务器；而disabled不会</td></tr><tr><td>accept</td><td>mime_type</td><td>指定提交的文件类型（多个类型之间使用英文的逗号隔开，文件类型的几种表述方式请参考 -&gt; <a href="https://fishc.com.cn/thread-128222-1-1.html">传送门）</a></td></tr><tr><td>alt</td><td>text</td><td>指定图像的说明文字</td></tr><tr><td>checked</td><td>checked</td><td>指定该属性的复选框，默认显示为勾选状态</td></tr><tr><td>form</td><td>formname</td><td>指定其所属的一个或多个表单 id 值（在 HTML5 中，表单允许你将 input 放在文档中的任意位置，当你这么做的时候，可以通过指定该属性来确定元素所关联的表单）</td></tr><tr><td>formaction</td><td>URL</td><td>指定表单提交的位置（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td></tr><tr><td>formenctype</td><td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td><td>指定表单提交的编码方式（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td></tr><tr><td>formmethod</td><td>get、post</td><td>指定表单提交的方法（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td></tr><tr><td>formnovalidate</td><td>formnovalidate</td><td>指定是否重置 form 元素的 novalidate 属性，如果重置，那么当表单提交时 input 元素将不再进行任何验证（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td></tr><tr><td>formtarget</td><td>_blank、_self、_parent、_top、framename</td><td>指定表单提交后在何处打开 action URL（只能作用于具有提交性质的按钮，比如 type&#x3D;”submit” 或 type&#x3D;”image”）</td></tr><tr><td>height</td><td>pixels、%</td><td>指定图像的高度（像素）</td></tr><tr><td>list</td><td>datalist-id</td><td>指定一个数据列表，即 datalist 元素的 id 值</td></tr><tr><td>max</td><td>number、date</td><td>指定可接受的最大值，以便进行输入验证</td></tr><tr><td>maxlength</td><td>number</td><td>指定用户可以在文本框输入的最大字符数</td></tr><tr><td>min</td><td>number、date</td><td>指定可接受的最小值，以便进行输入验证</td></tr><tr><td>multiple</td><td>multiple</td><td>指定该属性后可以上传多个文件</td></tr><tr><td>pattern</td><td>regexp_pattern</td><td>指定一个用于输入验证的正则表达式</td></tr><tr><td>placeholder</td><td>text</td><td>指定一个占位提示文本</td></tr><tr><td>required</td><td>required</td><td>表明用户必须输入一个值，否则无法通过输入验证</td></tr><tr><td>size</td><td>number_of_char</td><td>指定文本框的宽度</td></tr><tr><td>src</td><td>URL</td><td>指定要显示的图像的 URL</td></tr><tr><td>step</td><td>number</td><td>指定上下调节数值的步长</td></tr><tr><td>width</td><td>pixels、%</td><td>指定图像的宽度（像素）</td></tr></tbody></table><p><a name="ZocKe"></a></p><h3 id="按钮：button"><a href="#按钮：button" class="headerlink" title="按钮：button"></a>按钮：button</h3><blockquote><p><strong>&lt;button&gt; 标签用于定义一个按钮。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo/welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>autofocus</td><td>autofocus</td><td>指定当页面加载的时候，按钮将获得焦点。</td></tr><tr><td>disabled</td><td>disabled</td><td>禁用按钮。</td></tr><tr><td>form</td><td>form_id</td><td>指定按钮所关联的表单 ID。</td></tr><tr><td>formaction</td><td>url</td><td>覆盖 form 元素的 action 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formenctype</td><td>application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</td><td>覆盖 form 元素的 enctype 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formmethod</td><td>get、post</td><td>覆盖 form 元素的 method 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formnovalidate</td><td>formnovalidate</td><td>覆盖 form 元素的 novalidate 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>formtarget</td><td>_blank、_self、_parent、_top、framename</td><td>覆盖 form 元素的 target 属性<br />注释：该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td>name</td><td>button_name</td><td>指定按钮的名称</td></tr><tr><td>type</td><td>button（脚本运行按钮）、reset（清空）、submit（提交数据到服务器）</td><td>指定按钮的类型</td></tr><tr><td>value</td><td>text</td><td>指定按钮的初始值<br />注释：可由脚本进行修改。</td></tr></tbody></table><blockquote><p><strong>若input标签的type属性的值为submit，则实现的是按钮效果，与button类似</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo/welcome.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="WeC2D"></a></p><h3 id="标签：label"><a href="#标签：label" class="headerlink" title="标签：label"></a>标签：label</h3><blockquote><p><strong>&lt;label&gt; 标签为 input 元素定义标注（标记）。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>for</td><td>与所属的input的id值对应，如：<br /><label for="XXX"></label><br />&lt;input id &#x3D;”XXX”&#x2F;&gt;</td><td>指定 label 将绑定另一个表单元素的 ID 属性值</td></tr><tr><td>form</td><td>formid</td><td>指定 label 所属的表单 ID</td></tr></tbody></table><blockquote><p>将input置于label元素的里面也可以实现label与input的一一对应哦</p></blockquote><p><a name="XMQVB"></a></p><h3 id="表单分类：fieldset与legend元素"><a href="#表单分类：fieldset与legend元素" class="headerlink" title="表单分类：fieldset与legend元素"></a>表单分类：fieldset与legend元素</h3><blockquote><p><strong>&lt;fieldset&gt; 标签将表单内容的一部分打包，生成一组相关表单的字段。</strong><br><strong>&lt;legend&gt; 标签用于为 fieldset 元素定义说明文字。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生一<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name1&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>班级：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> =<span class="string">&quot;class1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生二<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name2&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;class2&quot;</span>&gt;</span>班级：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span> =<span class="string">&quot;class2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="ngNSA"></a></p><h3 id="可选框：select、option与optgroup"><a href="#可选框：select、option与optgroup" class="headerlink" title="可选框：select、option与optgroup"></a>可选框：select、option与optgroup</h3><blockquote><p><strong>&lt;select&gt; 标签用于创建单选或多选菜单。</strong><br><strong>&lt;option&gt; 标签用于定义下拉列表中的一个选项。</strong><br><strong>&lt;optgroup&gt; 标签用于为下拉列表的选项进行分组。</strong></p></blockquote><p>select与input类似，type与name也必填的；若存在对应的label元素，还要加上id属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生一<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name1&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;class1&quot;</span>&gt;</span>班级：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;class&quot;</span> <span class="attr">id</span>=<span class="string">&quot;class1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机一班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机二班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机三班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机四班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生二<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name2&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;class2&quot;</span>&gt;</span>班级：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;class&quot;</span> <span class="attr">id</span>=<span class="string">&quot;class2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机一班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机二班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机三班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span>&gt;</span>计算机四班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>select属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>autofocus</td><td>无</td><td>指定在页面加载后文本区域自动获得焦点</td></tr><tr><td>name</td><td>name</td><td>指定该下拉列表的名称</td></tr><tr><td>disabled</td><td>无</td><td>指定该下拉列表被禁用</td></tr><tr><td>form</td><td>form_id</td><td>指定所属表单</td></tr><tr><td>multiple</td><td>无</td><td>指定该下拉列表支持多个选项</td></tr><tr><td>required</td><td>无</td><td>指定文本区域是必填的</td></tr><tr><td>size</td><td>number</td><td>指定下拉列表中可见选项的数目</td></tr></tbody></table><table><thead><tr><th><strong>option属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>disabled</td><td>disabled</td><td>指定该选项被禁用</td></tr><tr><td>label</td><td>text</td><td>指定该选项在列表中所显示的标签</td></tr><tr><td>selected</td><td>selected</td><td>指定该选项表现为选中状态</td></tr><tr><td>value</td><td>text</td><td>指定发送到服务器的值<br />如标签显示“计算机一班”；发送到服务器处理的值是”211461”</td></tr></tbody></table><blockquote><p>若选项多，且可分组，则可以利用&lt;optgroup&gt;属性对option元素进行分类</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;计算机学院&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;211461&quot;</span>&gt;</span>一班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;211462&quot;</span>&gt;</span>二班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;通信学院&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;211451&quot;</span>&gt;</span>一班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;211452&quot;</span>&gt;</span>二班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>optgroup属性</strong></th><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>disabled</td><td>disabled</td><td>指定该选项被禁用</td></tr><tr><td>label</td><td>text</td><td>指定该分组的标签</td></tr></tbody></table><p><a name="r4r7j"></a></p><h3 id="单选框：type属性radio"><a href="#单选框：type属性radio" class="headerlink" title="单选框：type属性radio"></a>单选框：type属性radio</h3><blockquote><p><strong>若要设置单选框，则设置input元素的type属性值为radio</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>若要几个当中选一个，那么所有name属性都要一致</li><li>若name属性不一致，则可复选<br><a name="plv5S"></a></li></ul><h3 id="多选框：type属性checkbox"><a href="#多选框：type属性checkbox" class="headerlink" title="多选框：type属性checkbox"></a>多选框：type属性checkbox</h3><blockquote><p><strong>若要设置多选下拉框，则可设置input元素type属性为checkbox</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;watermelon&quot;</span>&gt;</span>西瓜<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;blueberry&quot;</span>&gt;</span>蓝莓<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="UipPp"></a></p><h3 id="日期与时间datetime-local"><a href="#日期与时间datetime-local" class="headerlink" title="日期与时间datetime-local"></a>日期与时间datetime-local</h3><blockquote><p><strong>时间加日期的选择框，type的值选择datetime-local</strong></p></blockquote><blockquote><p><strong>注意哦，这里提交数据中的”:”是按照URL编码表示为”%3A”</strong></p></blockquote><p>若要了解更多<a href="#pEGrg">URL编码</a>，请点击链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    生日 (日期和时间): <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bdaytime&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;/form&gt;</span></span></span><br></pre></td></tr></table></figure><p><a name="OVwDU"></a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><a name="wKc7Z"></a></p><h3 id="搜索框：type属性search"><a href="#搜索框：type属性search" class="headerlink" title="搜索框：type属性search"></a>搜索框：type属性search</h3><blockquote><p><strong>在input的type属性值设置为search实现搜索框</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    度娘: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bdSearch&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="sMd95"></a></p><h3 id="接收多行表单"><a href="#接收多行表单" class="headerlink" title="接收多行表单"></a>接收多行表单</h3><blockquote><p><strong>&lt;textarea&gt;</strong> <strong>标签定义多行的文本输入控件。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">   我是一个文本框。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="RZkS4"></a></p><h2 id="可交互元素"><a href="#可交互元素" class="headerlink" title="可交互元素"></a>可交互元素</h2><p><a name="E5fNf"></a></p><h3 id="meun"><a href="#meun" class="headerlink" title="meun"></a>meun</h3><p><a name="IdgES"></a></p><h3 id="meunitem"><a href="#meunitem" class="headerlink" title="meunitem"></a>meunitem</h3><p><a name="x2Xxi"></a></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p><a name="PGNKb"></a></p><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><p><a name="fnegB"></a></p><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><p><a name="OCIvl"></a></p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><a name="tRf3d"></a></p><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><p><a name="jIumZ"></a></p><h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p><a name="A66W7"></a></p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p><a name="rgnZj"></a></p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p><a name="PUNgO"></a></p><h2 id="多媒体事件"><a href="#多媒体事件" class="headerlink" title="多媒体事件"></a>多媒体事件</h2><p><a name="GmwMx"></a></p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p><a name="pEGrg"></a></p><h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><table><thead><tr><th>backspace</th><th>8%</th><th>A</th><th>41%</th><th>b</th><th>62%</th><th>¬</th><th>%AC</th><th>Ù</th><th>%D9</th></tr></thead><tbody><tr><td>tab</td><td>9%</td><td>B</td><td>42%</td><td>c</td><td>63%</td><td>¯</td><td>%AD</td><td>Ú</td><td>%DA</td></tr><tr><td>linefeed</td><td>%0A</td><td>C</td><td>43%</td><td>d</td><td>64%</td><td>º</td><td>%B0</td><td>Û</td><td>%DB</td></tr><tr><td>creturn</td><td>%0D</td><td>D</td><td>44%</td><td>e</td><td>65%</td><td>±</td><td>%B1</td><td>Ü</td><td>%DC</td></tr><tr><td>space</td><td>20%</td><td>E</td><td>45%</td><td>f</td><td>66%</td><td>ª</td><td>%B2</td><td>Ý</td><td>%DD</td></tr><tr><td>!</td><td>21%</td><td>F</td><td>46%</td><td>g</td><td>67%</td><td>,</td><td>%B4</td><td>Þ</td><td>%DE</td></tr><tr><td>“</td><td>22%</td><td>G</td><td>47%</td><td>h</td><td>68%</td><td>µ</td><td>%B5</td><td>ß</td><td>%DF</td></tr><tr><td>#</td><td>23%</td><td>H</td><td>48%</td><td>i</td><td>69%</td><td>»</td><td>%BB</td><td>à</td><td>%E0</td></tr><tr><td>$</td><td>24%</td><td>I</td><td>49%</td><td>j</td><td>%6A</td><td>¼</td><td>%BC</td><td>á</td><td>%E1</td></tr><tr><td>%</td><td>25%</td><td>J</td><td>%4A</td><td>k</td><td>%6B</td><td>½</td><td>%BD</td><td>â</td><td>%E2</td></tr><tr><td>&amp;</td><td>26%</td><td>K</td><td>%4B</td><td>l</td><td>%6C</td><td>¿</td><td>%BF</td><td>ã</td><td>%E3</td></tr><tr><td>‘</td><td>27%</td><td>L</td><td>%4C</td><td>m</td><td>%6D</td><td>À</td><td>%C0</td><td>ä</td><td>%E4</td></tr><tr><td>(</td><td>28%</td><td>M</td><td>%4D</td><td>n</td><td>%6E</td><td>Á</td><td>%C1</td><td>å</td><td>%E5</td></tr><tr><td>)</td><td>29%</td><td>N</td><td>%4E</td><td>o</td><td>%6F</td><td>Â</td><td>%C2</td><td>æ</td><td>%E6</td></tr><tr><td>*</td><td>%2A</td><td>O</td><td>%4F</td><td>p</td><td>70%</td><td>Ã</td><td>%C3</td><td>ç</td><td>%E7</td></tr><tr><td>+</td><td>%2B</td><td>P</td><td>50%</td><td>q</td><td>71%</td><td>Ä</td><td>%C4</td><td>è</td><td>%E8</td></tr><tr><td>,</td><td>%2C</td><td>Q</td><td>51%</td><td>r</td><td>72%</td><td>Å</td><td>%C5</td><td>é</td><td>%E9</td></tr><tr><td>-</td><td>%2D</td><td>R</td><td>52%</td><td>s</td><td>73%</td><td>Æ</td><td>%C6</td><td>ê</td><td>%EA</td></tr><tr><td>.</td><td>%2E</td><td>S</td><td>53%</td><td>t</td><td>74%</td><td>Ç</td><td>%C7</td><td>ë</td><td>%EB</td></tr><tr><td>&#x2F;</td><td>%2F</td><td>T</td><td>54%</td><td>u</td><td>75%</td><td>È</td><td>%C8</td><td>ì</td><td>%EC</td></tr><tr><td>0</td><td>30%</td><td>U</td><td>55%</td><td>v</td><td>76%</td><td>É</td><td>%C9</td><td>í</td><td>%ED</td></tr><tr><td>1</td><td>31%</td><td>V</td><td>56%</td><td>w</td><td>77%</td><td>Ê</td><td>%CA</td><td>î</td><td>%EE</td></tr><tr><td>2</td><td>32%</td><td>W</td><td>57%</td><td>x</td><td>78%</td><td>Ë</td><td>%CB</td><td>ï</td><td>%EF</td></tr><tr><td>3</td><td>33%</td><td>X</td><td>58%</td><td>y</td><td>79%</td><td>Ì</td><td>%CC</td><td>ð</td><td>%F0</td></tr><tr><td>4</td><td>34%</td><td>Y</td><td>59%</td><td>z</td><td>%7A</td><td>Í</td><td>%CD</td><td>ñ</td><td>%F1</td></tr><tr><td>5</td><td>35%</td><td>Z</td><td>%5A</td><td>{</td><td>%7B</td><td>Î</td><td>%CE</td><td>ò</td><td>%F2</td></tr><tr><td>6</td><td>36%</td><td>?</td><td>%3F</td><td>&amp;#124;</td><td>%7C</td><td>Ï</td><td>%CF</td><td>ó</td><td>%F3</td></tr><tr><td>7</td><td>37%</td><td>@</td><td>40%</td><td>}</td><td>%7D</td><td>Ð</td><td>%D0</td><td>ô</td><td>%F4</td></tr><tr><td>8</td><td>38%</td><td>[</td><td>%5B</td><td>~</td><td>%7E</td><td>Ñ</td><td>%D1</td><td>õ</td><td>%F5</td></tr><tr><td>9</td><td>39%</td><td>\</td><td>%5C</td><td>¢</td><td>%A2</td><td>Ò</td><td>%D2</td><td>ö</td><td>%F6</td></tr><tr><td>:</td><td>%3A</td><td>]</td><td>%5D</td><td>£</td><td>%A3</td><td>Ó</td><td>%D3</td><td>÷</td><td>%F7</td></tr><tr><td>;</td><td>%3B</td><td>^</td><td>%5E</td><td>¥</td><td>%A5</td><td>Ô</td><td>%D4</td><td>ø</td><td>%F8</td></tr><tr><td>&lt;</td><td>%3C</td><td>_</td><td>%5F</td><td>&amp;#124;</td><td>%A6</td><td>Õ</td><td>%D5</td><td>ù</td><td>%F9</td></tr><tr><td>&#x3D;</td><td>%3D</td><td>&#96;</td><td>60%</td><td>§</td><td>%A7</td><td>Ö</td><td>%D6</td><td></td><td></td></tr><tr><td>&gt;</td><td>%3E</td><td>a</td><td>61%</td><td>«</td><td>%AB</td><td>Ø</td><td>%D8</td><td></td><td></td></tr></tbody></table><h2 id="语言代码"><a href="#语言代码" class="headerlink" title="语言代码"></a>语言代码</h2><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/jpeg/28499732/1662089020914-f6b495a3-b70e-4644-ac41-654313569dd0.jpeg&quot;&gt;&lt;br&gt;&lt;a name=&quot;HFtsm&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA基础速查速记</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/JAVA%E5%9F%BA%E7%A1%80%E9%80%9F%E6%9F%A5%E9%80%9F%E8%AE%B0/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/JAVA%E5%9F%BA%E7%A1%80%E9%80%9F%E6%9F%A5%E9%80%9F%E8%AE%B0/</id>
    <published>2023-07-17T01:33:29.000Z</published>
    <updated>2023-07-17T01:33:31.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="内置类型和包装类"><a href="#内置类型和包装类" class="headerlink" title="内置类型和包装类"></a>内置类型和包装类</h2><table><thead><tr><th>包装类</th><th>基本数据类型</th></tr></thead><tbody><tr><td>Boolean</td><td>boolean</td></tr><tr><td>Byte</td><td>byte</td></tr><tr><td>Short</td><td>short</td></tr><tr><td>Integer</td><td>int</td></tr><tr><td>Long</td><td>long</td></tr><tr><td>Character</td><td>char</td></tr><tr><td>Float</td><td>float</td></tr><tr><td>Double</td><td>double</td></tr></tbody></table><h3 id="Number-与-Math"><a href="#Number-与-Math" class="headerlink" title="Number 与 Math"></a>Number 与 Math</h3><blockquote><p>java 将一个内置类型直接赋值给一个包装类是可以的，叫做自动装箱，反之叫拆箱。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> c;</span><br><span class="line">System.out.println(ch);  <span class="comment">// 输出：a</span></span><br><span class="line"></span><br><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ch;</span><br><span class="line">System.out.println(c);  <span class="comment">// 输出：a</span></span><br></pre></td></tr></table></figure><p>Number 常用的方法：</p><ul><li>XXX.valueOf: 返回一个 Number 对象指定的数据类型</li><li>equals()：判断是非相等（类型和值都要相同才返回true）</li><li>compareTo()：与 number 对象相比较</li><li>toString()：转换成字符串</li><li>Integer.parseInt()：将字符串转换成 int（建议使用valueOf）<ul><li>Double.parseDouble</li><li>Long.parseLong</li></ul></li></ul><p>Math 的常用方法：</p><ul><li>abs()：返回参数的绝对值</li><li>ceil()：向上取整</li><li>floor()：向下取整</li><li>round()：四舍五入（Math.floor(x+0.5)）</li><li>min()：返回参数的最小值</li><li>max()：返回参数的最大值</li><li>exp()：返回 e 的参数次方</li><li>log()：返回 log 以 e 为底的参数</li><li>pow(x,y)：返回 x 的 y 次方</li><li>sqrt()：返回参数的开方</li><li>random()：返回一个 0 到 1 的随机数</li></ul><h3 id="Character-类"><a href="#Character-类" class="headerlink" title="Character 类"></a>Character 类</h3><blockquote><p>Character 是 char 的包装类</p></blockquote><p>定义一个 char[]：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray =&#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure><p>定义一个 Character：直接将 char 赋值给Character</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>char[]不能直接赋值给 Character[]，要遍历 char[]一个一个赋值</p><p>Character、类的方法</p><ul><li>isLetter()：判断是否是一个字母</li><li>isDigit()：判断是否是一个数字</li><li>isWhitespace()：判断是否是一个空白字符</li><li>isUpperCase()：</li><li>isLowerCase()：</li><li>toUpperCase()：</li><li>toLowerCase()：</li><li>toStrig()：</li></ul><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><p>格式化字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">fs</span> <span class="operator">=</span> String.format(<span class="string">&quot;浮点型变量的值为 &quot;</span> + <span class="string">&quot;%f, 整型变量的值为 &quot;</span> + <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> + <span class="string">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure><p>其他方法：</p><ul><li>char charAt(int)：返回指定索引下的 char</li><li>String copyValueOf(char[])：返回 char[]的字符串形式</li><li>String copyValueOf(char[], index, count):从 char[]的 index 下标开始，复制 count 个字符</li><li>boolean endsWith(string)：字符串是否以指定的后缀结束</li><li>boolean equals(string)：判断字符串是否相等</li><li>boolean equalsIgnoreCase(string)：判断字符串是否相等，不考虑大小写</li><li>int indexOf(string,int): 从下标 int 的位置开始返回指定 string 的索引值，找不到返回-1</li><li>String trim()：返回给定字符串去除前后空值的副本</li><li>char[] toCharArray()：将字符串转换成 char[]</li><li>boolean contains(char|string)：判断字符串是否包含指定字符或字符串</li><li>String valueOf(x)：返回 x 的字符串形式</li><li>String toLowerCase()：将字符串的字母都转换成小写</li><li>String subString(int Begin, int end)：截取指定索引范围的字符串</li></ul><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>建立 <code>StringBuilder</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立一个容量为10的StringBuilder</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>StringBuilder 方法：</p><ul><li>append(String)：追加指定字符串</li><li>reverse()：反转字符串</li><li>delete(int start, int end)：删除指定索引的元素</li><li>insert(int index, String str)：将 str 插入到指定的位置</li><li>replace(int start, int end， String str)：将str替换指定索引的字符串</li><li>String toString()：将 StringBuilder 转换成字符串</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的方法：</p><ul><li>int binarySearch(Object[] a, Object key)：在 a 数组中按二分查找查找 key，给定的数组是已排序好的</li><li>void fill(Object[] a, Object key)：用 key 填充 a 数组</li><li>void sort(Objext[])：升序排序数组</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>add(int index，E e)：在指定 index 索引处添加元素</li><li>get(int index)：返回 index 索引处的元素</li><li>set(int index, E e)：修改指定 index 索引处的元素</li><li>remove(int index)：移除 index 索引处的元素</li><li>bolean remove(Object o)：删除某一元素，成功返回true</li><li>size()：返回链表元素的个数</li><li>addAll(int index, List | Set)：将 List 内的所有元素插入到 index 的索引位置（默认最后）</li></ul><h3 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h3><p>除了 <code>ArrayList</code> 有的方法之外还有：</p><ul><li>addFirst()：</li><li>addLast()：</li><li>removeFirst()：</li><li>removeLast()：</li><li>getFirst()：</li><li>getLast()：</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>创建 Map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure><p>方法如下：</p><ul><li>put(key, value)：添加元素</li><li>get(key)：获取元素</li><li>remove(key)：移除元素</li><li>size()：键值对个数</li></ul><p>在对 Map 对象进行排序时，可以将 key 值作为关键词。利用 <code>TreeMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; sortedMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(unsortedMap);</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p>Collections 类是 Java 提供的一个操作 Set、List 和 Map 等集合的工具类<br>方法如下：</p><ul><li>void reverse(List)：逆序List</li><li>void sort(List)：升序 List</li><li>void sort(List, Comparator)：根据指定的 Comparator 产生的序列对 List 排序</li><li>void swap(List, int i, int j)：指定 List 的 i 和 j 进行互换</li><li>void rotate(List, int distance)：当 distance 为正数时将 List 集合的后 distance 个元素整体移动到头部；当 distance 为负数时将 List 集合的前 distance 个元素整体移动到末尾</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h1&gt;&lt;h2 id=&quot;内置类型和包装类&quot;&gt;&lt;a href=&quot;#内置类型和包装类&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/Javascript/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/Javascript/</id>
    <published>2023-07-17T01:33:21.000Z</published>
    <updated>2023-07-17T01:33:23.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>javascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics">javascript教程</a></p><h1 id="数据类型深入"><a href="#数据类型深入" class="headerlink" title="数据类型深入"></a>数据类型深入</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是一种特殊的变量，它能够一次存放一个以上的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = [</span><br><span class="line">  <span class="string">&quot;Saab&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Volvo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;BMW&quot;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>请不要最后一个元素之后写逗号（比如 “BMW”,）,可能存在跨浏览器兼容性问题。</p><h3 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = cars[<span class="number">0</span>]; </span><br></pre></td></tr></table></figure><h3 id="修改数组元素"><a href="#修改数组元素" class="headerlink" title="修改数组元素"></a>修改数组元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars[<span class="number">0</span>] = <span class="string">&quot;Opel&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><p><a name="PwXt7"></a></p><h3 id="数组长度length"><a href="#数组长度length" class="headerlink" title="数组长度length()"></a>数组长度length()</h3><p><a name="uWCrC"></a></p><h3 id="转换成字符串toString-，join"><a href="#转换成字符串toString-，join" class="headerlink" title="转换成字符串toString()，join()"></a>转换成字符串toString()，join()</h3><p><a name="dwyHR"></a></p><h3 id="增加和删除pop-push-shift-unshift-delete-splice"><a href="#增加和删除pop-push-shift-unshift-delete-splice" class="headerlink" title="增加和删除pop(),push(),shift(),unshift(),delete(),splice()"></a>增加和删除pop(),push(),shift(),unshift(),delete(),splice()</h3><p><a name="qLYLl"></a></p><h3 id="拼接与剪切-concat-slice"><a href="#拼接与剪切-concat-slice" class="headerlink" title="拼接与剪切 concat(),slice()"></a>拼接与剪切 concat(),slice()</h3><p><a name="O3iHp"></a></p><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p><a name="PkSPb"></a></p><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p><a name="SYB1M"></a></p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><a name="oyH3I"></a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><a name="KZ0oN"></a></p><h2 id="lterable-object-可迭代对象"><a href="#lterable-object-可迭代对象" class="headerlink" title="lterable object(可迭代对象)"></a>lterable object(可迭代对象)</h2><p><a name="rtAIM"></a></p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p><a name="XRB4R"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;p&gt;javascript的语法比较简单，类似与python与C的结合，阅读文档自行了解：&lt;a href=&quot;https://developer.m</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TypeScript基础入门</title>
    <link href="http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/TypeScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%BA%93/TypeScript%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-17T01:32:51.000Z</published>
    <updated>2023-07-17T01:32:53.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方文档：<a href="https://www.tslang.cn/docs/home.html">TypeScript中文网 </a></p><h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>使用模板字符串可以定义多行文本和内嵌表达式</p><p>使用 **(`)符号包裹 ******，并且以 <code>$&#123;expr&#125;</code> 这种这种形式嵌入表达式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hello</span>: <span class="built_in">string</span> = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>Array</code> 直接在类型后加上 <code>[]</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>使用数组泛型，<code>Array&lt;元素类型&gt;</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><code>Tuple</code> 存储的数据类型可不相同，元素数量和类型是固定的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [stirng, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code> 能为一组数值赋值为对应的编号</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认按照0，1，3来编号</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;red, green, blue&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;red = <span class="number">0</span>, green = <span class="number">1</span>, blue = <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">//也可以手动编号</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;red =  <span class="number">1</span>, green = <span class="number">2</span>, blue = <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>根据键名赋键值，类型可以为 number 也可以为枚举对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;red, green, blue&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">red</span><span class="comment">//x = 0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">number</span> = <span class="title class_">Color</span>.<span class="property">green</span><span class="comment">//x = 1</span></span><br></pre></td></tr></table></figure><p>根据键值赋键名</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;red, green, blue&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">0</span>]<span class="comment">//x = &#x27;red&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>在变量类型位置时，可以使用 <code>any</code> 类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">x.<span class="title function_">push</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">x.<span class="title function_">push</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h2><p><code>void</code> 通常用于没有返回值的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funcation <span class="title function_">fun</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello，world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void</code> 类型类型的变量只能赋值为 <code>null</code> 和 <code>undefined</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><ul><li>在默认情况下，null 和 undefined 是<strong>所有类型的子类</strong>，可以将 null 和 undefined 赋值给任何类型的变量</li><li>但在严格模式下，null 和 undefined 只能赋值给它们对应的类型，在这个模式下如果想传入一个 string 或 null 或 undefined 类型，可以使用联合类型 <code>string|null|undefined</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//严格模式下</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">string</span>|<span class="literal">null</span>|<span class="literal">undefined</span> = <span class="literal">null</span> </span><br></pre></td></tr></table></figure><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p><code>never</code> 类型表示不存在值的类型，用于抛出异常的函数，或无限循环下去的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 表示非原始类型，是除了 <code>number </code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code> 或 <code>undefined</code> 之外的类型</p><p>可以便于更好使用像 <code>Object.create</code> 这样的 API</p><p>使用 <code>typeof</code> 函数返回非原始类型变量都是 <code>Object</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">o: <span class="built_in">object</span> | <span class="literal">null</span></span>):<span class="built_in">void</span>; </span><br><span class="line"><span class="title function_">create</span>(&#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;); <span class="comment">// OK </span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">// OK </span></span><br><span class="line"><span class="title function_">create</span>(<span class="number">42</span>); <span class="comment">// Error </span></span><br><span class="line"><span class="title function_">create</span>(<span class="string">&quot;string&quot;</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">false</span>); <span class="comment">// Error </span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">undefined</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>第一种方式：使用 <code>&lt;&gt;</code> <strong>(不推荐)</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>; <span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>第二种方式：使用 <code>as</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>在 tsx 中（react 项目里）由于尖括号和标签冲突，只能使用 <code>as</code> 的形式</p><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><h2 id="var、let-和-const"><a href="#var、let-和-const" class="headerlink" title="var、let 和 const"></a>var、let 和 const</h2><ul><li>使用 <code>var</code> 声明一个变量，在其他函数内部是可以访问的，正是因为 var 存在着这样的问题，我们更推荐使用 <code>let</code></li><li>let 声明的变量只能在它的语法作用域或者块作用域使用</li><li><code>const</code> 的作用域与 <code>let</code> 类似，只是 <code>const</code> 在被创建后不能改变</li></ul><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>语法：<code>let [x, y] = array</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>]; </span><br><span class="line"><span class="keyword">let</span> [first, second] = input; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// outputs 1 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second); <span class="comment">// outputs 2</span></span><br></pre></td></tr></table></figure><ul><li>作用于函数参数可直接解构成参数</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) &#123; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second); </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">f</span>(input);</span><br></pre></td></tr></table></figure><ul><li>可以用 <code>...</code> 语法来创建剩余的变量</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [frist, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(frist)<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest)<span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li>若不关心其他变量，可以空着，只用 <code>,</code> 分隔</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>语法： <code>let &#123;x, y&#125; = class</code>，结构的变量名要和对象的键名对应</p><p>下面的代码里的 a 和 b 没有指明类型，ts 也能正常运行，这是因为当你使用对象解构时，编译器会自动判断对象属性的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">b</span>: <span class="number">12</span>, <span class="attr">c</span>: <span class="string">&quot;bar&quot;</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure><p>将对象解构用于函数声明中</p><p>type 作用就是给类型起一个新名字，和接口一样，用来描述对象或函数的类型，<code>?</code> 表示该类型可选</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; <span class="attr">a</span>: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b &#125;: &#123;a:<span class="built_in">string</span>, b:<span class="built_in">number</span> &#125;</span>): <span class="built_in">void</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><p>三个点 <code>...</code> 被称为扩展运算符。用于可迭代对象展开到每个元素</p><ol><li>合并数组</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArray = [...arr1, ...arr2]; <span class="comment">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>复制数组</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [...originalArray];</span><br></pre></td></tr></table></figure><ol start="3"><li>添加元素</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2); <span class="comment">// 结果：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>函数参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title function_">myFunction</span>(...args); <span class="comment">// 输出：6</span></span><br></pre></td></tr></table></figure><ol start="5"><li>对象扩展</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> mergedObject = &#123; ...obj1, ...obj2 &#125;; <span class="comment">// 结果：&#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>与 <code>type</code> 类似，都能用于定义变量的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InterfaceExample</span> &#123; <span class="attr">key</span>: <span class="built_in">string</span>; &#125; </span><br><span class="line"><span class="comment">// 使用type </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeExample</span> = &#123; <span class="attr">key</span>: <span class="built_in">string</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="接口和类型的区别"><a href="#接口和类型的区别" class="headerlink" title="接口和类型的区别"></a>接口和类型的区别</h2><ol><li><p>interface 与 type 能相互扩展:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//interface能用extends来扩展</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125; </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Name</span> &#123; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="comment">//type能用 &amp; 来交叉类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Name</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="comment">//interface扩展type</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125; </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Name</span> &#123; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="comment">// type 与 interface 交叉 </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Name</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>interface</code> 可以定义多次，属性会被合并，而 <code>type</code> 不能被定义多次</p></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> <span class="attr">age</span>: <span class="built_in">number</span> &#125; </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123; <span class="attr">sex</span>: <span class="built_in">string</span> &#125; </span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>:<span class="title class_">User</span>=&#123;<span class="attr">name</span>:<span class="string">&#x27;wang&#x27;</span>,<span class="attr">age</span>:<span class="number">1</span>,<span class="attr">sex</span>:<span class="string">&#x27;man&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>type</code> 能定义映射类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> aType &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用type定义映射类型 </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyType</span>&lt;T&gt; = &#123; <span class="keyword">readonly</span> [key <span class="keyword">in</span> keyof T]: T[key]; &#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> newType = <span class="title class_">ReadonlyType</span>&lt;aType&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type newType = &#123;</span></span><br><span class="line"><span class="comment"> readonly name: string;</span></span><br><span class="line"><span class="comment"> readonly age?: number;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>type</code> 能定义条件类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> arrayType = <span class="built_in">number</span>[];</span><br><span class="line"><span class="comment">// 使用type定义条件类型 </span></span><br><span class="line"><span class="comment">// infer能够自动推断传入的类型,之后会再讲到</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> newType = <span class="title class_">Elementtype</span>&lt;arraytype&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type newType = number</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>在属性后加 <code>?</code> ,则该属性是可有可无的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom : <span class="title class_">Iperson</span> = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line"><span class="comment">//age: 21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h2><p>语法：<code>[propName: type]: any</code> ，能允许类型添加别的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="title class_">String</span>;</span><br><span class="line">[<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom : <span class="title class_">Iperson</span> = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line"><span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>被创建后不能被修改,用于对象在创建后就不能更改的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line"><span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">IPerson</span> = &#123; <span class="attr">id</span>:<span class="number">001</span>, <span class="attr">name</span>:wdm&#125;;</span><br><span class="line">p1.<span class="property">id</span> = <span class="number">002</span>; <span class="comment">//error</span></span><br></pre></td></tr></table></figure><h3 id="只读数组类型"><a href="#只读数组类型" class="headerlink" title="只读数组类型"></a>只读数组类型</h3><p><code>ReadonlyArray&lt;T&gt;</code> 类型与 <code>Array&lt;T&gt;</code> 类似，只不过都是不可变的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ro</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.<span class="title function_">push</span>(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.<span class="property">length</span> = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>在最后一行代码，将 <code>ReadonlyArray</code> 赋值给一个普通的数组也是不行的，但是可以用类型重写，将 <code>ReadonlyArray</code> 强制转换为数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure><h2 id="可变属性"><a href="#可变属性" class="headerlink" title="可变属性"></a>可变属性</h2><p>如果要使类型的属性可变,可以使用 <code>[propName: string]: any</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即使是拼写成了 colour 也不会报错,会自动添加一个colour属性</span></span><br><span class="line"><span class="keyword">let</span> squareOptions = &#123; <span class="attr">colour</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(squareOptions);</span><br></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>接口能描述变量类型外,还能描述函数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这能用于创建一个函数类型的变量,将一个函数赋值给一个变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.<span class="title function_">search</span>(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数里的参数名不必与接口定义的参数名相同</p><p>同时也可以不指定类型, TypeScript 会推断出参数的类型，因为已经指定了变量的函数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params">src, sub</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.<span class="title function_">search</span>(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可索引类型"><a href="#可索引类型" class="headerlink" title="可索引类型"></a>可索引类型</h2><p>用于描述哪些可以通过索引得到数据的类型,类似于数组和字典,比如 <code>a[10]</code> 或 <code>ageMap[&quot;daniel&quot;]</code></p><p>只能使用 <code>string</code> 或 <code>number</code> 来作为索引</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span>;</span><br><span class="line">myArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>也可以同时使用 <code>string</code> 和 <code>number</code> 作为索引</p><p>下面的代码在使用 <code>number</code> 索引时,由于 <code>Animal</code> 是父类型,也会匹配到 <code>Dog</code>,因此发生冲突<br>正确的做法是 <code>number</code> 返回的类型是 <code>string</code> 返回的类型的子类型</p><p>因为 <code>number</code> 实际上在 typescript 内部执行的时候会转换为 <code>string</code> ，所以这也要求 <code>string</code> 索引本身对应的类型是兼容所有的，也就是说 string 索引对应的类型必须是其他类型的父类。</p><p>举一个反例，比如 <code>number</code> 索引返回的类型是 <code>Animal</code>，TS 转换成 <code>string</code> 来去查找，但是 <code>string</code> 索引返回的类型是 <code>Dog</code>，<code>Animal</code> 不是 <code>Dog</code> 类型，编译器会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：&#x27;string&#x27;索引对应的类型不兼容所有</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NotOkay</span> &#123;</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">number</span>]: <span class="title class_">Animal</span>;</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="title class_">Dog</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确的做法:使用number索引时Dog都是Animal，字符串索引和数字索引返回的类型被视为一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NotOkay</span> &#123;</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">number</span>]: <span class="title class_">Dog</span>;</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="title class_">Animal</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串索引能够描述 <code>dictionary</code> 形式的变量,但是要保证所有 <code>string</code> 类型的属性返回值都和字符串索引的返回类型一致</p><p>因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&quot;property&quot;]</code> 两种形式都可以</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何为既有索引又有普通属性的变量初始化：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">dict</span>: <span class="title class_">NumberDictionary</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h2><p>和 java 中的接口作用一致,用于抽象一个类的数据结构(ADT)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentTime</span> = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>和类一样，接口也可以继承一个或多个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;<span class="title class_">Square</span>&gt;&#123;&#125;;</span><br><span class="line">square.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>使用接口的混合类型，你会得到一个对象同时也能当作函数来使用</p><p>创建混合类型对象的步骤：</p><ol><li>先通过函数表达式，将函数分配给一个变量</li><li>再使用 <code>Object.assign()</code> 方法将对象属性分配给该变量</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">interval</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">reset</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个具有指定函数签名的对象</span></span><br><span class="line">    <span class="keyword">const</span> counterFunction = <span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>; &#125;;</span><br><span class="line">    <span class="comment">// 使用Object.assign将额外属性分配给counterFunction对象</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">counter</span>: <span class="title class_">Counter</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(counterFunction, &#123;</span><br><span class="line">        <span class="attr">interval</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">reset</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>当一个接口继承了类后，该接口只能被这个类或其子类所实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Image必须是Control或其子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h2><table><thead><tr><th align="center">修饰符</th><th align="center">子类</th><th align="center">实例</th><th>能否被修改</th></tr></thead><tbody><tr><td align="center">public(默认)</td><td align="center">√</td><td align="center">√</td><td>√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">×</td><td>√</td></tr><tr><td align="center">private</td><td align="center">×</td><td align="center">×</td><td>√</td></tr></tbody></table><blockquote><p><code>readonly</code>关键字用于将类成员声明为<strong>只读</strong>。这意味着成员的值只能在<strong>声明或构造函数</strong>中进行设置，不能在其他地方修改。<code>readonly</code>可以与<code>public</code>、<code>private</code>和<code>protected</code>修饰符结合使用。</p></blockquote><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>在TypeScript里，成员都默认为<code>public</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p><code>protected</code> 成员只能在类和子类中可以访问</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">department</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">department</span> = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="title function_">getElevatorPitch</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="property">name</span>); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>构造函数也可以被标记成 <code>protected</code>。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">department</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">department</span> = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure><p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员的类型的时候，情况就不同了。如果其中一个类型里包含一个 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于 <code>protected</code> 成员也使用这个规则。</p><p>下面来看一个例子，更好地说明了这一点：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rhino</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>(<span class="string">&quot;Rhino&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Goat&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> <span class="title class_">Rhino</span>();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee; <span class="comment">// 错误: Animal 与 Employee 不兼容.</span></span><br></pre></td></tr></table></figure><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Cat&quot;</span>).<span class="property">name</span>; <span class="comment">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Octopus</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">numberOfLegs</span>: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">theName</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> <span class="title class_">Octopus</span>(<span class="string">&quot;Man with the 8 strong legs&quot;</span>);</span><br><span class="line">dad.<span class="property">name</span> = <span class="string">&quot;Man with the 3-piece suit&quot;</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>TypeScript 支持通过 <code>get</code> 和 <code>set</code> 来截取对对象属性的操作。它能帮助你有效的控制对对象成员的读取和修改。</p><p>先将属性定义为 <code>private</code>, <code>get</code> 用来截取对象属性的读取, <code>set</code> 用来截取对象属性的修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">&quot;secret passcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_fullName</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">fullName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_fullName</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">newName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode === <span class="string">&quot;secret passcode&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_fullName</span> = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="comment">//对fullName赋值时,会运行set fullName()</span></span><br><span class="line">employee.<span class="property">fullName</span> = <span class="string">&quot;Bob Smith&quot;</span>;</span><br><span class="line"><span class="comment">//读取fullName时,会运行get fullName()</span></span><br><span class="line"><span class="keyword">if</span> (employee.<span class="property">fullName</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(employee.<span class="property">fullName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p><code>static</code> 修饰符使得该属性只存在于该对象中,所有由该对象创建的实例都使用同一个属性值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="title function_">calculateDistanceFromOrigin</span>(<span class="params">point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.<span class="property">x</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">x</span>);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.<span class="property">y</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">y</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist * xDist + yDist * yDist) / <span class="variable language_">this</span>.<span class="property">scale</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="keyword">public</span> <span class="attr">scale</span>: <span class="built_in">number</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid1.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid2.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数声明和函数表达式"><a href="#函数声明和函数表达式" class="headerlink" title="函数声明和函数表达式"></a>函数声明和函数表达式</h2><p>函数声明和函数表达式的区别：<br>    - 函数声明会在浏览器在执行代码时被扫描，创建一个变量来储存指向该函数的引用<br>    - 函数表达式则是将函数赋值给一个变量来储存</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>,y: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> add = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> ): <span class="function"><span class="params">number</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口定义函数"><a href="#接口定义函数" class="headerlink" title="接口定义函数"></a>接口定义函数</h2><p>接口内要用 <code>()</code> 包裹函数的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Add</span>&#123;</span><br><span class="line">(<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="title class_">IAdd</span> = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>参数后加 <code>?</code> 表示该参数是可选的，要对没有传入可选参数的情况做一个判断，通常可选参数都有个默认值，也就是默认参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?:<span class="built_in">string</span></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(lastName)&#123;</span><br><span class="line"><span class="keyword">return</span> firstName+<span class="string">&#x27; &#x27;</span>+lastName;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">name</span>(<span class="string">&#x27;lilming&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>可选参数和默认参数类似，可以有也可以没有。但是可选参数必须在必选参数后面；默认参数没有这个限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params">lastName:<span class="built_in">string</span> = <span class="string">&#x27;wang&#x27;</span> ,firstName: <span class="built_in">string</span> </span>)&#123;</span><br><span class="line"><span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">name</span>(<span class="string">&#x27;daiming&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="获取剩余参数"><a href="#获取剩余参数" class="headerlink" title="获取剩余参数"></a>获取剩余参数</h2><p><code>...</code> 在变量之前可以获取剩下的其他变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">a:<span class="built_in">any</span>[], ...items:<span class="built_in">any</span>[]</span>)&#123;</span><br><span class="line">items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">a.<span class="title function_">push</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title function_">push</span>(a,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>利用联合类型参数，通过 <code>if</code> 判断参数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span>| <span class="built_in">String</span></span>): <span class="built_in">number</span>| <span class="title class_">String</span>| <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> x ===<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Number</span>(x.<span class="property">tostring</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="property">reverse</span>.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-和箭头函数"><a href="#this-和箭头函数" class="headerlink" title="this 和箭头函数"></a>this 和箭头函数</h2><p>箭头函数会捕获包含它们的上下文中的 <code>this</code> 值，箭头函数中的 <code>this</code> 和外层的 <code>this</code> 是一致的。而普通函数中的 <code>this</code> 指向全局对象（在浏览器中是 <code>window</code>，在 Node.js 中是 <code>global</code>）</p><p>下面的例子中，一个对象的函数返回了一个函数，被返回的函数内使用了该对象的属性，则该函数要用<strong>箭头函数</strong>，而不是普通的函数</p><p>因为在该函数被创建之后（被赋值了之后），他的 <code>this</code> 需要是对象的，而不是它自身的，这就需要使用<strong>箭头函数</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="attr">suit</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">card</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Deck</span> &#123;</span><br><span class="line">    <span class="attr">suits</span>: <span class="built_in">string</span>[];</span><br><span class="line">    <span class="attr">cards</span>: <span class="built_in">number</span>[];</span><br><span class="line">    <span class="title function_">createCardPicker</span>(<span class="attr">this</span>: <span class="title class_">Deck</span>): <span class="function">() =&gt;</span> <span class="title class_">Card</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">deck</span>: <span class="title class_">Deck</span> = &#123;</span><br><span class="line">    <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">    <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line"></span><br><span class="line">    <span class="attr">createCardPicker</span>: <span class="keyword">function</span>(<span class="params"><span class="variable language_">this</span>: Deck</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>();</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;card: &quot;</span> + pickedCard.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard.<span class="property">suit</span>);</span><br></pre></td></tr></table></figure><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>如果一个函数可能会有不同类型的参数传入，采用可选参数和 <code>if</code> 来处理会使代码可读性下降很多，可以采用函数重载来限定不同类型的参数</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padding</span>(<span class="params">all: <span class="built_in">number</span></span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padding</span>(<span class="params">topAndBottom: <span class="built_in">number</span>, leftAndRight: <span class="built_in">number</span></span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padding</span>(<span class="params">top: <span class="built_in">number</span>, right: <span class="built_in">number</span>, bottom: <span class="built_in">number</span>, left: <span class="built_in">number</span></span>);</span><br><span class="line"><span class="comment">// 上面三个是函数重载，规定只能用这三种形式的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padding</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span>, c?: <span class="built_in">number</span>, d?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="literal">undefined</span> &amp;&amp; c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    b = c = d = a;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    c = a;</span><br><span class="line">    d = b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">top</span>: a,</span><br><span class="line">    <span class="attr">right</span>: b,</span><br><span class="line">    <span class="attr">bottom</span>: c,</span><br><span class="line">    <span class="attr">left</span>: d</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在调用时，就只能使用前面三种的参数形式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">padding</span>(<span class="number">1</span>); <span class="comment">// Okay: all</span></span><br><span class="line"><span class="title function_">padding</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Okay: topAndBottom, leftAndRight</span></span><br><span class="line"><span class="title function_">padding</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Okay: top, right, bottom, left</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">padding</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Error: Not a part of the available overloads</span></span><br></pre></td></tr></table></figure><p>64 4 16 20 16 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://www.tslang.cn/docs/home.html&quot;&gt;TypeScript中文网 &lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/07/17/2023-07-17/"/>
    <id>http://example.com/2023/07/17/2023-07-17/</id>
    <published>2023-07-17T01:32:39.607Z</published>
    <updated>2023-07-17T01:32:39.607Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>React基础知识入门</title>
    <link href="http://example.com/2023/07/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-17T01:32:34.000Z</published>
    <updated>2023-07-17T01:32:36.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法"><a href="#这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程-动手写-demo-＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看-github-的优质项目。-创建-React-项目-确保安装了-node-js-后就可以使用命令安装-react-gt-my-app-为创建的-react-项目名-初始-jsx-与组件-gt-下面介绍有关-React-的基础知识-创建-React-组件-React-通常有一个主入口文件，如：index-js-或-index-tsx-首先利用-ReactDOM-createRoot-创建一个-root-document-getElementById-作用是什么？-gt-获取一个-id-为“root”的-HTML-元素作为-React-的挂载点，将其组件挂载到这个容器上-Id-为什么是“root”-gt-在-public-目录下，和-index-html-文件里命名的元素有关，可以自定义命名-之后再用-root-render-将内部的-React-组件（）渲染到-root（根容器）中-App-组件是你引入的一个-React-组件-先在-App-jsx-文件里创建-JS-函数，函数里返回标签，这就是一个-React-组件了-gt-注意：-gt-React-组件必须以大写字母开头-gt-最外层的标签必须闭合，这和-HTML-不同-要想组件在其他的组件里去使用要用-export-defsult-添加样式-使用-className-指定一个样式表-条件渲染-if-语句-三元表达式-短路运算（逻辑中断）-列表渲染-利用-Array-的-map-方法来渲染列表-gt-循环的标签一定要有-key-属性，分配一个唯一的值，不然会有警告-响应事件-在函数组件内部声明一个事件处理函数来响应事件-组件-函数组件-函数名大写开头，函数内返回标签-渲染函数组件-gt-直接使用标签-箭头函数语法-类组件1-必须继承-React-Component-父类2-必须有一个-render-方法3-render-方法必须要有返回值-类组件的渲染和函数组件一致-绑定事件-函数组件绑定事件-类组件绑定事件-gt-在类中定义事件函数，要用-this-funName-的方式引用-事件对象-通过-preventDefault-方法获取到事件对象，阻止运行-插值和状态-class-写法和-Hook-写法-gt-在前面说到-react-的组件由两种写法，一个是-class，一个是-function，在-react18-出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用-class，在-react18-出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在-react-官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以-Hook-为主，class-过一遍就好了-class-写法-初始化数据：state-x3D-，state-是组件内部的私有数据，只能在组件内部使用，相当于-java-对象的私有变量。state-的值是一个对象，表示组件内部的多个数据-修改数据：this-setState-要修改的值-，注意：不能直接修改state-gt-注意，在事件函数里存在-this-指向的问题，非箭头函数函数不能直接使用-this-setState-，因为这个-this-不是-class-的-this。-gt-箭头函数没有他自己的-this，他的-this-是由外面一层的-this-决定的-Hook-写法" class="headerlink" title="这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门教程，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。# 创建 React 项目- 确保安装了 node.js 后就可以使用命令安装 react&gt; my-app 为创建的 react 项目名# 初始 jsx 与组件&gt; 下面介绍有关 React 的基础知识## 创建 React 组件- React 通常有一个主入口文件，如：index.js 或 index.tsx- 首先利用 ReactDOM.createRoot 创建一个 root- document.getElementById 作用是什么？&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上- Id 为什么是“root”&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名- 之后再用 root.render 将内部的 React 组件（）渲染到 root（根容器）中- App 组件是你引入的一个 React 组件- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了&gt; 注意：&gt; React 组件必须以大写字母开头&gt; 最外层的标签必须闭合，这和 HTML 不同- 要想组件在其他的组件里去使用要用 export defsult##  添加样式- 使用 className 指定一个样式表# 条件渲染- if 语句- 三元表达式- 短路运算（逻辑中断）## 列表渲染- 利用 Array 的 map 方法来渲染列表&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告## 响应事件- 在函数组件内部声明一个事件处理函数来响应事件# 组件## 函数组件- 函数名大写开头，函数内返回标签- 渲染函数组件&gt; 直接使用标签- 箭头函数语法## 类组件1. 必须继承 React.Component 父类2. 必须有一个 render 方法3. render 方法必须要有返回值- 类组件的渲染和函数组件一致## 绑定事件- 函数组件绑定事件- 类组件绑定事件&gt; 在类中定义事件函数，要用 this.funName 的方式引用 ## 事件对象- 通过 preventDefault 方法获取到事件对象，阻止运行# 插值和状态## class 写法和 Hook 写法&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了## class 写法- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据- 修改数据：this.setState({要修改的值})，注意：不能直接修改state&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的##  Hook 写法"></a>这篇 React 基础入门是结合 React 和 TS 来使用的，会比一般的 JS 加 React 的项目复杂的多，不过就我目前接触到的项目，采用 TS 居多，JS 越来越少了，大厂或许 TS 用的更多吧（我猜的）。<br>我参照的学习资料来自<a href="https://juejin.cn/post/7021674818621669389">掘金的一篇文章</a>以及<a href="https://react.docschina.org/learn#components">官方的入门教程</a>，我的个人习惯一向是参照文字教程+动手写 demo ＋做项目，视频是真的看不下去，如果是国外的教程有优质的翻译还好，国内的教程质量不能说是很差吧，只是我不习惯这种按照老师讲课的方式，更倾向于文字形式能挑重点看，跳过已经掌握的部分<br>再说说实战视频吧，实战部分的案例都被用得太烂了，如果仅仅只是为了提升技术那么完全没有做的必要，直接参与竞赛或者老师的课题，以解决问题为导向，对自己技术的提升真的很大，实在没有也可以看看 github 的优质项目。<br># 创建 React 项目<br>- 确保安装了 node.js 后就可以使用命令安装 react<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx creat-react-app my-app</span><br></pre></td></tr></table></figure><br>&gt; my-app 为创建的 react 项目名<br># 初始 jsx 与组件<br>&gt; 下面介绍有关 React 的基础知识<br>## 创建 React 组件<br>- React 通常有一个主入口文件，如：index.js 或 index.tsx<br>- 首先利用 ReactDOM.createRoot 创建一个 root<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>- document.getElementById 作用是什么？<br>&gt; 获取一个 id 为“root”的 HTML 元素作为 React 的挂载点，将其组件挂载到这个容器上<br>- Id 为什么是“root”<br>&gt; 在 public 目录下，和 index.html 文件里命名的元素有关，可以自定义命名<br>- 之后再用 root.render 将内部的 React 组件（<App/>）渲染到 root（根容器）中<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root.<span class="title function_">render</span>(  </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span>  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><br>- App 组件是你引入的一个 React 组件<br>- 先在 App.jsx 文件里创建 JS 函数，函数里返回标签，这就是一个 React 组件了<br>&gt; 注意：<br>&gt; React 组件必须以大写字母开头<br>&gt; 最外层的标签必须闭合，这和 HTML 不同<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> (  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    Hello，World！</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 要想组件在其他的组件里去使用要用 export defsult<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><br>##  添加样式<br>- 使用 className 指定一个样式表<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span></span><br><span class="line">&lt;img className=<span class="string">&quot;demo&quot;</span>&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在App.css文件中*/</span></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line"><span class="attribute">width</span>：<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>：<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br># 条件渲染<br>- if 语句<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content;  </span><br><span class="line"><span class="keyword">if</span> (isLoggedIn) &#123;  </span><br><span class="line">content = <span class="language-xml"><span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span>;  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">content = <span class="language-xml"><span class="tag">&lt;<span class="name">LoginForm</span> /&gt;</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> (  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">&#123;content&#125;  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>- 三元表达式<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> content;  </span><br><span class="line">content = isLoggedIn ? <span class="language-xml"><span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span>:<span class="language-xml"><span class="tag">&lt;<span class="name">LoginForm</span> /&gt;</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> (  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">&#123;content&#125;  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>- 短路运算（逻辑中断）<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;  </span><br><span class="line">&#123;isLoggedIn &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">AdminPanel</span> /&gt;</span></span>&#125;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>## 列表渲染<br>- 利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array 的 map 方法</a>来渲染列表<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listItems = products.<span class="title function_">map</span>(<span class="function"><span class="params">product</span> =&gt;</span>  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">&#123;product.title&#125;  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>&gt; 循环的标签一定要有 key 属性，分配一个唯一的值，不然会有警告<br>## 响应事件<br>- 在函数组件内部声明一个事件处理函数来响应事件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是函数组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;  </span><br><span class="line"><span class="comment">//这是事件处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;  </span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;You clicked me!&#x27;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">Click me  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  </span><br><span class="line">);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br># 组件<br>## 函数组件<br>- 函数名大写开头，函数内返回标签<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello,world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 渲染函数组件<br>&gt; 直接使用<Hello/>标签<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span>, root)</span><br></pre></td></tr></table></figure><br>- 箭头函数语法<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params"></span>)=&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>## 类组件<br>1. 必须继承 React.Component 父类<br>2. 必须有一个 render 方法<br>3. render 方法必须要有返回值<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件的渲染和函数组件一致<br>## 绑定事件<br>- 函数组件绑定事件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span>)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> (  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>- 类组件绑定事件<br>&gt; 在类中定义事件函数，要用 <code>this.funName</code> 的方式引用<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line"><span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.hanleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> ## 事件对象<br>- 通过 preventDefault 方法获取到事件对象，阻止运行<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>)&#123;</span><br><span class="line"><span class="comment">//e就是这个点击事件的对象，也叫合成对象</span></span><br><span class="line">e.<span class="title function_">preventDefault</span>()<span class="comment">//阻止了链接的跳转</span></span><br><span class="line">&#125; </span><br><span class="line">&lt;a onClick=&#123;handleClick&#125;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><br># 插值和状态<br>## class 写法和 Hook 写法<br>&gt; 在前面说到 react 的组件由两种写法，一个是 class，一个是 function，在 react18 出来之前，函数组件是不能改变组件内部的值的，要做到动态的效果只能用 class，在 react18 出来之后，添加了一个新特性：Hook。可以在函数组件里定义变量，并修改变量了，在一些老的教程里没有提到这一点，我在这一点上吃了一点亏，既然官方推出了这个特新肯定是希望能成为主流去用的，比如在 react 官网教程里用的就是这个方式，所以在学习这一部分时，尽量还是以 Hook 为主，class 过一遍就好了<br>## class 写法<br>- 初始化数据：state &#x3D; {}，state 是组件内部的私有数据，只能在组件内部使用，相当于 java 对象的私有变量。state 的值是一个对象，表示组件内部的多个数据<br>- 修改数据：this.setState({要修改的值})，<code>注意：不能直接修改state</code><br>&gt; 注意，在事件函数里存在 this 指向的问题，非箭头函数函数不能直接使用 this.setState()，因为这个 this 不是 class 的 this。<br>&gt; 箭头函数没有他自己的 this，他的 this 是由外面一层的 this 决定的<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;  </span><br><span class="line">  state=&#123;  </span><br><span class="line">    count : <span class="number">0</span>  </span><br><span class="line">  &#125;  </span><br><span class="line">  handleClick = <span class="function">()=&gt;</span>&#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;  </span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> +<span class="number">1</span>  </span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span>( <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    )  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>##  Hook 写法</h2><h1 id="挂载和状态设置"><a href="#挂载和状态设置" class="headerlink" title="挂载和状态设置"></a>挂载和状态设置</h1><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这篇-React-基础入门是结合-React-和-TS-来使用的，会比一般的-JS-加-React-的项目复杂的多，不过就我目前接触到的项目，采用-TS-居多，JS-越来越少了，大厂或许-TS-用的更多吧（我猜的）。我参照的学习资料来自掘金的一篇文章以及官方的入门</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>orginone平台解析——SignalR通信</title>
    <link href="http://example.com/2023/07/17/orginone%E5%B9%B3%E5%8F%B0%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94SignalR%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2023/07/17/orginone%E5%B9%B3%E5%8F%B0%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94SignalR%E9%80%9A%E4%BF%A1/</id>
    <published>2023-07-17T01:31:35.000Z</published>
    <updated>2023-07-17T01:31:37.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Storehub"><a href="#Storehub" class="headerlink" title="Storehub"></a>Storehub</h1><blockquote><p>关于 SignalR.HubConnection 的官方文档（不过官方貌似没有中文版的）： <a href="https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest">https://learn.microsoft.com/zh-cn/javascript/api/@microsoft/signalr/hubconnection?view=signalr-js-latest</a><br>对 SignIR 还不是很熟悉，和传统的 axios 请求不太一样，之后再继续学习这一块</p></blockquote><p>Storehub 功能是用来和服务器建立 SignIR 连接的</p><ol><li>constructor 构造方法：构造函数，用于建立与 SignalR 服务器的连接。主要是初始化了私有对象_connection，这是用来和 SignalR 服务器的连接的对象，后面的 invoke 就是通过这一方式和服务器连接的</li><li>isConnected：检查是否连接</li><li>dispose：销毁连接</li><li>_starting：初次开始连接</li><li>start：启动连接，如果没有启动，则调用_starting</li><li>restart：重新建立连接，先停止连接，之后调用start</li><li>onConnected：连接成功的回调函数，传入一个返回 <code>void</code> 的函数，用来在_starting 中执行</li><li>onDisconnected：断开连接的回调，和成功连接的回调类似，在销毁连接时执行</li><li>on：<ol><li>接收两个参数一个是字符串（方法名），第二个是函数</li><li>这也是一个回调函数，官网上的解释是说注册一个处理程序，当调用具有指定方法名称的集线器方法时将调用该处理程序。我的理解是客户端去监听服务器，当服务器执行了第一个参数指定的方法时，就去执行后面的函数</li><li>例如：<br>当服务器执行了 updated 方法后，会将结果传入第二个参数所定义的函数，从而做到服务器去调用客户端的方法<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_storeHub</span>.<span class="title function_">on</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="function">(<span class="params">belongId, key, data</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_updated</span>(belongId, key, data);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li>invoke：这是用来调用服务器的方法<ol><li>接收的参数分为两个部分，第一个是调用的服务器端的方法，第二个是传入的参数</li><li>例如：在 kernelapi 中的登录方法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = await this._storeHub.invoke(&#x27;Login&#x27;, req);</span><br></pre></td></tr></table></figure>我在 invoke 中打印了请求的方法和对应的请求结果：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_connection</span>  </span><br><span class="line">  .<span class="title function_">invoke</span>(methodName, ...args)  </span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res: ResultType&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//打印请求结果 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);  <span class="comment">//打印请求方法</span></span><br><span class="line"><span class="comment">//其他的代码省略</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><img src="/static/62adada267390657a16b2233edd71c7.png"></li></ol></li></ol><h1 id="anyStore"><a href="#anyStore" class="headerlink" title="anyStore"></a>anyStore</h1><p>anyStore 功能主要是用来管理服务器的数据的，比如存储的文件，使用的连接方法是调用上面的 Storehub 对象</p><ol><li>_restRequest:使用 axios 请求后端，在 anyStore 的每一个方法下都会先判断一次，如果 StoreHub 没有连接上才会用 axios 请求，以下是 anyStore 涉及到的方法</li><li>对物的操作：创建、加载。物是平台中抽象的一个概念，把平台中所有的对象都抽象成物</li><li>对文件的操作：上传、查看</li><li>对 token 的操作：更新 token 到缓存中、获取 token</li><li>对对象的操作：查询、修改、删除</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Storehub&quot;&gt;&lt;a href=&quot;#Storehub&quot; class=&quot;headerlink&quot; title=&quot;Storehub&quot;&gt;&lt;/a&gt;Storehub&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;关于 SignalR.HubConnection 的官方文档（不过</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>清除浮动的三种常用方式</title>
    <link href="http://example.com/2023/07/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2023/07/10/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2023-07-10T07:34:22.000Z</published>
    <updated>2023-07-10T09:06:19.344Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。</p><h2 id="一、为什么要清除浮动"><a href="#一、为什么要清除浮动" class="headerlink" title="一、为什么要清除浮动"></a>一、为什么要清除浮动</h2><p>在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floatDiv&quot;</span>&gt;</span>float left<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其样式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.topDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;     </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid black; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.floatDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;     </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;     </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted red;    </span><br><span class="line"><span class="attribute">color</span>: red;     </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">4px</span>;     </span><br><span class="line"><span class="attribute">float</span>: left; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottomDiv</span> </span><br><span class="line">&#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;     </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;     </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;     </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted black; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.textDiv</span> </span><br><span class="line">&#123;     </span><br><span class="line"><span class="attribute">color</span>: blue;     </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在chrome中渲染的效果如下图所示：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/2af797ffc0918352ac8d381994ff1a27~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="浮动效果"></p><p>这肯定不是我们想要的渲染效果，它可能存在如下问题：</p><ol><li>文字围绕浮动元素排版，但我们可能希望文字（<code>.textDiv</code>）排列在浮动元素下方，或者，我们并不希望<code>.textDiv</code>两边有浮动元素存在。</li><li>浮动元素排版超出了其父级元素（<code>.topDiv</code>），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。</li><li>浮动元素甚至影响到了其父元素的兄弟元素（<code>.bottomDiv</code>）排版。因为浮动元素脱离了文档流，<code>.bottomDiv</code>在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。</li></ol><p>解决第一个问题，需要清除<code>.textDiv</code>周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。</p><p>接下来开始介绍清除浮动的方法。</p><h2 id="二、清除浮动的方法"><a href="#二、清除浮动的方法" class="headerlink" title="二、清除浮动的方法"></a>二、清除浮动的方法</h2><h3 id="1-父元素结束标签之前插入清除浮动的块级元素"><a href="#1-父元素结束标签之前插入清除浮动的块级元素" class="headerlink" title="1. 父元素结束标签之前插入清除浮动的块级元素"></a>1. 父元素结束标签之前插入清除浮动的块级元素</h3><p>HTML结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素div：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floatDiv&quot;</span>&gt;</span>float left<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blankDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.topDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;     </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.floatDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;     </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted red;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.bottomDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;     </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted black;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.textDiv</span> &#123;     </span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//区别在这里</span></span><br><span class="line"><span class="selector-class">.blankDiv</span> &#123;    </span><br><span class="line"><span class="attribute">clear</span>: both; <span class="comment">// or left</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/7e3621e15592ac42f86c70734fe4e1dc~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"></p><p>通过上面的样式，<code>.blankDiv</code> 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（<code>.floatDiv</code>）位置已经确定，浏览器在计算 <code>.blankDiv</code> 的位置时，为满足其需求，将 <code>.blankDiv</code> 渲染在浮动元素下方，保证了 <code>.blankDiv</code> 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 <code>.blankDiv</code> 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(<code>clear</code> 的值为 <code>both</code> 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 <code>both</code>)</p><h3 id="2-利用伪元素（clearfix）"><a href="#2-利用伪元素（clearfix）" class="headerlink" title="2. 利用伪元素（clearfix）"></a>2. 利用伪元素（clearfix）</h3><p>HTML 结构如下，为了惯例相符，在 <code>.topDiv</code> 的 div 上再添加一个<code>clearfix</code>类：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topDiv clearfix&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floatDiv&quot;</span>&gt;</span>float left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式应用如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略基本的样式 </span></span><br><span class="line"><span class="comment">// 区别在这里 </span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;     </span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;.&#x27;</span>;   </span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该样式在<code>clearfix</code>，即父级元素的最后，添加了一个<code>:after</code>伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的<code>display</code>值为<code>block</code>，即，它是一个不可见的块级元素（有的地方使用<code>table</code>，因为<code>table</code>也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。</p><h3 id="3-利用-overflow-清除浮动"><a href="#3-利用-overflow-清除浮动" class="headerlink" title="3. 利用 overflow 清除浮动"></a>3. 利用 overflow 清除浮动</h3><p>首先直观地看看，<code>overflow</code>是如何清除浮动的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topDiv&quot;</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floatDiv&quot;</span>&gt;</span>float left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottomDiv&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.topDiv</span> &#123;    </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;   </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">4px</span>;   </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid black;  </span><br><span class="line"><span class="comment">// 区别在这里  </span></span><br><span class="line"><span class="attribute">overflow</span>: auto; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.floatDiv</span>&#123;   </span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;   </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted red;  </span><br><span class="line"><span class="attribute">color</span>: red;   </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">4px</span>;   </span><br><span class="line"><span class="attribute">float</span>: left; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.bottomDiv</span> &#123;    </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;   </span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;    </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> dotted black; </span><br><span class="line"><span class="attribute">clear</span>: both; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.textDiv</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: blue;   </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不应用上面标识出来的CSS时，渲染结果和本文开始的第一个图形效果相同，应用CSS后的渲染效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/cb75fb0469d3316e2ca6192f8316f7cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"></p><p>仅仅只在父级元素上添加了一个值为auto的overflow属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的overflow值，还可以是除了”visible”之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll值会导致滚动条始终可见，hidden会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？</p><p>要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">块格式化上下文(BFC)</a>,然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。</p><p>这是从<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context">MDN</a>上摘下来的BFC定义：</p><blockquote><p>A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other.</p></blockquote><p>翻译过来就是：块级格式化上下文是CSS可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。</p><p>块格式化上下文（BFC）有下面几个特点：</p><ol><li>BFC是就像一道屏障，隔离出了BFC内部和外部，内部和外部区域的渲染相互之间不影响。BFC有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。</li><li>BFC的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和BFC区域是泾渭分明的，不可能重叠。</li><li>BFC在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使BFC区域内只有一个浮动元素，BFC的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。</li><li>HTML结构中，当构建BFC区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。<a href="https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float">看这里</a></li></ol><p>有了这几点，就可以尝试解释为什么<code>overflow</code>（值不为<code>visible</code>）可以清除浮动了。</p><p>当元素设置了<code>overflow</code>样式，且值不为<code>visible</code>时，该元素就建构了一个BFC(哪些情况下，元素可以建构出BFC，可以看查看CSS文档对<a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting">BFC的定义</a>)。在我们的例子中，<code>.topDiv</code>因设置了值为<code>auto</code>的<code>overflow</code>样式，所以该元素建构出一个BFC，按照第三个特点，BFC的高度是要包括浮动元素的，所以<code>.topDiv</code>的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为<code>visible</code>的<code>overflow</code>不能建构BFC，<a href="https://stackoverflow.com/questions/9943503/why-does-css2-1-define-overflow-values-other-than-visible-to-establish-a-new-b?answertab=votes#tab-top">这个答案</a>给了一个解释)</p><p>其实，这里overflow的作用就是为了构建一个BFC区域，让内部浮动的影响都得以“内化”。如果你看了<a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting">BFC的定义</a>，你会发现，构建一个BFC区域的方法有很多种，<code>overflow</code>只是其中的一种，那在这里，我们是否也可以利用其它的方式构建BFC，且同样能达到清除浮动的目的呢？</p><p>BFC定义中说，<code>inline-block</code>同样也能构建BFC，那我们就用该样式来试试：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.topDiv</span> &#123;     </span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;     </span><br><span class="line"><span class="attribute">padding</span>: <span class="number">4px</span>;    </span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid black;    </span><br><span class="line"><span class="comment">// 区别在这里    </span></span><br><span class="line"><span class="attribute">display</span>: inline-block; &#125; </span><br><span class="line"><span class="comment">// 其他样式相同，省略</span></span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/10/18/aa859ff15404ede93450f03430b2d3ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"></p><p>效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。</p><p>当然，要说明的是，在实际项目中选择采用哪种方式构建BFC是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用<code>inline-block</code>和选用<code>overflow</code>效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对<code>overflow</code>值的选择也要考虑其表现和影响。在各种构建BFC的方式中，<code>overflow</code>方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用<code>overflow</code>来清除浮动的原因吧。</p><p>到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍了三种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。&lt;/p&gt;
&lt;h2 id=&quot;一、为</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React路由踩坑</title>
    <link href="http://example.com/2023/07/01/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/React%E8%B7%AF%E7%94%B1%E8%B8%A9%E5%9D%91/"/>
    <id>http://example.com/2023/07/01/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/React%E8%B7%AF%E7%94%B1%E8%B8%A9%E5%9D%91/</id>
    <published>2023-07-01T14:44:37.000Z</published>
    <updated>2023-07-17T01:34:24.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误实例"><a href="#错误实例" class="headerlink" title="错误实例"></a>错误实例</h1><p>在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 设置默认进入登录页面  </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RedirectPage</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/passport/login&quot;</span> /&gt;</span></span>;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然而你把这段代码放入最新的 React 项目中会有报错<br><img src="/../static/Pasted%20image%2020230701224929.png"><br>报错显示不存在 Redirect，这是因为在 v6 版本的 react-router-dom 中移除了 Redirect</p><h1 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h1><p>在 <code>react-router-dom</code> 的 v6 版本中，<code>Redirect</code> 组件已经被移除了，取而代之的是 <code>useNavigate</code> Hook 和 <code>navigate</code> 函数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 设置默认进入登录页面  </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RedirectPage</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();  </span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;  </span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&#x27;/passport/login&#x27;</span>)  </span><br><span class="line">    &#125;,[])  </span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RedirectPage</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;错误实例&quot;&gt;&lt;a href=&quot;#错误实例&quot; class=&quot;headerlink&quot; title=&quot;错误实例&quot;&gt;&lt;/a&gt;错误实例&lt;/h1&gt;&lt;p&gt;在一些版本较老的 React 的项目里你可能会看到这样的路由跳转方法&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Boot入门</title>
    <link href="http://example.com/2023/07/01/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Spring%20Boot%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/01/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/Spring%20Boot%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-01T14:44:04.000Z</published>
    <updated>2023-07-01T14:44:06.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Spring-Initializr"><a href="#Spring-Initializr" class="headerlink" title="Spring Initializr"></a>Spring Initializr</h2><p><a href="https://start.spring.io/">Spring Initializr</a>创建开发框架</p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>Java的开发工具包</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Java项目的构建工具<br>作用：</p><ol><li>统一项目结构</li><li>管理项目使用的jar包</li></ol><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>版本管理工具</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>数据库</p><h2 id="IDAE"><a href="#IDAE" class="headerlink" title="IDAE"></a>IDAE</h2><p>集成开发工具</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="创建maven项目结构"><a href="#创建maven项目结构" class="headerlink" title="创建maven项目结构"></a>创建maven项目结构</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;h2 id=&quot;Spring-Initializr&quot;&gt;&lt;a href=&quot;#Spring-Initializr&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="http://example.com/2023/06/22/SQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/06/22/SQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E5%9F%BA%E7%A1%80/</id>
    <published>2023-06-22T04:20:43.000Z</published>
    <updated>2023-06-22T04:20:47.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES<span class="comment">--显示所有数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASES 数据库名<span class="comment">--创建数据库</span></span><br><span class="line">USE 数据库名称<span class="comment">--切换默认数据库 </span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名<span class="comment">--删除数据库</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>基础的数据类型忽略，只用重点看下面两个数据类型</p><h2 id="enum单选"><a href="#enum单选" class="headerlink" title="enum单选"></a>enum单选</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="set多选"><a href="#set多选" class="headerlink" title="set多选"></a>set多选</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(<span class="string">&#x27;打球&#x27;</span>,<span class="string">&#x27;下棋&#x27;</span>,<span class="string">&#x27;音乐&#x27;</span>,<span class="string">&#x27;游泳&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">decimal</span>(M,D)</span><br></pre></td></tr></table></figure><ul><li>M是最大位数（精度），范围是1到65。可不指定，默认值是10。</li><li>D是小数点右边的位数（小数位）。范围是0到30，并且不能大于M，可不指定，默认值是0。</li></ul><h1 id="新增表create"><a href="#新增表create" class="headerlink" title="新增表create"></a>新增表create</h1><h2 id="创建表副本"><a href="#创建表副本" class="headerlink" title="创建表副本"></a>创建表副本</h2><blockquote><p>注意，创建的副本没有定义主键和自动增加属性，要手动添加</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders_archived <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders</span><br></pre></td></tr></table></figure><ul><li>利用where语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders_archived <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_data <span class="operator">&lt;</span><span class="string">&#x27;2019-01-01&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建自定义表"><a href="#创建自定义表" class="headerlink" title="创建自定义表"></a>创建自定义表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">&#x27;表名&#x27;</span>(</span><br><span class="line"><span class="string">&#x27;列名1&#x27;</span>    数据类型</span><br><span class="line"><span class="string">&#x27;列名2&#x27;</span>    数据类型</span><br><span class="line"><span class="string">&#x27;列名3&#x27;</span>    数据类型</span><br><span class="line"><span class="string">&#x27;列名4&#x27;</span>    数据类型</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="外键的设置"><a href="#外键的设置" class="headerlink" title="外键的设置"></a>外键的设置</h2><ul><li><strong>子表的外键必须是主表的主键</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_score(</span><br><span class="line">number <span class="type">int</span></span><br><span class="line">subject <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">score tinyint </span><br><span class="line"><span class="keyword">constraint</span> poreign key(number) <span class="keyword">references</span> student_info(number)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h1 id="删除表drop"><a href="#删除表drop" class="headerlink" title="删除表drop"></a>删除表drop</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表<span class="number">1</span>，表<span class="number">2</span>，表<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>删除不存在的表会报错，要判断一下是否存在<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表<span class="number">1</span>，表<span class="number">2</span>，表<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="增加记录insert"><a href="#增加记录insert" class="headerlink" title="增加记录insert"></a>增加记录insert</h1><h2 id="表设置"><a href="#表设置" class="headerlink" title="表设置"></a>表设置</h2><table><thead><tr><th>Datatype</th><th></th></tr></thead><tbody><tr><td>PK</td><td>主键</td></tr><tr><td>NN</td><td>非空</td></tr><tr><td>UQ</td><td>唯一</td></tr><tr><td>B</td><td>二进制</td></tr><tr><td>UN</td><td>非负数，比text更大</td></tr><tr><td>ZF</td><td>填充，如Datatype是int(4)，内容是1，显示0001</td></tr><tr><td>AI</td><td>自动增加</td></tr><tr><td>G</td><td>生成列，这一列由其他列计算而得</td></tr><tr><td>Default&#x2F;Expression</td><td>默认值</td></tr></tbody></table><h2 id="默认插入"><a href="#默认插入" class="headerlink" title="默认插入"></a>默认插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers</span><br><span class="line"><span class="keyword">values</span>(</span><br><span class="line"><span class="keyword">default</span>,</span><br><span class="line">  <span class="string">&#x27;first_name&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;last_name&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;birthday&#x27;</span>,</span><br><span class="line">  <span class="keyword">null</span>,</span><br><span class="line">  <span class="string">&#x27;address&#x27;</span></span><br><span class="line">  <span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;state&#x27;</span>,</span><br><span class="line">  <span class="keyword">default</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ulh2s"></a></p><h2 id="指定插入，多行插入"><a href="#指定插入，多行插入" class="headerlink" title="指定插入，多行插入"></a>指定插入，多行插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> shippers(shipper_id,name)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;id1&#x27;</span>,<span class="string">&#x27;name1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;id2&#x27;</span>,<span class="string">&#x27;name2&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;id3&#x27;</span>,<span class="string">&#x27;name3&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;id4&#x27;</span>,<span class="string">&#x27;name4&#x27;</span>),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="vfmzO"></a></p><h2 id="last-insert-id主子表连接"><a href="#last-insert-id主子表连接" class="headerlink" title="last_insert_id主子表连接"></a>last_insert_id主子表连接</h2><blockquote><p>会返回上一次插入操作后的最后一个id值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders(customer_id,order_date,status)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;2019-01-02&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> LAST_INSERT_ID()</span><br></pre></td></tr></table></figure><ul><li>在子表中插入关联的id值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders(customer_id,order_date,status)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;2019-01-02&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_items</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(last_insert_id,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2.95</span>),</span><br><span class="line">(last_insert_id,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2.95</span>)</span><br></pre></td></tr></table></figure><a name="SfaXj"></a></li></ul><h1 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h1><p><a name="KQsRW"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote><p>若不写where语句会删除所有记录</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> invoices</span><br><span class="line"><span class="keyword">where</span> invoice_id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a name="ehs6d"></a></p><h2 id="在where语句中使用select语句"><a href="#在where语句中使用select语句" class="headerlink" title="在where语句中使用select语句"></a>在where语句中使用select语句</h2><blockquote><p>和update一样</p></blockquote><blockquote><p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> invoices</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">payment_totle <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">payment_date <span class="operator">=</span> <span class="string">&#x27;2022-10-22&#x27;</span></span><br><span class="line"><span class="keyword">where</span> client_id <span class="keyword">IN</span>(</span><br><span class="line">  <span class="keyword">select</span> client_id</span><br><span class="line">  <span class="keyword">from</span> clients</span><br><span class="line">  <span class="keyword">where</span> state <span class="keyword">in</span>(<span class="string">&#x27;CA&#x27;</span>,<span class="string">&#x27;NY&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="修改update"><a href="#修改update" class="headerlink" title="修改update"></a>修改update</h1><p><a name="Ij2Ps"></a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> 键名<span class="number">1</span><span class="operator">=</span>键值<span class="number">1</span>，</span><br><span class="line">键名<span class="number">2</span><span class="operator">=</span>键值<span class="number">2</span></span><br><span class="line"><span class="keyword">where</span> 键名<span class="operator">=</span>键值 <span class="comment">-- 筛选条件，确定是哪一行的数据更新</span></span><br></pre></td></tr></table></figure><p><a name="MlwIA"></a></p><h2 id="在where语句中使用select语句-1"><a href="#在where语句中使用select语句-1" class="headerlink" title="在where语句中使用select语句"></a>在where语句中使用select语句</h2><blockquote><p>括号内的select会先执行，在另一个表中筛选出client_id作为筛选条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> invoices</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">payment_totle <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">payment_date <span class="operator">=</span> <span class="string">&#x27;2022-10-22&#x27;</span></span><br><span class="line"><span class="keyword">where</span> client_id <span class="keyword">IN</span>(</span><br><span class="line">  <span class="keyword">select</span> client_id</span><br><span class="line">  <span class="keyword">from</span> clients</span><br><span class="line">  <span class="keyword">where</span> state <span class="keyword">in</span>(<span class="string">&#x27;CA&#x27;</span>,<span class="string">&#x27;NY&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a name="V2ODC"></a></p><h1 id="查询select"><a href="#查询select" class="headerlink" title="查询select"></a>查询select</h1><p><a name="OgySP"></a></p><h2 id="语句结构"><a href="#语句结构" class="headerlink" title="语句结构"></a>语句结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;要选择的列&#x27;</span> </span><br><span class="line"><span class="keyword">from</span> <span class="string">&#x27;要选择的表&#x27;</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">&#x27;筛选条件&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="string">&#x27;排序条件&#x27;</span></span><br><span class="line">limit <span class="string">&#x27;要显示的记录数&#x27;</span></span><br></pre></td></tr></table></figure><p><a name="Qiz7R"></a></p><h2 id="选择列"><a href="#选择列" class="headerlink" title="选择列"></a>选择列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">last_name,<span class="comment">--不同的列用逗号隔开</span></span><br><span class="line">first_name,</span><br><span class="line">points,</span><br><span class="line">points<span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> <span class="string">&#x27;new point&#x27;</span> <span class="comment">--可以做数学运算；as用来命名新的列</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> state <span class="comment">--筛选出的值不会重复</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br></pre></td></tr></table></figure><p><a name="mKJSJ"></a></p><h2 id="选择记录"><a href="#选择记录" class="headerlink" title="选择记录"></a>选择记录</h2><p><a name="C8DPK"></a></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><blockquote><p>可比较数字和时间</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> brith_date <span class="operator">&gt;</span> <span class="string">&#x27;1990-01-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> point <span class="operator">&gt;</span><span class="number">300</span></span><br></pre></td></tr></table></figure><blockquote><p>若有多个值需要配对，可用in或not in</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;VA&#x27;</span>,<span class="string">&#x27;FL&#x27;</span>,<span class="string">&#x27;GA&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>若在一个范围内，可用between … and …<br>可以是数字也可以是时间</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> point <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">and</span> birth_date <span class="keyword">between</span> <span class="string">&#x27;1990-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2000-01-01&#x27;</span></span><br></pre></td></tr></table></figure><p><a name="HHvJw"></a></p><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul><li><p>操作符</p><table><thead><tr><th>like  ‘ ‘</th><th>等于引号里字符的记录</th></tr></thead><tbody><tr><td>%</td><td>任意字符</td></tr><tr><td>_</td><td>一个字符</td></tr></tbody></table></li><li><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">&#x27;%lon%&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%lon%&#x27;</span></span><br></pre></td></tr></table></figure><p><a name="QuG7X"></a></p></li></ul><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h3><ul><li>常见正则表达式<table><thead><tr><th>regexp ‘ ‘</th><th>包含引号里字符的记录</th></tr></thead><tbody><tr><td>^</td><td>以后面的字符开头的</td></tr><tr><td>$</td><td>以后面的字符结尾</td></tr><tr><td>&amp;#124;</td><td>逻辑或</td></tr><tr><td>[abc]</td><td>a,b,c中任意一个</td></tr><tr><td>[a-z]</td><td>a到z中选一个</td></tr></tbody></table></li></ul><p><a name="AWNUs"></a></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><ul><li>规定要返回的记录的数目<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line">LIMIT <span class="number">5</span><span class="comment">--最多返回五条记录</span></span><br></pre></td></tr></table></figure><a name="iDkug"></a></li></ul><h3 id="is-null-和-is-not-null"><a href="#is-null-和-is-not-null" class="headerlink" title="is null 和 is not null"></a>is null 和 is not null</h3><ul><li>可选出特定值空的记录，或非空的记录<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> phone <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><a name="HAqvR"></a></li></ul><h2 id="结合join"><a href="#结合join" class="headerlink" title="结合join"></a>结合join</h2><p><a name="O8Mie"></a></p><h3 id="结合多个表"><a href="#结合多个表" class="headerlink" title="结合多个表"></a>结合多个表</h3><blockquote><p>使用using关键字，可以代替两个相同列的名称的值相等</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">using</span>(id_p)</span><br><span class="line"><span class="comment">-- 这里的on一定要写，后面的是结合的条件</span></span><br></pre></td></tr></table></figure><p><a name="MfRzV"></a></p><h3 id="显示所有left-join"><a href="#显示所有left-join" class="headerlink" title="显示所有left join"></a>显示所有left join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Orders <span class="keyword">as</span> o</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">using</span>(id_p)</span><br><span class="line"><span class="comment">-- persons表中的所有列都会列出，即使匹配不到</span></span><br></pre></td></tr></table></figure><p><a name="Aqiv6"></a></p><h3 id="交叉结合nature-join"><a href="#交叉结合nature-join" class="headerlink" title="交叉结合nature join"></a>交叉结合nature join</h3><blockquote><p>即笛卡尔积，前表中的每一行都与后表的所有行配对</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> shippers sh</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> products p</span><br><span class="line"><span class="comment">-- 不需要写on</span></span><br></pre></td></tr></table></figure><p><a name="E1Mg6"></a></p><h2 id="合并结果集union"><a href="#合并结果集union" class="headerlink" title="合并结果集union"></a>合并结果集union</h2><blockquote><ol><li>每个SELECT 语句必须拥有相同数量的列。</li><li>每个列也必须拥有相似的数据类型。</li><li>每条 SELECT 语句中的列的顺序必须相同。</li></ol></blockquote><ul><li><p>同一个表不同列结合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_China</span><br><span class="line"><span class="keyword">UNION</span> <span class="comment">-- 把两个查询的结果纵向结合</span></span><br><span class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_USA</span><br></pre></td></tr></table></figure></li><li><p>不同的表之间结合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> first_name</span><br><span class="line"><span class="keyword">from</span> archived_order</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> shippers</span><br></pre></td></tr></table></figure></li></ul><h2 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h2><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库基本操作&quot;&gt;&lt;a href=&quot;#数据库基本操作&quot; class=&quot;headerlink&quot; title=&quot;数据库基本操作&quot;&gt;&lt;/a&gt;数据库基本操作&lt;/h1&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
  </entry>
  
</feed>
